"use strict";
(self.webpackChunkbot = self.webpackChunkbot || []).push([
    ["702"], {
        56803: function() {},
        71118: function(e, t, s) {
            s.r(t), s.d(t, {
                default: () => rR
            });
            var a, n, i = s("85893"),
                l = s("67294"),
                r = s("96877"),
                o = s("6753"),
                c = s("92198"),
                d = s("22273"),
                u = s("12838");
            let h = e => {
                let {
                    is_client_store_initialized: t,
                    landing_company_shortcode: s = " ",
                    currency: a = " ",
                    email: n = " ",
                    is_logged_in: i = " ",
                    loginid: r = " ",
                    residence: o = " ",
                    last_name: h = " ",
                    first_name: _ = " "
                } = e, m = new URLSearchParams(window.location.search), x = "reset_password" === u.fr.getQueryParameter("action"), p = m.get("code") && x, {
                    data: j
                } = (0, d.Z)(!0), {
                    cs_chat_livechat: v
                } = j;
                (0, l.useEffect)(() => {
                    if (t && v) {
                        var e;
                        null === (e = window.LiveChatWidget) || void 0 === e || e.init()
                    }
                }, [t, v]), (0, l.useEffect)(() => {
                    if (!p && t) {
                        var e;
                        null === (e = window.LiveChatWidget) || void 0 === e || e.on("ready", e => {
                            var t, l, d, u, m, x;
                            "minimized" === e.state.visibility && (null === (l = window.LiveChatWidget) || void 0 === l || l.call("hide"));
                            let {
                                utm_source: p,
                                utm_medium: j,
                                utm_campaign: v
                            } = JSON.parse(c.Z.get("utm_data") || "{}"), g = {
                                is_logged_in: String(i),
                                utm_source: p || " ",
                                utm_medium: j || " ",
                                utm_campaign: v || " ",
                                loginid: i ? r : " ",
                                landing_company_shortcode: i ? s : " ",
                                currency: i ? a : " ",
                                residence: i ? o : " ",
                                email: i ? n : " "
                            };
                            null === (t = window.LiveChatWidget) || void 0 === t || t.call("set_session_variables", g), i ? (null === (d = window.LiveChatWidget) || void 0 === d || d.call("set_customer_email", n), null === (u = window.LiveChatWidget) || void 0 === u || u.call("set_customer_name", `${_} ${h}`)) : (null === (m = window.LiveChatWidget) || void 0 === m || m.call("set_customer_email", " "), null === (x = window.LiveChatWidget) || void 0 === x || x.call("set_customer_name", " "))
                        })
                    }
                }, [n, p, r, i, s, t, a, _, h, o])
            };
            var _ = s("83543"),
                m = s("66175"),
                x = s("79907"),
                p = s("79649"),
                j = s("83274");
            let v = () => {
                let {
                    client: e
                } = (0, j.oR)(), {
                    account_settings: t,
                    landing_company_shortcode: s
                } = e, {
                    tnc_status: a
                } = t || {};
                return a && 0 === a[s]
            };
            var g = s("12977"),
                b = s("35275"),
                y = s("72461"),
                f = s("48059"),
                N = s("2502"),
                C = s("31784");
            let S = (0, r.Pi)(() => {
                let {
                    isAuthorized: e
                } = (0, p.T)(), {
                    client: t
                } = (0, j.oR)(), {
                    is_cr_account: s
                } = t, [a, n] = l.useState(!1), {
                    isDesktop: r
                } = (0, N.F)(), o = v();
                l.useEffect(() => {
                    o && n(!0)
                }, [o]);
                let c = async () => {
                    e && (n(!1), await x.DO.api.send({
                        tnc_approval: 1
                    }))
                };
                return (0, i.jsx)(C.Z, {
                    className: "tnc-status-update-modal-wrapper",
                    is_open: a,
                    has_close_icon: !1,
                    width: "44rem",
                    children: (0, i.jsxs)("div", {
                        className: "tnc-status-update-modal",
                        children: [(0, i.jsx)(g.x, {
                            size: r ? "sm" : "md",
                            bold: !0,
                            children: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "Updated T&C's"
                            })
                        }), (0, i.jsxs)("div", {
                            className: "tnc-status-update-modal__text-container",
                            children: [(0, i.jsx)(g.x, {
                                size: r ? "sm" : "md",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Please review our updated <0>terms and conditions</0>.",
                                    components: [(0, i.jsx)(b.r, {
                                        className: "tnc-link",
                                        size: r ? "sm" : "md",
                                        href: s ? "https://deriv.com/eu/terms-and-conditions#clients" : "https://deriv.com/terms-and-conditions#clients"
                                    }, 0)]
                                })
                            }), (0, i.jsx)(g.x, {
                                size: r ? "sm" : "md",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "By continuing you understand and accept the changes."
                                })
                            })]
                        }), (0, i.jsx)("div", {
                            className: "tnc-status-update-modal__button",
                            children: (0, i.jsx)(y.zx, {
                                onClick: c,
                                size: "md",
                                variant: "primary",
                                label: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Continue"
                                })
                            })
                        })]
                    })
                })
            });
            var T = s("33281"),
                k = s("20296"),
                w = s.n(k),
                E = s("76298");
            var I = ((a = {}).MOVE = "move", a.TOP = "top", a.RIGHT = "right", a.BOTTOM = "bottom", a.LEFT = "left", a.TOP_RIGHT = "top-right", a.BOTTOM_RIGHT = "bottom-right", a.BOTTOM_LEFT = "bottom-left", a.TOP_LEFT = "top-left", a.BODY_REF = "body", a);
            let A = e => {
                    let {
                        setZIndex: t
                    } = e, s = document.getElementsByClassName("draggable");
                    if (!s.length) return;
                    let a = Array.from(s).reduce((e, t) => Math.max(e, parseInt(window.getComputedStyle(t).zIndex) || 0), 0);
                    t(a + 3)
                },
                R = e => {
                    let {
                        prevWidth: t,
                        leftOffset: s,
                        boundaryRect: a,
                        initialSelfRight: n,
                        resize_direction: i,
                        newWidth: l,
                        minWidth: r,
                        clientX: o,
                        self: c
                    } = e, d = (null == a ? void 0 : a.left) ? ? 0, u = (null == a ? void 0 : a.width) ? ? 0, h = d + s + 5, _ = (null == c ? void 0 : c.left) ? ? 0, m = d + u - 7;
                    if (i.includes("left")) return l >= r && o > h ? l : o < h + 10 ? m - h - (m - n) - 10 : t;
                    if (i.includes("right")) {
                        if (l >= r && o < m) return l;
                        if (o > m) return m - _
                    }
                    return t
                },
                D = e => {
                    let {
                        prevHeight: t,
                        topOffset: s,
                        boundaryRect: a,
                        initialSelfBottom: n,
                        resize_direction: i,
                        newHeight: l,
                        minHeight: r,
                        clientY: o,
                        self: c
                    } = e, d = (null == a ? void 0 : a.top) ? ? 0, u = (null == a ? void 0 : a.height) ? ? 0, h = d + s + 5, _ = (null == c ? void 0 : c.top) ? ? 0, m = d + u - 7;
                    if (i.includes("top")) return l >= r && o > h ? l : o < h + 10 ? m - h - (m - n) - 10 : t;
                    if (i.includes("bottom")) {
                        if (l >= r && o < m) return l;
                        if (o > m) return m - _
                    }
                    return t
                },
                O = e => {
                    let {
                        children: t,
                        boundary: s,
                        initialValues: a = {
                            width: 400,
                            height: 400,
                            xAxis: 0,
                            yAxis: 0
                        },
                        minWidth: n = 100,
                        minHeight: r = 100,
                        enableResizing: o = !1,
                        enableDragging: c = !0,
                        header: d = "",
                        onClose: u
                    } = e, [h, _] = (0, l.useState)({
                        x: a.xAxis,
                        y: a.yAxis
                    }), [m, x] = (0, l.useState)({
                        width: a.width,
                        height: a.height
                    }), [p, j] = (0, l.useState)(100), v = (0, l.useRef)(!1), [g, b] = (0, l.useState)(!1), y = (0, l.useRef)(null), [f, N] = (0, l.useState)(document.querySelector(s ? ? I.BODY_REF));
                    (0, l.useEffect)(() => {
                        x({
                            width: a.width,
                            height: a.height
                        }), _({
                            x: a.xAxis,
                            y: a.yAxis
                        })
                    }, [a.height, a.width, a.xAxis, a.yAxis]), (0, l.useEffect)(() => {
                        N(document.querySelector(s ? ? I.BODY_REF)), A({
                            setZIndex: j
                        })
                    }, [s]);
                    let C = (e, t) => {
                        var s, i, l, d, u;
                        if (null == e || e.stopPropagation(), A({
                                setZIndex: j
                            }), !t) return;
                        v.current = t !== I.MOVE && o, b(t === I.MOVE && c);
                        let p = null == f ? void 0 : f.getBoundingClientRect(),
                            g = (null == f ? void 0 : f.offsetTop) ? ? 0,
                            N = (null == f ? void 0 : f.offsetLeft) ? ? 0,
                            C = (null == e ? void 0 : e.clientX) ? ? 0,
                            S = (null == e ? void 0 : e.clientY) ? ? 0,
                            T = (null == m ? void 0 : m.width) ? ? a.width,
                            k = (null == m ? void 0 : m.height) ? ? a.height,
                            w = (null == h ? void 0 : h.x) ? ? 0,
                            E = (null == h ? void 0 : h.y) ? ? 0,
                            O = (null === (i = y.current) || void 0 === i ? void 0 : null === (s = i.getBoundingClientRect()) || void 0 === s ? void 0 : s.right) ? ? m.width,
                            L = (null === (d = y.current) || void 0 === d ? void 0 : null === (l = d.getBoundingClientRect()) || void 0 === l ? void 0 : l.bottom) ? ? m.height,
                            M = {},
                            U = null === (u = y.current) || void 0 === u ? void 0 : u.querySelector("#draggable-content-body");
                        if (U) {
                            let {
                                style: e
                            } = U;
                            e && "none" !== e.pointerEvents && (M = { ...e
                            }, e.pointerEvents = "none")
                        }
                        let F = e => {
                                if (!e) return;
                                let {
                                    clientX: t,
                                    clientY: s
                                } = e, a = t - C, n = s - S;
                                try {
                                    v.current ? P(a, n, t, s) : Z(a, n)
                                } catch (e) {
                                    z()
                                }
                            },
                            P = (e, s, a, i) => {
                                var l;
                                let o = (null == h ? void 0 : h.x) ? ? 0,
                                    c = (null == h ? void 0 : h.y) ? ? 0,
                                    d = T,
                                    u = k;
                                t.includes(I.RIGHT) ? d += e : t.includes(I.LEFT) && (o = e + w, d -= e), t.includes(I.BOTTOM) ? u += s : t.includes(I.TOP) && (c = s + E, u -= s), _(e => {
                                    let t = Math.max(c, g + 5),
                                        s = Math.max(o, N + 5);
                                    return {
                                        x: d <= n ? e.x : s,
                                        y: u <= r ? e.y : t
                                    }
                                });
                                let m = null === (l = y.current) || void 0 === l ? void 0 : l.getBoundingClientRect();
                                x(e => ({
                                    width: R({
                                        prevWidth: e.width,
                                        leftOffset: N,
                                        boundaryRect: p,
                                        initialSelfRight: O,
                                        resize_direction: t,
                                        newWidth: d,
                                        minWidth: n,
                                        clientX: a,
                                        self: m
                                    }),
                                    height: D({
                                        prevHeight: e.height,
                                        topOffset: g,
                                        boundaryRect: p,
                                        initialSelfBottom: L,
                                        resize_direction: t,
                                        newHeight: u,
                                        minHeight: r,
                                        clientY: i,
                                        self: m
                                    })
                                }))
                            },
                            Z = (e, t) => {
                                let s = Math.min(Math.max(e + w, N + 5), N + ((null == p ? void 0 : p.width) ? ? 0) - m.width - 9);
                                _({
                                    x: s,
                                    y: Math.min(Math.max(t + E, g + 5), g + ((null == p ? void 0 : p.height) ? ? 0) - m.height - 9)
                                })
                            },
                            z = () => {
                                if (b(!1), v.current = !1, null == U ? void 0 : U.style) try {
                                    Object.assign(U.style, M)
                                } catch {
                                    U.style.pointerEvents = "unset"
                                }
                                f && (window.removeEventListener("mousemove", F), window.removeEventListener("mouseup", z))
                            };
                        f && (window.addEventListener("mousemove", F), window.addEventListener("mouseup", z))
                    };
                    return (0, i.jsx)("div", {
                        className: `draggable ${g?"dragging":""}`,
                        style: {
                            position: "absolute",
                            top: h.y,
                            left: h.x,
                            zIndex: p
                        },
                        onMouseDown: () => A({
                            setZIndex: j
                        }),
                        onKeyDown: () => A({
                            setZIndex: j
                        }),
                        "data-testid": "dt_react_draggable",
                        tabIndex: 0,
                        children: (0, i.jsxs)("div", {
                            ref: y,
                            className: "draggable-content",
                            "data-testid": "dt_react_draggable_content",
                            style: {
                                width: m.width,
                                height: m.height
                            },
                            children: [(0, i.jsxs)("div", {
                                id: "draggable-content__header",
                                "data-testid": "dt_react_draggable_handler",
                                className: "draggable-content__header",
                                onMouseDown: e => C(e, I.MOVE),
                                onKeyDown: e => "Enter" === e.key && C(null, I.MOVE),
                                tabIndex: 0,
                                children: [(0, i.jsx)("div", {
                                    className: "draggable-content__header__title",
                                    children: d
                                }), (0, i.jsx)("div", {
                                    className: "draggable-content__header__close",
                                    "data-testid": "dt_react_draggable-close-modal",
                                    onClick: u,
                                    children: (0, i.jsx)(E.Z, {
                                        height: "20px",
                                        width: "20px",
                                        fill: "var(--text-general)",
                                        className: "icon-general-fill-path"
                                    })
                                })]
                            }), (0, i.jsx)("span", {
                                className: "draggable-content__body",
                                id: "draggable-content-body",
                                children: t
                            }), o && (0, i.jsxs)(i.Fragment, {
                                children: [(0, i.jsx)("div", {
                                    className: "resizable-handle__top",
                                    "data-testid": "dt_resizable-handle__top",
                                    onKeyDown: e => "Enter" === e.key && C(null, I.MOVE),
                                    onMouseDown: e => C(e, I.TOP),
                                    tabIndex: 0
                                }), (0, i.jsx)("div", {
                                    className: "resizable-handle__right",
                                    "data-testid": "dt_resizable-handle__right",
                                    onKeyDown: e => "Enter" === e.key && C(null, I.MOVE),
                                    onMouseDown: e => C(e, I.RIGHT),
                                    tabIndex: 0
                                }), (0, i.jsx)("div", {
                                    className: "resizable-handle__bottom",
                                    "data-testid": "dt_resizable-handle__bottom",
                                    onKeyDown: e => "Enter" === e.key && C(null, I.MOVE),
                                    onMouseDown: e => C(e, I.BOTTOM),
                                    tabIndex: 0
                                }), (0, i.jsx)("div", {
                                    className: "resizable-handle__left",
                                    "data-testid": "dt_resizable-handle__left",
                                    onKeyDown: e => "Enter" === e.key && C(null, I.MOVE),
                                    onMouseDown: e => C(e, I.LEFT),
                                    tabIndex: 0
                                }), (0, i.jsx)("div", {
                                    className: "resizable-handle__top-right",
                                    "data-testid": "dt_resizable-handle__top-right",
                                    onKeyDown: e => "Enter" === e.key && C(null, I.MOVE),
                                    onMouseDown: e => C(e, I.TOP_RIGHT),
                                    tabIndex: 0
                                }), (0, i.jsx)("div", {
                                    className: "resizable-handle__bottom-right",
                                    "data-testid": "dt_resizable-handle__bottom-right",
                                    onKeyDown: e => "Enter" === e.key && C(null, I.MOVE),
                                    onMouseDown: e => C(e, I.BOTTOM_RIGHT),
                                    tabIndex: 0
                                }), (0, i.jsx)("div", {
                                    className: "resizable-handle__bottom-left",
                                    "data-testid": "dt_resizable-handle__bottom-left",
                                    onKeyDown: e => "Enter" === e.key && C(null, I.MOVE),
                                    onMouseDown: e => C(e, I.BOTTOM_LEFT),
                                    tabIndex: 0
                                }), (0, i.jsx)("div", {
                                    className: "resizable-handle__top-left",
                                    "data-testid": "dt_resizable-handle__top-left",
                                    onKeyDown: e => "Enter" === e.key && C(null, I.MOVE),
                                    onMouseDown: e => C(e, I.TOP_LEFT),
                                    tabIndex: 0
                                })]
                            })]
                        })
                    })
                },
                L = e => {
                    let {
                        boundary: t,
                        children: s,
                        onClose: a,
                        enableResizing: n = !1,
                        enableDragging: r = !0,
                        header: o = "",
                        minHeight: c = 100,
                        minWidth: d = 100,
                        modalHeight: u = 400,
                        modalWidth: h = 400
                    } = e, [_, m] = (0, l.useState)(!1), x = (window.innerWidth - h) / 2, p = (window.innerHeight - u) / 2, [j, v] = l.useState({
                        width: h,
                        height: u,
                        xAxis: x >= 0 ? x : 0,
                        yAxis: p >= 0 ? p : 0
                    }), g = w()(() => {
                        let e = window.innerWidth > h ? h : window.innerWidth - 50,
                            t = window.innerHeight > u ? u : window.innerHeight - 50,
                            s = (window.innerWidth - e) / 2,
                            a = (window.innerHeight - t) / 2;
                        v({
                            width: e,
                            height: t,
                            xAxis: s >= 0 ? s : 0,
                            yAxis: a >= 0 ? a : 0
                        }), m(!0)
                    }, 0);
                    return l.useEffect(() => (g(), window.addEventListener("resize", g), () => {
                        window.removeEventListener("resize", g)
                    }), [g]), (0, i.jsx)("div", {
                        id: "draggable_resize_container",
                        children: _ && (0, i.jsx)(O, {
                            boundary: t,
                            initialValues: j,
                            minWidth: d,
                            minHeight: c,
                            enableResizing: n,
                            enableDragging: r,
                            header: o,
                            onClose: a,
                            children: s
                        })
                    })
                };
            var M = s("63387"),
                U = s.n(M),
                F = s("24561"),
                P = s("33690"),
                Z = s("88199"),
                z = s("26855");
            let $ = {
                    FRXAUDCAD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexAudcadIcon
                    }))),
                    FRXAUDCHF: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexAudchfIcon
                    }))),
                    FRXAUDJPY: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexAudjpyIcon
                    }))),
                    FRXAUDNZD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexAudnzdIcon
                    }))),
                    FRXAUDPLN: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexAudsgdIcon
                    }))),
                    FRXAUDUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexAudusdIcon
                    }))),
                    FRXBROUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexCadchfIcon
                    }))),
                    FRXEURAUD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexEuraudIcon
                    }))),
                    FRXEURCAD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexEurcadIcon
                    }))),
                    FRXEURCHF: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexEurchfIcon
                    }))),
                    FRXEURGBP: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexEurgbpIcon
                    }))),
                    FRXEURJPY: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexEurjpyIcon
                    }))),
                    FRXEURNZD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexEurnzdIcon
                    }))),
                    FRXEURUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexEurusdIcon
                    }))),
                    FRXGBPAUD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexGbpaudIcon
                    }))),
                    FRXGBPCAD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexGbpcadIcon
                    }))),
                    FRXGBPCHF: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexGbpchfIcon
                    }))),
                    FRXGBPJPY: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexGbpjpyIcon
                    }))),
                    FRXGBPNOK: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexGbpnokIcon
                    }))),
                    FRXGBPUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexGbpusdIcon
                    }))),
                    FRXGBPNZD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexGbpnzdIcon
                    }))),
                    FRXNZDJPY: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexNzdjpnIcon
                    }))),
                    FRXNZDUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexNzdusdIcon
                    }))),
                    FRXUSDCAD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexUsdcadIcon
                    }))),
                    FRXUSDCHF: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexUsdchfIcon
                    }))),
                    FRXUSDJPY: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexUsdjpyIcon
                    }))),
                    FRXUSDNOK: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexUsdnokIcon
                    }))),
                    FRXUSDPLN: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexUsdplnIcon
                    }))),
                    FRXUSDSEK: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexUsdsekIcon
                    }))),
                    FRXUSDMXN: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketForexUsdmxnIcon
                    }))),
                    FRXXAGUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCommoditySilverusdIcon
                    }))),
                    FRXXAUUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCommodityGoldusdIcon
                    }))),
                    FRXXPDUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCommodityPalladiumusdIcon
                    }))),
                    FRXXPTUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCommodityPlatinumusdIcon
                    }))),
                    OTC_AEX: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketIndicesNetherlands25Icon
                    }))),
                    OTC_AS51: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketIndicesAustralia200Icon
                    }))),
                    OTC_DJI: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketIndicesWallStreet30Icon
                    }))),
                    OTC_FCHI: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketIndicesFrance40Icon
                    }))),
                    OTC_FTSE: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketIndicesUk100Icon
                    }))),
                    OTC_GDAXI: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketIndicesUk100Icon
                    }))),
                    OTC_HSI: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketIndicesHongKong50Icon
                    }))),
                    OTC_IBEX35: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketIndicesSpain35Icon
                    }))),
                    OTC_N225: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketIndicesJapan225Icon
                    }))),
                    OTC_NDX: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketIndicesUsTech100Icon
                    }))),
                    OTC_SPC: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketIndicesUs500Icon
                    }))),
                    OTC_SSMI: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketIndicesSwiss20Icon
                    }))),
                    OTC_SX5E: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketIndicesEuro50Icon
                    }))),
                    R_10: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility10Icon
                    }))),
                    R_25: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility25Icon
                    }))),
                    R_50: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility50Icon
                    }))),
                    R_75: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility75Icon
                    }))),
                    R_100: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility100Icon
                    }))),
                    BOOM300N: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedBoom300Icon
                    }))),
                    BOOM500: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedBoom500Icon
                    }))),
                    BOOM1000: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedBoom1000Icon
                    }))),
                    CRASH300N: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedCrash300Icon
                    }))),
                    CRASH500: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedCrash500Icon
                    }))),
                    CRASH1000: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedCrash1000Icon
                    }))),
                    RDBEAR: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedBearIcon
                    }))),
                    RDBULL: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedBullIcon
                    }))),
                    STPRNG: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedStepIndices100Icon
                    }))),
                    STPRNG2: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedStepIndices200Icon
                    }))),
                    STPRNG3: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedStepIndices300Icon
                    }))),
                    STPRNG4: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedStepIndices400Icon
                    }))),
                    STPRNG5: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedStepIndices500Icon
                    }))),
                    WLDAUD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedAudBasketIcon
                    }))),
                    WLDEUR: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedEurBasketIcon
                    }))),
                    WLDGBP: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedGbpBasketIcon
                    }))),
                    WLDXAU: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedGoldBasketIcon
                    }))),
                    WLDUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedUsdBasketIcon
                    }))),
                    "1HZ10V": (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility101sIcon
                    }))),
                    "1HZ25V": (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility251sIcon
                    }))),
                    "1HZ50V": (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility501sIcon
                    }))),
                    "1HZ75V": (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility751sIcon
                    }))),
                    "1HZ100V": (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility1001sIcon
                    }))),
                    "1HZ150V": (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility1501sIcon
                    }))),
                    "1HZ200V": (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility2001sIcon
                    }))),
                    "1HZ250V": (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility2501sIcon
                    }))),
                    "1HZ300V": (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedVolatility3001sIcon
                    }))),
                    JD10: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedJump10Icon
                    }))),
                    JD25: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedJump25Icon
                    }))),
                    JD50: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedJump50Icon
                    }))),
                    JD75: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedJump75Icon
                    }))),
                    JD100: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedJump100Icon
                    }))),
                    JD150: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedJump150Icon
                    }))),
                    JD200: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketDerivedJump200Icon
                    }))),
                    CRYBCHUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyBchusdIcon
                    }))),
                    CRYBNBUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyBnbusdIcon
                    }))),
                    CRYBTCLTC: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyBtcltcIcon
                    }))),
                    CRYIOTUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyIotusdIcon
                    }))),
                    CRYNEOUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyNeousdIcon
                    }))),
                    CRYOMGUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyOmgusdIcon
                    }))),
                    CRYTRXUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyTrxusdIcon
                    }))),
                    CRYBTCETH: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyBtcethIcon
                    }))),
                    CRYZECUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyZecusdIcon
                    }))),
                    CRYXMRUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyXmrusdIcon
                    }))),
                    CRYXMLUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyXlmusdIcon
                    }))),
                    CRYXRPUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyXrpusdIcon
                    }))),
                    CRYBTCUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyBtcusdIcon
                    }))),
                    CRYDSHUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyDshusdIcon
                    }))),
                    CRYETHUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyEthusdIcon
                    }))),
                    CRYEOSUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyEosusdIcon
                    }))),
                    CRYLTCUSD: (0, l.lazy)(() => s.e("753").then(s.bind(s, 48375)).then(e => ({
                        default: e.MarketCryptocurrencyLtcusdIcon
                    }))),
                    unknown: (0, l.lazy)(() => s.e("762").then(s.bind(s, 6800)).then(e => ({
                        default: e.IllustrativeMarketsIcon
                    })))
                },
                B = e => {
                    let {
                        type: t,
                        size: s
                    } = e, a = $[null == t ? void 0 : t.toUpperCase()] || $.unknown;
                    return (0, i.jsx)(l.Suspense, {
                        fallback: null,
                        children: (0, i.jsx)(a, {
                            iconSize: s ? ? "xs"
                        })
                    })
                };
            var G = s("30394");
            let V = {
                    ACCU: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesAccumulatorStayInIcon
                    }))),
                    DIGITDIFF: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesDigitsDiffersIcon
                    }))),
                    DIGITEVEN: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesDigitsEvenIcon
                    }))),
                    DIGITMATCH: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesDigitsMatchesIcon
                    }))),
                    DIGITODD: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesDigitsOddIcon
                    }))),
                    DIGITOVER: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesDigitsOverIcon
                    }))),
                    DIGITUNDER: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesDigitsUnderIcon
                    }))),
                    TICKHIGH: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesHighsAndLowsHighIcon
                    }))),
                    TICKLOW: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesHighsAndLowsLowIcon
                    }))),
                    NOTOUCH: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesHighsAndLowsNoTouchIcon
                    }))),
                    ONETOUCH: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesHighsAndLowsTouchIcon
                    }))),
                    EXPIRYRANGE: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesInsAndOutsEndsInIcon
                    }))),
                    EXPIRYMISS: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesInsAndOutsEndsOutIcon
                    }))),
                    UPORDOWN: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesInsAndOutsGoesOutIcon
                    }))),
                    RANGE: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesInsAndOutsStaysInIcon
                    }))),
                    MULTDOWN: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesMultipliersDownIcon
                    }))),
                    MULTUP: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesMultipliersUpIcon
                    }))),
                    CALLSPREAD: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesSpreadsCallIcon
                    }))),
                    PUTSPREAD: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesSpreadsPutIcon
                    }))),
                    ASIAND: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesUpsAndDownsAsianDownIcon
                    }))),
                    ASIANU: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesUpsAndDownsAsianUpIcon
                    }))),
                    PUT: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesUpsAndDownsFallIcon
                    }))),
                    PUTE: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesUpsAndDownsFallIcon
                    }))),
                    RUNLOW: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesUpsAndDownsOnlyDownsIcon
                    }))),
                    RUNHIGH: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesUpsAndDownsOnlyUpsIcon
                    }))),
                    RESETPUT: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesUpsAndDownsResetDownIcon
                    }))),
                    RESETCALL: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesUpsAndDownsResetUpIcon
                    }))),
                    CALL: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesUpsAndDownsRiseIcon
                    }))),
                    CALLE: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesUpsAndDownsRiseIcon
                    }))),
                    HIGHER: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesHighsAndLowsHigherIcon
                    }))),
                    LOWER: (0, l.lazy)(() => s.e("673").then(s.bind(s, 22588)).then(e => ({
                        default: e.TradeTypesHighsAndLowsLowerIcon
                    }))),
                    unknown: (0, l.lazy)(() => s.e("762").then(s.bind(s, 6800)).then(e => ({
                        default: e.IllustrativeMarketsIcon
                    })))
                },
                X = e => {
                    let {
                        type: t,
                        size: s,
                        className: a
                    } = e, n = V[null == t ? void 0 : t.toUpperCase()] || V.unknown;
                    return (0, i.jsx)(l.Suspense, {
                        fallback: null,
                        children: (0, i.jsx)(n, {
                            iconSize: s ? ? "xs",
                            className: a
                        })
                    })
                },
                H = "transaction-details-modal-desktop",
                q = e => {
                    let {
                        label: t,
                        extra_classes: s = [],
                        loader: a = !1
                    } = e;
                    return (0, i.jsx)("div", {
                        className: U()(`${H}__table-cell`, ...s),
                        children: a ? (0, i.jsx)(K, {}) : t
                    })
                },
                Y = e => {
                    let {
                        columns: t
                    } = e;
                    return (0, i.jsx)("div", {
                        className: U()(`${H}__table-row`, `${H}__table-header`),
                        children: null == t ? void 0 : t.map(e => (0, i.jsx)(q, {
                            extra_classes: [e.extra_class ? `${H}__table-cell${e.extra_class}` : ""],
                            label: e.label,
                            loader: !1
                        }, e.key))
                    })
                },
                W = e => {
                    let {
                        message: t,
                        icon: s
                    } = e;
                    return (0, i.jsx)("div", {
                        className: `${H}__icon-wrapper`,
                        children: (0, i.jsx)(G.Z, {
                            alignment: (0, z.rK)() ? "right" : "left",
                            message: t,
                            zIndex: "9999",
                            children: s
                        })
                    })
                },
                K = () => (0, i.jsx)(F.ZP, {
                    className: "transactions__loader-text",
                    "data-testid": "transaction_details_table_cell_loader",
                    height: 10,
                    width: 30,
                    speed: 3,
                    backgroundColor: "var(--general-section-2)",
                    foregroundColor: "var(--general-hover)",
                    children: (0, i.jsx)("rect", {
                        x: "0",
                        y: "0",
                        rx: "0",
                        ry: "0",
                        width: "60",
                        height: "12"
                    })
                });

            function J(e) {
                let {
                    result: t,
                    result_columns: s,
                    transactions: a,
                    transaction_columns: n,
                    account: l,
                    balance: r
                } = e;
                return (0, i.jsxs)("div", {
                    "data-testid": "transaction_details_tables",
                    className: "transaction-details-tables",
                    children: [(0, i.jsxs)("div", {
                        className: U()(`${H}__table-container`, `${H}__table-container__top-table`),
                        children: [(0, i.jsx)(Y, {
                            columns: n
                        }), null == a ? void 0 : a.map(e => {
                            let {
                                data: t,
                                type: s
                            } = e;
                            if (s === P.i.CONTRACT) {
                                var a, n;
                                return (0, i.jsxs)("div", {
                                    className: `${H}__table-row`,
                                    children: [(0, i.jsx)(q, {
                                        label: (null == t ? void 0 : t.date_start) && (0, m.fcq)(null == t ? void 0 : t.date_start, "YYYY-M-D HH:mm:ss [GMT]", "YYYY-MM-DD HH:mm:ss [GMT]"),
                                        extra_classes: [`${H}__table-cell--grow-big`]
                                    }), (0, i.jsx)(q, {
                                        label: null == t ? void 0 : null === (a = t.transaction_ids) || void 0 === a ? void 0 : a.buy,
                                        extra_classes: [`${H}__table-cell--grow-mid`]
                                    }), (0, i.jsx)(q, {
                                        label: (0, i.jsx)(W, {
                                            message: null == t ? void 0 : t.display_name,
                                            icon: (0, i.jsx)(B, {
                                                type: null == t ? void 0 : t.underlying,
                                                size: "sm"
                                            })
                                        })
                                    }), (0, i.jsx)(q, {
                                        label: (0, i.jsx)(W, {
                                            message: (0, Z.getContractTypeName)(t),
                                            icon: (0, i.jsx)(X, {
                                                type: null == t ? void 0 : t.contract_type,
                                                size: "sm"
                                            })
                                        })
                                    }), (0, i.jsx)(q, {
                                        label: null == t ? void 0 : t.entry_tick,
                                        loader: !(null == t ? void 0 : t.entry_tick)
                                    }), (0, i.jsx)(q, {
                                        label: null == t ? void 0 : t.exit_tick,
                                        loader: !t.exit_tick
                                    }), (0, i.jsx)(q, {
                                        label: Math.abs((null == t ? void 0 : t.buy_price) ? ? 0).toFixed(2)
                                    }), (0, i.jsx)(q, {
                                        label: (0, i.jsx)("div", {
                                            className: U()({
                                                [`${H}__profit--win`]: (null == t ? void 0 : t.profit) > 0,
                                                [`${H}__profit--loss`]: (null == t ? void 0 : t.profit) < 0
                                            }),
                                            children: Math.abs((null == t ? void 0 : t.profit) ? ? 0).toFixed(2)
                                        }),
                                        loader: !t.is_completed
                                    })]
                                }, null == t ? void 0 : null === (n = t.transaction_ids) || void 0 === n ? void 0 : n.buy)
                            }
                            return (0, i.jsx)("div", {
                                className: `${H}__table-row`,
                                children: (0, i.jsx)("div", {
                                    className: `${H}__divider`,
                                    children: (0, i.jsx)("div", {
                                        className: "transactions__divider-line"
                                    })
                                })
                            }, `transaction-row-divider-${t}`)
                        })]
                    }), (0, i.jsxs)("div", {
                        className: U()(`${H}__table-container`, `${H}__table-container__bottom-table`),
                        children: [(0, i.jsx)(Y, {
                            columns: s
                        }), (0, i.jsxs)("div", {
                            className: `${H}__table-row`,
                            children: [(0, i.jsx)(q, {
                                label: l,
                                extra_classes: [`${H}__table-cell--grow-mid`]
                            }), (0, i.jsx)(q, {
                                label: null == t ? void 0 : t.number_of_runs
                            }), (0, i.jsx)(q, {
                                label: Math.abs((null == t ? void 0 : t.total_stake) ? ? 0).toFixed(2)
                            }), (0, i.jsx)(q, {
                                label: Math.abs((null == t ? void 0 : t.total_payout) ? ? 0).toFixed(2)
                            }), (0, i.jsx)(q, {
                                label: null == t ? void 0 : t.won_contracts
                            }), (0, i.jsx)(q, {
                                label: null == t ? void 0 : t.lost_contracts,
                                extra_classes: [`${H}__loss`]
                            }), (0, i.jsx)(q, {
                                label: (0, i.jsx)("div", {
                                    className: U()((null == t ? void 0 : t.total_profit) && {
                                        [`${H}__profit--win`]: (null == t ? void 0 : t.total_profit) > 0,
                                        [`${H}__profit--loss`]: (null == t ? void 0 : t.total_profit) < 0
                                    }),
                                    "data-testid": "transaction_details_table_profit",
                                    children: Math.abs((null == t ? void 0 : t.total_profit) ? ? 0).toFixed(2)
                                })
                            }), (0, i.jsx)(q, {
                                label: r
                            })]
                        })]
                    })]
                })
            }
            let Q = () => [{
                    key: "timestamp",
                    label: (0, f.NC)("Timestamp"),
                    extra_class: "--grow-big"
                }, {
                    key: "reference",
                    label: (0, f.NC)("Reference"),
                    extra_class: "--grow-mid"
                }, {
                    key: "market",
                    label: (0, f.NC)("Market")
                }, {
                    key: "contract_type",
                    label: (0, f.NC)("Trade type")
                }, {
                    key: "entry_tick",
                    label: (0, f.NC)("Entry spot")
                }, {
                    key: "exit_tick",
                    label: (0, f.NC)("Exit spot")
                }, {
                    key: "buy_price",
                    label: (0, f.NC)("Buy price")
                }, {
                    key: "profit",
                    label: (0, f.NC)("Profit/Loss")
                }],
                ee = () => [{
                    key: "account",
                    label: (0, f.NC)("Account"),
                    extra_class: "--grow-mid"
                }, {
                    key: "no_of_runs",
                    label: (0, f.NC)("No. of runs")
                }, {
                    key: "total_stake",
                    label: (0, f.NC)("Total stake")
                }, {
                    key: "total_payout",
                    label: (0, f.NC)("Total payout")
                }, {
                    key: "win",
                    label: (0, f.NC)("Win")
                }, {
                    key: "loss",
                    label: (0, f.NC)("Loss")
                }, {
                    key: "total_profit",
                    label: (0, f.NC)("Total profit/loss")
                }, {
                    key: "balance",
                    label: (0, f.NC)("Balance")
                }],
                et = (0, r.Pi)(() => {
                    let {
                        client: e
                    } = (0, j.oR)(), {
                        loginid: t,
                        balance: s
                    } = e, {
                        transactions: a
                    } = (0, j.oR)(), {
                        toggleTransactionDetailsModal: n,
                        is_transaction_details_modal_open: r,
                        transactions: o
                    } = a, {
                        statistics: c
                    } = a;
                    return (0, i.jsx)(l.Fragment, {
                        children: r && (0, i.jsx)(L, {
                            boundary: ".main",
                            header: (0, f.NC)("Transactions detailed summary"),
                            onClose: () => n(!1),
                            modalWidth: 882,
                            modalHeight: 404,
                            minWidth: 882,
                            minHeight: 404,
                            enableResizing: !0,
                            children: (0, i.jsx)(J, {
                                transaction_columns: Q(),
                                transactions: o,
                                result_columns: ee(),
                                result: c,
                                account: t ? ? "",
                                balance: s ? ? 0
                            })
                        })
                    })
                });
            var es = s("45452"),
                ea = s("80177"),
                en = s("64010"),
                ei = s("44810"),
                el = s("75399"),
                er = s("43882");
            let eo = l.memo(e => {
                var t, s;
                let {
                    className: a,
                    column: n,
                    is_footer: l,
                    passthrough: r,
                    row: o
                } = e;
                if (!n) return null;
                let {
                    col_index: c,
                    title: d
                } = n, u = null == o ? void 0 : o[c], h = (0, m.MOe)(null == o ? void 0 : null === (t = o.contract_info) || void 0 === t ? void 0 : t.contract_type), _ = (0, m.Yeo)(null == o ? void 0 : null === (s = o.contract_info) || void 0 === s ? void 0 : s.contract_type);
                return (0, i.jsxs)("div", {
                    className: U()(a, n.col_index),
                    children: [!l && (0, i.jsx)("div", {
                        className: U()(`${n.col_index}__row-title`, "data-list__row-title"),
                        children: n.renderHeader ? n.renderHeader({
                            title: d,
                            is_vanilla: _
                        }) : d
                    }), (0, i.jsx)("div", {
                        className: "data-list__row-content",
                        children: n.renderCellContent ? n.renderCellContent({
                            cell_value: u,
                            is_footer: l,
                            passthrough: r,
                            row_obj: o,
                            is_vanilla: _,
                            is_turbos: h
                        }) : u
                    })]
                })
            });
            var ec = s("79655"),
                ed = s("89471");
            let eu = (e, t) => {
                    let s = l.useMemo(() => w()(e, t), []);
                    return l.useEffect(() => s.cancel, []), s
                },
                eh = l.memo(e => {
                    let {
                        action_desc: t,
                        destination_link: s,
                        row_gap: a,
                        row_key: n,
                        rowRenderer: r,
                        measure: o,
                        is_dynamic_height: c,
                        ...d
                    } = e, [u, h] = l.useState(!1), _ = (0, ed.tm)(), x = eu(() => h(!1), 5e3), p = () => {
                        t && (h(!u), x())
                    }, j = e => {
                        (0, m.K9$)(p, e)
                    };
                    return l.useEffect(() => {
                        _() && c && (null == o || o())
                    }, [u, c, o]), (0, i.jsx)("div", {
                        className: "data-list__row--wrapper",
                        style: {
                            paddingBottom: `${a||0}px`
                        },
                        children: s ? (0, i.jsx)(ec.OL, {
                            className: "data-list__item--wrapper",
                            id: `dt_reports_contract_${n}`,
                            to: {
                                pathname: s,
                                state: {
                                    from_table_row: !0
                                }
                            },
                            children: (0, i.jsx)("div", {
                                className: "data-list__item",
                                children: r({
                                    measure: o,
                                    ...d
                                })
                            })
                        }) : (0, i.jsx)("div", {
                            className: U()("data-list__item--wrapper", {
                                "data-list__item--dynamic-height-wrapper": c
                            }),
                            children: t ? (0, i.jsx)("div", {
                                className: "data-list__item",
                                onClick: j,
                                onKeyDown: j,
                                children: u ? (0, i.jsx)("div", {
                                    className: "data-list__desc--wrapper",
                                    children: t.component && (0, i.jsx)("div", {
                                        children: t.component
                                    })
                                }) : r({
                                    measure: o,
                                    ...d
                                })
                            }) : (0, i.jsx)("div", {
                                className: "data-list__item",
                                children: r({
                                    measure: o,
                                    ...d
                                })
                            })
                        })
                    })
                }),
                e_ = el.aV,
                em = el.qj,
                ex = el.Z8,
                ep = l.memo(e => {
                    let {
                        children: t,
                        className: s,
                        data_source: a,
                        footer: n,
                        getRowSize: r,
                        keyMapper: o,
                        onRowsRendered: c,
                        onScroll: d,
                        setListRef: u,
                        overscanRowCount: h,
                        ..._
                    } = e, [x, p] = l.useState(!0), [j, v] = l.useState(!1), [g, b] = l.useState(0), y = l.useRef(), f = l.useRef(null), N = l.useRef({}), C = l.useRef(null);
                    C.current = a;
                    let S = !r,
                        T = l.useCallback(() => {
                            a.forEach((e, t) => {
                                let s = (null == o ? void 0 : o(e)) || `${t}-0`;
                                N.current[s] = !0
                            })
                        }, [a, o]);
                    l.useEffect(() => {
                        S && (y.current = new el.t1({
                            fixedWidth: !0,
                            keyMapper: e => (null == C ? void 0 : C.current) && e < (null == C ? void 0 : C.current.length) && (null == o ? void 0 : o(C.current[e])) || e
                        })), T(), p(!1)
                    }, []), l.useEffect(() => {
                        if (S) {
                            var e, t;
                            null === (t = f.current) || void 0 === t || null === (e = t.recomputeGridSize) || void 0 === e || e.call(t, {
                                columnIndex: 0,
                                rowIndex: 0
                            })
                        }
                        T()
                    }, [a, S, T]);
                    let k = e => {
                            let {
                                style: t,
                                index: s,
                                key: n,
                                parent: l
                            } = e, {
                                getRowAction: r,
                                passthrough: c,
                                row_gap: d
                            } = _, u = a[s], {
                                action_type: h,
                                shortcode: x,
                                purchase_time: p,
                                transaction_time: v,
                                id: g
                            } = u;
                            if ((0, m.JIr)(h, x, p || v)) {
                                let e = !!(null == a ? void 0 : a.find(e => "sell" === e.action_type && e.id === g));
                                u = { ...u,
                                    is_sold: e
                                }
                            }
                            let b = r && r(u),
                                f = "string" == typeof b ? b : void 0,
                                C = "object" == typeof b ? b : void 0,
                                T = (null == o ? void 0 : o(u)) || n,
                                k = function() {
                                    let {
                                        measure: e
                                    } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                                    return (0, i.jsx)(eh, {
                                        action_desc: C,
                                        destination_link: f,
                                        is_new_row: !N.current[T],
                                        is_scrolling: j,
                                        measure: e,
                                        passthrough: c,
                                        row_gap: d,
                                        row_key: T,
                                        row: u,
                                        rowRenderer: _.rowRenderer,
                                        is_dynamic_height: S
                                    })
                                };
                            return S && y.current ? (0, i.jsx)(ex, {
                                cache: y.current,
                                columnIndex: 0,
                                rowIndex: s,
                                parent: l,
                                children: e => {
                                    let {
                                        measure: s
                                    } = e;
                                    return (0, i.jsx)("div", {
                                        style: t,
                                        children: k({
                                            measure: s
                                        })
                                    })
                                }
                            }, T) : (0, i.jsx)("div", {
                                style: t,
                                children: k()
                            }, T)
                        },
                        w = e => {
                            let t;
                            clearTimeout(t), !j && v(!0), t = setTimeout(() => {
                                !x && v(!1)
                            }, 200), b(e.target.scrollTop), "function" == typeof d && d(e)
                        },
                        E = e => {
                            f.current = e, null == u || u(e)
                        };
                    return x ? (0, i.jsx)("div", {}) : (0, i.jsxs)("div", {
                        "data-testid": "dt_data_list",
                        className: U()(s, "data-list", {
                            [`${s}__data-list`]: s
                        }),
                        children: [(0, i.jsxs)("div", {
                            className: "data-list__body-wrapper",
                            children: [(0, i.jsx)("div", {
                                className: U()("data-list__body", {
                                    [`${s}__data-list-body`]: s
                                }),
                                children: (0, i.jsx)(em, {
                                    children: e => {
                                        var t, n;
                                        let {
                                            width: l,
                                            height: o
                                        } = e;
                                        return (0, i.jsx)(ei.Z, {
                                            style: {
                                                height: o,
                                                width: l
                                            },
                                            children: (0, i.jsx)(er.Z, {
                                                onScroll: w,
                                                autohide: !0,
                                                is_bypassed: (0, m.tqC)(),
                                                children: (0, i.jsx)(e_, {
                                                    className: s,
                                                    deferredMeasurementCache: null == y ? void 0 : y.current,
                                                    height: o,
                                                    onRowsRendered: c,
                                                    overscanRowCount: h || 1,
                                                    ref: e => E(e),
                                                    rowCount: a.length,
                                                    rowHeight: S && (null == y ? void 0 : null === (t = y.current) || void 0 === t ? void 0 : t.rowHeight) ? null == y ? void 0 : null === (n = y.current) || void 0 === n ? void 0 : n.rowHeight : r || 0,
                                                    rowRenderer: k,
                                                    scrollingResetTimeInterval: 0,
                                                    width: l,
                                                    ...(0, m.nIE)() ? {
                                                        scrollTop: g,
                                                        autoHeight: !0
                                                    } : {
                                                        onScroll: e => w({
                                                            target: e
                                                        })
                                                    }
                                                })
                                            })
                                        })
                                    }
                                })
                            }), t]
                        }), n && (0, i.jsx)("div", {
                            className: U()("data-list__footer", {
                                [`${s}__data-list-footer`]: s
                            }),
                            children: (0, i.jsx)(l.Fragment, {
                                children: _.rowRenderer({
                                    row: n,
                                    is_footer: !0
                                })
                            })
                        })]
                    })
                });
            ep.displayName = "DataList", ep.Cell = eo;
            let ej = e => {
                let {
                    date: t,
                    time: s
                } = e;
                return (0, i.jsxs)(i.Fragment, {
                    children: [(0, i.jsx)("span", {
                        className: "journal__text-date",
                        children: t
                    }), " | ", (0, i.jsx)("span", {
                        className: "journal__text-time",
                        children: s
                    })]
                })
            };
            var ev = s("1051"),
                eg = s("75544");
            let eb = l.forwardRef((e, t) => {
                let {
                    className: s,
                    classNameLabel: a,
                    disabled: n = !1,
                    id: r,
                    label: o,
                    label_font_size: c = "xs",
                    label_lineHeight: d = "unset",
                    defaultChecked: u,
                    onChange: h,
                    value: _ = !1,
                    withTabIndex: m = 0,
                    greyDisabled: x = !1,
                    has_error: p = !1,
                    ...j
                } = e, [v, g] = l.useState(u || _);
                return l.useEffect(() => {
                    g(u || _)
                }, [_, u]), (0, i.jsxs)("label", {
                    htmlFor: r,
                    onClick: e => e.stopPropagation(),
                    className: U()("dc-checkbox", s, {
                        "dc-checkbox--disabled": n
                    }),
                    children: [(0, i.jsxs)("span", {
                        children: [(0, i.jsx)("input", {
                            className: "dc-checkbox__input",
                            type: "checkbox",
                            id: r,
                            ref: t,
                            disabled: n,
                            onChange: e => {
                                e.persist(), g(!v), null == h || h(e)
                            },
                            checked: v,
                            ...j
                        }), (0, i.jsx)("span", {
                            className: U()("dc-checkbox__box", {
                                "dc-checkbox__box--active": v,
                                "dc-checkbox__box--disabled": n,
                                "dc-checkbox--grey-disabled": n && x
                            }),
                            tabIndex: m,
                            onKeyDown: e => {
                                !n && ("Enter" === e.key || 32 === e.keyCode) && (null == h || h(e), g(!v))
                            },
                            children: !!v && (0, i.jsx)(eg.Z, {})
                        })]
                    }), (0, i.jsx)(es.Z, {
                        size: c,
                        lineHeight: d,
                        className: U()("dc-checkbox__label", a, {
                            "dc-checkbox__label--error": p
                        }),
                        children: o
                    })]
                })
            });
            eb.displayName = "Checkbox";
            let ey = e => {
                    let {
                        wrapper_ref: t,
                        checked_filters: s,
                        filters: a,
                        filterMessage: n,
                        className: l
                    } = e;
                    return (0, i.jsx)("div", {
                        ref: t,
                        className: l,
                        children: a.map(e => {
                            let t = Array.isArray(s) && s.includes(e.id);
                            return (0, i.jsx)(eb, {
                                checked: t,
                                label: e.label,
                                onChange: () => n(!t, e.id),
                                name: e.id,
                                defaultChecked: t
                            }, e.id)
                        })
                    })
                },
                ef = e => {
                    let {
                        toggle_ref: t,
                        checked_filters: s,
                        filters: a,
                        filterMessage: n,
                        is_filter_dialog_visible: r,
                        toggleFilterDialog: o
                    } = e, c = l.useRef(null);
                    return (0, ev.t)(c, o, e => {
                        var s;
                        return r && !(null === (s = t.current) || void 0 === s ? void 0 : s.contains(e.target))
                    }), (0, i.jsx)(ey, {
                        wrapper_ref: c,
                        checked_filters: s,
                        filters: a,
                        filterMessage: n,
                        className: "filter-dialog"
                    })
                },
                eN = e => {
                    let {
                        logType: t,
                        className: s,
                        extra: a
                    } = e;
                    return (0, i.jsx)("div", {
                        className: U()("journal__text", s),
                        children: (() => {
                            switch (t) {
                                case Z.LogTypes.LOAD_BLOCK:
                                    return (0, f.NC)("Blocks are loaded successfully");
                                case Z.LogTypes.NOT_OFFERED:
                                    return (0, f.NC)("Resale of this contract is not offered.");
                                case Z.LogTypes.PURCHASE:
                                    {
                                        let {
                                            longcode: e,
                                            transaction_id: t
                                        } = a;
                                        return (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "<0>Bought</0>: {{longcode}} (ID: {{transaction_id}})",
                                            values: {
                                                longcode: e,
                                                transaction_id: t
                                            },
                                            components: [(0, i.jsx)(es.Z, {
                                                size: "xxs",
                                                styles: {
                                                    color: "var(--status-info)"
                                                }
                                            }, 0)],
                                            options: {
                                                interpolation: {
                                                    escapeValue: !1
                                                }
                                            }
                                        })
                                    }
                                case Z.LogTypes.SELL:
                                    {
                                        let {
                                            sold_for: e
                                        } = a;
                                        return (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "<0>Sold for</0>: {{sold_for}}",
                                            values: {
                                                sold_for: e
                                            },
                                            components: [(0, i.jsx)(es.Z, {
                                                size: "xxs",
                                                styles: {
                                                    color: "var(--status-warning)"
                                                }
                                            }, 0)]
                                        })
                                    }
                                case Z.LogTypes.PROFIT:
                                    {
                                        let {
                                            currency: e,
                                            profit: t
                                        } = a;
                                        return (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Profit amount: <0>{{profit}}</0>",
                                            values: {
                                                profit: `${(0,m.lby)(e,t,!0)} ${(0,m.O$T)(e)}`
                                            },
                                            components: [(0, i.jsx)(es.Z, {
                                                size: "xxs",
                                                styles: {
                                                    color: "var(--status-success)"
                                                }
                                            }, 0)]
                                        })
                                    }
                                case Z.LogTypes.LOST:
                                    {
                                        let {
                                            currency: e,
                                            profit: t
                                        } = a;
                                        return (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Loss amount: <0>{{profit}}</0>",
                                            values: {
                                                profit: `${(0,m.lby)(e,t,!0)} ${(0,m.O$T)(e)}`
                                            },
                                            components: [(0, i.jsx)(es.Z, {
                                                size: "xxs",
                                                styles: {
                                                    color: "var(--status-danger)"
                                                }
                                            }, 0)]
                                        })
                                    }
                                case Z.LogTypes.WELCOME_BACK:
                                    {
                                        let {
                                            current_currency: e
                                        } = a;
                                        if (e) return (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Welcome back! Your messages have been restored. You are using your {{current_currency}} account.",
                                            values: {
                                                current_currency: e
                                            }
                                        });
                                        return (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Welcome back! Your messages have been restored."
                                        })
                                    }
                                case Z.LogTypes.WELCOME:
                                    {
                                        let {
                                            current_currency: e
                                        } = a;
                                        if (e) return (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "You are using your {{current_currency}} account.",
                                            values: {
                                                current_currency: e
                                            }
                                        });
                                        break
                                    }
                                default:
                                    return null
                            }
                        })()
                    })
                },
                eC = (e, t, s, a, n) => {
                    switch (t) {
                        case Z.MessageTypes.SUCCESS:
                            return (0, i.jsx)(eN, {
                                logType: e,
                                extra: a,
                                className: s
                            });
                        case Z.MessageTypes.NOTIFY:
                            if ("function" == typeof e) return (0, i.jsx)("div", {
                                className: U()("journal__text", s),
                                children: e(n)
                            });
                            return (0, i.jsx)("div", {
                                className: U()("journal__text", s),
                                children: e
                            });
                        case Z.MessageTypes.ERROR:
                            return (0, i.jsx)("div", {
                                className: "journal__text--error journal__text",
                                children: e
                            });
                        default:
                            return null
                    }
                },
                eS = e => {
                    let {
                        row: t,
                        measure: s
                    } = e, {
                        date: a,
                        time: n,
                        message: l,
                        message_type: r,
                        className: o,
                        extra: c
                    } = t, d = ej({
                        date: a,
                        time: n
                    });
                    return (0, i.jsx)("div", {
                        children: (0, i.jsx)("div", {
                            className: "list__animation",
                            "data-testid": "mock-css-transition",
                            children: (0, i.jsxs)("div", {
                                className: "journal__item",
                                dir: (0, z.rK)() ? "rtl" : "ltr",
                                children: [(0, i.jsx)("div", {
                                    className: "journal__item-content",
                                    children: eC(l, r, o, c, s)
                                }), (0, i.jsx)("div", {
                                    className: "journal__text-datetime",
                                    children: d
                                })]
                            })
                        })
                    })
                },
                eT = e => {
                    let {
                        is_mobile: t
                    } = e;
                    return (0, i.jsxs)(F.ZP, {
                        className: U()("journal__loader", {
                            "journal__loader--mobile": t
                        }),
                        speed: 3,
                        width: 350,
                        height: 92,
                        backgroundColor: "var(--general-section-1)",
                        foregroundColor: "var(--general-hover)",
                        children: [(0, i.jsx)("rect", {
                            x: "15",
                            y: "15",
                            rx: "5",
                            ry: "5",
                            width: "320",
                            height: "40"
                        }), (0, i.jsx)("rect", {
                            x: "15",
                            y: "60",
                            rx: "5",
                            ry: "5",
                            width: "180",
                            height: "7"
                        })]
                    })
                };
            var ek = s("81262");
            let ew = () => {
                    let e = new Date,
                        t = e.getUTCFullYear(),
                        s = (e.getUTCMonth() + 1).toString().padStart(2, "0"),
                        a = e.getUTCDate().toString().padStart(2, "0"),
                        n = e.getUTCHours().toString().padStart(2, "0"),
                        i = e.getUTCMinutes().toString().padStart(2, "0"),
                        l = e.getUTCSeconds().toString().padStart(2, "0");
                    return `${t}-${s}-${a} ${n}${i}${l}`
                },
                eE = (e, t) => {
                    let {
                        profit: s,
                        sold_for: a,
                        longcode: n,
                        transaction_id: i,
                        current_currency: l
                    } = t;
                    switch (e) {
                        case Z.LogTypes.LOAD_BLOCK:
                            return (0, f.NC)("Blocks are loaded successfully");
                        case Z.LogTypes.NOT_OFFERED:
                            return (0, f.NC)("Resale of this contract is not offered.");
                        case Z.LogTypes.PURCHASE:
                            return (0, f.NC)("Bought: {{longcode}} (ID: {{transaction_id}})", {
                                longcode: n,
                                transaction_id: i
                            });
                        case Z.LogTypes.SELL:
                            return (0, f.NC)("Sold for: {{sold_for}}", {
                                sold_for: a
                            });
                        case Z.LogTypes.PROFIT:
                            return (0, f.NC)("Profit amount: {{profit}}", {
                                profit: s
                            });
                        case Z.LogTypes.LOST:
                            return (0, f.NC)("Loss amount: {{profit}}", {
                                profit: s
                            });
                        case Z.LogTypes.WELCOME_BACK:
                            if (l) return (0, f.NC)("Welcome back! Your messages have been restored. You are using your {{current_currency}} account.", {
                                current_currency: l
                            });
                            return (0, f.NC)("Welcome back! Your messages have been restored.");
                        case Z.LogTypes.WELCOME:
                            if (l) return (0, f.NC)("You are using your {{current_currency}} account.", {
                                current_currency: l
                            });
                            break;
                        default:
                            return ""
                    }
                },
                eI = (e, t) => {
                    let s = encodeURI(`data:text/csv;charset=utf-8, ${t}`),
                        a = document.createElement("a");
                    a.setAttribute("href", s), a.setAttribute("download", `${e} ${ew()}.csv`), document.body.appendChild(a), a.click();
                    let n = a.parentNode;
                    n && a && (null == n ? void 0 : n.contains(a)) && (null == n || n.removeChild(a))
                };
            var eA = s("8015");
            let eR = (0, r.Pi)(e => {
                let t, s, {
                        tab: a
                    } = e,
                    {
                        run_panel: n,
                        transactions: l,
                        journal: r
                    } = (0, j.oR)(),
                    {
                        is_clear_stat_disabled: o,
                        is_running: c
                    } = n,
                    {
                        filtered_messages: d
                    } = r,
                    {
                        transactions: u
                    } = l,
                    h = !1;
                return "transactions" === a ? (t = () => {
                    let e = [
                        [(0, f.NC)("Market"), (0, f.NC)("Reference ID (buy)"), (0, f.NC)("Reference ID (sell)"), (0, f.NC)("Barrier"), (0, f.NC)("Start Time"), (0, f.NC)("Entry Spot"), (0, f.NC)("Entry Spot Time"), (0, f.NC)("Exit Spot"), (0, f.NC)("Exit Spot Time"), (0, f.NC)("Buy Price"), (0, f.NC)("Profit/Loss")]
                    ];
                    u.forEach(t => {
                        let {
                            data: s
                        } = t;
                        "string" != typeof s && e.push([s.display_name, s.transaction_ids.buy, s.transaction_ids.sell, s.barrier, s.date_start, s.entry_tick, s.entry_tick_time, s.exit_tick, s.exit_tick_time, s.buy_price, s.profit])
                    });
                    let t = e.map(e => e.join(",")).join("\n");
                    eI((0, f.NC)("Transactions"), t)
                }, h = !u.length || c, s = (0, f.NC)("Download your transaction history."), !u.length && (s = (0, f.NC)("No transaction or activity yet."))) : "journal" === a && (t = () => {
                    let e = [
                        [(0, f.NC)("Date"), (0, f.NC)("Time"), (0, f.NC)("Message")]
                    ];
                    d.map(t => {
                        let s;
                        s = "success" !== t.message_type ? JSON.stringify(t.message) : eE(t.message.toString(), t.extra);
                        let a = [t.date, t.time, null == s ? void 0 : s.replace("&#x2F;", "/")];
                        e.push(a)
                    });
                    let t = e.map(e => e.join(",")).join("\n");
                    eI((0, f.NC)("Journal"), t)
                }, s = (0, f.NC)("Download your journal."), (h = o) && (s = (0, f.NC)("No transaction or activity yet."))), c && (s = (0, f.NC)("Download is unavailable while your bot is running.")), (0, i.jsx)(G.Z, {
                    className: "run-panel__info",
                    classNameBubble: "run-panel__info--bubble",
                    alignment: "bottom",
                    message: s,
                    zIndex: "5",
                    children: (0, i.jsx)(eA.Z, {
                        id: "download-button",
                        disabled: h,
                        className: "download__button",
                        onClick: t,
                        secondary: !0,
                        children: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Download"
                        })
                    })
                })
            });
            var eD = s("29643");
            let eO = e => {
                    let {
                        checked_filters: t,
                        filters: s,
                        filterMessage: a,
                        is_filter_dialog_visible: n,
                        toggleFilterDialog: r
                    } = e, o = l.useRef(null);
                    return (0, i.jsxs)(i.Fragment, {
                        children: [(0, i.jsxs)("div", {
                            className: "journal-tools__container",
                            children: [(0, i.jsx)(eR, {
                                tab: "journal"
                            }), (0, i.jsxs)("div", {
                                ref: o,
                                className: "journal-tools__container-filter",
                                onClick: r,
                                children: [(0, i.jsx)(es.Z, {
                                    size: "xs",
                                    className: "journal-tools__container-filter--label",
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "Filters"
                                    })
                                }), (0, i.jsx)(eD.Z, {
                                    height: "16px",
                                    width: "16px",
                                    fill: "var(--text-general)"
                                })]
                            })]
                        }), (0, i.jsx)(ek.Z, { in: n,
                            classNames: {
                                enter: "filter-dialog--enter",
                                enterDone: "filter-dialog--enter-done",
                                exit: "filter-dialog--exit"
                            },
                            timeout: 150,
                            unmountOnExit: !0,
                            children: (0, i.jsx)(ef, {
                                toggle_ref: o,
                                checked_filters: t,
                                filters: s,
                                filterMessage: a,
                                is_filter_dialog_visible: n,
                                toggleFilterDialog: r
                            })
                        })]
                    })
                },
                eL = (0, r.Pi)(() => {
                    let {
                        journal: e,
                        run_panel: t
                    } = (0, j.oR)(), {
                        checked_filters: s,
                        filterMessage: a,
                        filters: n,
                        filtered_messages: l,
                        is_filter_dialog_visible: r,
                        toggleFilterDialog: o,
                        unfiltered_messages: c
                    } = e, {
                        is_stop_button_visible: d,
                        contract_stage: u
                    } = t, h = Array.isArray(l) && l.length, _ = Array.isArray(c) && c.length, {
                        isDesktop: m
                    } = (0, N.F)();
                    return (0, i.jsxs)("div", {
                        className: U()("journal run-panel-tab__content--no-stat", {
                            "run-panel-tab__content": m
                        }),
                        "data-testid": "dt_mock_journal",
                        children: [(0, i.jsx)(eO, {
                            checked_filters: s,
                            filters: n,
                            filterMessage: a,
                            is_filter_dialog_visible: r,
                            toggleFilterDialog: o
                        }), (0, i.jsx)("div", {
                            className: "journal__item-list",
                            children: h ? (0, i.jsx)(ep, {
                                className: "journal",
                                data_source: l,
                                rowRenderer: e => (0, i.jsx)(eS, { ...e
                                }),
                                keyMapper: e => e.unique_id
                            }) : (0, i.jsx)(i.Fragment, {
                                children: u >= ea.K.STARTING && Object.keys(s).length && !_ && d ? (0, i.jsx)(eT, {
                                    is_mobile: !m
                                }) : (0, i.jsxs)("div", {
                                    className: "journal-empty",
                                    children: [(0, i.jsx)(en.Z, {
                                        height: "64px",
                                        width: "64px",
                                        className: "journal-empty__icon icon-general-fill-g-path",
                                        color: "secondary",
                                        fill: "var(--text-general)"
                                    }), (0, i.jsx)(es.Z, {
                                        as: "h4",
                                        size: "xs",
                                        weight: "bold",
                                        align: "center",
                                        color: "less-prominent",
                                        lineHeight: "s",
                                        className: "journal-empty__header",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "There are no messages to display"
                                        })
                                    }), (0, i.jsxs)("div", {
                                        className: "journal-empty__message",
                                        children: [(0, i.jsx)(es.Z, {
                                            size: "xxs",
                                            color: "less-prominent",
                                            children: (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "Here are the possible reasons:"
                                            })
                                        }), (0, i.jsxs)("ul", {
                                            className: "journal-empty__list",
                                            children: [(0, i.jsx)("li", {
                                                children: (0, i.jsx)(es.Z, {
                                                    size: "xxs",
                                                    color: "less-prominent",
                                                    children: (0, i.jsx)(f.Xx, {
                                                        i18n_default_text: "The bot is not running"
                                                    })
                                                })
                                            }), (0, i.jsx)("li", {
                                                children: (0, i.jsx)(es.Z, {
                                                    size: "xxs",
                                                    color: "less-prominent",
                                                    children: (0, i.jsx)(f.Xx, {
                                                        i18n_default_text: "The stats are cleared"
                                                    })
                                                })
                                            }), (0, i.jsx)("li", {
                                                children: (0, i.jsx)(es.Z, {
                                                    size: "xxs",
                                                    color: "less-prominent",
                                                    children: (0, i.jsx)(f.Xx, {
                                                        i18n_default_text: "All messages are filtered out"
                                                    })
                                                })
                                            })]
                                        })]
                                    })]
                                })
                            })
                        })]
                    })
                });
            var eM = s("29747"),
                eU = s("45697"),
                eF = s.n(eU),
                eP = s("97050"),
                eZ = s("75097");
            let ez = {
                    initial: {
                        y: -50,
                        opacity: 0
                    },
                    animate: {
                        y: 0,
                        opacity: 1
                    },
                    transition: {
                        duration: 250,
                        delay: .3
                    }
                },
                e$ = {
                    initial: {
                        y: 50,
                        opacity: 0
                    },
                    animate: {
                        y: 0,
                        opacity: 1
                    },
                    transition: {
                        duration: .25,
                        delay: .3
                    }
                },
                eB = {
                    initial: {
                        opacity: 0
                    },
                    animate: {
                        opacity: 1
                    },
                    transition: {
                        duration: .3
                    }
                },
                eG = e => {
                    let {
                        children: t,
                        className: s,
                        is_visible: a,
                        keyname: n,
                        type: l
                    } = e;
                    return "top" === l ? (0, i.jsx)(i.Fragment, {
                        children: a && (0, i.jsx)(eZ.E.div, {
                            animate: ez.animate,
                            initial: ez.initial,
                            transition: ez.transition,
                            className: s,
                            children: t
                        }, n)
                    }) : "bottom" === l ? (0, i.jsx)(i.Fragment, {
                        children: a && (0, i.jsx)(eZ.E.div, {
                            animate: e$.animate,
                            initial: e$.initial,
                            transition: e$.transition,
                            className: s,
                            children: t
                        }, n)
                    }) : (0, i.jsx)(i.Fragment, {
                        children: a && (0, i.jsx)(eZ.E.div, {
                            animate: eB.animate,
                            initial: eB.initial,
                            transition: eB.transition,
                            className: s,
                            children: t
                        }, n)
                    })
                },
                eV = s("45927").Z,
                eX = e => {
                    let {
                        children: t,
                        has_footer: s
                    } = e;
                    return s ? (0, i.jsx)("div", {
                        className: "dc-input__wrapper",
                        children: t
                    }) : (0, i.jsx)(l.Fragment, {
                        children: t
                    })
                },
                eH = l.forwardRef((e, t) => {
                    let {
                        bottom_label: s,
                        className: a,
                        classNameError: n,
                        classNameHint: r,
                        classNameWarn: o,
                        disabled: c = !1,
                        error: d,
                        field_className: u,
                        has_character_counter: h,
                        hint: _,
                        initial_character_count: m,
                        input_id: x,
                        is_relative_hint: p,
                        label_className: j,
                        label: v,
                        leading_icon: g,
                        max_characters: b,
                        trailing_icon: y,
                        warn: f,
                        data_testId: N,
                        maxLength: C,
                        placeholder: S,
                        ...T
                    } = e, [k, w] = l.useState(0);
                    l.useEffect(() => {
                        (m || 0 === m) && w(m)
                    }, [m]);
                    let E = !!h || !!_ && !!p,
                        I = v ? "" : S;
                    return (0, i.jsxs)(eX, {
                        has_footer: E,
                        children: [(0, i.jsxs)("div", {
                            className: U()("dc-input", a, {
                                "dc-input--disabled": c,
                                "dc-input--error": d,
                                "dc-input--hint": _,
                                "dc-input--bottom-label-active": s
                            }),
                            children: [(0, i.jsxs)("div", {
                                className: U()("dc-input__container", {
                                    "dc-input__container--disabled": c,
                                    "dc-input__container--error": d
                                }),
                                children: [g && l.cloneElement(g, {
                                    className: U()("dc-input__leading-icon", g.props.className)
                                }), "textarea" === T.type ? (0, i.jsx)("textarea", {
                                    ref: t,
                                    "data-testid": N,
                                    ...T,
                                    className: U()("dc-input__field dc-input__textarea", {
                                        "dc-input__field--placeholder-visible": !v && S
                                    }),
                                    onChange: e => {
                                        var t;
                                        let s = e.target.value;
                                        b && s.length >= b && (s = s.slice(0, b)), w(s.length), e.target.value = s, null === (t = T.onChange) || void 0 === t || t.call(T, e)
                                    },
                                    disabled: c,
                                    id: x,
                                    maxLength: C,
                                    placeholder: I
                                }) : (0, i.jsx)("input", {
                                    ref: t,
                                    "data-testid": N,
                                    ...T,
                                    className: U()("dc-input__field", u, {
                                        "dc-input__field--placeholder-visible": !v && S
                                    }),
                                    onFocus: T.onFocus,
                                    onBlur: T.onBlur,
                                    onChange: T.onChange,
                                    onKeyDown: T.onKeyDown,
                                    onMouseDown: T.onMouseDown,
                                    onMouseUp: T.onMouseUp,
                                    onPaste: T.onPaste,
                                    disabled: c,
                                    "data-lpignore": "password" !== T.type || void 0,
                                    id: x,
                                    "aria-label": v,
                                    maxLength: C,
                                    placeholder: I
                                }), y && l.cloneElement(y, {
                                    className: U()("dc-input__trailing-icon", y.props.className)
                                }), v && (0, i.jsx)("label", {
                                    className: U()("dc-input__label", j),
                                    htmlFor: T.id,
                                    children: v
                                })]
                            }), (0, i.jsx)("div", {
                                children: !E && (0, i.jsxs)(l.Fragment, {
                                    children: [d && (0, i.jsx)(eV, {
                                        className: n,
                                        message: d,
                                        type: "error"
                                    }), f && (0, i.jsx)(eV, {
                                        className: o,
                                        message: f,
                                        type: "warn"
                                    }), !d && _ && !p && (0, i.jsx)("div", {
                                        className: "dc-input__hint",
                                        children: (0, i.jsx)(es.Z, {
                                            as: "p",
                                            color: "less-prominent",
                                            size: "xs",
                                            className: r,
                                            children: _
                                        })
                                    })]
                                })
                            })]
                        }), E && (0, i.jsxs)("div", {
                            className: "dc-input__footer",
                            children: [d && (0, i.jsx)(eV, {
                                className: n,
                                message: d,
                                type: "error"
                            }), f && (0, i.jsx)(eV, {
                                className: o,
                                message: f,
                                type: "warn"
                            }), !d && _ && (0, i.jsx)("div", {
                                className: "dc-input__hint dc-input__hint--relative",
                                children: (0, i.jsx)(es.Z, {
                                    color: "less-prominent",
                                    "line-height": "m",
                                    size: "xs",
                                    children: _
                                })
                            }), h && (0, i.jsx)("div", {
                                className: "dc-input__counter",
                                children: (0, i.jsxs)(es.Z, {
                                    color: "less-prominent",
                                    "line-height": "m",
                                    size: "xs",
                                    children: [k, b ? `/${b}` : ""]
                                })
                            })]
                        }), s && !d && (0, i.jsx)("div", {
                            className: "dc-input__bottom-label",
                            children: (0, i.jsx)(es.Z, {
                                size: "xs",
                                color: "less-prominent",
                                children: s
                            })
                        })]
                    })
                });
            eH.displayName = "Input";
            var eq = s("66163"),
                eY = s("73935"),
                eW = s("14117");
            let eK = e => {
                    let {
                        children: t,
                        header: s,
                        id: a,
                        is_from_app: n = !1,
                        is_open: r,
                        onClickClose: o,
                        portal_id: c,
                        header_classname: d,
                        has_return_icon: u,
                        onReturn: h
                    } = e, _ = l.useRef(null), m = (0, i.jsxs)("div", {
                        ref: _,
                        id: a,
                        className: U()("dc-page-overlay", {
                            "dc-page-overlay-portal": !!c
                        }),
                        children: [s && (0, i.jsx)("div", {
                            className: U()("dc-page-overlay__header", {
                                "dc-page-app__header ": n
                            }),
                            children: (0, i.jsxs)("div", {
                                className: "dc-page-overlay__header-wrapper",
                                children: [(0, i.jsxs)("div", {
                                    className: U()("dc-page-overlay__header-title", d),
                                    children: [u && (0, i.jsx)(eW.Z, {
                                        onClick: h,
                                        className: "dc-modal-header__icon"
                                    }), s]
                                }), !n && (0, i.jsx)("div", {
                                    "data-testid": "dt_page_overlay_header_close",
                                    className: "dc-page-overlay__header-close",
                                    onClick: o || window.history.back,
                                    children: (0, i.jsx)(E.Z, {
                                        height: "20px",
                                        width: "20px"
                                    })
                                })]
                            })
                        }), (0, i.jsx)("div", {
                            className: "dc-page-overlay__content",
                            children: t
                        })]
                    });
                    return c ? eY.createPortal((0, i.jsx)(ek.Z, {
                        appear: !0,
                        in: r,
                        timeout: 250,
                        classNames: {
                            appear: "dc-page-overlay--enter",
                            enter: "dc-page-overlay--enter",
                            enterDone: "dc-page-overlay--enter-done",
                            exit: "dc-page-overlay--exit"
                        },
                        unmountOnExit: !0,
                        children: m
                    }), document.getElementById(c)) : (0, i.jsx)(l.Fragment, {
                        children: m
                    })
                },
                eJ = e => {
                    let [t, s] = l.useState(""), {
                        is_onscreen_keyboard_active: a,
                        is_logged_in: n,
                        initial_values: r,
                        api_max_losses: o,
                        onRunButtonClick: c,
                        resetSelfExclusion: d,
                        updateSelfExclusion: u,
                        setRunLimit: h,
                        is_mobile: _
                    } = e;
                    l.useEffect(() => {
                        !n && d()
                    });
                    let m = async e => {
                        if (e.form_max_losses !== o) {
                            let t = await u({
                                max_losses: e.form_max_losses
                            });
                            if (null == t ? void 0 : t.error) {
                                s((0, f.NC)(t.error.message));
                                return
                            }
                        }
                        h(e.run_limit), c()
                    };
                    return (0, i.jsx)("div", {
                        className: "db-self-exclusion",
                        children: (0, i.jsxs)("div", {
                            className: "db-self-exclusion__content",
                            children: [(0, i.jsx)("div", {
                                className: "db-self-exclusion__info",
                                children: (0, f.NC)("Enter limits to stop your bot from trading when any of these conditions are met.")
                            }), (0, i.jsx)(eM.J9, {
                                initialValues: r,
                                validate: e => {
                                    let t = {},
                                        a = /^\d+(\.\d+)?$/,
                                        n = /^\d+$/,
                                        i = (0, f.NC)("This field is required."),
                                        l = (0, f.NC)("Should be a valid number"),
                                        r = (0, f.NC)("Reached maximum number of digits"),
                                        c = (0, f.NC)("Reached maximum number of decimals"),
                                        d = (0, f.NC)("Please enter a number between 0 and {{api_max_losses}}.", {
                                            api_max_losses: o
                                        });
                                    return ["run_limit", "form_max_losses"].forEach(s => {
                                        !e[s] && (t[s] = i)
                                    }), ["run_limit", "form_max_losses"].forEach(s => {
                                        e[s] && (a.test(e[s]) ? +e[s] > 0x9184e729fff && (t[s] = r) : t[s] = l)
                                    }), ["run_limit"].forEach(s => {
                                        e[s] && !n.test(e[s]) && (t[s] = l)
                                    }), ["form_max_losses"].forEach(s => {
                                        let a = e[s].toString().split(".")[1];
                                        (a && a.length || 0) > 2 && (t[s] = c)
                                    }), ["form_max_losses"].forEach(a => {
                                        0 !== o && o !== e[a] && o < e[a] ? t[a] = d : s("")
                                    }), t
                                },
                                onSubmit: m,
                                children: e => {
                                    let {
                                        values: s,
                                        touched: n,
                                        errors: l,
                                        isValid: r,
                                        handleChange: o
                                    } = e;
                                    return (0, i.jsxs)(eM.l0, {
                                        children: [(0, i.jsx)("div", {
                                            className: "db-self-exclusion__form-group",
                                            children: (0, i.jsx)(eM.gN, {
                                                name: "form_max_losses",
                                                children: e => {
                                                    let {
                                                        field: a
                                                    } = e;
                                                    return (0, i.jsx)(eH, { ...a,
                                                        className: "db-self-exclusion__input",
                                                        type: "text",
                                                        label: (0, f.NC)("Daily loss limit"),
                                                        value: s.form_max_losses,
                                                        onChange: o,
                                                        error: t || n[a.name] && l[a.name],
                                                        hint: (0, f.NC)("Limits your potential losses for the day across all Deriv platforms.")
                                                    })
                                                }
                                            })
                                        }), (0, i.jsx)("div", {
                                            className: "db-self-exclusion__form-group",
                                            children: (0, i.jsx)(eM.gN, {
                                                name: "run_limit",
                                                children: e => {
                                                    let {
                                                        field: t
                                                    } = e;
                                                    return (0, i.jsx)(eH, { ...t,
                                                        className: "db-self-exclusion__input",
                                                        type: "text",
                                                        label: (0, f.NC)("Maximum consecutive trades"),
                                                        value: s.run_limit,
                                                        onChange: o,
                                                        error: n[t.name] && l.run_limit,
                                                        hint: (0, f.NC)("Maximum number of trades your bot will execute for this run.")
                                                    })
                                                }
                                            })
                                        }), (0, i.jsx)("div", {
                                            className: U()("db-self-exclusion__footer", {
                                                "db-self-exclusion__footer--relative": _ && a
                                            }),
                                            children: (0, i.jsxs)("div", {
                                                className: "db-self-exclusion__footer-btn-group",
                                                children: [(0, i.jsx)(eA.Z, {
                                                    large: !0,
                                                    text: (0, f.NC)("Cancel"),
                                                    onClick: d,
                                                    secondary: !0,
                                                    type: "button"
                                                }), (0, i.jsx)(eA.Z, {
                                                    type: "submit",
                                                    large: !0,
                                                    text: (0, f.NC)("Apply and run"),
                                                    is_disabled: !r || !s.run_limit || !s.form_max_losses || "" !== t,
                                                    primary: !0
                                                })]
                                            })
                                        })]
                                    })
                                }
                            })]
                        })
                    })
                },
                eQ = (0, r.Pi)(e => {
                    let {
                        onRunButtonClick: t
                    } = e, {
                        self_exclusion: s
                    } = (0, j.oR)(), {
                        ui: a,
                        client: n
                    } = (0, j.oR)(), {
                        is_restricted: l,
                        resetSelfExclusion: r,
                        initial_values: o,
                        api_max_losses: c,
                        run_limit: d,
                        setRunLimit: u
                    } = s, {
                        is_onscreen_keyboard_active: h
                    } = a, {
                        is_logged_in: _,
                        updateSelfExclusion: m,
                        virtual_account_loginid: x
                    } = n, {
                        isDesktop: p
                    } = (0, N.F)(), v = {
                        is_onscreen_keyboard_active: h,
                        is_logged_in: _,
                        initial_values: o,
                        api_max_losses: c,
                        onRunButtonClick: t,
                        resetSelfExclusion: r,
                        updateSelfExclusion: m,
                        setRunLimit: u,
                        virtual_account_loginid: x,
                        run_limit: d,
                        isDesktop: p
                    };
                    return (0, i.jsx)(i.Fragment, {
                        children: p ? (0, i.jsx)(C.Z, {
                            is_open: l,
                            has_close_icon: !0,
                            width: "440px",
                            height: "374px",
                            toggleModal: r,
                            className: "db-self-exclusion__modal",
                            title: (0, f.NC)("Limits"),
                            children: (0, i.jsx)(eJ, { ...v
                            })
                        }) : (0, i.jsx)(eG, {
                            is_visible: l,
                            className: "limits__wrapper",
                            keyname: "limitis__wrapper",
                            children: (0, i.jsx)(eK, {
                                header: (0, f.NC)("Limits"),
                                onClickClose: r,
                                children: (0, i.jsx)(eq.Z, {
                                    children: (0, i.jsx)(eP.Z, {
                                        className: "limits__wrapper--is-mobile",
                                        children: (0, i.jsx)(eJ, { ...v
                                        })
                                    })
                                })
                            })
                        })
                    })
                });
            eQ.propTypes = {
                onRunButtonClick: eF().func
            };
            var e0 = s("65342"),
                e1 = s("51729");
            let e5 = e => {
                let {
                    anchor: t = "left",
                    children: s,
                    className: a,
                    contentClassName: n,
                    footer: r,
                    header: o,
                    width: c = 250,
                    zIndex: d = 4,
                    ...u
                } = e, [h, _] = l.useState(u.is_open), {
                    isDesktop: m
                } = (0, N.F)();
                return l.useEffect(() => {
                    _(u.is_open)
                }, [u.is_open]), (0, i.jsxs)("div", {
                    "data-testid": "drawer",
                    className: U()("dc-drawer", a, {
                        [`dc-drawer--${t}`]: m,
                        "dc-drawer--open": h
                    }),
                    style: {
                        zIndex: d,
                        transform: h && m ? "left" === t ? `translateX(calc(${c}px - 16px))` : `translateX(calc(-${c}px + 16px))` : void 0
                    },
                    children: [(0, i.jsx)("div", {
                        className: U()("dc-drawer__toggle", {
                            "dc-drawer__toggle--open": h
                        }),
                        onClick: () => {
                            _(!h), u.toggleDrawer && u.toggleDrawer(!h)
                        },
                        children: m ? (0, i.jsx)(e0.Z, {
                            className: U()("dc-drawer__toggle-icon", {
                                [`dc-drawer__toggle-icon--${t}`]: m
                            })
                        }) : (0, i.jsx)(e1.Z, {
                            iconSize: "sm",
                            className: "dc-drawer__toggle-icon"
                        })
                    }), (0, i.jsxs)("div", {
                        className: U()("dc-drawer__container", {
                            [`dc-drawer__container--${t}`]: m
                        }),
                        children: [o && (0, i.jsx)("div", {
                            className: "dc-drawer__header",
                            children: o
                        }), (0, i.jsx)("div", {
                            className: U()("dc-drawer__content", n),
                            children: s
                        }), r && (0, i.jsx)("div", {
                            className: "dc-drawer__footer",
                            children: r
                        })]
                    })]
                })
            };
            var e2 = s("87537"),
                e8 = s("62873"),
                e3 = s("88817"),
                e4 = s("50220");
            let e7 = (0, f.NC)("Your bot is running and waiting for a signal to buy a contract."),
                e6 = () => (0, i.jsxs)("div", {
                    className: "db-contract-card-running-loader",
                    children: [(0, i.jsx)(e4.Z, {
                        id: "rotate-icon",
                        fontSize: 16,
                        fill: "var(--text-general)"
                    }), (0, i.jsx)(es.Z, {
                        color: "less-prominent",
                        lineHeight: "xs",
                        size: "xs",
                        weight: "bold",
                        align: "center",
                        className: "dc-contract-card-message",
                        children: e7
                    })]
                }),
                e9 = e => {
                    let {
                        speed: t = 3,
                        contract_stage: s
                    } = e;
                    return (0, i.jsx)(i.Fragment, {
                        children: s === ea.K.RUNNING ? (0, i.jsx)(e6, {}) : (0, i.jsxs)(F.ZP, {
                            height: 153,
                            width: 334,
                            speed: t,
                            backgroundColor: "var(--general-section-2)",
                            foregroundColor: "var(--general-hover)",
                            "data-testid": "contract-card-loader",
                            children: [(0, i.jsx)("rect", {
                                x: "12",
                                y: "15",
                                rx: "0",
                                ry: "0",
                                width: "41",
                                height: "25"
                            }), (0, i.jsx)("rect", {
                                x: "61",
                                y: "24",
                                rx: "0",
                                ry: "0",
                                width: "91",
                                height: "8"
                            }), (0, i.jsx)("rect", {
                                x: "180",
                                y: "15",
                                rx: "0",
                                ry: "0",
                                width: "41",
                                height: "25"
                            }), (0, i.jsx)("rect", {
                                x: "229",
                                y: "24",
                                rx: "0",
                                ry: "0",
                                width: "91",
                                height: "8"
                            }), (0, i.jsx)("rect", {
                                x: "12",
                                y: "48",
                                rx: "0",
                                ry: "0",
                                width: "60",
                                height: "8"
                            }), (0, i.jsx)("rect", {
                                x: "12",
                                y: "64",
                                rx: "0",
                                ry: "0",
                                width: "308",
                                height: "8"
                            }), (0, i.jsx)("rect", {
                                x: "12",
                                y: "80",
                                rx: "0",
                                ry: "0",
                                width: "308",
                                height: "1"
                            }), (0, i.jsx)("rect", {
                                x: "12",
                                y: "89",
                                rx: "0",
                                ry: "0",
                                width: "140",
                                height: "8"
                            }), (0, i.jsx)("rect", {
                                x: "12",
                                y: "105",
                                rx: "0",
                                ry: "0",
                                width: "60",
                                height: "8"
                            }), (0, i.jsx)("rect", {
                                x: "12",
                                y: "121",
                                rx: "0",
                                ry: "0",
                                width: "140",
                                height: "8"
                            }), (0, i.jsx)("rect", {
                                x: "12",
                                y: "137",
                                rx: "0",
                                ry: "0",
                                width: "60",
                                height: "8"
                            }), (0, i.jsx)("rect", {
                                x: "180",
                                y: "89",
                                rx: "0",
                                ry: "0",
                                width: "140",
                                height: "8"
                            }), (0, i.jsx)("rect", {
                                x: "180",
                                y: "105",
                                rx: "0",
                                ry: "0",
                                width: "60",
                                height: "8"
                            }), (0, i.jsx)("rect", {
                                x: "180",
                                y: "121",
                                rx: "0",
                                ry: "0",
                                width: "140",
                                height: "8"
                            }), (0, i.jsx)("rect", {
                                x: "180",
                                y: "137",
                                rx: "0",
                                ry: "0",
                                width: "60",
                                height: "8"
                            })]
                        })
                    })
                };
            var te = s("91761"),
                tt = s("48766"),
                ts = s("54802"),
                ta = s("23406");
            let tn = l.memo(e => {
                    let {
                        className: t,
                        value: s
                    } = e, [a, n] = l.useState(!1), [r, o] = l.useState({
                        icon: "",
                        previous_icon: ""
                    }), {
                        icon: c,
                        previous_icon: d,
                        previous_value: u
                    } = r, h = !isNaN(Number(r.value)) && !isNaN(Number(s)), _ = l.useRef();
                    return l.useEffect(() => (n(!0), o(e => {
                        let t = Number(e.value) < Number(s) ? (0, i.jsx)(ts.Z, {
                            fill: "var(--text-profit-success)",
                            iconSize: "sm"
                        }) : (0, i.jsx)("div", {
                            style: {
                                position: "relative",
                                top: "-0.7rem"
                            },
                            children: (0, i.jsx)(ta.Z, {
                                fill: "var(--text-loss-danger)",
                                iconSize: "sm"
                            })
                        });
                        return {
                            icon: h ? t : "",
                            previous_icon: e.icon,
                            previous_value: e.value,
                            value: s
                        }
                    }), clearTimeout(_.current), _.current = setTimeout(() => {
                        n(!1)
                    }, 3e3), () => clearTimeout(_.current)), [s]), (0, i.jsx)("div", {
                        className: t,
                        "data-testid": "dt_arrow_indicator",
                        children: h && a ? (0, i.jsx)("div", {
                            children: u === Number(s) ? d : c
                        }) : null
                    })
                }),
                ti = e => {
                    let {
                        currency: t
                    } = e;
                    return (0, i.jsx)(es.Z, {
                        className: "dc-currency-badge",
                        color: "colored-background",
                        lineHeight: "unset",
                        size: "xxxs",
                        weight: "bold",
                        children: (0, m.O$T)(t)
                    })
                };
            var tl = s("73728");
            let tr = e => {
                    let {
                        className: t,
                        danger_limit: s = 20,
                        is_clockwise: a = !1,
                        progress: n = 0,
                        radius: l = 22,
                        stroke: r = 3,
                        warning_limit: o = 50
                    } = e, c = l - r / 2, d = 2 * c * Math.PI;
                    return (0, i.jsxs)("div", {
                        className: U()("dc-circular-progress", t),
                        children: [(0, i.jsx)("div", {
                            className: "dc-circular-progress__icon",
                            children: (0, i.jsx)(tl.Z, {
                                iconSize: "xs"
                            })
                        }), (0, i.jsx)("svg", {
                            height: 2 * l,
                            width: 2 * l,
                            children: (0, i.jsx)("circle", {
                                className: U()("dc-circular-progress__bar", {
                                    "dc-circular-progress--clockwise": a,
                                    "dc-circular-progress__bar--warning": n <= o && n > s,
                                    "dc-circular-progress__bar--danger": n <= s
                                }),
                                cx: l,
                                cy: l,
                                fill: "transparent",
                                r: c,
                                strokeDasharray: `${d} ${d}`,
                                strokeWidth: r,
                                style: {
                                    strokeDashoffset: d - n / 100 * d
                                }
                            })
                        })]
                    })
                },
                to = e => {
                    let {
                        end_time: t,
                        format: s,
                        getCardLabels: a,
                        start_time: n
                    } = e;
                    if (!t || n.unix() > +t) return (0, i.jsx)(l.Fragment, {
                        children: ""
                    });
                    let {
                        days: r,
                        timestamp: o
                    } = (0, m.LUK)((0, m.QRc)(n.unix(), t), s), c = o;
                    r > 0 && (c = `${r} ${r>1?a().DAYS:a().DAY} ${o}`);
                    let d = /^00:00$/.test(c);
                    return (0, i.jsx)(l.Fragment, {
                        children: !d && (0, i.jsx)("div", {
                            className: "dc-remaining-time",
                            children: c
                        })
                    })
                },
                tc = e => {
                    let {
                        is_on: t
                    } = e;
                    return (0, i.jsx)("div", {
                        className: U()("dc-tick-progress__tick", {
                            "dc-tick-progress__tick--on": t
                        })
                    })
                },
                td = e => {
                    let {
                        className: t,
                        rows: s = 2,
                        columns: a = 5,
                        size: n = 10,
                        value: l = 0
                    } = e;
                    return (0, i.jsx)("div", {
                        className: U()("dc-tick-progress", t),
                        style: {
                            gridTemplateRows: `repeat(${s}, 1fr)`,
                            gridTemplateColumns: `repeat(${a}, 1fr)`
                        },
                        children: Array(n).fill(null).map((e, t) => (0, i.jsx)(tc, {
                            is_on: t < Number(l)
                        }, t))
                    })
                },
                tu = e => {
                    let {
                        current_tick: t,
                        getCardLabels: s,
                        ticks_count: a
                    } = e;
                    return (0, i.jsxs)("div", {
                        className: "dc-progress-slider__ticks",
                        children: [(0, i.jsxs)(es.Z, {
                            styles: {
                                lineHeight: "18px"
                            },
                            size: "xxs",
                            className: "dc-progress-slider__ticks-caption",
                            children: [s().TICK, " ", t]
                        }), (0, i.jsx)(td, {
                            columns: 5,
                            rows: a > 5 ? 2 : 1,
                            size: a,
                            value: t
                        })]
                    })
                },
                th = e => {
                    let {
                        className: t,
                        current_tick: s,
                        getCardLabels: a,
                        is_loading: n,
                        start_time: r,
                        expiry_time: o,
                        server_time: c,
                        ticks_count: d
                    } = e, u = (0, m.dq6)(c, Number(r), Number(o));
                    return (0, i.jsx)("div", {
                        className: U()("dc-progress-slider-mobile", t),
                        children: d ? (0, i.jsx)(tu, {
                            current_tick: s,
                            getCardLabels: a,
                            ticks_count: d
                        }) : (0, i.jsxs)(l.Fragment, {
                            children: [(0, i.jsx)(es.Z, {
                                size: "xxs",
                                children: (0, i.jsx)(to, {
                                    end_time: o,
                                    getCardLabels: a,
                                    start_time: c
                                })
                            }), n || u < 1 ? (0, i.jsx)("div", {
                                className: "dc-progress-slider-mobile__infinite-loader",
                                children: (0, i.jsx)("div", {
                                    className: "dc-progress-slider-mobile__infinite-loader--indeterminate"
                                })
                            }) : (0, i.jsx)(tr, {
                                className: "dc-progress-slider-mobile__timer",
                                danger_limit: 20,
                                progress: u,
                                warning_limit: 50
                            })]
                        })
                    })
                };
            var t_ = s("96672");
            let tm = e => {
                    let {
                        getCardLabels: t,
                        is_contract_won: s
                    } = e;
                    return (0, i.jsxs)("span", {
                        className: U()("dc-result__caption", {
                            "dc-result__caption--won": s,
                            "dc-result__caption--lost": !s
                        }),
                        children: [(0, i.jsx)("div", {
                            className: "dc-result__icon",
                            children: (0, i.jsx)(t_.Z, {
                                iconSize: "sm",
                                fill: s ? "var(--text-profit-success)" : "var(--text-loss-danger)"
                            })
                        }), t().CLOSED]
                    })
                },
                tx = e => {
                    let {
                        className: t,
                        children: s,
                        header: a,
                        is_crypto: n,
                        is_loss: l,
                        is_won: r
                    } = e;
                    return (0, i.jsxs)("div", {
                        className: U()("dc-contract-card-item", t),
                        children: [(0, i.jsx)("div", {
                            className: "dc-contract-card-item__header",
                            children: a
                        }), (0, i.jsx)("div", {
                            className: U()("dc-contract-card-item__body", {
                                "dc-contract-card-item__body--crypto": n,
                                "dc-contract-card-item__body--loss": l,
                                "dc-contract-card-item__body--profit": r
                            }),
                            children: s
                        })]
                    })
                };
            var tp = s("54996"),
                tj = s("94145");
            let tv = l.forwardRef((e, t) => {
                let {
                    children: s,
                    is_visible: a,
                    left: n,
                    toggleDialog: l,
                    toggle_ref: r,
                    top: o
                } = e;
                (0, ev.t)(t, l, e => {
                    var t;
                    return a && !(null == r ? void 0 : null === (t = r.current) || void 0 === t ? void 0 : t.contains(e.target))
                });
                let c = (0, i.jsx)(ek.Z, { in: a,
                        classNames: {
                            enter: "dc-contract-card-dialog--enter",
                            enterDone: "dc-contract-card-dialog--enter-done",
                            exit: "dc-contract-card-dialog--exit"
                        },
                        timeout: 150,
                        unmountOnExit: !0,
                        children: (0, i.jsx)("div", {
                            ref: t,
                            className: "dc-contract-card-dialog",
                            style: {
                                top: o,
                                left: `calc(${n}px + 32px)`
                            },
                            children: s
                        })
                    }),
                    d = document.getElementById("deriv_app");
                return eY.createPortal(c, d || document.body)
            });
            tv.displayName = "ContractCardDialog";
            var tg = s("11527"),
                tb = s("86278"),
                ty = s("89606"),
                tf = s("14244");
            let tN = e => {
                    let {
                        alignment: t,
                        children: s,
                        className: a,
                        classNameIcon: n,
                        has_error: r,
                        icon: o,
                        message: c
                    } = e, [d, u] = (0, tb.X)(), h = U()(n, o);
                    return (0, i.jsxs)("span", {
                        className: U()(a, "dc-tooltip", {
                            "dc-tooltip--error": r
                        }),
                        "data-tooltip": c || void 0,
                        "data-tooltip-pos": t,
                        children: ["info" === o && (0, i.jsxs)(l.Fragment, {
                            children: [(0, i.jsx)(tf.Z, {
                                className: h,
                                ref: d
                            }), (0, i.jsx)(tf.Z, {
                                className: U()(`${n}-balloon-icon`, "dc-tooltip__balloon-icon", {
                                    "dc-tooltip__balloon-icon--show": u
                                })
                            })]
                        }), "question" === o && (0, i.jsx)(ty.J, {
                            icon: "IcUnknown",
                            className: h
                        }), "dot" === o && (0, i.jsx)(ty.J, {
                            icon: "IcCircle",
                            className: h,
                            size: 4
                        }), s]
                    })
                },
                tC = e => {
                    let {
                        decrementValue: t,
                        id: s,
                        incrementValue: a,
                        max_is_disabled: n,
                        min_is_disabled: r,
                        is_incrementable_on_long_press: o,
                        onLongPressEnd: c,
                        type: d
                    } = e, u = l.useRef(), h = l.useRef(), _ = l.useRef(!1), m = e => t => {
                        h.current = setTimeout(() => {
                            _.current = !0;
                            let s = 1;
                            e(t, 1), u.current = setInterval(() => {
                                e(t, ++s)
                            }, 50)
                        }, 300)
                    }, x = () => {
                        clearInterval(u.current), clearTimeout(h.current), c && _.current && c(), _.current = !1
                    }, p = e => o ? {
                        onContextMenu: e => e.preventDefault(),
                        onTouchStart: m(e),
                        onTouchEnd: x,
                        onMouseDown: m(e),
                        onMouseUp: x
                    } : {};
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsx)(eA.Z, {
                            id: `${s}_add`,
                            className: U()("dc-input-wrapper__button dc-input-wrapper__button--increment", {
                                "dc-input-wrapper__button--disabled": !!n
                            }),
                            disabled: !!n,
                            onClick: a,
                            tabIndex: -1,
                            "aria-label": "Increment value",
                            type: d,
                            ...p(a),
                            children: (0, i.jsx)(ty.J, {
                                icon: "IcAdd",
                                className: "dc-input-wrapper__icon dc-input-wrapper__icon--plus",
                                color: n ? "disabled" : void 0
                            })
                        }), (0, i.jsx)(eA.Z, {
                            id: `${s}_sub`,
                            className: U()("dc-input-wrapper__button dc-input-wrapper__button--decrement", {
                                "dc-input-wrapper__button--disabled": !!r
                            }),
                            disabled: !!r,
                            onClick: t,
                            tabIndex: -1,
                            "aria-label": "Decrement value",
                            type: d,
                            ...p(t),
                            children: (0, i.jsx)(ty.J, {
                                icon: "IcMinus",
                                className: "dc-input-wrapper__icon dc-input-wrapper__icon--minus",
                                color: r ? "disabled" : void 0
                            })
                        })]
                    })
                },
                tS = e => {
                    let {
                        ariaLabel: t,
                        changeValue: s,
                        checked: a,
                        className: n,
                        classNameDynamicSuffix: r,
                        classNameInlinePrefix: o,
                        current_focus: c,
                        data_testid: d,
                        data_tip: u,
                        data_value: h,
                        display_value: _,
                        fractional_digits: x,
                        id: p,
                        inline_prefix: j,
                        inputmode: v,
                        is_autocomplete_disabled: g,
                        is_disabled: b,
                        is_hj_whitelisted: y,
                        is_incrementable: f,
                        is_read_only: N,
                        max_length: C,
                        name: S,
                        onBlur: T,
                        onClick: k,
                        onKeyPressed: w,
                        placeholder: E,
                        required: I,
                        setCurrentFocus: A,
                        type: R
                    } = e, D = l.useRef(null);
                    return l.useEffect(() => {
                        if (c === S) {
                            var e;
                            null == D || null === (e = D.current) || void 0 === e || e.focus()
                        }
                    }, [c, S]), (0, i.jsxs)("div", {
                        className: r,
                        children: [j ? (0, i.jsx)("div", {
                            className: o,
                            children: (0, i.jsx)(es.Z, {
                                className: U()(o ? `${o}--symbol` : "", {
                                    disabled: !!b
                                }),
                                size: "xs",
                                children: "UST" === j ? (0, m.O$T)(j) : j
                            })
                        }) : null, (0, i.jsx)("input", {
                            autoComplete: g ? "off" : void 0,
                            checked: a,
                            className: U()(n),
                            "data-for": `error_tooltip_${S}`,
                            "data-hj-whitelist": y,
                            "data-tip": u,
                            "data-testid": d,
                            "data-value": h,
                            disabled: !!b,
                            id: p,
                            maxLength: x && C ? C + x + 1 : C,
                            name: S,
                            onBlur: e => {
                                null == A || A(null), null == T || T(e)
                            },
                            onChange: e => {
                                if (-1 !== navigator.userAgent.indexOf("Safari") && "checkbox" !== R) {
                                    let t = e.target.selectionStart;
                                    s(e, e => {
                                        e.target.selectionEnd = t
                                    })
                                } else s(e)
                            },
                            onClick: k,
                            onFocus: () => null == A ? void 0 : A(S),
                            onKeyDown: f ? w : void 0,
                            placeholder: E || void 0,
                            readOnly: N,
                            ref: D,
                            required: I || void 0,
                            inputMode: v,
                            type: "number" === R ? "text" : R,
                            value: _ ? ? "",
                            "aria-label": t,
                            "data-lpignore": "password" !== R
                        })]
                    })
                },
                tT = e => {
                    let {
                        ariaLabel: t,
                        checked: s,
                        className: a,
                        classNameDynamicSuffix: n,
                        classNameInlinePrefix: r,
                        classNameInput: o,
                        classNamePrefix: c,
                        classNameWrapper: d,
                        currency: u,
                        current_focus: h,
                        data_tip: _,
                        data_value: x,
                        decimal_point_change: p,
                        error_messages: j,
                        error_message_alignment: v,
                        fractional_digits: g,
                        helper: b,
                        icon: y,
                        id: f,
                        inline_prefix: N,
                        is_autocomplete_disabled: C,
                        is_disabled: S,
                        is_error_tooltip_hidden: T = !1,
                        is_float: k,
                        is_hj_whitelisted: w = !1,
                        is_incrementable: E,
                        is_incrementable_on_long_press: I,
                        is_negative_disabled: A,
                        is_read_only: R = !1,
                        is_signed: D = !1,
                        is_unit_at_right: O = !1,
                        inputmode: L,
                        increment_button_type: M,
                        label: F,
                        max_length: P,
                        max_value: Z,
                        min_value: z,
                        name: $ = "",
                        format: B,
                        onBlur: G,
                        onChange: V,
                        onClick: X,
                        onClickInputWrapper: H,
                        placeholder: q,
                        prefix: Y,
                        required: W,
                        setCurrentFocus: K,
                        type: J = "",
                        unit: Q,
                        value: ee,
                        data_testid: et
                    } = e, [ea, en] = l.useState(), ei = j && !!j.length && !T, el = Z && (+ee >= +Z || Number(ea) >= +Z), er = z && (+ee <= +z || Number(ea) <= +z), eo = !0, ec = e => {
                        let t = "string" == typeof e ? e.split(".") : e.toString().split(".");
                        return t && t.length > 1 ? t[1].length : 0
                    }, ed = e => {
                        let t = e;
                        return z && (t = Math.max(t, z)), Z && (t = Math.min(t, Z)), t
                    }, eu = (e, t) => {
                        let s;
                        if (el) return;
                        let a = ea || ee.toString(),
                            n = a ? ec(a) : 0,
                            i = !!u && (0, m.oS6)(u);
                        if (t) {
                            let e = Math.min(t, Math.max(t, 10)) / 10 * +ee / 100;
                            s = parseFloat(ed(parseFloat(a || "0") + Math.abs(e)).toString()).toFixed(n)
                        } else s = i || !u && k ? parseFloat((parseFloat(a || "0") + parseFloat((1 * 10 ** (0 - (p || n))).toString())).toString()).toFixed(p || n) : parseFloat(((+a || 0) + 1).toString()).toFixed(n);
                        em(s, !!t)
                    }, eh = e => {
                        let t;
                        let s = ea || (null == ee ? void 0 : ee.toString()),
                            a = s ? ec(s) : 0,
                            n = !!u && (0, m.oS6)(u);
                        if (e) {
                            let n = Math.min(e, Math.max(e, 10)) / 10 * +ee / 100;
                            t = parseFloat(ed(parseFloat(s || "0") - Math.abs(n)).toString()).toFixed(a)
                        } else t = n || !u && k ? parseFloat((parseFloat(s || "0") - parseFloat((1 * 10 ** (0 - (p || a))).toString())).toString()).toFixed(p || a) : parseFloat(((+s || 0) - 1).toString()).toFixed(a);
                        return t
                    }, e_ = (e, t) => {
                        if (er) return;
                        let s = eh(t);
                        if (!A || !(0 > +s)) em(s, !!t)
                    }, em = (e, t) => {
                        let s = B ? B(e) : e;
                        t ? en(s) : (D && /^\d+/.test(s) && +s > 0 && (s = `+${s}`), null == V || V({
                            target: {
                                value: s,
                                name: $
                            }
                        }))
                    }, ex = ea || ee;
                    Q && (ex = O ? `${ee} ${Q}` : `${Q} ${ee}`);
                    let ep = E && ("number" === J || "tel" === J),
                        ej = (0, i.jsx)(tS, {
                            ariaLabel: t,
                            changeValue: (e, t) => {
                                if (Q && (e.target.value = e.target.value.replace(Q, "").trim()), e.target.value !== ee || "checkbox" === J) {
                                    if ("number" === J || "tel" === J) {
                                        let t = !e.target.value || "" === e.target.value || "  " === e.target.value,
                                            s = D ? "^([+-.0-9])" : "^";
                                        e.target.value = e.target.value.replace(",", ".");
                                        let a = RegExp(`${s}(\\d*)?${k?"(\\.\\d+)?":""}$`).test(e.target.value),
                                            n = k && RegExp(`${s}(\\.|\\d+\\.)?$`).test(e.target.value),
                                            i = RegExp(`${s}(\\d+)?\\.(\\d+)?[0]+$`).test(e.target.value),
                                            l = /e/.test(`${+e.target.value}`);
                                        if (P && (g || 0 === g) && (eo = RegExp(`${s}(\\d{0,${P}})(\\${g&&"."}\\d{0,${g}})?$`).test(e.target.value)), (a || t) && eo) e.target.value = t || D || i || l || "tel" === J ? e.target.value : +e.target.value;
                                        else if (!n) {
                                            e.target.value = ee;
                                            return
                                        }
                                    }
                                    null == V || V(e), t && t(e)
                                }
                            },
                            checked: s,
                            current_focus: h,
                            className: U()(ep ? "dc-input-wrapper__input" : "", N ? "input--has-inline-prefix" : "", "input", {
                                "input--error": j && !!j.length
                            }, o),
                            classNameDynamicSuffix: n,
                            classNameInlinePrefix: r,
                            data_tip: _,
                            data_testid: et,
                            data_value: x,
                            display_value: ex,
                            fractional_digits: g,
                            has_error: ei,
                            id: f,
                            inline_prefix: N,
                            is_autocomplete_disabled: C,
                            is_disabled: S,
                            is_hj_whitelisted: w,
                            is_incrementable: ep,
                            is_read_only: R,
                            max_length: P,
                            name: $,
                            onBlur: G,
                            onClick: X,
                            onKeyPressed: e => {
                                38 === e.keyCode && eu(), 40 === e.keyCode && e_()
                            },
                            placeholder: q,
                            required: W,
                            setCurrentFocus: K,
                            type: J,
                            inputmode: L
                        }),
                        ev = (0, i.jsx)(tC, {
                            id: f,
                            max_is_disabled: el || !!S,
                            incrementValue: eu,
                            min_is_disabled: er || A && 0 > +eh() || !!S,
                            decrementValue: e_,
                            onLongPressEnd: () => {
                                let e = B ? B(ea) : ea;
                                null == V || V({
                                    target: {
                                        value: e || "",
                                        name: $
                                    }
                                }), en("")
                            },
                            is_incrementable_on_long_press: I,
                            type: M
                        }),
                        eg = (0, i.jsxs)(tN, {
                            className: U()("trade-container__tooltip", {
                                "dc-tooltip--with-label": F
                            }),
                            alignment: v || "left",
                            message: ei ? j[0] : null,
                            has_error: ei,
                            children: [!!F && (0, i.jsx)("label", {
                                htmlFor: $,
                                className: "dc-input-field__label",
                                children: F
                            }), !!b && (0, i.jsx)(es.Z, {
                                size: "xxs",
                                color: "less-prominent",
                                weight: "lighter",
                                children: b
                            }), ep ? (0, i.jsxs)("div", {
                                className: U()("dc-input-wrapper", {
                                    "dc-input-wrapper--disabled": !!S
                                }, d),
                                children: [ev, ej]
                            }) : ej]
                        });
                    return (0, i.jsxs)(l.Fragment, {
                        children: [!!Y && (0, i.jsx)("div", {
                            className: c,
                            children: (0, i.jsx)("span", {
                                className: U()(`${c}--symbol`, "symbols"),
                                children: (0, m.O$T)(u)
                            })
                        }), (0, i.jsxs)("div", {
                            className: U()("dc-input-field", a),
                            onClick: H,
                            children: [y && (0, i.jsx)(y, {
                                onClick: X
                            }), eg]
                        })]
                    })
                },
                tk = e => {
                    let {
                        addToast: t,
                        checkbox_tooltip_label: s,
                        classNameBubble: a,
                        classNameInlinePrefix: n,
                        classNameInput: r,
                        className: o,
                        currency: c,
                        current_focus: d,
                        defaultChecked: u,
                        error_message_alignment: h,
                        error_messages: _,
                        is_disabled: x,
                        is_single_currency: p,
                        is_negative_disabled: j,
                        is_input_hidden: v,
                        label: g,
                        max_value: b,
                        name: y,
                        onChange: f,
                        removeToast: N,
                        setCurrentFocus: C,
                        tooltip_alignment: S,
                        tooltip_label: T,
                        value: k
                    } = e, w = l.useRef(null), E = l.useRef(null), [I, A] = l.useState(u), R = `has_${y}`;
                    l.useEffect(() => {
                        A(u)
                    }, [u]), l.useEffect(() => {
                        if ((0, m.tqC)()) {
                            let e = () => {
                                "function" == typeof N && N(`${y}__error`)
                            };
                            if ((null == _ ? void 0 : _.length) !== void 0 && (null == _ ? void 0 : _.length) > 0) return "function" == typeof t && t({
                                key: `${y}__error`,
                                content: String(_),
                                type: "error"
                            }), () => {
                                e()
                            }
                        }
                    }, [_, t, N, y]);
                    let D = () => {
                            setTimeout(() => {
                                var e, t, s, a;
                                let n = null === (s = E.current) || void 0 === s ? void 0 : null === (t = s.nextSibling) || void 0 === t ? void 0 : null === (e = t.querySelector) || void 0 === e ? void 0 : e.call(t, "input.dc-input-wrapper__input");
                                null == n || null === (a = n.focus) || void 0 === a || a.call(n)
                            })
                        },
                        O = (0, i.jsx)(tT, {
                            className: o,
                            classNameInlinePrefix: n,
                            classNameInput: r,
                            currency: c,
                            current_focus: d || "",
                            error_messages: _,
                            error_message_alignment: h,
                            is_error_tooltip_hidden: (0, m.tqC)(),
                            is_disabled: !!x,
                            fractional_digits: (0, m.i4S)(c),
                            id: `dc_${y}_input`,
                            inline_prefix: p ? c : void 0,
                            is_autocomplete_disabled: !0,
                            is_float: (0, m.i4S)(c) > 0,
                            is_hj_whitelisted: !0,
                            is_incrementable: !0,
                            is_negative_disabled: j,
                            max_length: 10,
                            max_value: b,
                            name: y,
                            onChange: f,
                            onClickInputWrapper: x ? void 0 : () => {
                                !I && (A(!0), null == f || f({
                                    target: {
                                        name: R,
                                        value: !0
                                    }
                                }), D())
                            },
                            type: "number",
                            ariaLabel: "",
                            inputmode: "decimal",
                            value: k,
                            setCurrentFocus: C
                        }),
                        L = (0, i.jsx)(eb, {
                            className: `${y}-checkbox__input`,
                            ref: w,
                            id: `dc_${y}-checkbox_input`,
                            onChange: () => {
                                let e = !I;
                                null == f || f({
                                    target: {
                                        name: R,
                                        value: e
                                    }
                                }), e && D()
                            },
                            name: R,
                            label: g,
                            classNameLabel: `${y}-checkbox__label`,
                            defaultChecked: u,
                            disabled: x
                        });
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsxs)("div", {
                            ref: E,
                            className: "dc-input-wrapper--inline",
                            children: [s ? (0, i.jsx)(G.Z, {
                                alignment: "left",
                                classNameBubble: "trade-container__popover",
                                is_bubble_hover_enabled: !0,
                                margin: 2,
                                message: s,
                                relative_render: !0,
                                children: L
                            }) : (0, i.jsx)(l.Fragment, {
                                children: L
                            }), T && (0, i.jsx)(G.Z, {
                                alignment: S || "left",
                                classNameBubble: a,
                                icon: "info",
                                id: `dc_${y}-checkbox__tooltip`,
                                is_bubble_hover_enabled: !0,
                                message: T,
                                margin: (0, m.tqC)() || "right" === S ? 0 : 216,
                                zIndex: "9999",
                                ...(0, m.nIE)() ? {
                                    relative_render: "left" === S
                                } : {}
                            })]
                        }), !v && O]
                    })
                },
                tw = e => {
                    let t, s, {
                        addToast: a,
                        contract: n,
                        current_focus: r,
                        error_message_alignment: o,
                        getCardLabels: c,
                        isMobile: d,
                        is_turbos: u,
                        is_accumulator: h,
                        onMouseLeave: _,
                        removeToast: x,
                        setCurrentFocus: p,
                        toggleDialog: j,
                        totalProfit: v
                    } = e;
                    l.useEffect(() => () => n.clearContractUpdateConfigValues(), [n]);
                    let {
                        contract_info: g,
                        contract_update_take_profit: b,
                        has_contract_update_take_profit: y,
                        contract_update_stop_loss: N,
                        has_contract_update_stop_loss: C,
                        updateLimitOrder: S,
                        validation_errors: T
                    } = n, [k, w] = l.useState({
                        contract_update_take_profit: b,
                        contract_update_stop_loss: N
                    }), {
                        buy_price: E,
                        currency: I = "",
                        is_valid_to_cancel: A,
                        is_sold: R
                    } = g, {
                        stop_loss: D,
                        take_profit: O
                    } = (0, m.gNN)(g.limit_order), {
                        contract_update_stop_loss: L,
                        contract_update_take_profit: M
                    } = T, F = {
                        take_profit: y ? M : void 0,
                        stop_loss: C ? L : void 0
                    }, P = Object.keys(F).some(e => {
                        var t;
                        return null === (t = F[e]) || void 0 === t ? void 0 : t.length
                    }), Z = (0, m.L8o)(g.contract_type || "");
                    let z = y ? +b > 0 : null != (t = Z ? D : O);
                    let $ = C ? +N > 0 : null != (s = O),
                        B = Z ? !A && !!(z || $) : !!z,
                        G = e => {
                            let t = ["has_contract_update_take_profit", "has_contract_update_stop_loss", e.has_contract_update_take_profit && "contract_update_take_profit", e.has_contract_update_stop_loss && "contract_update_stop_loss"];
                            return (0, m.eiS)(e, t)
                        },
                        V = e => {
                            var t;
                            let {
                                name: s,
                                value: a
                            } = e.target;
                            w({ ...k,
                                [s]: a
                            }), null === (t = n.onChange) || void 0 === t || t.call(n, {
                                name: s,
                                value: a
                            })
                        },
                        X = (0, i.jsx)(tk, {
                            addToast: a,
                            removeToast: x,
                            current_focus: r,
                            classNameBubble: "dc-popover__trade-params",
                            classNameInlinePrefix: "dc-contract-card-dialog__input--currency",
                            currency: I,
                            error_messages: F.take_profit,
                            is_input_hidden: d && !y,
                            is_single_currency: !0,
                            is_negative_disabled: !0,
                            defaultChecked: y,
                            label: c().TAKE_PROFIT,
                            name: "contract_update_take_profit",
                            onChange: V,
                            error_message_alignment: o || "right",
                            value: k.contract_update_take_profit,
                            is_disabled: Z && !!A,
                            setCurrentFocus: p,
                            tooltip_alignment: d ? "left" : "right",
                            tooltip_label: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "When your profit reaches or exceeds this amount, your trade will be closed automatically."
                            })
                        }),
                        H = (0, m.CeH)(g),
                        q = (0, i.jsx)(tk, {
                            addToast: a,
                            removeToast: x,
                            current_focus: r,
                            classNameBubble: "dc-popover__trade-params",
                            classNameInlinePrefix: "dc-contract-card-dialog__input--currency",
                            currency: I,
                            defaultChecked: C,
                            error_messages: F.stop_loss,
                            is_input_hidden: d && !C,
                            is_single_currency: !0,
                            is_negative_disabled: !0,
                            label: c().STOP_LOSS,
                            max_value: Number(E) - H,
                            name: "contract_update_stop_loss",
                            onChange: V,
                            error_message_alignment: o || "right",
                            value: k.contract_update_stop_loss,
                            is_disabled: !!A,
                            setCurrentFocus: p,
                            tooltip_alignment: d ? "left" : "right",
                            tooltip_label: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "When your loss reaches or exceeds this amount, your trade will be closed automatically."
                            })
                        });
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsx)(eq.Z, {
                            children: (0, i.jsxs)("div", {
                                className: "dc-contract-card-dialog__total-profit",
                                children: [(0, i.jsx)(es.Z, {
                                    color: "less-prominent",
                                    size: "xs",
                                    weight: "bold",
                                    children: c().TOTAL_PROFIT_LOSS
                                }), (0, i.jsxs)("div", {
                                    className: U()("dc-contract-card__profit-loss dc-contract-card-item__total-profit-loss-value", {
                                        "dc-contract-card__profit-loss--is-crypto": (0, m.oS6)(I),
                                        "dc-contract-card__profit-loss--negative": v < 0,
                                        "dc-contract-card__profit-loss--positive": v > 0
                                    }),
                                    children: [(0, i.jsx)(e2.Z, {
                                        amount: v,
                                        currency: I,
                                        show_currency: !0
                                    }), !R && (0, i.jsx)(tn, {
                                        className: "dc-contract-card__indicative--movement",
                                        value: v
                                    })]
                                })]
                            })
                        }), (0, i.jsxs)("div", {
                            className: U()("dc-contract-card-dialog__form", {
                                "dc-contract-card-dialog__form--no-stop-loss": h || u
                            }),
                            children: [(0, i.jsx)("div", {
                                className: "dc-contract-card-dialog__input",
                                children: X
                            }), Z && (0, i.jsx)("div", {
                                className: "dc-contract-card-dialog__input",
                                children: q
                            }), (0, i.jsx)("div", {
                                className: "dc-contract-card-dialog__button",
                                children: (0, i.jsx)(tg.z, {
                                    onClick: e => {
                                        S(), j(e), null == _ || _()
                                    },
                                    disabled: P || !B || (0, m.xb4)(G((0, m.W9k)(g)), G(e.contract)),
                                    isFullWidth: !0,
                                    children: c().APPLY
                                })
                            })]
                        })]
                    })
                },
                tE = e => {
                    let {
                        addToast: t,
                        contract_id: s,
                        getCardLabels: a,
                        getContractById: n,
                        is_valid_to_cancel: r,
                        should_show_cancellation_warning: o,
                        toggleCancellationWarning: c,
                        ...d
                    } = e, [u, h] = l.useState(!1), [_, x] = l.useState(0), [p, j] = l.useState(0), v = l.useRef(null), g = l.useRef(null), b = n(Number(s));
                    l.useEffect(() => {
                        if (u && (null == v ? void 0 : v.current) && (null == g ? void 0 : g.current)) {
                            let e = v.current.getBoundingClientRect(),
                                t = g.current.getBoundingClientRect(),
                                s = document.body.getBoundingClientRect(),
                                {
                                    top: a
                                } = e,
                                {
                                    right: n
                                } = e;
                            a + (null == t ? void 0 : t.height) > s.height && (a -= (null == t ? void 0 : t.height) - e.height), n + (null == t ? void 0 : t.width) > s.width ? j(n - (null == t ? void 0 : t.width) - 16) : j(n - 16), x(a)
                        }
                    }, [u]);
                    let y = e => {
                            e.preventDefault(), e.stopPropagation(), (0, m.tqC)() && o && r && t({
                                key: "deal_cancellation_active",
                                content: a().TAKE_PROFIT_LOSS_NOT_AVAILABLE,
                                type: "error"
                            }), !r && h(!u)
                        },
                        f = l.useCallback(y, [y]),
                        N = (0, i.jsx)("div", {
                            className: "dc-contract-card-dialog-toggle__icon",
                            children: (0, i.jsx)(tp.Z, {
                                height: 12,
                                width: 12
                            })
                        });
                    return (0, i.jsxs)("div", {
                        onClick: e => {
                            e.stopPropagation()
                        },
                        children: [r && o && (0, m.nIE)() ? (0, i.jsx)(G.Z, {
                            alignment: "right",
                            classNameBubble: "dc-contract-card-dialog__popover-bubble",
                            className: "dc-contract-card-dialog__popover",
                            is_bubble_hover_enabled: !0,
                            margin: 2,
                            zIndex: "2",
                            message: a().TAKE_PROFIT_LOSS_NOT_AVAILABLE,
                            onBubbleClose: () => {
                                null == c || c()
                            },
                            children: (0, i.jsx)("button", {
                                ref: v,
                                className: "dc-contract-card-dialog-toggle",
                                onClick: f,
                                children: N
                            })
                        }) : (0, i.jsx)("button", {
                            ref: v,
                            className: "dc-contract-card-dialog-toggle",
                            onClick: f,
                            children: N
                        }), (0, i.jsx)(eq.Z, {
                            children: (0, i.jsx)(tj.Z, {
                                portal_element_id: "modal_root",
                                visible: u,
                                onClose: f,
                                wrapper_classname: "contract-update",
                                children: (0, i.jsx)(eP.Z, {
                                    className: "contract-update__wrapper",
                                    height_offset: "40px",
                                    children: (0, i.jsx)(tw, {
                                        addToast: t,
                                        contract: b,
                                        getCardLabels: a,
                                        getContractById: n,
                                        isMobile: !0,
                                        toggleDialog: f,
                                        ...d
                                    })
                                })
                            })
                        }), (0, i.jsx)(tt.Z, {
                            children: (0, i.jsx)(tv, {
                                ref: g,
                                is_visible: u,
                                left: p,
                                top: _,
                                toggle_ref: v,
                                toggleDialog: f,
                                children: (0, i.jsx)(tw, {
                                    addToast: t,
                                    contract: b,
                                    getCardLabels: a,
                                    getContractById: n,
                                    toggleDialog: f,
                                    ...d
                                })
                            })
                        })]
                    })
                };
            tE.displayName = "ToggleCardDialog";
            let tI = l.memo(tE),
                tA = l.memo(e => {
                    let t, s, {
                            contract_info: a,
                            contract_update: n,
                            currency: r,
                            getCardLabels: o,
                            indicative: c,
                            is_sold: d,
                            is_positions: u,
                            ...h
                        } = e,
                        {
                            buy_price: _,
                            profit: x,
                            limit_order: p,
                            sell_price: j
                        } = a,
                        {
                            take_profit: v
                        } = (0, m.gNN)(n || p),
                        g = (0, m.iBr)(a),
                        {
                            CONTRACT_VALUE: b,
                            STAKE: y,
                            TAKE_PROFIT: f,
                            TOTAL_PROFIT_LOSS: N
                        } = o();
                    return x && (t = +x > 0, s = 0 > +x), (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsxs)("div", {
                            className: "dc-contract-card-items-wrapper",
                            children: [(0, i.jsx)(tx, {
                                header: y,
                                className: "dc-contract-card__stake",
                                children: (0, i.jsx)(e2.Z, {
                                    amount: _,
                                    currency: r
                                })
                            }), (0, i.jsxs)(tx, {
                                header: b,
                                className: "dc-contract-card__current-stake",
                                children: [(0, i.jsx)("div", {
                                    className: U()({
                                        "dc-contract-card--profit": t,
                                        "dc-contract-card--loss": s
                                    }),
                                    children: (0, i.jsx)(e2.Z, {
                                        amount: j || c,
                                        currency: r
                                    })
                                }), !d && (0, i.jsx)(tn, {
                                    className: "dc-contract-card__indicative--movement",
                                    value: j || c
                                })]
                            }), (0, i.jsxs)(tx, {
                                header: N,
                                is_crypto: (0, m.oS6)(r),
                                is_loss: s,
                                is_won: t,
                                children: [(0, i.jsx)(e2.Z, {
                                    amount: x,
                                    currency: r
                                }), !d && (0, i.jsx)(tn, {
                                    className: "dc-contract-card__indicative--movement",
                                    value: x
                                })]
                            }), (0, i.jsxs)(tx, {
                                header: f,
                                className: "dc-contract-card__take-profit",
                                children: [v ? (0, i.jsx)(e2.Z, {
                                    amount: v,
                                    currency: r
                                }) : (0, i.jsx)("strong", {
                                    children: "-"
                                }), g && (0, i.jsx)(tI, {
                                    contract_id: a.contract_id,
                                    getCardLabels: o,
                                    is_accumulator: !0,
                                    ...h
                                })]
                            })]
                        }), !!d && (0, i.jsx)(eq.Z, {
                            children: (0, i.jsx)("div", {
                                className: U()("dc-contract-card__status", {
                                    "dc-contract-card__status--accumulator-mobile-positions": u
                                }),
                                children: (0, i.jsx)(tm, {
                                    getCardLabels: o,
                                    is_contract_won: t
                                })
                            })
                        })]
                    })
                }),
                tR = l.memo(e => {
                    var t, s;
                    let a, {
                            contract_info: n,
                            currency: r,
                            is_sold: o,
                            indicative: c,
                            progress_slider_mobile_el: d
                        } = e,
                        {
                            buy_price: u,
                            contract_type: h,
                            sell_price: _,
                            profit: x,
                            multiplier: p
                        } = n,
                        {
                            INDICATIVE_PRICE: j,
                            MULTIPLIER: v,
                            PROFIT_LOSS: g,
                            POTENTIAL_PROFIT_LOSS: b,
                            PAYOUT: y,
                            PURCHASE_PRICE: N
                        } = (0, m.gk9)();
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsxs)("div", {
                            className: "dc-contract-card-items-wrapper dc-contract-card--lookbacks",
                            children: [(0, i.jsxs)(tx, {
                                header: o ? g : b,
                                is_crypto: (0, m.oS6)(r),
                                is_loss: 0 > Number(x),
                                is_won: Number(x) > 0,
                                children: [(0, i.jsx)(e2.Z, {
                                    amount: x,
                                    currency: r
                                }), !o && (0, i.jsx)(tn, {
                                    className: "dc-contract-card__indicative--movement",
                                    value: x
                                })]
                            }), (0, i.jsxs)(tx, {
                                header: o ? y : j,
                                children: [(0, i.jsx)(e2.Z, {
                                    currency: r,
                                    amount: Number(_ || c)
                                }), !o && (0, i.jsx)(tn, {
                                    className: "dc-contract-card__indicative--movement",
                                    value: Number(_ || c)
                                })]
                            }), (0, i.jsx)(tx, {
                                header: N,
                                children: (0, i.jsx)(e2.Z, {
                                    amount: u,
                                    currency: r
                                })
                            }), (0, i.jsx)(tx, {
                                header: v,
                                children: `x${p}`
                            }), (0, i.jsx)(eq.Z, {
                                children: (0, i.jsx)("div", {
                                    className: "dc-contract-card__status",
                                    children: o ? (0, i.jsx)(tm, {
                                        getCardLabels: m.gk9,
                                        is_contract_won: "won" === (0, m.efd)(n)
                                    }) : d
                                })
                            })]
                        }), (0, i.jsx)(tx, {
                            className: "dc-contract-card-item__payout-limit",
                            children: (0, i.jsx)(es.Z, {
                                align: "center",
                                lineHeightt: "l",
                                size: "xxs",
                                children: (t = h, s = p, a = "", t === m.FTx.LB_PUT ? a = (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "(High - Close)"
                                }) : t === m.FTx.LB_CALL ? a = (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "(Close - Low)"
                                }) : t === m.FTx.LB_HIGH_LOW && (a = (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "(High - Low)"
                                })), (0, i.jsxs)(l.Fragment, {
                                    children: [(0, i.jsx)(f.Xx, {
                                        i18n_default_text: "Payout limit: {{multiplier}} x ",
                                        values: {
                                            multiplier: s
                                        }
                                    }), a]
                                }))
                            })
                        })]
                    })
                }),
                tD = e => {
                    let {
                        contract_info: t,
                        contract_update: s,
                        currency: a,
                        getCardLabels: n,
                        has_progress_slider: r,
                        progress_slider: o,
                        is_mobile: c,
                        is_sold: d,
                        should_show_cancellation_warning: u,
                        toggleCancellationWarning: h,
                        ..._
                    } = e, {
                        buy_price: x,
                        bid_price: p,
                        limit_order: j
                    } = t, {
                        take_profit: v,
                        stop_loss: g
                    } = (0, m.gNN)(s || j), b = (0, m.CeH)(t), y = (0, m.Dlf)(t), f = (0, m.iBr)(t), N = (0, m.vMw)(t), {
                        CONTRACT_COST: C,
                        CONTRACT_VALUE: S,
                        DEAL_CANCEL_FEE: T,
                        STAKE: k,
                        STOP_LOSS: w,
                        TAKE_PROFIT: E,
                        TOTAL_PROFIT_LOSS: I
                    } = n();
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsxs)("div", {
                            className: U()({
                                "dc-contract-card-items-wrapper--mobile": c,
                                "dc-contract-card-items-wrapper": !c,
                                "dc-contract-card-items-wrapper--has-progress-slider": r && !d
                            }),
                            children: [(0, i.jsx)(tx, {
                                header: C,
                                className: "dc-contract-card__stake",
                                children: (0, i.jsx)(e2.Z, {
                                    amount: x - b,
                                    currency: a
                                })
                            }), (0, i.jsxs)(tx, {
                                header: S,
                                className: "dc-contract-card__current-stake",
                                children: [(0, i.jsx)("div", {
                                    className: U()({
                                        "dc-contract-card--profit": N > 0,
                                        "dc-contract-card--loss": N < 0
                                    }),
                                    children: (0, i.jsx)(e2.Z, {
                                        amount: p,
                                        currency: a
                                    })
                                }), !d && (0, i.jsx)(tn, {
                                    className: "dc-contract-card__indicative--movement",
                                    value: N
                                })]
                            }), (0, i.jsx)(tx, {
                                header: T,
                                className: U()("dc-contract-card__deal-cancel-fee", {
                                    "dc-contract-card__deal-cancel-fee__disabled": !b
                                }),
                                children: b ? (0, i.jsx)(e2.Z, {
                                    amount: b,
                                    currency: a
                                }) : (0, i.jsx)(l.Fragment, {
                                    children: "-"
                                })
                            }), (0, i.jsx)(tx, {
                                header: k,
                                className: "dc-contract-card__buy-price",
                                children: (0, i.jsx)(e2.Z, {
                                    amount: x,
                                    currency: a
                                })
                            }), r && c && !d && (0, i.jsx)(tx, {
                                className: "dc-contract-card__date-expiry",
                                children: o
                            }), (0, i.jsxs)("div", {
                                className: "dc-contract-card__limit-order-info",
                                children: [(0, i.jsx)(tx, {
                                    header: E,
                                    className: "dc-contract-card__take-profit",
                                    children: v ? (0, i.jsx)(e2.Z, {
                                        amount: v,
                                        currency: a
                                    }) : (0, i.jsx)("strong", {
                                        children: "-"
                                    })
                                }), (0, i.jsx)(tx, {
                                    header: w,
                                    className: "dc-contract-card__stop-loss",
                                    children: g ? (0, i.jsxs)(l.Fragment, {
                                        children: [(0, i.jsx)("strong", {
                                            children: "-"
                                        }), (0, i.jsx)(e2.Z, {
                                            amount: g,
                                            currency: a
                                        })]
                                    }) : (0, i.jsx)("strong", {
                                        children: "-"
                                    })
                                }), (f || y) && (0, i.jsx)(tI, {
                                    contract_id: t.contract_id,
                                    getCardLabels: n,
                                    is_valid_to_cancel: y,
                                    should_show_cancellation_warning: u,
                                    toggleCancellationWarning: h,
                                    ..._
                                })]
                            })]
                        }), (0, i.jsxs)(tx, {
                            className: "dc-contract-card-item__total-profit-loss",
                            header: I,
                            is_crypto: (0, m.oS6)(a),
                            is_loss: N < 0,
                            is_won: N > 0,
                            children: [(0, i.jsx)(e2.Z, {
                                amount: Math.abs(N),
                                currency: a
                            }), !d && (0, i.jsx)(tn, {
                                className: "dc-contract-card__indicative--movement",
                                value: N
                            })]
                        })]
                    })
                };
            tD.propTypes = {
                addToast: eF().func,
                contract_info: eF().object,
                contract_update: eF().object,
                currency: eF().string,
                current_focus: eF().string,
                error_message_alignment: eF().string,
                getCardLabels: eF().func,
                getContractById: eF().func,
                is_mobile: eF().bool,
                is_sold: eF().bool,
                onMouseLeave: eF().func,
                progress_slider: eF().node,
                removeToast: eF().func,
                setCurrentFocus: eF().func,
                should_show_cancellation_warning: eF().bool,
                toggleCancellationWarning: eF().func,
                totalProfit: eF().number.isRequired,
                has_progress_slider: eF().bool
            };
            let tO = l.memo(tD),
                tL = l.memo(e => {
                    let {
                        contract_info: t,
                        contract_update: s,
                        currency: a,
                        getCardLabels: n,
                        is_sold: r,
                        progress_slider_mobile_el: o,
                        ...c
                    } = e, {
                        bid_price: d,
                        buy_price: u,
                        profit: h,
                        barrier: _,
                        entry_spot_display_value: x,
                        limit_order: p = {},
                        sell_price: j
                    } = t, {
                        take_profit: v
                    } = (0, m.gNN)(s || p), g = (0, m.iBr)(t), b = r ? j : d, {
                        BARRIER: y,
                        CONTRACT_VALUE: f,
                        ENTRY_SPOT: N,
                        TAKE_PROFIT: C,
                        TOTAL_PROFIT_LOSS: S,
                        STAKE: T
                    } = n();
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsxs)("div", {
                            className: U()("dc-contract-card-items-wrapper dc-contract-card--turbos"),
                            children: [(0, i.jsx)(tx, {
                                className: "dc-contract-card__buy-price",
                                is_crypto: (0, m.oS6)(a),
                                header: T,
                                children: (0, i.jsx)(e2.Z, {
                                    amount: u,
                                    currency: a
                                })
                            }), (0, i.jsxs)(tx, {
                                header: f,
                                className: "dc-contract-card__contract-value",
                                children: [(0, i.jsx)("div", {
                                    className: U()({
                                        "dc-contract-card--profit": Number(h) > 0,
                                        "dc-contract-card--loss": 0 > Number(h)
                                    }),
                                    children: (0, i.jsx)(e2.Z, {
                                        amount: b,
                                        currency: a
                                    })
                                }), !r && (0, i.jsx)(tn, {
                                    className: "dc-contract-card__indicative--movement",
                                    value: j || b
                                })]
                            }), (0, i.jsx)(tx, {
                                header: N,
                                is_crypto: (0, m.oS6)(a),
                                className: "dc-contract-card__entry-spot",
                                children: (0, m.oC5)(x)
                            }), (0, i.jsx)("div", {
                                className: "dc-contract-card__limit-order-info",
                                children: (0, i.jsxs)(tx, {
                                    header: C,
                                    className: "dc-contract-card__take-profit",
                                    children: [v ? (0, i.jsx)(e2.Z, {
                                        amount: v,
                                        currency: a
                                    }) : (0, i.jsx)("strong", {
                                        children: "-"
                                    }), g && (0, i.jsx)(tI, {
                                        contract_id: t.contract_id,
                                        getCardLabels: n,
                                        is_turbos: !0,
                                        ...c
                                    })]
                                })
                            }), (0, i.jsx)(tx, {
                                header: y,
                                className: "dc-contract-card__barrier-level",
                                children: (0, m.oC5)(_)
                            }), (0, i.jsx)(eq.Z, {
                                children: (0, i.jsx)("div", {
                                    className: "dc-contract-card__status",
                                    children: r ? (0, i.jsx)(tm, {
                                        getCardLabels: n,
                                        is_contract_won: !!h && h > 0
                                    }) : o
                                })
                            })]
                        }), (0, i.jsxs)(tx, {
                            className: "dc-contract-card-item__total-profit-loss",
                            header: S,
                            is_crypto: (0, m.oS6)(a),
                            is_loss: 0 > Number(h),
                            is_won: Number(h) > 0,
                            children: [(0, i.jsx)(e2.Z, {
                                amount: h,
                                currency: a
                            }), !r && (0, i.jsx)(tn, {
                                className: "dc-contract-card__indicative--movement",
                                value: h
                            })]
                        })]
                    })
                }),
                tM = l.memo(e => {
                    let {
                        contract_info: t,
                        currency: s,
                        getCardLabels: a,
                        is_sold: n,
                        progress_slider: r
                    } = e, {
                        buy_price: o,
                        bid_price: c,
                        entry_spot_display_value: d,
                        barrier: u,
                        sell_price: h,
                        profit: _
                    } = t, x = n ? h : c, {
                        CONTRACT_VALUE: p,
                        ENTRY_SPOT: j,
                        STAKE: v,
                        STRIKE: g,
                        TOTAL_PROFIT_LOSS: b
                    } = a();
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsxs)(tt.Z, {
                            children: [(0, i.jsxs)("div", {
                                className: "dc-contract-card-items-wrapper",
                                children: [(0, i.jsx)(tx, {
                                    header: v,
                                    children: (0, i.jsx)(e2.Z, {
                                        amount: o,
                                        currency: s
                                    })
                                }), (0, i.jsxs)(tx, {
                                    className: "dc-contract-card-item__contract-value",
                                    header: p,
                                    children: [(0, i.jsx)("div", {
                                        className: U()({
                                            "dc-contract-card--profit": Number(_) > 0,
                                            "dc-contract-card--loss": 0 > Number(_)
                                        }),
                                        children: (0, i.jsx)(e2.Z, {
                                            amount: x,
                                            currency: s
                                        })
                                    }), !n && (0, i.jsx)(tn, {
                                        className: "dc-contract-card__indicative--movement",
                                        value: h || x
                                    })]
                                }), (0, i.jsx)(tx, {
                                    header: j,
                                    children: d && (0, m.oC5)(d)
                                }), (0, i.jsx)(tx, {
                                    header: g,
                                    children: u && (0, m.oC5)(u)
                                })]
                            }), (0, i.jsxs)(tx, {
                                className: "dc-contract-card-item__total-profit-loss",
                                header: b,
                                is_crypto: (0, m.oS6)(s),
                                is_loss: 0 > Number(_),
                                is_won: Number(_) > 0,
                                children: [(0, i.jsx)(e2.Z, {
                                    amount: _,
                                    currency: s
                                }), !n && (0, i.jsx)(tn, {
                                    className: "dc-contract-card__indicative--movement",
                                    value: _
                                })]
                            })]
                        }), (0, i.jsx)(eq.Z, {
                            children: (0, i.jsxs)("div", {
                                className: "dc-contract-card-items-wrapper--mobile",
                                children: [(0, i.jsxs)("div", {
                                    className: "dc-contract-card-items-wrapper-group",
                                    children: [(0, i.jsx)(tx, {
                                        header: v,
                                        children: (0, i.jsx)(e2.Z, {
                                            amount: o,
                                            currency: s
                                        })
                                    }), (0, i.jsx)(tx, {
                                        header: j,
                                        children: d && (0, m.oC5)(d)
                                    })]
                                }), (0, i.jsxs)("div", {
                                    className: "dc-contract-card-items-wrapper-group",
                                    children: [(0, i.jsxs)(tx, {
                                        header: p,
                                        children: [(0, i.jsx)("div", {
                                            className: U()({
                                                "dc-contract-card--profit": Number(_) > 0,
                                                "dc-contract-card--loss": 0 > Number(_)
                                            }),
                                            children: (0, i.jsx)(e2.Z, {
                                                amount: x,
                                                currency: s
                                            })
                                        }), !n && (0, i.jsx)(tn, {
                                            className: "dc-contract-card__indicative--movement",
                                            value: h || x
                                        })]
                                    }), (0, i.jsx)(tx, {
                                        header: g,
                                        children: u && (0, m.oC5)(u)
                                    })]
                                }), n ? (0, i.jsx)(tm, {
                                    getCardLabels: a,
                                    is_contract_won: "won" === (0, m.efd)(t)
                                }) : r, (0, i.jsxs)(tx, {
                                    className: "dc-contract-card-item__total-profit-loss",
                                    header: b,
                                    is_crypto: (0, m.oS6)(s),
                                    is_loss: 0 > Number(_),
                                    is_won: Number(_) > 0,
                                    children: [(0, i.jsx)(e2.Z, {
                                        amount: _,
                                        currency: s
                                    }), !n && (0, i.jsx)(tn, {
                                        className: "dc-contract-card__indicative--movement",
                                        value: _
                                    })]
                                })]
                            })
                        })]
                    })
                }),
                tU = e => {
                    let {
                        contract_info: t,
                        getCardLabels: s,
                        is_sell_requested: a,
                        onClickSell: n
                    } = e, r = (0, m.iBr)(t), o = ((0, m._mr)(t) || (0, m.s0r)((null == t ? void 0 : t.shortcode) ? ? "", t.purchase_time)) && (0, m.FJ7)(t);
                    return o ? (0, i.jsx)(l.Fragment, {
                        children: r ? (0, i.jsx)(tg.z, {
                            className: U()("dc-btn--sell", {
                                "dc-btn--loading": a
                            }),
                            "data-testid": "dt_contract_card_sell",
                            disabled: a,
                            onClick: e => {
                                null == n || n(t.contract_id), e.stopPropagation(), e.preventDefault()
                            },
                            variant: "outlined",
                            children: s().SELL
                        }) : (0, i.jsx)("div", {
                            className: "dc-contract-card__no-resale-msg",
                            children: s().RESALE_NOT_OFFERED
                        })
                    }) : null
                },
                tF = e => {
                    let {
                        className: t,
                        contract_info: s,
                        getCardLabels: a,
                        is_sell_requested: n,
                        onClickCancel: r,
                        onClickSell: o,
                        server_time: c
                    } = e, {
                        contract_id: d,
                        cancellation: {
                            date_expiry: u
                        } = {},
                        profit: h
                    } = s, _ = (0, m.Dlf)(s);
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsx)(tg.z, {
                            id: `dc_contract_card_${d}_button`,
                            className: U()(t, {
                                "dc-btn--loading": n
                            }),
                            disabled: n || 0 > Number(h) && _,
                            onClick: e => {
                                o(d), e.stopPropagation(), e.preventDefault()
                            },
                            variant: "outlined",
                            children: a().CLOSE
                        }), _ && (0, i.jsxs)(tg.z, {
                            id: `dc_contract_card_${d}_cancel_button`,
                            className: "dc-btn--cancel",
                            disabled: Number(h) >= 0,
                            onClick: e => {
                                r(d), e.stopPropagation(), e.preventDefault()
                            },
                            variant: "outlined",
                            children: [a().CANCEL, u && (0, i.jsx)(to, {
                                end_time: u,
                                format: "mm:ss",
                                getCardLabels: a,
                                start_time: c
                            })]
                        })]
                    })
                },
                tP = e => {
                    let {
                        current_tick: t,
                        getCardLabels: s,
                        ticks_count: a
                    } = e, n = Array.from(Array(a).keys());
                    return (0, i.jsxs)("div", {
                        className: "dc-progress-slider__ticks",
                        children: [(0, i.jsxs)(es.Z, {
                            styles: {
                                lineHeight: "18px"
                            },
                            size: "xxs",
                            className: "dc-progress-slider__ticks-caption",
                            children: [s().TICK, " ", t]
                        }), (0, i.jsx)("div", {
                            className: "dc-progress-slider__ticks-wrapper",
                            children: n.map(e => (0, i.jsx)("div", {
                                className: U()("dc-progress-slider__ticks-step", {
                                    "dc-progress-slider__ticks-step--marked": e + 1 <= Number(t)
                                })
                            }, e))
                        })]
                    })
                },
                tZ = e => {
                    let {
                        className: t,
                        current_tick: s,
                        expiry_time: a,
                        getCardLabels: n,
                        is_loading: r,
                        server_time: o,
                        start_time: c,
                        ticks_count: d
                    } = e, u = (0, m.dq6)(o, Number(c), Number(a));
                    return (0, i.jsx)("div", {
                        className: U()("dc-progress-slider", t),
                        children: d ? (0, i.jsx)(tP, {
                            current_tick: s,
                            getCardLabels: n,
                            ticks_count: d
                        }) : (0, i.jsxs)(l.Fragment, {
                            children: [(0, i.jsx)(es.Z, {
                                size: "xxxs",
                                className: "dc-progress-slider__remaining-time",
                                children: (0, i.jsx)(to, {
                                    end_time: a,
                                    getCardLabels: n,
                                    start_time: o
                                })
                            }), r || u < 1 ? (0, i.jsx)("div", {
                                className: "dc-progress-slider__infinite-loader",
                                children: (0, i.jsx)("div", {
                                    className: "dc-progress-slider__infinite-loader--indeterminate"
                                })
                            }) : (0, i.jsx)("div", {
                                className: "dc-progress-slider__track",
                                children: (0, i.jsx)("div", {
                                    className: U()("dc-progress-slider__line", {
                                        "dc-progress-slider__line--green": u >= 50,
                                        "dc-progress-slider__line--yellow": u < 50 && u >= 20,
                                        "dc-progress-slider__line--red": u < 20
                                    }),
                                    style: {
                                        width: `${u}%`
                                    }
                                })
                            })]
                        })
                    })
                },
                tz = e => {
                    let {
                        displayed_trade_param: t,
                        getContractTypeDisplay: s,
                        is_high_low: a,
                        is_multipliers: n,
                        is_turbos: l,
                        type: r = ""
                    } = e, o = "";
                    return a && (o = "CALL" === r ? "HIGHER" : "LOWER"), (0, i.jsxs)("div", {
                        className: "dc-contract-type",
                        children: [(0, i.jsx)("div", {
                            className: "dc-contract-type__type-wrapper",
                            children: (0, i.jsx)(X, {
                                type: a && !(0, m.Yeo)(r) ? o : r,
                                className: "category-type",
                                size: "md"
                            })
                        }), (0, i.jsxs)("div", {
                            className: U()("dc-contract-type__type-label", {
                                "dc-contract-type__type-label--smarttrader-contract": (0, m.xGd)(r),
                                "dc-contract-type__type-label--lookbacks-contract": (0, m.vxy)(r),
                                "dc-contract-type__type-label--multipliers": n
                            }),
                            children: [(0, i.jsx)("div", {
                                children: s(r, {
                                    isHighLow: a,
                                    showMainTitle: n || l
                                }) || ""
                            }), t && (0, i.jsx)("div", {
                                className: "dc-contract-type__type-label-trade-param",
                                children: t
                            })]
                        })]
                    })
                },
                t$ = l.memo(e => {
                    let {
                        current_tick: t,
                        label: s,
                        max_ticks_duration: a
                    } = e;
                    return (0, i.jsx)("div", {
                        className: "dc-tick-counter-bar__container",
                        children: (0, i.jsx)("div", {
                            className: "dc-tick-counter-bar__track",
                            children: (0, i.jsx)(es.Z, {
                                size: "xxs",
                                weight: "bold",
                                align: "center",
                                color: "profit-success",
                                className: "dc-tick-counter-bar__text",
                                children: `${t}/${a} ${s}`
                            })
                        })
                    })
                }),
                tB = e => {
                    let {
                        currency: t,
                        contract_id: s,
                        getCardLabels: a,
                        getContractPath: n,
                        is_positions: r,
                        is_visible: o,
                        onClickRemove: c,
                        payout_info: d,
                        result: u
                    } = e, h = "won" === u;
                    return (0, i.jsx)(l.Fragment, {
                        children: (0, i.jsx)(ek.Z, { in: o,
                            timeout: 250,
                            classNames: {
                                enter: "dc-contract-card__result--enter",
                                enterDone: "dc-contract-card__result--enter-done",
                                exit: "dc-contract-card__result--exit"
                            },
                            unmountOnExit: !0,
                            children: (0, i.jsxs)("div", {
                                id: `dc_contract_card_${s}_result`,
                                className: U()("dc-contract-card__result", {
                                    "dc-result__positions-overlay": r,
                                    "dc-contract-card__result--won": h,
                                    "dc-contract-card__result--lost": !h
                                }),
                                children: [r && (0, i.jsx)("span", {
                                    id: `dc_contract_card_${s}_result_close_icon`,
                                    className: "dc-result__close-btn",
                                    onClick: () => {
                                        s && (null == c || c(s))
                                    }
                                }), n && (0, i.jsx)(ec.OL, {
                                    className: "dc-result__caption-wrapper",
                                    to: n(s)
                                }), (0, i.jsxs)("div", {
                                    className: "dc-result__content",
                                    children: [(0, i.jsx)(tm, {
                                        getCardLabels: a,
                                        is_contract_won: h
                                    }), (0, i.jsx)(es.Z, {
                                        weight: "bold",
                                        size: "s",
                                        lineHeight: "2xl",
                                        color: h ? "profit-success" : "loss-danger",
                                        children: (0, i.jsx)(e2.Z, {
                                            amount: d,
                                            currency: t,
                                            has_sign: !0,
                                            show_currency: !0
                                        })
                                    })]
                                })]
                            })
                        })
                    })
                },
                tG = e => {
                    let {
                        children: t,
                        contract_info: s,
                        getCardLabels: a,
                        getContractPath: n,
                        is_multiplier: r,
                        is_positions: o,
                        onClickRemove: c,
                        profit_loss: d,
                        result: u,
                        should_show_result_overlay: h
                    } = e, _ = r ? (0, te.vM)(s) : d;
                    return (0, i.jsxs)(l.Fragment, {
                        children: [h && (0, i.jsx)(tt.Z, {
                            children: (0, i.jsx)(tB, {
                                contract_id: s.contract_id,
                                currency: s.currency,
                                getCardLabels: a,
                                getContractPath: n,
                                is_multiplier: r,
                                is_visible: !!s.is_sold,
                                onClickRemove: c,
                                payout_info: _,
                                result: u || (d >= 0 ? "won" : "lost"),
                                is_positions: o
                            })
                        }), t]
                    })
                };
            tG.Header = e => {
                var t;
                let {
                    contract_info: s,
                    display_name: a,
                    getCardLabels: n,
                    getContractTypeDisplay: r,
                    has_progress_slider: o,
                    id: c,
                    is_sell_requested: d,
                    is_sold: u,
                    is_valid_to_sell: h,
                    onClickSell: _,
                    server_time: x
                } = e, p = s.tick_count ? (0, m.v3q)(s) : null, {
                    growth_rate: j,
                    underlying: v,
                    multiplier: g,
                    contract_type: b,
                    shortcode: y,
                    purchase_time: f,
                    date_expiry: C,
                    tick_count: S,
                    tick_passed: T
                } = s, k = !!s.is_sold || u, w = (0, m.XtD)(b), E = (0, m.xGd)(b), {
                    isMobile: I
                } = (0, N.F)(), A = (0, m.MOe)(b), R = (0, m.L8o)(b), D = (0, m.CY$)({
                    shortcode: y
                }), O = (null === (t = l.useMemo(() => [{
                    is_param_displayed: R,
                    displayed_param: `${r(b??"",{isHighLow:D})} x${g}`.trim()
                }, {
                    is_param_displayed: w,
                    displayed_param: `${(0,m.dR9)(j||0)}%`
                }, {
                    is_param_displayed: A,
                    displayed_param: (0, m.Lp7)(b)
                }], [b, j, g, w, R, A, D]).find(e => e.is_param_displayed)) || void 0 === t ? void 0 : t.displayed_param) || "";
                return (0, i.jsxs)(l.Fragment, {
                    children: [(0, i.jsxs)("div", {
                        className: U()("dc-contract-card__grid", "dc-contract-card__grid-underlying-trade", {
                            "dc-contract-card__grid-underlying-trade--trader": false,
                            "dc-contract-card__grid-underlying-trade--trader--accumulator": false,
                            "dc-contract-card__grid-underlying-trade--trader--sold": (w || A || R) && k
                        }),
                        children: [(0, i.jsxs)("div", {
                            id: "dc-contract_card_underlying_label",
                            className: U()("dc-contract-card__underlying-name", {
                                "dc-contract-card__underlying-name--accumulator": w
                            }),
                            children: [(0, i.jsx)(B, {
                                type: v ? ? "",
                                size: "md"
                            }), (0, i.jsx)(es.Z, {
                                size: "xxs",
                                className: U()("dc-contract-card__symbol", {
                                    "dc-contract-card__symbol--smarttrader-contract": E
                                }),
                                weight: "bold",
                                children: a || s.display_name
                            })]
                        }), (0, i.jsx)("div", {
                            id: "dc-contract_card_type_label",
                            className: U()("dc-contract-card__type", {
                                "dc-contract-card__type--accumulators": w
                            }),
                            children: (0, i.jsx)(tz, {
                                displayed_trade_param: O,
                                getContractTypeDisplay: r,
                                is_high_low: D,
                                is_multipliers: R,
                                is_turbos: A,
                                type: b
                            })
                        }), (0, i.jsx)(eq.Z, {
                            children: h ? (0, i.jsx)(ek.Z, { in: !!h,
                                timeout: 250,
                                classNames: {
                                    enter: "dc-contract-card__sell-button--enter",
                                    enterDone: "dc-contract-card__sell-button--enter-done",
                                    exit: "dc-contract-card__sell-button--exit"
                                },
                                unmountOnExit: !0,
                                children: (0, i.jsx)("div", {
                                    className: "dc-contract-card__sell-button-mobile",
                                    children: (0, i.jsx)(tg.z, {
                                        id: `dc_contract_card_${c}_button`,
                                        className: U()("dc-btn--sell", {
                                            "dc-btn--loading": d
                                        }),
                                        disabled: !h || d,
                                        onClick: () => _(c),
                                        variant: "outlined",
                                        children: n().SELL
                                    })
                                })
                            }) : null
                        })]
                    }), !k && w && (0, i.jsx)(t$, {
                        current_tick: T,
                        max_ticks_duration: S,
                        label: n().TICKS
                    }), (0, i.jsx)(eq.Z, {
                        children: (0, i.jsx)("div", {
                            className: "dc-progress-slider--completed"
                        })
                    }), (0, i.jsxs)(tt.Z, {
                        children: [(!o || !!k) && (0, i.jsx)("div", {
                            className: "dc-progress-slider--completed"
                        }), o && !k && !w && (0, i.jsx)(tZ, {
                            current_tick: p,
                            expiry_time: C,
                            getCardLabels: n,
                            is_loading: !1,
                            server_time: x,
                            start_time: f,
                            ticks_count: S
                        })]
                    })]
                })
            }, tG.Body = e => {
                let t, {
                        addToast: s,
                        contract_info: a,
                        contract_update: n,
                        currency: r,
                        current_focus: o,
                        error_message_alignment: c,
                        getCardLabels: d,
                        getContractById: u,
                        has_progress_slider: h,
                        is_accumulator: _,
                        is_mobile: x,
                        is_multiplier: p,
                        is_positions: j,
                        is_sold: v,
                        is_turbos: g,
                        is_vanilla: b,
                        is_lookbacks: y,
                        onMouseLeave: f,
                        removeToast: N,
                        server_time: C,
                        setCurrentFocus: S,
                        should_show_cancellation_warning: T,
                        toggleCancellationWarning: k
                    } = e,
                    w = (0, m.Kq_)(a),
                    {
                        buy_price: E,
                        sell_price: I,
                        payout: A,
                        profit: R,
                        tick_count: D,
                        date_expiry: O,
                        purchase_time: L
                    } = a,
                    M = D ? (0, m.v3q)(a) : null,
                    {
                        CONTRACT_VALUE: F,
                        POTENTIAL_PAYOUT: P,
                        TOTAL_PROFIT_LOSS: Z,
                        STAKE: z
                    } = d(),
                    $ = (0, i.jsx)(th, {
                        current_tick: M,
                        expiry_time: O,
                        getCardLabels: d,
                        is_loading: !1,
                        server_time: C,
                        start_time: L,
                        ticks_count: D
                    }),
                    B = {
                        addToast: s,
                        current_focus: o,
                        error_message_alignment: c,
                        getContractById: u,
                        onMouseLeave: f,
                        removeToast: N,
                        setCurrentFocus: S,
                        totalProfit: p && !isNaN(Number(R)) ? (0, m.vMw)(a) : Number(R)
                    };
                return t = p ? (0, i.jsx)(tO, {
                    contract_info: a,
                    contract_update: n,
                    currency: r,
                    getCardLabels: d,
                    has_progress_slider: h,
                    progress_slider: $,
                    is_mobile: x,
                    is_sold: v,
                    should_show_cancellation_warning: T,
                    toggleCancellationWarning: k,
                    ...B
                }) : _ ? (0, i.jsx)(tA, {
                    contract_info: a,
                    contract_update: n,
                    currency: r,
                    getCardLabels: d,
                    indicative: w,
                    is_sold: v,
                    is_positions: j,
                    ...B
                }) : g ? (0, i.jsx)(tL, {
                    contract_info: a,
                    contract_update: n,
                    currency: r,
                    getCardLabels: d,
                    is_sold: v,
                    progress_slider_mobile_el: $,
                    ...B
                }) : b ? (0, i.jsx)(tM, {
                    contract_info: a,
                    currency: r,
                    getCardLabels: d,
                    is_sold: v,
                    progress_slider: $
                }) : y ? (0, i.jsx)(tR, {
                    contract_info: a,
                    currency: r,
                    is_sold: v,
                    indicative: w,
                    progress_slider_mobile_el: $
                }) : (0, i.jsxs)(l.Fragment, {
                    children: [(0, i.jsxs)("div", {
                        className: "dc-contract-card-items-wrapper",
                        children: [(0, i.jsxs)(tx, {
                            header: Z,
                            is_crypto: (0, m.oS6)(r),
                            is_loss: 0 > Number(R),
                            is_won: Number(R) > 0,
                            children: [(0, i.jsx)(e2.Z, {
                                amount: R,
                                currency: r
                            }), !v && (0, i.jsx)(tn, {
                                className: "dc-contract-card__indicative--movement",
                                value: R
                            })]
                        }), (0, i.jsxs)(tx, {
                            header: F,
                            children: [(0, i.jsx)("div", {
                                className: U()({
                                    "dc-contract-card--profit": Number(R) > 0,
                                    "dc-contract-card--loss": 0 > Number(R)
                                }),
                                children: (0, i.jsx)(e2.Z, {
                                    currency: r,
                                    amount: Number(I || w)
                                })
                            }), !v && (0, i.jsx)(tn, {
                                className: "dc-contract-card__indicative--movement",
                                value: Number(I || w)
                            })]
                        }), (0, i.jsx)(tx, {
                            header: z,
                            children: (0, i.jsx)(e2.Z, {
                                amount: E,
                                currency: r
                            })
                        }), (0, i.jsx)(tx, {
                            header: P,
                            children: (0, i.jsx)(e2.Z, {
                                currency: r,
                                amount: A
                            })
                        })]
                    }), (0, i.jsx)(eq.Z, {
                        children: (0, i.jsx)("div", {
                            className: "dc-contract-card__status",
                            children: v ? (0, i.jsx)(tm, {
                                getCardLabels: d,
                                is_contract_won: "won" === (0, m.efd)(a)
                            }) : $
                        })
                    })]
                }), (0, i.jsxs)(l.Fragment, {
                    children: [(0, i.jsx)(ti, {
                        currency: r
                    }), (0, i.jsx)(tt.Z, {
                        children: t
                    }), (0, i.jsx)(eq.Z, {
                        children: (0, i.jsx)("div", {
                            className: U()("dc-contract-card__separatorclass", {
                                "dc-contract-card__body-wrapper": !p && !g && !y
                            }),
                            children: t
                        })
                    })]
                })
            }, tG.Footer = e => {
                let {
                    contract_info: t,
                    getCardLabels: s,
                    is_multiplier: a,
                    is_positions: n,
                    is_sell_requested: r,
                    is_lookbacks: o,
                    onClickCancel: c,
                    onClickSell: d,
                    onFooterEntered: u,
                    server_time: h,
                    should_show_transition: _
                } = e, {
                    in_prop: x
                } = (0, m.hwq)(!!_), p = (0, m.Dlf)(t), j = (0, m._mr)(t) && (0, m.FJ7)(t), v = o && (0, m.iBr)(t) && j;
                return j ? (0, i.jsx)(ek.Z, { in: x,
                    timeout: _ ? 250 : 0,
                    classNames: _ ? {
                        enter: "dc-contract-card__sell-button--enter",
                        enterDone: "dc-contract-card__sell-button--enter-done",
                        exit: "dc-contract-card__sell-button--exit"
                    } : {},
                    onEntered: u,
                    unmountOnExit: !0,
                    children: (0, i.jsx)("div", {
                        className: "dc-contract-card-item__footer",
                        children: a ? (0, i.jsx)("div", {
                            className: U()("dc-contract-card__sell-button", {
                                "dc-contract-card__sell-button--has-cancel-btn": p,
                                "dc-contract-card__sell-button--positions": n
                            }),
                            children: (0, i.jsx)(tF, {
                                className: "dc-btn--sell",
                                contract_info: t,
                                getCardLabels: s,
                                is_sell_requested: r,
                                onClickCancel: c,
                                onClickSell: d,
                                server_time: h
                            })
                        }) : (0, i.jsxs)(l.Fragment, {
                            children: [(0, i.jsx)("div", {
                                className: U()("dc-contract-card__sell-button", {
                                    "dc-contract-card__sell-button--positions": n
                                }),
                                children: (0, i.jsx)(tU, {
                                    contract_info: t,
                                    is_sell_requested: r,
                                    getCardLabels: s,
                                    onClickSell: d
                                })
                            }), v && (0, i.jsx)(es.Z, {
                                as: "div",
                                size: "xxxs",
                                color: "less-prominent",
                                lineHeight: "s",
                                className: "lookbacks--note",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "<0>Note:</0> Contract will be sold at the prevailing market price when the request is received by our servers. This price may differ from the indicated price.",
                                    components: [(0, i.jsx)("strong", {}, 0)]
                                })
                            })]
                        })
                    })
                }) : null
            }, tG.Loader = e9, tG.ContractTypeCell = tz, tG.MultiplierCloseActions = tF, tG.Sell = tU;
            let tV = (0, r.Pi)(e => {
                    let {
                        contract_info: t,
                        is_contract_loading: s,
                        is_bot_running: a
                    } = e, {
                        summary_card: n,
                        run_panel: r,
                        ui: o,
                        common: c
                    } = (0, j.oR)(), {
                        is_contract_completed: d,
                        is_contract_inactive: u,
                        is_multiplier: h,
                        is_accumulator: _,
                        setIsBotRunning: x
                    } = n, {
                        onClickSell: p,
                        is_sell_requested: v,
                        contract_stage: g
                    } = r, {
                        addToast: b,
                        current_focus: y,
                        removeToast: C,
                        setCurrentFocus: S
                    } = o, {
                        server_time: T
                    } = c, {
                        isDesktop: k
                    } = (0, N.F)();
                    l.useEffect(() => x(), [s]);
                    let w = (0, i.jsx)(tG.Header, {
                            contract_info: t,
                            getCardLabels: m.gk9,
                            getContractTypeDisplay: e3.h8,
                            has_progress_slider: !h,
                            is_sold: d,
                            server_time: T
                        }),
                        E = (0, i.jsx)(tG.Body, {
                            addToast: b,
                            contract_info: t,
                            currency: (null == t ? void 0 : t.currency) ? ? "",
                            current_focus: y,
                            error_message_alignment: "left",
                            getCardLabels: m.gk9,
                            getContractById: () => n,
                            is_mobile: !k,
                            is_multiplier: h,
                            is_accumulator: _,
                            is_sold: d,
                            removeToast: C,
                            server_time: T,
                            setCurrentFocus: S
                        }),
                        I = (0, i.jsx)(tG.Footer, {
                            contract_info: t,
                            getCardLabels: m.gk9,
                            is_multiplier: h,
                            is_sell_requested: v,
                            onClickSell: p
                        }),
                        A = (0, i.jsxs)(l.Fragment, {
                            children: [w, E, I]
                        });
                    return (0, i.jsxs)("div", {
                        className: U()("db-summary-card", {
                            "db-summary-card--mobile": !k,
                            "db-summary-card--inactive": u && !s && !t,
                            "db-summary-card--completed": d,
                            "db-summary-card--completed-mobile": d && !k,
                            "db-summary-card--delayed-loading": a
                        }),
                        "data-testid": "dt_mock_summary_card",
                        children: [s && !a && (0, i.jsx)(e9, {
                            speed: 2
                        }), a && (0, i.jsx)(e9, {
                            speed: 2,
                            contract_stage: g
                        }), !s && t && !a && (0, i.jsx)(tG, {
                            contract_info: t,
                            getCardLabels: m.gk9,
                            is_multiplier: h,
                            profit_loss: t.profit,
                            should_show_result_overlay: !0,
                            children: (0, i.jsx)("div", {
                                className: U()("dc-contract-card", {
                                    "dc-contract-card--green": t.profit > 0,
                                    "dc-contract-card--red": t.profit < 0
                                }),
                                children: A
                            })
                        }), !s && !t && !a && (0, i.jsxs)(es.Z, {
                            as: "p",
                            align: "center",
                            lineHeight: "s",
                            size: "xs",
                            children: [(0, f.NC)("When you’re ready to trade, hit "), (0, i.jsx)("strong", {
                                className: "summary-panel-inactive__strong",
                                children: (0, f.NC)("Run")
                            }), (0, f.NC)(". You’ll be able to track your bot’s performance here.")]
                        })]
                    })
                }),
                tX = (0, r.Pi)(e => {
                    let {
                        is_drawer_open: t
                    } = e, {
                        dashboard: s,
                        summary_card: a
                    } = (0, j.oR)(), {
                        is_contract_loading: n,
                        contract_info: l,
                        is_bot_running: r
                    } = a, {
                        active_tour: o
                    } = s, {
                        isDesktop: c
                    } = (0, N.F)();
                    return (0, i.jsx)("div", {
                        className: U()({
                            "run-panel-tab__content": c,
                            "run-panel-tab__content--mobile": !c && t,
                            "run-panel-tab__content--summary-tab": c && t || o
                        }),
                        "data-testid": "mock-summary",
                        children: (0, i.jsx)(er.Z, {
                            className: U()({
                                summary: !n && !l || r,
                                "summary--loading": !c && n || !c && !n && l
                            }),
                            children: (0, i.jsx)(tV, {
                                is_contract_loading: n,
                                contract_info: l,
                                is_bot_running: r
                            })
                        })
                    })
                });
            var tH = s("71766"),
                tq = s("54176");
            let tY = e => {
                let {
                    profit: t
                } = e, s = t >= 0;
                return (0, i.jsx)("div", {
                    className: U()("db-contract-card__result", {
                        "db-contract-card__result--won": s,
                        "db-contract-card__result--lost": !s
                    }),
                    children: (0, i.jsx)(es.Z, {
                        weight: "bold",
                        className: "db-contract-card__result-caption",
                        children: s ? (0, i.jsxs)(l.Fragment, {
                            children: [(0, i.jsx)(f.Xx, {
                                i18n_default_text: "Won"
                            }), (0, i.jsx)(tH.Z, {
                                className: "db-contract-card__result-icon",
                                color: "green"
                            })]
                        }) : (0, i.jsxs)(l.Fragment, {
                            children: [(0, i.jsx)(f.Xx, {
                                i18n_default_text: "Lost"
                            }), (0, i.jsx)(tq.Z, {
                                className: "db-contract-card__result-icon",
                                color: "red"
                            })]
                        })
                    })
                })
            };
            var tW = s("16854"),
                tK = s("67109"),
                tJ = s("89057");
            let tQ = e => {
                    let {
                        className: t
                    } = e;
                    return (0, i.jsxs)("div", {
                        className: U()("circular-wrapper", t),
                        children: [(0, i.jsx)("span", {
                            className: "static-circle"
                        }), (0, i.jsx)("span", {
                            className: "dynamic-circle"
                        })]
                    })
                },
                t0 = Object.freeze({
                    NOT_RUNNING: "Bot is not running",
                    STARTING: "Bot is starting",
                    RUNNING: "Bot running",
                    PURCHASE_SENT: "Buying contract",
                    PURCHASE_RECEIVED: "Contract bought",
                    IS_STOPPING: "Bot is stopping",
                    CONTRACT_CLOSED: "Contract closed"
                }),
                t1 = e => {
                    let {
                        contract_stage: t
                    } = e;
                    switch (t) {
                        case ea.K.STARTING:
                            return (0, i.jsx)(f.Xx, {
                                i18n_default_text: t0.STARTING
                            });
                        case ea.K.RUNNING:
                            return (0, i.jsx)(f.Xx, {
                                i18n_default_text: t0.RUNNING
                            });
                        case ea.K.PURCHASE_SENT:
                            return (0, i.jsx)(f.Xx, {
                                i18n_default_text: t0.PURCHASE_SENT
                            });
                        case ea.K.PURCHASE_RECEIVED:
                            return (0, i.jsx)(f.Xx, {
                                i18n_default_text: t0.PURCHASE_RECEIVED
                            });
                        case ea.K.IS_STOPPING:
                            return (0, i.jsx)(f.Xx, {
                                i18n_default_text: t0.IS_STOPPING
                            });
                        case ea.K.CONTRACT_CLOSED:
                            return (0, i.jsx)(f.Xx, {
                                i18n_default_text: t0.CONTRACT_CLOSED
                            });
                        case ea.K.NOT_RUNNING:
                        default:
                            return (0, i.jsx)(f.Xx, {
                                i18n_default_text: t0.NOT_RUNNING
                            })
                    }
                };
            var t5 = s("54798"),
                t2 = s("24335");
            let t8 = (0, r.Pi)(e => {
                    let {
                        className: t,
                        should_show_overlay: s
                    } = e, {
                        dashboard: a,
                        run_panel: n,
                        summary_card: r
                    } = (0, j.oR)(), {
                        isAutoTrading: o,
                        stopSpeedbot: c
                    } = (0, t5.f)(), {
                        client: d
                    } = (0, j.oR)(), {
                        RANDOMBOTS: u
                    } = t2.ve, {
                        active_tab: h
                    } = a, {
                        is_contract_completed: _,
                        profit: m
                    } = r, {
                        contract_stage: x,
                        is_stop_button_visible: p,
                        is_stop_button_disabled: v,
                        onRunButtonClick: g,
                        onStopBotClick: b,
                        performSelfExclusionCheck: y
                    } = n, {
                        account_status: N
                    } = d, C = null == N ? void 0 : N.cashier_validation, [S, T] = l.useState(!1), k = null == C ? void 0 : C.includes("WithdrawServiceUnavailableForPA");
                    l.useEffect(() => {
                        y()
                    }, []), l.useEffect(() => {
                        S && setTimeout(() => {
                            T(!1)
                        }, 1e3)
                    }, [S]);
                    let w = ["", "", ""],
                        E = x === ea.K.PURCHASE_SENT,
                        I = x === ea.K.PURCHASE_RECEIVED,
                        A = x - (E || I ? 2 : 3);
                    if (A >= 0) {
                        A < w.length && (w[A] = "active"), _ && (A += 1);
                        for (let e = 0; e < A - 1; e++) w[e] = "completed"
                    }
                    let R = v || S,
                        D = l.useMemo(() => o ? {
                            id: "db-animation__stop-speedbot-button",
                            class: "animation__stop-button",
                            text: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "Stop Speedbot"
                            }),
                            icon: (0, i.jsx)(tW.Z, {
                                fill: "#fff"
                            })
                        } : p ? {
                            id: "db-animation__stop-button",
                            class: "animation__stop-button",
                            text: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "Stop"
                            }),
                            icon: (0, i.jsx)(tW.Z, {
                                fill: "#fff"
                            })
                        } : {
                            id: "db-animation__run-button",
                            class: "animation__run-button",
                            text: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "Run"
                            }),
                            icon: (0, i.jsx)(tK.Z, {
                                fill: "#fff"
                            })
                        }, [p, o]),
                        O = s && _,
                        L = ["dashboard", "bot_builder", "charts", "tutorials"],
                        M = e => L[e];
                    return (0, i.jsxs)("div", {
                        className: U()("animation__wrapper", t),
                        children: [(h !== u || h === u && o) && (0, i.jsx)(eA.Z, {
                            is_disabled: R && !k,
                            className: D.class,
                            id: D.id,
                            icon: D.icon,
                            onClick: () => {
                                if (T(!0), o) {
                                    c();
                                    return
                                }
                                if (p) {
                                    b();
                                    return
                                }
                                g(), (0, tJ.GE)({
                                    subpage_name: M(h)
                                })
                            },
                            has_effect: !0,
                            ...p || o || !k ? {
                                primary: !0
                            } : {
                                green: !0
                            },
                            children: D.text
                        }), (0, i.jsxs)("div", {
                            className: U()("animation__container", t, {
                                "animation--running": x > 0,
                                "animation--completed": O
                            }),
                            children: [O && (0, i.jsx)(tY, {
                                profit: m
                            }), (0, i.jsx)("span", {
                                className: "animation__text",
                                children: (0, i.jsx)(t1, {
                                    contract_stage: x
                                })
                            }), (0, i.jsxs)("div", {
                                className: "animation__progress",
                                children: [(0, i.jsx)("div", {
                                    className: "animation__progress-line",
                                    children: (0, i.jsx)("div", {
                                        className: `animation__progress-bar animation__progress-${x}`
                                    })
                                }), w.map((e, t) => (0, i.jsx)(tQ, {
                                    className: e
                                }, `status_class-${e}-${t}`))]
                            })]
                        })]
                    })
                }),
                t3 = l.memo(e => {
                    var t, s;
                    let {
                        className: a,
                        column: n,
                        is_footer: l,
                        passthrough: r,
                        row: o
                    } = e;
                    if (!n) return null;
                    let {
                        col_index: c,
                        title: d
                    } = n, u = null == o ? void 0 : o[c], h = (0, m.MOe)(null == o ? void 0 : null === (t = o.contract_info) || void 0 === t ? void 0 : t.contract_type), _ = (0, m.Yeo)(null == o ? void 0 : null === (s = o.contract_info) || void 0 === s ? void 0 : s.contract_type);
                    return (0, i.jsxs)("div", {
                        className: U()(a, n.col_index),
                        children: [!l && (0, i.jsx)("div", {
                            className: U()(`${n.col_index}__row-title`, "data-list__row-title"),
                            children: n.renderHeader ? n.renderHeader({
                                title: d,
                                is_vanilla: _
                            }) : d
                        }), (0, i.jsx)("div", {
                            className: "data-list__row-content",
                            children: n.renderCellContent ? n.renderCellContent({
                                cell_value: u,
                                is_footer: l,
                                passthrough: r,
                                row_obj: o,
                                is_vanilla: _,
                                is_turbos: h
                            }) : u
                        })]
                    })
                }),
                t4 = l.memo(e => {
                    let {
                        action_desc: t,
                        destination_link: s,
                        row_gap: a,
                        row_key: n,
                        rowRenderer: r,
                        measure: o,
                        is_dynamic_height: c,
                        ...d
                    } = e, [u, h] = l.useState(!1), _ = (0, m.tmR)(), x = eu(() => h(!1), 5e3), p = () => {
                        t && (h(!u), x())
                    }, j = e => {
                        (0, m.K9$)(p, e)
                    };
                    return l.useEffect(() => {
                        _() && c && (null == o || o())
                    }, [u, c, o]), (0, i.jsx)("div", {
                        className: "data-list__row--wrapper",
                        style: {
                            paddingBottom: `${a||0}px`
                        },
                        children: s ? (0, i.jsx)(ec.OL, {
                            className: "data-list__item--wrapper",
                            id: `dt_reports_contract_${n}`,
                            to: {
                                pathname: s,
                                state: {
                                    from_table_row: !0
                                }
                            },
                            children: (0, i.jsx)("div", {
                                className: "data-list__item",
                                children: r({
                                    measure: o,
                                    ...d
                                })
                            })
                        }) : (0, i.jsx)("div", {
                            className: U()("data-list__item--wrapper", {
                                "data-list__item--dynamic-height-wrapper": c
                            }),
                            children: t ? (0, i.jsx)("div", {
                                className: "data-list__item",
                                onClick: j,
                                onKeyDown: j,
                                children: u ? (0, i.jsx)("div", {
                                    className: "data-list__desc--wrapper",
                                    children: t.component && (0, i.jsx)("div", {
                                        children: t.component
                                    })
                                }) : r({
                                    measure: o,
                                    ...d
                                })
                            }) : (0, i.jsx)("div", {
                                className: "data-list__item",
                                children: r({
                                    measure: o,
                                    ...d
                                })
                            })
                        })
                    })
                }),
                t7 = el.aV,
                t6 = el.qj,
                t9 = el.Z8,
                se = l.memo(e => {
                    let {
                        children: t,
                        className: s,
                        data_source: a,
                        footer: n,
                        getRowSize: r,
                        keyMapper: o,
                        onRowsRendered: c,
                        onScroll: d,
                        setListRef: u,
                        overscanRowCount: h,
                        ..._
                    } = e, [x, p] = l.useState(!0), [j, v] = l.useState(!1), [g, b] = l.useState(0), y = l.useRef(), f = l.useRef(null), N = l.useRef({}), C = l.useRef(null);
                    C.current = a;
                    let S = !r,
                        T = l.useCallback(() => {
                            a.forEach((e, t) => {
                                let s = (null == o ? void 0 : o(e)) || `${t}-0`;
                                N.current[s] = !0
                            })
                        }, [a, o]);
                    l.useEffect(() => {
                        S && (y.current = new el.t1({
                            fixedWidth: !0,
                            keyMapper: e => (null == C ? void 0 : C.current) && e < (null == C ? void 0 : C.current.length) && (null == o ? void 0 : o(C.current[e])) || e
                        })), T(), p(!1)
                    }, []), l.useEffect(() => {
                        if (S) {
                            var e, t;
                            null === (t = f.current) || void 0 === t || null === (e = t.recomputeGridSize) || void 0 === e || e.call(t, {
                                columnIndex: 0,
                                rowIndex: 0
                            })
                        }
                        T()
                    }, [a, S, T]);
                    let k = e => {
                            let {
                                style: t,
                                index: s,
                                key: n,
                                parent: l
                            } = e, {
                                getRowAction: r,
                                passthrough: c,
                                row_gap: d
                            } = _, u = a[s], {
                                action_type: h,
                                shortcode: x,
                                purchase_time: p,
                                transaction_time: v,
                                id: g
                            } = u;
                            if ((0, m.JIr)(h, x, p || v)) {
                                let e = !!(null == a ? void 0 : a.find(e => "sell" === e.action_type && e.id === g));
                                u = { ...u,
                                    is_sold: e
                                }
                            }
                            let b = r && r(u),
                                f = "string" == typeof b ? b : void 0,
                                C = "object" == typeof b ? b : void 0,
                                T = (null == o ? void 0 : o(u)) || n,
                                k = function() {
                                    let {
                                        measure: e
                                    } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                                    return (0, i.jsx)(t4, {
                                        action_desc: C,
                                        destination_link: f,
                                        is_new_row: !N.current[T],
                                        is_scrolling: j,
                                        measure: e,
                                        passthrough: c,
                                        row_gap: d,
                                        row_key: T,
                                        row: u,
                                        rowRenderer: _.rowRenderer,
                                        is_dynamic_height: S
                                    })
                                };
                            return S && y.current ? (0, i.jsx)(t9, {
                                cache: y.current,
                                columnIndex: 0,
                                rowIndex: s,
                                parent: l,
                                children: e => {
                                    let {
                                        measure: s
                                    } = e;
                                    return (0, i.jsx)("div", {
                                        style: t,
                                        children: k({
                                            measure: s
                                        })
                                    })
                                }
                            }, T) : (0, i.jsx)("div", {
                                style: t,
                                children: k()
                            }, T)
                        },
                        w = e => {
                            let t;
                            clearTimeout(t), !j && v(!0), t = setTimeout(() => {
                                !x && v(!1)
                            }, 200), b(e.target.scrollTop), "function" == typeof d && d(e)
                        },
                        E = e => {
                            f.current = e, null == u || u(e)
                        };
                    return x ? (0, i.jsx)("div", {}) : (0, i.jsxs)("div", {
                        "data-testid": "dt_data_list",
                        className: U()(s, "data-list", {
                            [`${s}__data-list`]: s
                        }),
                        children: [(0, i.jsxs)("div", {
                            className: "data-list__body-wrapper",
                            children: [(0, i.jsx)("div", {
                                className: U()("data-list__body", {
                                    [`${s}__data-list-body`]: s
                                }),
                                children: (0, i.jsx)(t6, {
                                    children: e => {
                                        var t, n;
                                        let {
                                            width: l,
                                            height: o
                                        } = e;
                                        return (0, i.jsx)(ei.Z, {
                                            style: {
                                                height: o,
                                                width: l
                                            },
                                            children: (0, i.jsx)(er.Z, {
                                                onScroll: w,
                                                autohide: !0,
                                                is_bypassed: (0, m.tqC)(),
                                                children: (0, i.jsx)(t7, {
                                                    className: s,
                                                    deferredMeasurementCache: null == y ? void 0 : y.current,
                                                    height: o,
                                                    onRowsRendered: c,
                                                    overscanRowCount: h || 1,
                                                    ref: e => E(e),
                                                    rowCount: a.length,
                                                    rowHeight: S && (null == y ? void 0 : null === (t = y.current) || void 0 === t ? void 0 : t.rowHeight) ? null == y ? void 0 : null === (n = y.current) || void 0 === n ? void 0 : n.rowHeight : r || 0,
                                                    rowRenderer: k,
                                                    scrollingResetTimeInterval: 0,
                                                    width: l,
                                                    ...(0, m.nIE)() ? {
                                                        scrollTop: g,
                                                        autoHeight: !0
                                                    } : {
                                                        onScroll: e => w({
                                                            target: e
                                                        })
                                                    }
                                                })
                                            })
                                        })
                                    }
                                })
                            }), t]
                        }), n && (0, i.jsx)("div", {
                            className: U()("data-list__footer", {
                                [`${s}__data-list-footer`]: s
                            }),
                            children: (0, i.jsx)(l.Fragment, {
                                children: _.rowRenderer({
                                    row: n,
                                    is_footer: !0
                                })
                            })
                        })]
                    })
                });
            se.displayName = "DataList", se.Cell = t3;
            let st = Object.freeze({
                QUICK_STRATEGY: 99999,
                TOOLBAR: 100,
                TRANSACTION: 10,
                SUMMARY_TOOLTIPS: 5,
                RUN_PANEL: 8
            });
            var ss = s("62017"),
                sa = s("49355");
            let sn = e => {
                    let {
                        icon: t,
                        title: s,
                        message: a,
                        className: n
                    } = e;
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsx)(G.Z, {
                            className: U()(n, "transactions__icon"),
                            alignment: (0, z.rK)() ? "right" : "left",
                            message: s,
                            zIndex: st.TRANSACTION.toString(),
                            children: t
                        }), a]
                    })
                },
                si = () => (0, i.jsx)(F.ZP, {
                    className: "transactions__loader-text",
                    height: 10,
                    width: 80,
                    speed: 3,
                    backgroundColor: "var(--general-section-2)",
                    foregroundColor: "var(--general-hover)",
                    children: (0, i.jsx)("rect", {
                        x: "0",
                        y: "0",
                        rx: "0",
                        ry: "0",
                        width: "100",
                        height: "12"
                    })
                }),
                sl = () => (0, i.jsx)(F.ZP, {
                    className: "transactions__loader-icon",
                    speed: 3,
                    width: 24,
                    height: 24,
                    backgroundColor: "var(--general-section-1)",
                    foregroundColor: "var(--general-hover)",
                    children: (0, i.jsx)("rect", {
                        x: "0",
                        y: "0",
                        rx: "5",
                        ry: "5",
                        width: "24",
                        height: "24"
                    })
                }),
                sr = e => {
                    let {
                        icon: t,
                        title: s,
                        children: a
                    } = e;
                    return (0, i.jsxs)("div", {
                        className: "transactions__popover-item",
                        children: [t && (0, i.jsx)("div", {
                            className: "transaction__popover-icon",
                            children: t
                        }), (0, i.jsxs)("div", {
                            className: "transactions__popover-details",
                            children: [(0, i.jsx)("div", {
                                className: "transactions__popover-title",
                                children: s
                            }), a]
                        })]
                    })
                },
                so = e => {
                    let {
                        contract: t
                    } = e;
                    return (0, i.jsx)("div", {
                        className: "transactions__popover-content",
                        children: t.is_virtual_trade ? (0, i.jsx)(sr, {
                            title: (0, f.NC)("Virtual Trade"),
                            children: (0, i.jsx)("div", {
                                className: "transactions__popover-value",
                                children: (0, f.NC)("Executing Virtual Trades")
                            })
                        }) : (0, i.jsxs)(i.Fragment, {
                            children: [t.transaction_ids && (0, i.jsxs)(sr, {
                                title: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Reference IDs"
                                }),
                                children: [t.transaction_ids.buy && (0, i.jsx)("div", {
                                    className: "transactions__popover-value",
                                    children: `${t.transaction_ids.buy} ${(0,f.NC)("(Buy)")}`
                                }), t.transaction_ids.sell && (0, i.jsx)("div", {
                                    className: "transactions__popover-value",
                                    children: `${t.transaction_ids.sell} ${(0,f.NC)("(Sell)")}`
                                })]
                            }), t.tick_count && (0, i.jsx)(sr, {
                                title: (0, f.NC)("Duration"),
                                children: (0, i.jsx)("div", {
                                    className: "transactions__popover-value",
                                    children: `${t.tick_count} ${(0,f.NC)("ticks")}`
                                })
                            }), t.barrier && (0, i.jsx)(sr, {
                                title: (0, f.NC)("Barrier"),
                                children: (0, i.jsx)("div", {
                                    className: "transactions__popover-value",
                                    children: t.barrier
                                })
                            }) || t.high_barrier && t.low_barrier && (0, i.jsxs)(sr, {
                                title: (0, f.NC)("Barriers"),
                                children: [(0, i.jsx)("div", {
                                    className: "transactions__popover-value",
                                    children: `${t.high_barrier} ${(0,f.NC)("(High)")}`
                                }), (0, i.jsx)("div", {
                                    className: "transactions__popover-value",
                                    children: `${t.low_barrier} ${(0,f.NC)("(Low)")}`
                                })]
                            }), t.date_start && (0, i.jsx)(sr, {
                                title: (0, f.NC)("Start time"),
                                children: (0, i.jsx)("div", {
                                    className: "transactions__popover-value",
                                    children: (0, m.fcq)(t.date_start, "YYYY-M-D HH:mm:ss [GMT]", "YYYY-MM-DD HH:mm:ss [GMT]")
                                })
                            }), t.entry_tick && (0, i.jsxs)(sr, {
                                title: (0, f.NC)("Entry spot"),
                                children: [(0, i.jsx)("div", {
                                    className: "transactions__popover-value",
                                    children: t.entry_tick
                                }), t.entry_tick_time && (0, i.jsx)("div", {
                                    className: "transactions__popover-value",
                                    children: (0, m.fcq)(t.entry_tick_time, "YYYY-M-D HH:mm:ss [GMT]", "YYYY-MM-DD HH:mm:ss [GMT]")
                                })]
                            }), t.exit_tick && t.exit_tick_time && (0, i.jsxs)(sr, {
                                title: (0, f.NC)("Exit spot"),
                                children: [(0, i.jsx)("div", {
                                    className: "transactions__popover-value",
                                    children: t.exit_tick
                                }), (0, i.jsx)("div", {
                                    className: "transactions__popover-value",
                                    children: (0, m.fcq)(t.exit_tick_time, "YYYY-M-D HH:mm:ss [GMT]", "YYYY-MM-DD HH:mm:ss [GMT]")
                                })]
                            }) || t.exit_tick && (0, i.jsx)(sr, {
                                title: (0, f.NC)("Exit time"),
                                children: (0, i.jsx)("div", {
                                    className: "transactions__popover-value",
                                    children: t.exit_tick
                                })
                            })]
                        })
                    })
                },
                sc = e => {
                    var t, s;
                    let {
                        contract: a,
                        active_transaction_id: n,
                        onClickTransaction: l
                    } = e;
                    return (0, i.jsx)(G.Z, {
                        zIndex: st.TRANSACTION.toString(),
                        alignment: (0, z.rK)() ? "right" : "left",
                        className: "transactions__item-wrapper",
                        is_open: !!(a && n === (null == a ? void 0 : null === (t = a.transaction_ids) || void 0 === t ? void 0 : t.buy)),
                        message: a && (0, i.jsx)(so, {
                            contract: a
                        }),
                        children: (0, i.jsxs)("div", {
                            "data-testid": "dt_transactions_item",
                            className: "transactions__item",
                            onClick: () => {
                                var e;
                                return l && l((null == a ? void 0 : null === (e = a.transaction_ids) || void 0 === e ? void 0 : e.buy) || null)
                            },
                            children: [(0, i.jsxs)("div", {
                                className: "transactions__cell transactions__trade-type",
                                children: [(0, i.jsx)("div", {
                                    className: "transactions__loader-container",
                                    children: a ? (0, i.jsx)(sn, {
                                        icon: (0, i.jsx)(B, {
                                            type: a.underlying
                                        }),
                                        title: a.display_name || ""
                                    }) : (0, i.jsx)(sl, {})
                                }), (0, i.jsx)("div", {
                                    className: "transactions__loader-container",
                                    children: a ? (0, i.jsx)(sn, {
                                        icon: (0, i.jsx)(X, {
                                            type: a.contract_type || "",
                                            size: "sm"
                                        }),
                                        title: (0, Z.getContractTypeName)(a)
                                    }) : (0, i.jsx)(sl, {})
                                })]
                            }), (0, i.jsx)("div", {
                                className: "transactions__cell transactions__entry-spot",
                                children: (0, i.jsx)(sn, {
                                    icon: (0, i.jsx)(ss.Z, {
                                        height: 10,
                                        width: 10
                                    }),
                                    title: (0, f.NC)("Entry spot"),
                                    message: (null == a ? void 0 : a.entry_tick) ? ? (0, i.jsx)(si, {})
                                })
                            }), (0, i.jsx)("div", {
                                className: "transactions__cell transactions__exit-spot",
                                children: (0, i.jsx)(sn, {
                                    icon: (0, i.jsx)(sa.C, {
                                        height: 10,
                                        width: 10
                                    }),
                                    title: (0, f.NC)("Exit spot"),
                                    message: (null == a ? void 0 : a.exit_tick) ? ? (0, i.jsx)(si, {})
                                })
                            }), (0, i.jsx)("div", {
                                className: "transactions__cell transactions__stake",
                                children: a ? a.is_virtual_trade ? (0, i.jsx)("div", {
                                    children: (0, f.NC)("Virtual Hook")
                                }) : (0, i.jsx)(e2.Z, {
                                    amount: a.buy_price,
                                    currency: a.currency,
                                    show_currency: !0
                                }) : (0, i.jsx)(si, {})
                            }), (0, i.jsx)("div", {
                                className: "transactions__cell transactions__profit",
                                children: a && a.is_completed ? (0, i.jsx)("div", {
                                    className: (s = a).is_virtual_trade ? U()({
                                        "transactions__virtual_profit--win": s.profit >= 0,
                                        "transactions__virtual_profit--loss": s.profit < 0
                                    }) : U()({
                                        "transactions__profit--win": s.profit >= 0,
                                        "transactions__profit--loss": s.profit < 0
                                    }),
                                    children: a.is_virtual_trade ? (0, i.jsx)("div", {
                                        children: a.profit >= 0 ? (0, f.NC)("virtual won") : (0, f.NC)("virtual lost")
                                    }) : (0, i.jsx)(e2.Z, {
                                        amount: Math.abs(a.profit),
                                        currency: a.currency,
                                        show_currency: !0
                                    })
                                }) : (0, i.jsx)(si, {})
                            })]
                        })
                    })
                },
                sd = e => {
                    let {
                        row: t = !1,
                        onClickTransaction: s,
                        active_transaction_id: a
                    } = e;
                    switch (t.type) {
                        case P.i.CONTRACT:
                            {
                                let {
                                    data: e
                                } = t;
                                return (0, i.jsx)(sc, {
                                    contract: e,
                                    onClickTransaction: s,
                                    active_transaction_id: a
                                })
                            }
                        case P.i.DIVIDER:
                            return (0, i.jsx)("div", {
                                className: "transactions__divider",
                                children: (0, i.jsx)("div", {
                                    className: "transactions__divider-line"
                                })
                            });
                        default:
                            return null
                    }
                },
                su = (0, r.Pi)(e => {
                    let {
                        is_drawer_open: t
                    } = e, [s, a] = l.useState(null), {
                        run_panel: n,
                        transactions: r
                    } = (0, j.oR)(), {
                        contract_stage: o
                    } = n, {
                        transactions: c,
                        toggleTransactionDetailsModal: d,
                        recoverPendingContracts: u
                    } = r, {
                        isDesktop: h
                    } = (0, N.F)();
                    l.useEffect(() => (window.addEventListener("click", _), u(), () => {
                        window.removeEventListener("click", _)
                    }), []), l.useEffect(() => {
                        s && a(null)
                    }, [null == c ? void 0 : c.length]);
                    let _ = e => {
                            !((null == e ? void 0 : e.composedPath()) || []).some(e => {
                                var t;
                                return null === (t = e.classList) || void 0 === t ? void 0 : t.contains("transactions__item-wrapper")
                            }) && a(null)
                        },
                        m = e => {
                            e && s === e ? a(null) : a(e)
                        };
                    return (0, i.jsxs)("div", {
                        className: U()("transactions", {
                            "run-panel-tab__content": h,
                            "run-panel-tab__content--mobile": !h && t
                        }),
                        children: [(0, i.jsxs)("div", {
                            className: "download__container transaction-details__button-container",
                            children: [(0, i.jsx)(eR, {
                                tab: "transactions"
                            }), (0, i.jsx)(eA.Z, {
                                id: "download__container__view-detail-button",
                                className: "download__container__view-detail-button",
                                disabled: !(null == c ? void 0 : c.length),
                                onClick: () => {
                                    d(!0)
                                },
                                secondary: !0,
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "View Detail"
                                })
                            })]
                        }), (0, i.jsxs)("div", {
                            className: "transactions__header",
                            children: [(0, i.jsx)("span", {
                                className: "transactions__header-column transactions__header-type",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Type"
                                })
                            }), (0, i.jsx)("span", {
                                className: "transactions__header-column transactions__header-spot",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Entry/Exit spot"
                                })
                            }), (0, i.jsx)("span", {
                                className: "transactions__header-column transactions__header-profit",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Buy price and P/L"
                                })
                            })]
                        }), (0, i.jsx)("div", {
                            className: U()({
                                transactions__content: h,
                                "transactions__content--mobile": !h
                            }),
                            children: (0, i.jsx)("div", {
                                className: "transactions__scrollbar",
                                children: (null == c ? void 0 : c.length) ? (0, i.jsx)(se, {
                                    className: "transactions",
                                    data_source: c,
                                    rowRenderer: e => (0, i.jsx)(sd, {
                                        onClickTransaction: m,
                                        active_transaction_id: s,
                                        ...e
                                    }),
                                    keyMapper: e => {
                                        switch (e.type) {
                                            case P.i.CONTRACT:
                                                return e.data.transaction_ids.buy;
                                            case P.i.DIVIDER:
                                                return e.data;
                                            default:
                                                return null
                                        }
                                    },
                                    getRowSize: e => {
                                        let {
                                            index: t
                                        } = e;
                                        switch ((null == c ? void 0 : c[t]).type) {
                                            case P.i.CONTRACT:
                                                return 50;
                                            case P.i.DIVIDER:
                                                return 21;
                                            default:
                                                return 0
                                        }
                                    }
                                }) : (0, i.jsx)(i.Fragment, {
                                    children: o >= ea.K.STARTING ? (0, i.jsx)(sc, {
                                        contract: null
                                    }) : (0, i.jsx)(er.Z, {
                                        children: (0, i.jsx)("div", {
                                            className: "transactions-empty-box",
                                            children: (0, i.jsxs)("div", {
                                                className: "transactions-empty",
                                                children: [(0, i.jsx)("div", {
                                                    className: "transactions-empty__icon-box",
                                                    children: (0, i.jsx)(en.Z, {
                                                        height: "64px",
                                                        width: "64px",
                                                        className: "transactions-empty__icon icon-general-fill-g-path",
                                                        color: "secondary",
                                                        fill: "var(--text-general)"
                                                    })
                                                }), (0, i.jsx)(es.Z, {
                                                    as: "h4",
                                                    size: "xs",
                                                    weight: "bold",
                                                    align: "center",
                                                    color: "less-prominent",
                                                    lineHeight: "xxs",
                                                    className: "transactions-empty__header",
                                                    children: (0, i.jsx)(f.Xx, {
                                                        i18n_default_text: "There are no transactions to display"
                                                    })
                                                }), (0, i.jsxs)("div", {
                                                    className: "transactions-empty__message",
                                                    children: [(0, i.jsx)(es.Z, {
                                                        size: "xxs",
                                                        color: "less-prominent",
                                                        children: (0, i.jsx)(f.Xx, {
                                                            i18n_default_text: "Here are the possible reasons:"
                                                        })
                                                    }), (0, i.jsxs)("ul", {
                                                        className: "transactions-empty__list",
                                                        children: [(0, i.jsx)("li", {
                                                            children: (0, i.jsx)(es.Z, {
                                                                size: "xs",
                                                                color: "less-prominent",
                                                                children: (0, i.jsx)(f.Xx, {
                                                                    i18n_default_text: "The bot is not running"
                                                                })
                                                            })
                                                        }), (0, i.jsx)("li", {
                                                            children: (0, i.jsx)(es.Z, {
                                                                size: "xs",
                                                                color: "less-prominent",
                                                                children: (0, i.jsx)(f.Xx, {
                                                                    i18n_default_text: "The stats are cleared"
                                                                })
                                                            })
                                                        })]
                                                    })]
                                                })]
                                            })
                                        })
                                    })
                                })
                            })
                        })]
                    })
                }),
                sh = e => {
                    let {
                        content: t,
                        contentClassName: s,
                        title: a
                    } = e;
                    return (0, i.jsxs)("div", {
                        className: "run-panel__tile",
                        children: [(0, i.jsx)("div", {
                            className: "run-panel__tile-title",
                            children: a
                        }), (0, i.jsx)("div", {
                            className: U()("run-panel__tile-content", s),
                            children: t
                        })]
                    })
                },
                s_ = e => {
                    let {
                        currency: t,
                        is_mobile: s,
                        lost_contracts: a,
                        number_of_runs: n,
                        total_stake: l,
                        total_payout: r,
                        toggleStatisticsInfoModal: o,
                        total_profit: c,
                        won_contracts: d
                    } = e;
                    return (0, i.jsxs)("div", {
                        className: U()("run-panel__stat", {
                            "run-panel__stat--mobile": s
                        }),
                        children: [(0, i.jsx)("div", {
                            className: "run-panel__stat--info",
                            onClick: o,
                            children: (0, i.jsx)("div", {
                                className: "run-panel__stat--info-item",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "What's this?"
                                })
                            })
                        }), (0, i.jsxs)("div", {
                            className: "run-panel__stat--tiles",
                            children: [(0, i.jsx)(sh, {
                                title: (0, f.NC)("Total stake"),
                                alignment: "top",
                                content: (0, i.jsx)(e2.Z, {
                                    amount: l,
                                    currency: t,
                                    show_currency: !0
                                })
                            }), (0, i.jsx)(sh, {
                                title: (0, f.NC)("Total payout"),
                                alignment: "top",
                                content: (0, i.jsx)(e2.Z, {
                                    amount: r,
                                    currency: t,
                                    show_currency: !0
                                })
                            }), (0, i.jsx)(sh, {
                                title: (0, f.NC)("No. of runs"),
                                alignment: "top",
                                content: n
                            }), (0, i.jsx)(sh, {
                                title: (0, f.NC)("Contracts lost"),
                                alignment: "bottom",
                                content: a
                            }), (0, i.jsx)(sh, {
                                title: (0, f.NC)("Contracts won"),
                                alignment: "bottom",
                                content: d
                            }), (0, i.jsx)(sh, {
                                title: (0, f.NC)("Total profit/loss"),
                                content: (0, i.jsx)(e2.Z, {
                                    amount: c,
                                    currency: t,
                                    has_sign: !0,
                                    show_currency: !0
                                }),
                                alignment: "bottom",
                                contentClassName: U()("run-panel__stat-amount", {
                                    "run-panel__stat-amount--positive": c > 0,
                                    "run-panel__stat-amount--negative": c < 0
                                })
                            })]
                        })]
                    })
                },
                sm = e => {
                    let {
                        is_clear_stat_disabled: t,
                        is_mobile: s,
                        is_drawer_open: a,
                        onClearStatClick: n
                    } = e;
                    return s && a && (0, i.jsx)(eA.Z, {
                        id: "db-run-panel__clear-button",
                        className: "run-panel__clear-button",
                        disabled: t,
                        text: (0, f.NC)("Reset"),
                        onClick: n,
                        secondary: !0
                    })
                },
                sx = e => {
                    let {
                        active_index: t,
                        is_drawer_open: s,
                        active_tour: a,
                        setActiveTabIndex: n,
                        ...l
                    } = e;
                    return (0, i.jsxs)(i.Fragment, {
                        children: [(0, i.jsxs)(e8.Z, {
                            active_index: t,
                            onTabItemClick: n,
                            top: !0,
                            children: [(0, i.jsx)("div", {
                                id: "db-run-panel-tab__summary",
                                label: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Summary"
                                }),
                                children: (0, i.jsx)(tX, {
                                    is_drawer_open: s
                                })
                            }), (0, i.jsx)("div", {
                                id: "db-run-panel-tab__transactions",
                                label: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Transactions"
                                }),
                                children: (0, i.jsx)(su, {
                                    is_drawer_open: s
                                })
                            }), (0, i.jsx)("div", {
                                id: "db-run-panel-tab__journal",
                                label: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Journal"
                                }),
                                children: (0, i.jsx)(eL, {})
                            })]
                        }), (s && 2 !== t || a) && (0, i.jsx)(s_, { ...l
                        })]
                    })
                },
                sp = e => {
                    let {
                        is_clear_stat_disabled: t,
                        onClearStatClick: s
                    } = e;
                    return (0, i.jsx)("div", {
                        className: "run-panel__footer",
                        children: (0, i.jsx)(eA.Z, {
                            id: "db-run-panel__clear-button",
                            className: "run-panel__footer-button",
                            disabled: t,
                            onClick: s,
                            has_effect: !0,
                            secondary: !0,
                            children: (0, i.jsx)("span", {
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Reset"
                                })
                            })
                        })
                    })
                },
                sj = () => {
                    let {
                        dashboard: e
                    } = (0, j.oR)(), {
                        active_tab: t
                    } = e;
                    return (0, i.jsx)("div", {
                        className: "controls__section",
                        children: (0, i.jsx)("div", {
                            className: "controls__buttons",
                            children: (0, i.jsx)(t8, {
                                className: "controls__animation",
                                should_show_overlay: !0
                            })
                        })
                    })
                },
                sv = e => {
                    let {
                        is_mobile: t,
                        is_statistics_info_modal_open: s,
                        toggleStatisticsInfoModal: a
                    } = e;
                    return (0, i.jsx)(C.Z, {
                        className: U()("statistics__modal", {
                            "statistics__modal--mobile": t
                        }),
                        title: (0, f.NC)("What's this?"),
                        is_open: s,
                        toggleModal: a,
                        width: "440px",
                        children: (0, i.jsx)(C.Z.Body, {
                            children: (0, i.jsx)("div", {
                                className: U()("statistics__modal-body", {
                                    "statistics__modal-body--mobile": t
                                }),
                                children: (0, i.jsxs)(er.Z, {
                                    className: "statistics__modal-scrollbar",
                                    children: [(0, i.jsx)(es.Z, {
                                        as: "p",
                                        weight: "bold",
                                        className: "statistics__modal-body--content no-margin",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Total stake"
                                        })
                                    }), (0, i.jsx)(es.Z, {
                                        as: "p",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Total stake since you last cleared your stats."
                                        })
                                    }), (0, i.jsx)(es.Z, {
                                        as: "p",
                                        weight: "bold",
                                        className: "statistics__modal-body--content",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Total payout"
                                        })
                                    }), (0, i.jsx)(es.Z, {
                                        as: "p",
                                        children: (0, f.NC)("Total payout since you last cleared your stats.")
                                    }), (0, i.jsx)(es.Z, {
                                        as: "p",
                                        weight: "bold",
                                        className: "statistics__modal-body--content",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "No. of runs"
                                        })
                                    }), (0, i.jsx)(es.Z, {
                                        as: "p",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "The number of times your bot has run since you last cleared your stats. Each run includes the execution of all the root blocks."
                                        })
                                    }), (0, i.jsx)(es.Z, {
                                        as: "p",
                                        weight: "bold",
                                        className: "statistics__modal-body--content",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Contracts lost"
                                        })
                                    }), (0, i.jsx)(es.Z, {
                                        as: "p",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "The number of contracts you have lost since you last cleared your stats."
                                        })
                                    }), (0, i.jsx)(es.Z, {
                                        as: "p",
                                        weight: "bold",
                                        className: "statistics__modal-body--content",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Contracts won"
                                        })
                                    }), (0, i.jsx)(es.Z, {
                                        as: "p",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "The number of contracts you have won since you last cleared your stats."
                                        })
                                    }), (0, i.jsx)(es.Z, {
                                        as: "p",
                                        weight: "bold",
                                        className: "statistics__modal-body--content",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Total profit/loss"
                                        })
                                    }), (0, i.jsx)(es.Z, {
                                        as: "p",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Your total profit/loss since you last cleared your stats. It is the difference between your total payout and your total stake."
                                        })
                                    })]
                                })
                            })
                        })
                    })
                },
                sg = (0, r.Pi)(() => {
                    let {
                        run_panel: e,
                        dashboard: t,
                        transactions: s
                    } = (0, j.oR)(), {
                        client: a
                    } = (0, j.oR)(), {
                        isDesktop: n
                    } = (0, N.F)(), {
                        currency: r
                    } = a, {
                        active_index: o,
                        is_drawer_open: c,
                        is_statistics_info_modal_open: d,
                        is_clear_stat_disabled: u,
                        onClearStatClick: h,
                        onMount: _,
                        onRunButtonClick: m,
                        onUnmount: x,
                        setActiveTabIndex: p,
                        toggleDrawer: v,
                        toggleStatisticsInfoModal: g
                    } = e, {
                        statistics: b
                    } = s, {
                        active_tour: y,
                        active_tab: f
                    } = t, {
                        total_payout: C,
                        total_profit: S,
                        total_stake: T,
                        won_contracts: k,
                        lost_contracts: w,
                        number_of_runs: E
                    } = b, {
                        RANDOMBOTS: I,
                        DASHBOARD: A,
                        BOT_BUILDER: R,
                        FREEBOTS: D,
                        ANALYSISTOOL: O,
                        SIGNALS: L,
                        CHART: M,
                        COPYTRADING: F
                    } = t2.ve;
                    l.useEffect(() => (_(), () => x()), [_, x]), l.useEffect(() => {
                        !n && v(!1)
                    }, []);
                    let P = (0, i.jsx)(sx, {
                            active_index: o,
                            currency: r,
                            is_drawer_open: c,
                            is_mobile: !n,
                            lost_contracts: w,
                            number_of_runs: E,
                            setActiveTabIndex: p,
                            toggleStatisticsInfoModal: g,
                            total_payout: C,
                            total_profit: S,
                            total_stake: T,
                            won_contracts: k,
                            active_tour: y
                        }),
                        Z = (0, i.jsx)(sp, {
                            is_clear_stat_disabled: u,
                            onClearStatClick: h
                        }),
                        z = (0, i.jsx)(sm, {
                            is_clear_stat_disabled: u,
                            is_mobile: !n,
                            is_drawer_open: c,
                            onClearStatClick: h
                        });
                    return !([I, A, R, D, O, L, M, F].includes(f) || y) && n || "bot_builder" === y ? null : (0, i.jsxs)(i.Fragment, {
                        children: [(0, i.jsxs)("div", {
                            className: !n && c ? "run-panel__container--mobile" : "run-panel",
                            children: [(0, i.jsx)(e5, {
                                anchor: "right",
                                className: U()("run-panel", {
                                    "run-panel__container": n,
                                    "run-panel__container--tour-active": n && y
                                }),
                                contentClassName: "run-panel__content",
                                header: z,
                                footer: n && Z,
                                is_open: c,
                                toggleDrawer: v,
                                width: 366,
                                zIndex: st.RUN_PANEL,
                                children: P
                            }), !n && (0, i.jsx)(sj, {})]
                        }), (0, i.jsx)(eQ, {
                            onRunButtonClick: m
                        }), (0, i.jsx)(sv, {
                            is_mobile: !n,
                            is_statistics_info_modal_open: d,
                            toggleStatisticsInfoModal: g
                        })]
                    })
                }),
                sb = e => {
                    let {
                        body_className: t,
                        className: s,
                        should_header_stick_body: a,
                        header: n,
                        header_background_color: r,
                        height_offset: o = "0px",
                        is_flex: c,
                        is_popup: d,
                        is_modal_open: u,
                        onClickClose: h,
                        renderPageFooterChildren: _,
                        page_footer_className: m,
                        page_footer_parent: x,
                        page_footer_parent_className: p,
                        page_header_className: j,
                        page_header_text: v,
                        renderPageHeaderTrailingIcon: g,
                        pageHeaderReturnFn: b,
                        renderPageHeader: y,
                        renderPageHeaderElement: f,
                        children: N,
                        container_children: C
                    } = e;
                    return (0, i.jsx)(eG, {
                        is_visible: u,
                        className: U()("dc-mobile-full-page-modal", s),
                        keyname: `${s}__wrapper`,
                        children: (0, i.jsx)(eK, {
                            header: n,
                            onClickClose: h,
                            children: (0, i.jsxs)(eP.Z, {
                                className: U()("dc-mobile-full-page-modal", {
                                    "dc-mobile-full-page-modal--flex": c,
                                    "dc-mobile-full-page-modal--popup": d
                                }),
                                height_offset: o,
                                children: [(y || v || f) && (0, i.jsxs)("div", {
                                    className: U()("dc-mobile-full-page-modal__header", {
                                        "dc-mobile-full-page-modal__header--border-bottom": !a,
                                        ...j ? {
                                            [j]: !!j
                                        } : {}
                                    }),
                                    style: {
                                        background: r
                                    },
                                    children: [b && (0, i.jsx)("div", {
                                        className: "dc-mobile-full-page-modal__header-return",
                                        children: (0, i.jsx)(eW.Z, {
                                            onClick: b,
                                            "data-testid": "dt_mobile_full_page_return_icon"
                                        })
                                    }), y && y(), (0, i.jsx)("div", {
                                        className: "dc-mobile-full-page-modal__header-text",
                                        children: f ? ? (0, i.jsx)(es.Z, {
                                            as: "p",
                                            color: "prominent",
                                            lineHeight: "m",
                                            size: "s",
                                            weight: "bold",
                                            children: v
                                        })
                                    }), g && (0, i.jsx)("div", {
                                        className: "dc-mobile-full-page-modal__header-trailing-icon",
                                        children: g()
                                    })]
                                }), (0, i.jsx)("div", {
                                    className: U()("dc-mobile-full-page-modal__body", t),
                                    children: N
                                }), _ && (0, i.jsxs)(l.Fragment, {
                                    children: [x && (0, i.jsx)("div", {
                                        className: U()("dc-mobile-full-page-modal__footer-parent", p),
                                        children: x
                                    }), (0, i.jsx)("div", {
                                        className: U()("dc-mobile-full-page-modal__footer", m),
                                        children: _()
                                    })]
                                }), C]
                            })
                        })
                    })
                },
                sy = "transaction-details-modal-mobile",
                sf = () => (0, i.jsx)(F.ZP, {
                    className: "transactions__loader-text",
                    "data-testid": "transaction_details_card_cell_loader",
                    height: 10,
                    width: 80,
                    speed: 3,
                    foregroundColor: "var(--general-section-2)",
                    backgroundColor: "var(--general-hover)",
                    children: (0, i.jsx)("rect", {
                        x: "0",
                        y: "0",
                        rx: "0",
                        ry: "0",
                        width: "100",
                        height: "12"
                    })
                }),
                sN = e => {
                    let {
                        label: t = "",
                        large_title: s = !1,
                        right_aligned: a = !1,
                        title: n = "",
                        loader: l = !1
                    } = e;
                    return (0, i.jsxs)("div", {
                        className: U()(`${sy}__card__column`, {
                            [`${sy}__right-align`]: a
                        }),
                        children: [n && (0, i.jsx)("div", {
                            className: U()({
                                [`${sy}__small-title`]: !s,
                                [`${sy}__large-title`]: s
                            }),
                            children: (0, f.NC)(n)
                        }), (0, i.jsx)("div", {
                            className: `${sy}__label`,
                            children: l ? (0, i.jsx)(sf, {}) : t
                        })]
                    })
                },
                sC = e => {
                    let {
                        message: t,
                        icon: s
                    } = e;
                    return (0, i.jsx)("div", {
                        className: U()(`${sy}__table-cell`, `${sy}__table-cell__icon-wrapper`),
                        children: t && (0, i.jsx)(G.Z, {
                            alignment: (0, z.rK)() ? "left" : "right",
                            message: t,
                            zIndex: "7",
                            children: s
                        })
                    })
                };

            function sS(e) {
                var t;
                let {
                    transaction: s
                } = e;
                return (0, i.jsxs)("div", {
                    className: `${sy}__card`,
                    "data-testid": "dt_mobile_transaction_card",
                    children: [(0, i.jsx)("div", {
                        className: `${sy}__card__row`,
                        children: (0, i.jsx)(sN, {
                            label: (0, i.jsxs)("div", {
                                className: `${sy}__icon-wrapper`,
                                children: [(0, i.jsx)(sC, {
                                    message: null == s ? void 0 : s.display_name,
                                    icon: (0, i.jsx)(B, {
                                        type: null == s ? void 0 : s.underlying,
                                        size: "md"
                                    })
                                }), (0, i.jsx)(sC, {
                                    message: (0, Z.getContractTypeName)(s),
                                    icon: (0, i.jsx)(X, {
                                        type: null == s ? void 0 : s.contract_type,
                                        size: "md"
                                    })
                                })]
                            })
                        })
                    }), (0, i.jsx)("div", {
                        className: `${sy}__card__row`,
                        children: (0, i.jsx)(sN, {
                            title: "Ref. ID",
                            label: null == s ? void 0 : null === (t = s.transaction_ids) || void 0 === t ? void 0 : t.buy
                        })
                    }), (0, i.jsxs)("div", {
                        className: `${sy}__card__row`,
                        children: [(0, i.jsx)(sN, {
                            title: "Timestamp",
                            label: (0, m.fcq)(null == s ? void 0 : s.date_start, "YYYY-M-D HH:mm:ss [GMT]", "YYYY-MM-DD HH:mm:ss [GMT]")
                        }), (0, i.jsx)(sN, {
                            title: "Entry Spot",
                            label: null == s ? void 0 : s.entry_tick,
                            right_aligned: !0,
                            loader: !s.entry_tick
                        })]
                    }), (0, i.jsxs)("div", {
                        className: `${sy}__card__row`,
                        children: [(0, i.jsx)(sN, {
                            title: "Buy Price",
                            label: Math.abs((null == s ? void 0 : s.buy_price) ? ? 0).toFixed(2)
                        }), (0, i.jsx)(sN, {
                            title: "Exit Spot",
                            label: null == s ? void 0 : s.exit_tick,
                            right_aligned: !0,
                            loader: !s.exit_tick
                        })]
                    }), (0, i.jsxs)("div", {
                        className: `${sy}__card__row`,
                        children: [(0, i.jsx)(sN, {
                            title: "Profit / Loss",
                            large_title: !0
                        }), (0, i.jsx)(sN, {
                            label: (0, i.jsx)("div", {
                                className: U()({
                                    [`${sy}__card__profit--win`]: (null == s ? void 0 : s.profit) > 0,
                                    [`${sy}__card__profit--loss`]: (null == s ? void 0 : s.profit) < 0
                                }),
                                children: Math.abs((null == s ? void 0 : s.profit) ? ? 0).toFixed(2)
                            }),
                            right_aligned: !0,
                            loader: !s.is_completed
                        })]
                    })]
                })
            }
            let sT = (0, r.Pi)(() => {
                    let {
                        client: e
                    } = (0, j.oR)(), {
                        transactions: t,
                        run_panel: s
                    } = (0, j.oR)(), {
                        toggleTransactionDetailsModal: a,
                        is_transaction_details_modal_open: n,
                        transactions: l,
                        statistics: r
                    } = t, {
                        toggleStatisticsInfoModal: o
                    } = s;
                    return (0, i.jsxs)(sb, {
                        is_modal_open: n,
                        className: "transaction-details-modal-mobile",
                        header: (0, f.NC)("Transactions detailed summary"),
                        onClickClose: () => {
                            a(!1)
                        },
                        height_offset: "80px",
                        children: [(0, i.jsx)("div", {
                            className: "transaction-details-modal-mobile__wrapper",
                            "data-testid": "transaction_details_cards",
                            children: null == l ? void 0 : l.map(e => {
                                var t;
                                let {
                                    data: s,
                                    type: a
                                } = e;
                                return a === P.i.CONTRACT ? (0, i.jsx)(sS, {
                                    transaction: s
                                }, null == s ? void 0 : null === (t = s.transaction_ids) || void 0 === t ? void 0 : t.buy) : (0, i.jsx)("div", {
                                    className: "transaction-details-modal-mobile__divider",
                                    children: (0, i.jsx)("div", {
                                        className: "transactions__divider-line"
                                    })
                                }, `transaction-row-divider-${s}`)
                            })
                        }), (0, i.jsx)("div", {
                            className: "transaction-details-modal-mobile__card__footer",
                            children: (0, i.jsx)(s_, {
                                is_mobile: !0,
                                currency: null == e ? void 0 : e.currency,
                                lost_contracts: (null == r ? void 0 : r.lost_contracts) ? ? 0,
                                number_of_runs: (null == r ? void 0 : r.number_of_runs) ? ? 0,
                                total_payout: (null == r ? void 0 : r.total_payout) ? ? 0,
                                total_profit: (null == r ? void 0 : r.total_profit) ? ? 0,
                                total_stake: (null == r ? void 0 : r.total_stake) ? ? 0,
                                won_contracts: (null == r ? void 0 : r.won_contracts) ? ? 0,
                                toggleStatisticsInfoModal: o
                            })
                        })]
                    })
                }),
                sk = (0, r.Pi)(() => {
                    let {
                        isDesktop: e
                    } = (0, N.F)();
                    return (0, i.jsx)(l.Suspense, {
                        fallback: (0, i.jsx)(T.a, {}),
                        children: e ? (0, i.jsx)(et, {}) : (0, i.jsx)(sT, {})
                    })
                });
            var sw = s("87383"),
                sE = s("89064"),
                sI = s("46543");
            let sA = e => {
                let {
                    featureFlagValue: t
                } = (0, sI.Z)({
                    featureFlag: "enable_intercom_dbot"
                }), s = (0, ed.Gq)(t ? "https://static.deriv.com/scripts/intercom/v1.0.2.js" : null);
                (0, l.useEffect)(() => {
                    var a;
                    let n;
                    if (!!t && "ready" === s && !!(null === (a = window) || void 0 === a ? void 0 : a.DerivInterCom)) return window.DerivInterCom.initialize({
                        hideLauncher: !0,
                        token: e
                    }), n = setInterval(() => {
                        var e;
                        (null === (e = window) || void 0 === e ? void 0 : e.Intercom) && clearInterval(n)
                    }, 500), () => {
                        clearInterval(n)
                    }
                }, [t, s, e])
            };
            var sR = s("83257"),
                sD = s("6388");
            let {
                TRACKJS_TOKEN: sO
            } = {
                TRANSLATIONS_CDN_URL: void 0,
                R2_PROJECT_NAME: void 0,
                CROWDIN_BRANCH_NAME: void 0,
                TRACKJS_TOKEN: void 0,
                APP_ENV: void 0,
                REF_NAME: void 0,
                REMOTE_CONFIG_URL: void 0,
                GD_CLIENT_ID: void 0,
                GD_APP_ID: void 0,
                GD_API_KEY: void 0,
                DATADOG_SESSION_REPLAY_SAMPLE_RATE: void 0,
                DATADOG_SESSION_SAMPLE_RATE: void 0,
                DATADOG_APPLICATION_ID: void 0,
                DATADOG_CLIENT_TOKEN: void 0,
                RUDDERSTACK_KEY: void 0,
                GROWTHBOOK_CLIENT_KEY: void 0,
                GROWTHBOOK_DECRYPTION_KEY: void 0
            }, sL = () => ({
                initTrackJS: e => {
                    try {
                        if (!sD.t.isInstalled()) {
                            var t;
                            sD.t.install({
                                application: "standalone-deriv-bot",
                                dedupe: !1,
                                enabled: !1,
                                token: sO,
                                userId: e,
                                version: (null === (t = document.querySelector("meta[name=version]")) || void 0 === t ? void 0 : t.content) ? ? "undefined"
                            })
                        }
                    } catch (e) {
                        console.error("Failed to initialize TrackJS", e)
                    }
                }
            });
            s("99702");
            let sM = e => {};
            var sU = s("72755");
            let sF = e => {
                ! function(t, s, a, n) {
                    t.hj = t.hj || function() {
                        (t.hj.q = t.hj.q || []).push(arguments)
                    }, t._hjSettings = {
                        hjid: 3050531,
                        hjsv: 6
                    };
                    let i = s.getElementsByTagName("head")[0],
                        l = s.createElement("script");
                    l.async = 1, l.src = a + t._hjSettings.hjid + n + t._hjSettings.hjsv, i.appendChild(l);
                    let r = e.loginid,
                        o = e.is_virtual ? "Demo" : "Real",
                        c = e.account_open_date ? (0, sU.vk)(e.account_open_date) : void 0;
                    window.hj("identify", r, {
                        "Account created": c ? (0, sU.gb)(c).format("YYYY-MM-DD") : "",
                        "Account type": o,
                        "User country": e.clients_country
                    })
                }(window, document, "https://static.hotjar.com/c/hotjar-", ".js?sv=")
            };
            var sP = s("47494"),
                sZ = s("44740");
            let sz = () => (0, i.jsxs)(i.Fragment, {
                    children: [(0, i.jsx)("audio", {
                        id: "announcement",
                        "aria-label": "audio",
                        src: `${window.__webpack_public_path__}assets/media/announcement.mp3`
                    }), (0, i.jsx)("audio", {
                        id: "earned-money",
                        "aria-label": "audio",
                        src: `${window.__webpack_public_path__}assets/media/coins.mp3`
                    }), (0, i.jsx)("audio", {
                        id: "job-done",
                        "aria-label": "audio",
                        src: `${window.__webpack_public_path__}assets/media/job-done.mp3`
                    }), (0, i.jsx)("audio", {
                        id: "error",
                        "aria-label": "audio",
                        src: `${window.__webpack_public_path__}assets/media/out-of-bounds.mp3`
                    }), (0, i.jsx)("audio", {
                        id: "severe-error",
                        "aria-label": "audio",
                        src: `${window.__webpack_public_path__}assets/media/i-am-being-serious.mp3`
                    })]
                }),
                s$ = (0, r.Pi)(() => {
                    let {
                        blockly_store: e
                    } = (0, j.oR)(), {
                        is_loading: t
                    } = e;
                    return (0, i.jsx)(i.Fragment, {
                        children: t && (0, i.jsxs)("div", {
                            className: "bot__loading",
                            "data-testid": "blockly-loader",
                            children: [(0, i.jsx)(T.a, {}), (0, i.jsx)("div", {
                                children: "Loading Blockly..."
                            })]
                        })
                    })
                });
            var sB = s("10434");
            let sG = (0, r.Pi)(() => {
                let {
                    dashboard: e
                } = (0, j.oR)(), {
                    is_web_socket_intialised: t
                } = e, s = () => {
                    location.reload()
                };
                return (0, i.jsxs)(sB.Z, {
                    is_visible: !t,
                    is_mobile_full_width: !0,
                    className: "dc-dialog bot-stopped-dialog",
                    cancel_button_text: (0, f.NC)("Go to Reports"),
                    confirm_button_text: (0, f.NC)("Back to Bot"),
                    onCancel: () => location.replace("reports/positions"),
                    onConfirm: () => location.reload(),
                    children: [(0, i.jsxs)("div", {
                        className: "dc-dialog__content__header",
                        children: [(0, i.jsx)(es.Z, {
                            "data-testid": "data-title",
                            weight: "bold",
                            as: "p",
                            align: "left",
                            size: "s",
                            color: "prominent",
                            children: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "You're back online"
                            })
                        }), (0, i.jsx)("div", {
                            "data-testid": "data-close-button",
                            onClick: s,
                            onKeyDown: e => {
                                "Enter" === e.key && s()
                            },
                            tabIndex: 0,
                            children: (0, i.jsx)(E.Z, {
                                height: "20px",
                                width: "20px",
                                fill: "var(--text-general)"
                            })
                        })]
                    }), (0, i.jsx)(es.Z, {
                        as: "p",
                        align: "left",
                        size: "xs",
                        color: "prominent",
                        children: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "The bot has stopped, but your trade may still be running. You can check it on the Reports page."
                        })
                    })]
                })
            });
            var sV = s("64736"),
                sX = s("59462"),
                sH = s("49985"),
                sq = s("83571"),
                sY = s("13617");
            let sW = e => {
                let {
                    load_strategy_tab: t
                } = e;
                sq.Analytics.trackEvent("ce_bot_form", {
                    action: sY.om.SWITCH_LOAD_STRATEGY_TAB,
                    form_name: sY.oH,
                    load_strategy_tab: t,
                    subform_name: "load_strategy",
                    subpage_name: "bot_builder"
                })
            };
            var sK = s("66062"),
                sJ = s("31865"),
                sQ = s("97909");
            let s0 = (0, r.Pi)(() => {
                let {
                    google_drive: e,
                    load_modal: t
                } = (0, j.oR)(), {
                    is_authorised: s,
                    signIn: a,
                    signOut: n
                } = e, {
                    is_open_button_loading: r,
                    onDriveOpen: o
                } = t, {
                    isDesktop: c
                } = (0, N.F)(), d = c ? "128" : "96";
                return (0, i.jsx)("div", {
                    className: "load-strategy__container",
                    "data-testid": "dt_google_drive",
                    children: (0, i.jsxs)("div", {
                        className: "load-strategy__google-drive",
                        children: [(0, i.jsx)(sQ.Z, {
                            className: U()("load-strategy__google-drive-icon", {
                                "load-strategy__google-drive-icon--disabled": !s
                            }),
                            height: d,
                            width: d
                        }), (0, i.jsx)("div", {
                            className: "load-strategy__google-drive-connected-text",
                            children: s ? (0, i.jsx)(f.Xx, {
                                i18n_default_text: "You are connected to Google Drive"
                            }) : "Google Drive"
                        }), s ? (0, i.jsxs)(eA.Z.Group, {
                            children: [(0, i.jsx)(eA.Z, {
                                onClick: () => {
                                    n(), (0, tJ.z9)()
                                },
                                has_effect: !0,
                                secondary: !0,
                                large: !0,
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Disconnect"
                                })
                            }), (0, i.jsx)(eA.Z, {
                                onClick: () => {
                                    o()
                                },
                                is_loading: r,
                                has_effect: !0,
                                primary: !0,
                                large: !0,
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Open"
                                })
                            })]
                        }) : (0, i.jsxs)(l.Fragment, {
                            children: [(0, i.jsxs)("div", {
                                className: "load-strategy__google-drive-terms",
                                children: [(0, i.jsx)("div", {
                                    className: "load-strategy__google-drive-text",
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "To import your bot from your Google Drive, you'll need to sign in to your Google account."
                                    })
                                }), (0, i.jsx)("div", {
                                    className: "load-strategy__google-drive-text",
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "To know how Google Drive handles your data, please review Binarytools’s <0>Privacy policy.</0>",
                                        components: [(0, i.jsx)(sJ.Z, {
                                            className: "link",
                                            href: "tnc/security-and-privacy.pdf",
                                            is_document: !0
                                        }, 0)]
                                    })
                                })]
                            }), (0, i.jsx)(eA.Z, {
                                onClick: () => {
                                    a(), (0, tJ.df)()
                                },
                                has_effect: !0,
                                primary: !0,
                                large: !0,
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Sign in"
                                })
                            })]
                        })]
                    })
                })
            });
            var s1 = s("81593"),
                s5 = s("73446"),
                s2 = s("91047");
            let s8 = (0, r.Pi)(() => {
                    let {
                        load_modal: e,
                        dashboard: t
                    } = (0, j.oR)(), {
                        is_open_button_loading: s,
                        is_open_button_disabled: a,
                        loadStrategyOnBotBuilder: n,
                        setLoadedLocalFile: r,
                        saveStrategyToLocalStorage: o,
                        toggleLoadModal: c
                    } = e, {
                        setOpenSettings: d,
                        setPreviewOnPopup: u
                    } = t, {
                        isDesktop: h
                    } = (0, N.F)(), _ = h ? l.Fragment : eA.Z.Group;
                    return (0, i.jsxs)(_, {
                        children: [!h && (0, i.jsx)(eA.Z, {
                            text: (0, f.NC)("Cancel"),
                            onClick: () => r(null),
                            has_effect: !0,
                            secondary: !0,
                            large: !0
                        }), (0, i.jsx)(eA.Z, {
                            text: (0, f.NC)("Open"),
                            onClick: () => {
                                n(), o(), r(null), c(), u(!1), d(sX.tx.BOT_IMPORT)
                            },
                            is_loading: s,
                            has_effect: !0,
                            primary: !0,
                            large: !0,
                            disabled: a
                        })]
                    })
                }),
                s3 = e => {
                    let {
                        icon: t,
                        message: s,
                        className: a
                    } = e;
                    return (0, i.jsxs)("div", {
                        className: a,
                        children: [t && (0, i.jsx)("span", {
                            className: "icon",
                            children: t
                        }), (0, i.jsx)("span", {
                            className: "text",
                            children: (0, i.jsx)(es.Z, {
                                size: "xs",
                                children: s
                            })
                        })]
                    })
                };
            var s4 = s("19405"),
                s7 = s("97613");
            let s6 = (0, r.Pi)(e => {
                    let {
                        mockZoomInOut: t
                    } = e, {
                        dashboard: s
                    } = (0, j.oR)(), {
                        onZoomInOutClick: a
                    } = s;
                    return (0, i.jsxs)("div", {
                        className: "load-strategy__preview-workspace-controls",
                        children: [(0, i.jsx)(s4.Z, {
                            className: "load-strategy__preview-workspace-icon",
                            onClick: () => {
                                t ? t(!0) : a(!0)
                            },
                            "data-testid": "zoom-in",
                            fill: "var(--text-general)"
                        }), (0, i.jsx)(s7.Z, {
                            className: "load-strategy__preview-workspace-icon",
                            onClick: () => {
                                t ? t(!1) : a(!1)
                            },
                            "data-testid": "zoom-out",
                            fill: "var(--text-general)"
                        })]
                    })
                }),
                s9 = (0, r.Pi)(() => {
                    let {
                        dashboard: e,
                        load_modal: t,
                        blockly_store: s
                    } = (0, j.oR)(), {
                        active_tab: a,
                        active_tour: n
                    } = e, {
                        handleFileChange: r,
                        loaded_local_file: o,
                        setLoadedLocalFile: c,
                        imported_strategy_type: d,
                        is_open_button_loading: u
                    } = t, h = l.useRef(null), [_, m] = l.useState(!0), {
                        isDesktop: x
                    } = (0, N.F)(), {
                        is_loading: p
                    } = s;
                    return (l.useEffect(() => {
                        o && _ && "pending" !== d && !p && "old" === d && (0, sV.J)((0, sX.xG)().strategy_conversion, void 0, {
                            closeButton: !1
                        })
                    }, [o, _, d, u, p]), o && _) ? (0, i.jsxs)("div", {
                        className: "load-strategy__container load-strategy__container--has-footer",
                        children: [(0, i.jsxs)("div", {
                            className: U()("load-strategy__local-preview", {
                                "load-strategy__local-preview--active": 2 === a && n
                            }),
                            children: [(0, i.jsx)("div", {
                                className: "load-strategy__title",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Preview"
                                })
                            }), (0, i.jsx)("div", {
                                className: "load-strategy__preview-workspace",
                                children: (0, i.jsxs)("div", {
                                    id: "load-strategy__blockly-container",
                                    style: {
                                        height: "100%"
                                    },
                                    children: [(0, i.jsx)("div", {
                                        className: "load-strategy__local-preview-close",
                                        children: (0, i.jsx)(E.Z, {
                                            onClick: () => {
                                                c(null)
                                            },
                                            "data-testid": "dt_load-strategy__local-preview-close",
                                            height: "20px",
                                            width: "20px"
                                        })
                                    }), (0, i.jsx)(s6, {})]
                                })
                            })]
                        }), !x && (0, i.jsx)("div", {
                            className: "load-strategy__local-footer",
                            children: (0, i.jsx)(s8, {})
                        })]
                    }) : (0, i.jsx)("div", {
                        className: "load-strategy__container",
                        children: (0, i.jsxs)("div", {
                            className: "load-strategy__local-dropzone",
                            children: [(0, i.jsx)("input", {
                                type: "file",
                                ref: h,
                                accept: "application/xml, text/xml",
                                style: {
                                    display: "none"
                                },
                                onChange: e => m(r(e, !1)),
                                "data-testid": "dt-load-strategy-file-input"
                            }), (0, i.jsx)(s3, {
                                message: (0, f.NC)("Importing XML files from Binary Bot and other third-party platforms may take longer."),
                                icon: (0, i.jsx)(s2.Z, {
                                    fill: "#e18d00",
                                    iconSize: "xs"
                                }),
                                className: "load-strategy__section_message"
                            }), (0, i.jsxs)("div", {
                                "data-testid": "dt__local-dropzone-area",
                                className: "load-strategy__local-dropzone-area",
                                onDrop: e => {
                                    r(e, !1)
                                },
                                children: [x ? (0, i.jsxs)(l.Fragment, {
                                    children: [(0, i.jsx)(s5.Z, {
                                        height: "128px",
                                        width: "128px",
                                        className: "load-strategy__local-icon"
                                    }), (0, i.jsx)("div", {
                                        className: "load-strategy__local-title",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Drag your XML file here"
                                        })
                                    }), (0, i.jsx)("div", {
                                        className: "load-strategy__local-description",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "or, if you prefer..."
                                        })
                                    })]
                                }) : (0, i.jsx)(s1.Z, {
                                    height: "96px",
                                    width: "96px",
                                    className: "load-strategy__local-icon"
                                }), (0, i.jsx)(eA.Z, {
                                    text: _ ? (0, f.NC)("Select an XML file from your device") : (0, f.NC)("Please upload an XML file"),
                                    "data-testid": "dt_load-strategy__local-upload",
                                    onClick: () => {
                                        var e;
                                        return null == h ? void 0 : null === (e = h.current) || void 0 === e ? void 0 : e.click()
                                    },
                                    has_effect: !0,
                                    primary: !0,
                                    large: !0
                                })]
                            })]
                        })
                    })
                });
            var ae = s("45845"),
                at = s("30810"),
                as = s("39590");
            let aa = function(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                    return e || "string" == typeof e ? ({
                        [at.R.UNSAVED]: (0, i.jsx)(as.Z, {
                            iconSize: "xs",
                            fill: "var(--text-general)",
                            className: "icon-general-fill-g-path"
                        }),
                        [at.R.LOCAL]: (0, i.jsx)(s5.Z, {
                            height: "16px",
                            width: "16px",
                            fill: "var(--text-general)"
                        }),
                        [at.R.GOOGLE_DRIVE]: (0, i.jsx)(sQ.Z, {
                            className: t,
                            height: "16px",
                            width: "16px",
                            fill: "var(--text-general)"
                        })
                    })[e] : (0, i.jsx)(as.Z, {
                        iconSize: "xs",
                        fill: "var(--text-general)"
                    })
                },
                an = (0, r.Pi)(e => {
                    let {
                        workspace: t
                    } = e, {
                        load_modal: s,
                        blockly_store: a
                    } = (0, j.oR)(), {
                        setLoading: n
                    } = a, {
                        getSaveType: l,
                        loadStrategyOnModalRecentPreview: r,
                        selected_strategy_id: o,
                        updateXmlValuesOnStrategySelection: c
                    } = s;
                    return (0, i.jsxs)("div", {
                        className: U()("load-strategy__recent-item", {
                            "load-strategy__recent-item--selected": o === t.id
                        }),
                        onClick: () => {
                            o !== t.id && (n(!0), r(t.id), c())
                        },
                        "data-testid": "dt_recent_workspace_item",
                        children: [(0, i.jsxs)("div", {
                            className: "load-strategy__recent-item-text",
                            children: [(0, i.jsx)("div", {
                                className: "load-strategy__recent-item-title",
                                title: t.name,
                                children: t.name
                            }), (0, i.jsx)("div", {
                                className: "load-strategy__recent-item-time",
                                children: (0, Z.timeSince)(t.timestamp)
                            })]
                        }), (0, i.jsxs)("div", {
                            className: "load-strategy__recent-item-location",
                            children: [aa(t.save_type, "load-strategy__recent-icon--active"), (0, i.jsx)("div", {
                                className: "load-strategy__recent-item-saved",
                                children: l(t.save_type)
                            })]
                        })]
                    }, t.id)
                }),
                ai = (0, r.Pi)(() => {
                    let {
                        load_modal: e
                    } = (0, j.oR)(), {
                        is_explanation_expand: t,
                        recent_strategies: s,
                        toggleExplanationExpand: a
                    } = e;
                    return s.length ? (0, i.jsx)("div", {
                        className: "load-strategy__container load-strategy__container--has-footer",
                        children: (0, i.jsxs)("div", {
                            className: "load-strategy__recent",
                            children: [(0, i.jsx)("div", {
                                className: "load-strategy__recent__files",
                                children: s.map(e => (0, i.jsx)(an, {
                                    workspace: e
                                }, e.id))
                            }), (0, i.jsxs)("div", {
                                className: "load-strategy__recent__preview",
                                children: [(0, i.jsx)("div", {
                                    className: "load-strategy__title load-strategy__recent-preview-title",
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "Preview"
                                    })
                                }), (0, i.jsx)("div", {
                                    className: "load-strategy__preview-workspace",
                                    children: (0, i.jsx)("div", {
                                        id: "load-strategy__blockly-container",
                                        style: {
                                            height: "100%"
                                        },
                                        children: (0, i.jsx)(s6, {})
                                    })
                                })]
                            })]
                        })
                    }) : (0, i.jsx)("div", {
                        className: "load-strategy__container",
                        children: (0, i.jsxs)("div", {
                            className: "load-strategy__recent__empty",
                            "data-testid": "dt-load-strategy__recent__empty",
                            children: [(0, i.jsx)("div", {
                                className: "load-strategy__recent__empty-icon",
                                children: (0, i.jsx)(ae.Z, {
                                    height: "128px",
                                    width: "128px"
                                })
                            }), (0, i.jsx)("div", {
                                className: "load-strategy__recent__empty-title",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "You do not have any recent bots"
                                })
                            }), (0, i.jsx)("div", {
                                className: "load-strategy__recent__empty-description",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Create one or upload one from your local drive or Google Drive."
                                })
                            }), (0, i.jsx)("div", {
                                tabIndex: 0,
                                className: "load-strategy__recent__empty-expand",
                                "data-testid": "dt-load-strategy__recent__empty-expand",
                                onClick: a,
                                onKeyDown: e => {
                                    "Enter" === e.key && a()
                                },
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Why can't I see my recent bots?"
                                })
                            }), (0, i.jsxs)("div", {
                                "data-testid": t ? "dt-empty-explanation-list--open" : "dt-empty-explanation-list--close",
                                className: U()("load-strategy__recent__empty-explanation", {
                                    "load-strategy__recent__empty-explanation--show": t
                                }),
                                children: [(0, i.jsx)("div", {
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "If you've recently used bots but don't see them in this list, it may be because you:"
                                    })
                                }), (0, i.jsxs)("ol", {
                                    className: "load-strategy__recent__empty-explanation-list",
                                    children: [(0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "1. Logged in from a different device"
                                        })
                                    }), (0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "2. Logged in from a different browser"
                                        })
                                    }), (0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "3. Cleared your browser cache"
                                        })
                                    })]
                                })]
                            })]
                        })
                    })
                }),
                al = (0, r.Pi)(() => {
                    let {
                        load_modal: e,
                        dashboard: t
                    } = (0, j.oR)(), {
                        is_open_button_loading: s,
                        is_open_button_disabled: a,
                        loadStrategyOnBotBuilder: n,
                        toggleLoadModal: l
                    } = e, {
                        setOpenSettings: r
                    } = t;
                    return (0, i.jsx)(eA.Z, {
                        text: (0, f.NC)("Open"),
                        onClick: () => {
                            n(), l(), r(sX.tx.BOT_IMPORT)
                        },
                        is_loading: s,
                        has_effect: !0,
                        primary: !0,
                        large: !0,
                        disabled: a
                    })
                }),
                ar = (0, r.Pi)(() => {
                    let {
                        load_modal: e,
                        dashboard: t
                    } = (0, j.oR)(), {
                        active_index: s,
                        is_load_modal_open: a,
                        loaded_local_file: n,
                        onEntered: l,
                        recent_strategies: r,
                        setActiveTabIndex: o,
                        toggleLoadModal: c,
                        tab_name: d
                    } = e, {
                        setPreviewOnPopup: u
                    } = t, {
                        isDesktop: h
                    } = (0, N.F)(), _ = (0, f.NC)("Load strategy"), m = e => {
                        o(e), sW({
                            load_strategy_tab: sK.yO[e + (h ? 0 : 1)]
                        })
                    };
                    if (!h) return (0, i.jsx)(sb, {
                        is_modal_open: a,
                        className: "load-strategy__wrapper",
                        header: _,
                        onClickClose: () => {
                            u(!1), c(), (0, tJ._W)({
                                subform_name: "load_strategy",
                                load_strategy_tab: sK.yO[s + 1]
                            })
                        },
                        height_offset: "80px",
                        page_overlay: !0,
                        children: (0, i.jsxs)(e8.Z, {
                            active_index: s,
                            onTabItemClick: m,
                            top: !0,
                            children: [(0, i.jsx)("div", {
                                label: (0, f.NC)("Local"),
                                children: (0, i.jsx)(s9, {})
                            }), (0, i.jsx)("div", {
                                label: "Google Drive",
                                children: (0, i.jsx)(s0, {})
                            })]
                        })
                    });
                    let x = !!n && d === sH.y.TAB_LOCAL,
                        p = r.length > 0 && d === sH.y.TAB_RECENT;
                    return (0, i.jsxs)(C.Z, {
                        title: _,
                        className: "load-strategy",
                        width: "1000px",
                        height: "80vh",
                        is_open: a,
                        toggleModal: () => {
                            c(), (0, tJ._W)({
                                subform_name: "load_strategy",
                                load_strategy_tab: sK.yO[s + (h ? 0 : 1)]
                            })
                        },
                        onEntered: l,
                        elements_to_ignore: [document.querySelector(".injectionDiv")],
                        children: [(0, i.jsx)(C.Z.Body, {
                            children: (0, i.jsxs)(e8.Z, {
                                active_index: s,
                                onTabItemClick: m,
                                top: !0,
                                header_fit_content: !0,
                                children: [(0, i.jsx)("div", {
                                    label: (0, f.NC)("Recent"),
                                    children: (0, i.jsx)(ai, {})
                                }), (0, i.jsx)("div", {
                                    label: (0, f.NC)("Local"),
                                    children: (0, i.jsx)(s9, {})
                                }), (0, i.jsx)("div", {
                                    label: "Google Drive",
                                    children: (0, i.jsx)(s0, {})
                                })]
                            })
                        }), p && (0, i.jsx)(C.Z.Footer, {
                            has_separator: !0,
                            children: (0, i.jsx)(al, {})
                        }), x && (0, i.jsx)(C.Z.Footer, {
                            has_separator: !0,
                            children: (0, i.jsx)(s8, {})
                        })]
                    })
                }),
                ao = e => {
                    let {
                        children: t,
                        should_wrap_items: s
                    } = e;
                    return s ? (0, i.jsx)("div", {
                        className: "dc-radio-group__item-wrapper",
                        children: t
                    }) : (0, i.jsx)(l.Fragment, {
                        children: t
                    })
                },
                ac = e => {
                    let {
                        className: t,
                        name: s,
                        onToggle: a,
                        required: n,
                        selected: r,
                        should_wrap_items: o,
                        children: c
                    } = e, [d, u] = l.useState(r);
                    l.useEffect(() => {
                        u(r)
                    }, [r]);
                    let h = e => {
                        u(e.target.value), a(e)
                    };
                    return (0, i.jsx)("div", {
                        className: U()("dc-radio-group", t),
                        children: Array.isArray(c) && c.filter(e => !e.props.hidden).map(e => (0, i.jsx)(ao, {
                            should_wrap_items: o,
                            children: (0, i.jsxs)("label", {
                                className: U()("dc-radio-group__item", t, {
                                    "dc-radio-group__item--selected": d === e.props.value
                                }),
                                children: [(0, i.jsx)("input", {
                                    id: e.props.id,
                                    name: s,
                                    className: "dc-radio-group__input",
                                    type: "radio",
                                    value: e.props.value,
                                    checked: d === e.props.value,
                                    onChange: h,
                                    disabled: e.props.disabled,
                                    required: n
                                }), (0, i.jsx)("span", {
                                    className: U()("dc-radio-group__circle", {
                                        "dc-radio-group__circle--selected": d === e.props.value,
                                        "dc-radio-group__circle--disabled": e.props.disabled,
                                        "dc-radio-group__circle--error": e.props.has_error
                                    })
                                }), (0, i.jsx)(es.Z, {
                                    size: "xs",
                                    className: U()("dc-radio-group__label", {
                                        "dc-radio-group__label--disabled": e.props.disabled,
                                        "dc-radio-group__label--error": e.props.has_error
                                    }),
                                    children: e.props.label
                                })]
                            })
                        }, e.props.value))
                    })
                };
            ac.Item = e => {
                let {
                    children: t,
                    hidden: s = !1,
                    ...a
                } = e;
                return (0, i.jsx)("div", {
                    hidden: s,
                    ...a,
                    children: t
                })
            };
            let ad = e => {
                    let {
                        icon: t,
                        text: s,
                        google_drive_connected: a,
                        onDriveConnect: n
                    } = e, r = "Google Drive" === s;
                    return (0, i.jsxs)("div", {
                        className: "save-type__container",
                        children: [(0, i.jsxs)("div", {
                            className: "save-type__radio",
                            children: [t && l.cloneElement(t, {
                                className: U()("save-type__icon", {
                                    "save-type__icon--active": r && a,
                                    "save-type__icon--disabled": r && !a
                                }, t.props.className)
                            }), (0, i.jsx)(es.Z, {
                                as: "p",
                                align: "center",
                                size: "xxs",
                                color: r && !a ? "disabled" : "prominent",
                                lineHeight: "s",
                                className: "save-type__radio-text",
                                children: (0, f.NC)(s)
                            })]
                        }), r && (0, i.jsx)(es.Z, {
                            as: "p",
                            align: "center",
                            size: "xs",
                            weight: "bold",
                            styles: {
                                color: "var(--brand-purple-coral)"
                            },
                            className: "save-type__drive-status",
                            onClick: n,
                            children: (0, f.NC)(a ? (0, f.NC)("Disconnect") : (0, f.NC)("Connect"))
                        })]
                    })
                },
                au = e => {
                    let {
                        bot_name: t,
                        button_status: s,
                        is_authorised: a,
                        onConfirmSave: n,
                        onDriveConnect: l,
                        validateBotName: r,
                        toggleSaveModal: o,
                        is_mobile: c,
                        is_onscreen_keyboard_active: d,
                        setCurrentFocus: u
                    } = e;
                    return (0, i.jsx)(eM.J9, {
                        initialValues: {
                            is_local: !0,
                            save_as_collection: !1,
                            bot_name: t === (0, Z.config)().default_file_name ? "" : t
                        },
                        validate: r,
                        onSubmit: n,
                        children: e => {
                            let {
                                values: {
                                    is_local: t
                                },
                                setFieldValue: n,
                                touched: r,
                                errors: h
                            } = e;
                            return (0, i.jsx)(er.Z, {
                                height: c ? "calc(100%)" : "500px",
                                autohide: !0,
                                children: (0, i.jsxs)(eM.l0, {
                                    className: U()({
                                        "form--active-keyboard": d
                                    }),
                                    children: [(0, i.jsxs)("div", {
                                        className: "modal__content",
                                        children: [(0, i.jsxs)(es.Z, {
                                            size: "xs",
                                            lineHeight: "l",
                                            children: [(0, f.NC)("Enter your bot name, choose to save on your computer or Google Drive, and hit "), (0, i.jsx)("strong", {
                                                children: (0, f.NC)("Save.")
                                            })]
                                        }), (0, i.jsx)("div", {
                                            className: "modal__content-row",
                                            children: (0, i.jsx)(eM.gN, {
                                                name: "bot_name",
                                                children: e => {
                                                    let {
                                                        field: t
                                                    } = e;
                                                    return (0, i.jsx)(eH, {
                                                        className: "save-type__input",
                                                        type: "text",
                                                        placeholder: (0, f.NC)("Untitled Strategy"),
                                                        error: r[t.name] && h[t.name],
                                                        label: (0, f.NC)("Bot name"),
                                                        onFocus: e => u(e.currentTarget.value),
                                                        onBlur: () => u(""),
                                                        ...t
                                                    })
                                                }
                                            })
                                        }), (0, i.jsx)("div", {
                                            className: "modal__content-row",
                                            children: (0, i.jsxs)(ac, {
                                                className: "radio-group__save-type",
                                                name: "is_local",
                                                selected: () => a && !t ? Z.save_types.GOOGLE_DRIVE : Z.save_types.LOCAL,
                                                onToggle: () => n("is_local", !t),
                                                children: [(0, i.jsx)(ac.Item, {
                                                    id: "local",
                                                    label: (0, i.jsx)(ad, {
                                                        text: (0, f.NC)("Local"),
                                                        icon: c ? (0, i.jsx)(s1.Z, {
                                                            height: "48px",
                                                            width: "48px"
                                                        }) : (0, i.jsx)(s5.Z, {
                                                            height: "48px",
                                                            width: "48px"
                                                        })
                                                    }),
                                                    value: Z.save_types.LOCAL
                                                }), (0, i.jsx)(ac.Item, {
                                                    id: "drive",
                                                    label: (0, i.jsx)(ad, {
                                                        text: "Google Drive",
                                                        icon: (0, i.jsx)(sQ.Z, {
                                                            height: "48px",
                                                            width: "48px"
                                                        }),
                                                        google_drive_connected: a,
                                                        onDriveConnect: l
                                                    }),
                                                    value: Z.save_types.GOOGLE_DRIVE,
                                                    disabled: !a,
                                                    className: U()({
                                                        "dc-radio-group__item-disabled": !a
                                                    })
                                                })]
                                            })
                                        })]
                                    }), (0, i.jsxs)("div", {
                                        className: U()("modal__footer", {
                                            "modal__footer--active-keyboard": d
                                        }),
                                        children: [(0, i.jsx)(eA.Z, {
                                            type: "button",
                                            className: "modal__footer--button",
                                            text: (0, f.NC)("Cancel"),
                                            onClick: o,
                                            secondary: !0
                                        }), (0, i.jsx)(eA.Z, {
                                            className: "modal__footer--button",
                                            type: "submit",
                                            is_loading: 1 === s,
                                            is_submit_success: 2 === s,
                                            text: (0, f.NC)("Save"),
                                            primary: !0
                                        })]
                                    })]
                                })
                            })
                        }
                    })
                },
                ah = (0, r.Pi)(() => {
                    let {
                        save_modal: e,
                        google_drive: t,
                        dashboard: s,
                        load_modal: a,
                        ui: n
                    } = (0, j.oR)(), {
                        dashboard_strategies: r
                    } = a, {
                        button_status: o,
                        bot_name: c,
                        is_save_modal_open: d,
                        onConfirmSave: u,
                        toggleSaveModal: h,
                        updateBotName: _,
                        validateBotName: m
                    } = e, {
                        is_authorised: x,
                        onDriveConnect: p
                    } = t, {
                        is_onscreen_keyboard_active: v,
                        setCurrentFocus: g
                    } = n, {
                        isMobile: b
                    } = (0, N.F)(), {
                        active_tab: y
                    } = s;
                    return (0, l.useEffect)(() => {
                        if (2 === y) {
                            var e;
                            _((null == r ? void 0 : null === (e = r[0]) || void 0 === e ? void 0 : e.name) ? ? "")
                        }
                    }, [y, r, _]), b ? (0, i.jsx)(sb, {
                        is_modal_open: d,
                        className: "save-modal__wrapper",
                        header: (0, f.NC)("Save strategy"),
                        onClickClose: h,
                        height_offset: "80px",
                        page_overlay: !0,
                        children: (0, i.jsx)(au, {
                            bot_name: c,
                            button_status: o,
                            is_authorised: x,
                            onConfirmSave: u,
                            onDriveConnect: p,
                            validateBotName: m,
                            toggleSaveModal: h,
                            is_mobile: b,
                            is_onscreen_keyboard_active: v,
                            setCurrentFocus: g
                        })
                    }) : (0, i.jsx)(C.Z, {
                        title: (0, f.NC)("Save strategy"),
                        className: "modal--save",
                        width: "32.8rem",
                        height: "50rem",
                        is_open: d,
                        toggleModal: h,
                        children: (0, i.jsx)(au, {
                            bot_name: c,
                            button_status: o,
                            is_authorised: x,
                            onConfirmSave: u,
                            onDriveConnect: p,
                            validateBotName: m,
                            toggleSaveModal: h,
                            setCurrentFocus: g
                        })
                    })
                });
            var a_ = s("58902"),
                am = s("13323");
            let ax = {
                    fontWeight: "700",
                    fontSize: "1.4rem",
                    height: "4rem",
                    padding: "1rem 1.6rem"
                },
                ap = e => {
                    let {
                        steps: t,
                        styles: s,
                        handleCallback: a,
                        ...n
                    } = e;
                    return (0, i.jsx)(am.ZP, {
                        steps: t,
                        continuous: !0,
                        callback: a,
                        locale: {
                            back: (0, f.NC)("Previous"),
                            next: (0, f.NC)("Next")
                        },
                        ...n,
                        styles: {
                            options: {
                                arrowColor: "var(--general-main-2)",
                                backgroundColor: "var(--general-main-2)",
                                primaryColor: "var(--brand-purple-coral)",
                                textColor: "var(--text-general)",
                                spotlightShadow: "0 0 15px rgba(0, 0, 0, 0.5)",
                                width: 440
                            },
                            buttonBack: {
                                border: "0.2rem solid var(--text-less-prominent)",
                                marginInlineEnd: "1rem",
                                borderRadius: "0.4rem",
                                color: "var(--text-general)",
                                ...ax
                            },
                            buttonNext: { ...ax
                            },
                            buttonClose: {
                                insetInlineEnd: "0px",
                                right: "unset"
                            },
                            overlay: {
                                height: "100%"
                            },
                            ...s
                        }
                    })
                },
                aj = (0, r.Pi)(() => {
                    let {
                        dashboard: e
                    } = (0, j.oR)(), {
                        is_tour_dialog_visible: t,
                        setTourDialogVisibility: s
                    } = e, {
                        isDesktop: a
                    } = (0, N.F)();
                    return (0, i.jsx)("div", {
                        children: (0, i.jsxs)(sB.Z, {
                            is_visible: t,
                            confirm_button_text: (0, f.NC)("OK"),
                            onConfirm: () => {
                                s(!1)
                            },
                            is_mobile_full_width: !0,
                            className: "dc-dialog tour-dialog",
                            has_close_icon: !1,
                            children: [(0, i.jsx)("div", {
                                className: "dc-dialog__content__header",
                                children: (0, i.jsx)(es.Z, {
                                    weight: "bold",
                                    color: "prominent",
                                    size: a ? "s" : "xs",
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "Congratulations"
                                    })
                                })
                            }), (0, i.jsx)("div", {
                                className: "dc-dialog__content__description",
                                children: (0, i.jsx)(es.Z, {
                                    size: a ? "xs" : "xxs",
                                    color: "prominent",
                                    children: (0, i.jsxs)(i.Fragment, {
                                        children: [(0, i.jsx)("div", {
                                            className: "dc-dialog__content__description__text",
                                            "data-testid": "tour-success-message",
                                            children: (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "You have successfully created your bot using a simple strategy."
                                            }, 0)
                                        }), (0, i.jsx)("div", {
                                            className: "dc-dialog__content__description__text",
                                            children: (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "Now, <0>run the bot</0> to test out the strategy.",
                                                components: [(0, i.jsx)("strong", {}, 0)]
                                            }, 0)
                                        }), (0, i.jsx)("div", {
                                            className: "dc-dialog__content__description__text",
                                            children: (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "Note: If you wish to learn more about the Bot Builder, you can proceed to the <0>Tutorials</0> tab.",
                                                components: [(0, i.jsx)("strong", {}, 0)]
                                            }, 0)
                                        })]
                                    })
                                })
                            })]
                        })
                    })
                });
            var av = s("21995"),
                ag = s("63430"),
                ab = s("39338");
            let ay = (0, r.Pi)(e => {
                    let {
                        content: t,
                        media: s,
                        label: a,
                        step_index: n,
                        has_localize_component: r = !1,
                        show_actions: o = !0
                    } = e;
                    return (0, i.jsx)(l.Fragment, {
                        children: (0, i.jsxs)("div", {
                            className: "onboard",
                            children: [o && (0, i.jsx)("div", {
                                className: "onboard__header",
                                children: (0, i.jsxs)(es.Z, {
                                    color: "less-prominent",
                                    lineHeight: "l",
                                    children: [n, "/6"]
                                })
                            }), (0, i.jsxs)("div", {
                                className: "onboard__steps",
                                children: [(0, i.jsx)("div", {
                                    className: "onboard__label",
                                    children: (0, i.jsx)(es.Z, {
                                        as: "p",
                                        lineHeight: "l",
                                        weight: "bold",
                                        children: a
                                    })
                                }), s && (0, i.jsx)("video", {
                                    autoPlay: !0,
                                    loop: !0,
                                    controls: !0,
                                    preload: "auto",
                                    playsInline: !0,
                                    disablePictureInPicture: !0,
                                    controlsList: "nodownload",
                                    style: {
                                        width: "100%"
                                    },
                                    src: s
                                }), (0, i.jsx)("div", {
                                    className: "onboard__content",
                                    children: (0, i.jsx)(i.Fragment, {
                                        children: t.map(e => r ? e : (0, i.jsx)("div", {
                                            className: "onboard__content__block",
                                            children: (0, i.jsx)(es.Z, {
                                                align: "left",
                                                as: "p",
                                                size: "xs",
                                                lineHeight: "l",
                                                children: e
                                            })
                                        }, `onboard--${(0,ab.Fs)()}`))
                                    })
                                })]
                            })]
                        })
                    })
                }),
                af = {
                    showProgress: !1,
                    spotlightClicks: !1,
                    disableBeacon: !0,
                    disableOverlay: !0,
                    disableCloseOnEsc: !0
                },
                aN = [{
                    target: "#id-bot-builder",
                    content: (0, i.jsx)(ay, {
                        label: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Get started on D-Bot"
                        }),
                        content: [(0, i.jsx)(i.Fragment, {
                            children: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "Create your bot using our drag-and-drop blocks or click Quick Strategy to choose from the ready-to-use bot templates."
                            })
                        }), (0, i.jsx)(i.Fragment, {
                            children: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "We also provide a guide on the Tutorial tab to show you how you can build and execute a simple strategy."
                            })
                        })],
                        media: "/assets/videos/dbot-onboarding-tour-step-1.mp4",
                        step_index: 1
                    }),
                    ...af,
                    disableOverlay: !1
                }, {
                    target: "#id-charts",
                    content: (0, i.jsx)(ay, {
                        label: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Monitor the market"
                        }),
                        content: [(0, i.jsx)(f.Xx, {
                            i18n_default_text: "View the market price of your favourite assets."
                        }, "view the market")],
                        media: "/assets/videos/dbot-onboarding-tour-step-2.mp4",
                        step_index: 2
                    }),
                    ...af,
                    disableOverlay: !1
                }, {
                    target: "#id-tutorials",
                    content: (0, i.jsx)(ay, {
                        label: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Learn more with our tutorials"
                        }),
                        content: [(0, i.jsx)(f.Xx, {
                            i18n_default_text: "Explore the video guides and FAQs to build your bot in the tutorials tab."
                        }, "explore tutorials")],
                        media: "/assets/videos/dbot-onboarding-tour-step-3.mp4",
                        step_index: 3
                    }),
                    ...af,
                    disableOverlay: !1
                }, {
                    target: "#tab__dashboard__table__tiles",
                    content: (0, i.jsx)(ay, {
                        label: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Use these shortcuts"
                        }),
                        content: [(0, i.jsx)(f.Xx, {
                            i18n_default_text: "You can also import or build your bot using any of these shortcuts."
                        }, "use shortcuts")],
                        step_index: 4
                    }),
                    placement: (0, z.rK)() ? "left" : "right",
                    ...af,
                    disableOverlay: !1
                }, {
                    target: ".dc-drawer__container",
                    content: (0, i.jsx)(ay, {
                        label: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Check your bot’s performance"
                        }),
                        content: [(0, i.jsx)(f.Xx, {
                            i18n_default_text: "See how your bot is doing in real-time."
                        }, "check bot performance")],
                        media: "/assets/videos/dbot-onboarding-tour-step-5.mp4",
                        step_index: 5
                    }),
                    placement: (0, z.rK)() ? "right" : "left",
                    ...af,
                    disableOverlay: !1
                }, {
                    target: ".animation__wrapper",
                    content: (0, i.jsx)(ay, {
                        label: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Run your bot"
                        }),
                        content: [(0, i.jsx)(f.Xx, {
                            i18n_default_text: "Click <0>Run</0> when you want to start trading, and click <0>Stop</0> when you want to stop.",
                            components: [(0, i.jsx)("strong", {}, 0)]
                        }, "run your bot")],
                        media: "/assets/videos/dbot-onboarding-tour-step-6.mp4",
                        step_index: 6
                    }),
                    ...af,
                    disableOverlay: !1
                }, {
                    target: "#id-tutorials",
                    content: (0, i.jsx)(ay, {
                        label: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Want to retake the tour?"
                        }),
                        content: [(0, i.jsx)(es.Z, {
                            as: "p",
                            children: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "Head to the Tutorials tab to do so."
                            })
                        }, "0-id-tutorials")],
                        step_index: 7,
                        show_actions: !1,
                        has_localize_component: !0
                    }),
                    locale: {
                        last: (0, f.NC)("Got it, thanks!")
                    },
                    ...af,
                    hideBackButton: !0,
                    disableOverlay: !1
                }],
                aC = [{
                    target: ".animation__wrapper",
                    content: (0, i.jsx)(e => {
                        let {
                            show_label: t = !1
                        } = e;
                        return (0, i.jsxs)("div", {
                            className: "joyride-content",
                            children: [t && (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Step 1 :"
                                })
                            }), (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "First, set the <0>Trade parameters</0> block.",
                                    components: [(0, i.jsx)("strong", {}, 0)]
                                })
                            }), (0, i.jsx)("div", {
                                className: "joyride-content__left joyride-content__sub-title",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "<0>1. Trade parameters:<0>",
                                    components: [(0, i.jsx)("strong", {}, 0)]
                                })
                            }), (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsxs)("ul", {
                                    children: [(0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "First, set <0>Market</0> to Derived > Continuous Indices > Volatility 100 (1s) Index.",
                                            components: [(0, i.jsx)("strong", {}, 0)]
                                        })
                                    }), (0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Then, set <0>Trade type</0> to Up/Down > Rise/Fall.",
                                            components: [(0, i.jsx)("strong", {}, 0)]
                                        })
                                    }), (0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "For <0>Contract type,</0> set it to Both.",
                                            components: [(0, i.jsx)("strong", {}, 0)]
                                        })
                                    }), (0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "For <0>Default candle interval,</0> set it to 1 minute",
                                            components: [(0, i.jsx)("strong", {}, 0)]
                                        })
                                    })]
                                })
                            })]
                        })
                    }, {
                        show_label: !0
                    }),
                    placement: (0, z.rK)() ? "bottom" : "right",
                    ...af
                }, {
                    target: ".animation__wrapper",
                    content: (0, i.jsx)(() => (0, i.jsxs)("div", {
                        className: "joyride-content",
                        children: [(0, i.jsx)("div", {
                            className: "joyride-content__left",
                            children: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "For <0>Trade options</0>, set it as below:",
                                components: [(0, i.jsx)("strong", {}, 0)]
                            })
                        }), (0, i.jsx)("div", {
                            className: "joyride-content__left",
                            children: (0, i.jsxs)("ul", {
                                children: [(0, i.jsx)("li", {
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "<0>Duration</0>: Ticks 1",
                                        components: [(0, i.jsx)("strong", {}, 0)]
                                    })
                                }), (0, i.jsx)("li", {
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "<0>Stake: USD</0> 10 (min: 0.35 - max: 50000)",
                                        components: [(0, i.jsx)("strong", {}, 0)]
                                    })
                                })]
                            })
                        })]
                    }), {}),
                    placement: (0, z.rK)() ? "bottom" : "right",
                    ...af
                }, {
                    target: ".animation__wrapper",
                    content: (0, i.jsx)(e => {
                        let {
                            show_label: t = !1
                        } = e;
                        return (0, i.jsxs)("div", {
                            className: "joyride-content",
                            children: [t && (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Step 2 :"
                                })
                            }), (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Then, set the <0>Purchase conditions</0> block.",
                                    components: [(0, i.jsx)("strong", {}, 0)]
                                })
                            }), (0, i.jsx)("div", {
                                className: "joyride-content__left joyride-content__sub-title",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "<0>2. Purchase conditions</0>:",
                                    components: [(0, i.jsx)("strong", {}, 0)]
                                })
                            }), (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsx)("ul", {
                                    children: (0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "<0>Purchase</0>: Rise",
                                            components: [(0, i.jsx)("strong", {}, 0)]
                                        })
                                    })
                                })
                            })]
                        })
                    }, {
                        show_label: !0
                    }),
                    placement: (0, z.rK)() ? "bottom" : "right",
                    ...af
                }, {
                    target: ".animation__wrapper",
                    content: (0, i.jsx)(e => {
                        let {
                            show_label: t = !1
                        } = e;
                        return (0, i.jsxs)("div", {
                            className: "joyride-content",
                            children: [t && (0, i.jsx)("div", {
                                className: "joyride-content__left joyride-content__left__step-three",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Step 3 :"
                                })
                            }), (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "The third block is <0>optional</0>. You may use this block if you want to sell your contract before it expires. For now, leave the block as it is. ",
                                    components: [(0, i.jsx)("strong", {}, 0)]
                                })
                            })]
                        })
                    }, {
                        show_label: !0
                    }),
                    placement: (0, z.rK)() ? "bottom" : "right",
                    ...af
                }, {
                    target: ".animation__wrapper",
                    content: (0, i.jsx)(e => {
                        let {
                            show_label: t = !1
                        } = e;
                        return (0, i.jsxs)("div", {
                            className: "joyride-content",
                            children: [t && (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Step 4 :"
                                })
                            }), (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Next, go to <0>Utility tab</0> under the Blocks menu. Tap the drop-down arrow and hit <0>Loops</0>.",
                                    components: [(0, i.jsx)("strong", {}, 0)]
                                })
                            }), (0, i.jsxs)("div", {
                                className: "joyride-content__left",
                                children: [(0, i.jsxs)("ul", {
                                    children: [(0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Look for the <0>Repeat While/Until</0>, and click the + icon to add the block to the workspace area.",
                                            components: [(0, i.jsx)("strong", {}, 0)]
                                        })
                                    }), (0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Choose <0>until</0> as the repeat option.",
                                            components: [(0, i.jsx)("strong", {}, 0)]
                                        })
                                    })]
                                }), (0, i.jsxs)("div", {
                                    className: "joyride-content__left joyride-content__with-icon",
                                    children: [(0, i.jsx)("div", {
                                        className: "joyride-content__with-icon__left",
                                        children: (0, i.jsx)(ag.Z, {
                                            className: "db-contract-card__result-icon",
                                            fill: "#4bb4b3"
                                        })
                                    }), (0, i.jsx)("div", {
                                        className: "joyride-content__with-icon__right",
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Pro tip: You can also click and drag out the desired block",
                                            components: [(0, i.jsx)("strong", {}, 0)]
                                        })
                                    })]
                                })]
                            }), (0, i.jsx)("div", {
                                children: (0, i.jsx)("video", {
                                    autoPlay: !0,
                                    loop: !0,
                                    controls: !0,
                                    playsInline: !0,
                                    preload: "auto",
                                    disablePictureInPicture: !0,
                                    controlsList: "nodownload",
                                    children: (0, i.jsx)("source", {
                                        src: "/assets/videos/bot-builder-tour-step-4.mp4",
                                        type: "video/mp4"
                                    })
                                })
                            })]
                        })
                    }, {
                        show_label: !0
                    }),
                    placement: (0, z.rK)() ? "bottom" : "right",
                    ...af
                }, {
                    target: ".animation__wrapper",
                    content: (0, i.jsx)(e => {
                        let {
                            show_label: t = !1
                        } = e;
                        return (0, i.jsxs)("div", {
                            className: "joyride-content",
                            children: [t && (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Step 5 :"
                                })
                            }), (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Now, tap the <0>Analysis</0> drop-down arrow and hit <0>Contract</0>.",
                                    components: [(0, i.jsx)("strong", {}, 0)]
                                })
                            }), (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsxs)("ul", {
                                    children: [(0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Go to the <0>Last trade result</0> block and click + icon to add the <0>Result is Win</0> block to the workspace.",
                                            components: [(0, i.jsx)("strong", {}, 0)]
                                        })
                                    }), (0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Then, drag the <0>Result is win</0> into the empty slot next to <0>repeat until</0> block.",
                                            components: [(0, i.jsx)("strong", {}, 0)]
                                        })
                                    }), (0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Now, go to the <0>Restart trading conditions</0> block.",
                                            components: [(0, i.jsx)("strong", {}, 0)]
                                        })
                                    }), (0, i.jsx)("li", {
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Drag the <0>Trade again</0> block and add it into the <0>do</0> part of the <0>Repeat until</0> block.",
                                            components: [(0, i.jsx)("strong", {}, 0)]
                                        })
                                    })]
                                })
                            }), (0, i.jsx)("div", {
                                children: (0, i.jsx)("video", {
                                    autoPlay: !0,
                                    loop: !0,
                                    controls: !0,
                                    playsInline: !0,
                                    preload: "auto",
                                    disablePictureInPicture: !0,
                                    controlsList: "nodownload",
                                    children: (0, i.jsx)("source", {
                                        src: "/assets/videos/bot-builder-tour-step-5.mp4",
                                        type: "video/mp4"
                                    })
                                })
                            })]
                        })
                    }, {
                        show_label: !0
                    }),
                    placement: (0, z.rK)() ? "bottom" : "right",
                    ...af
                }, {
                    target: ".animation__wrapper",
                    content: (0, i.jsx)(e => {
                        let {
                            show_label: t = !1
                        } = e;
                        return (0, i.jsxs)("div", {
                            className: "joyride-content",
                            children: [t && (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Step 6 :"
                                })
                            }), (0, i.jsx)("div", {
                                className: "joyride-content__left",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "Finally, drag and add the whole <0>Repeat</0> block to the <0>Restart trading conditions</0> block.",
                                    components: [(0, i.jsx)("strong", {}, 0)]
                                })
                            })]
                        })
                    }, {
                        show_label: !0
                    }),
                    locale: {
                        last: (0, f.NC)("Next")
                    },
                    ...af
                }],
                aS = [{
                    header: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Step 1"
                    }),
                    content: [(0, i.jsx)("span", {
                        children: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "First, click the Import icon on the tool bar."
                        }, "step-1")
                    }, "step-1-wrapper")],
                    tour_step_key: 1
                }, {
                    header: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Step 2"
                    }),
                    content: [(0, i.jsx)("span", {
                        children: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Next, import your bot directly from your mobile device or from Google Drive."
                        }, "step-2")
                    }, "step-2-wrapper")],
                    tour_step_key: 2
                }, {
                    header: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Step 3"
                    }),
                    content: [(0, i.jsx)("span", {
                        children: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Once imported, you will see a preview of the bot on the workspace. Click run to start trading with this bot."
                        }, "step-3")
                    }, "step-3-wrapper")],
                    tour_step_key: 3
                }],
                aT = [{
                    header: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Get started on D-Bot"
                    }),
                    content: [(0, i.jsx)("span", {
                        children: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Hi! Hit <0>Start</0> for a quick tour.",
                            components: [(0, i.jsx)("strong", {}, 0)]
                        }, "get-started-on-deriv-bot")
                    }, "get-started-on-deriv-bot-wrapper")],
                    tour_step_key: 1
                }, {
                    header: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Import or choose your bot"
                    }),
                    content: [(0, i.jsx)("span", {
                        children: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Import your bot or tap Quick Strategies to choose from the ready-to-use bot templates."
                        }, "import-or-choose-your-bot")
                    }, "import-or-choose-your-bot-wrapper")],
                    media: "/assets/videos/dbot-mobile-onboarding-step-1.mp4",
                    tour_step_key: 2
                }, {
                    header: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Monitor the market"
                    }),
                    content: [(0, i.jsx)("span", {
                        children: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "View the market price of your favourite assets."
                        }, "monitor-the-market")
                    }, "monitor-the-market-wrapper")],
                    media: "/assets/videos/dbot-mobile-onboarding-step-2.mp4",
                    tour_step_key: 3
                }, {
                    header: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Learn more with our tutorials"
                    }),
                    content: [(0, i.jsx)("span", {
                        children: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Explore the video guides and FAQs to build your bot in the tutorials tab."
                        }, "learn-more-with-our-tutorials")
                    }, "learn-more-with-our-tutorials-wrapper")],
                    media: "/assets/videos/dbot-mobile-onboarding-step-3.mp4",
                    tour_step_key: 4
                }, {
                    header: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Use these shortcuts"
                    }),
                    img: (0, av.oY)("dbot-mobile-onboarding-step-4.png"),
                    content: [(0, i.jsx)("span", {
                        children: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "You can also import or build your bot using any of these shortcuts."
                        }, "use-these-shortcuts")
                    }, "use-these-shortcuts-wrapper")],
                    tour_step_key: 5
                }, {
                    header: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Check your bot’s performance"
                    }),
                    media: "/assets/videos/dbot-mobile-onboarding-step-5.mp4",
                    content: [(0, i.jsxs)("span", {
                        children: [(0, i.jsx)(f.Xx, {
                            i18n_default_text: "See how your bot is doing in real-time."
                        }, "check-your-bots-performance"), ","]
                    }, "check-your-bots-performance-wrapper")],
                    tour_step_key: 6
                }, {
                    header: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Run your bot"
                    }),
                    media: "/assets/videos/dbot-mobile-onboarding-step-6.mp4",
                    content: [(0, i.jsx)("span", {
                        children: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Click <0>Run</0> when you want to start trading, and click <0>Stop</0> when you want to stop.",
                            components: [(0, i.jsx)("strong", {}, 0)]
                        }, "run-your-bot")
                    }, "run-your-bot-wrapper")],
                    tour_step_key: 7
                }, {
                    header: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Want to retake the tour?"
                    }),
                    img: (0, av.oY)("dbot-mobile-onboarding-step-7.png"),
                    content: [(0, i.jsx)("span", {
                        children: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Head to the Tutorials tab to do so."
                        }, "want-to-retake-the-tour")
                    }, "want-to-retake-the-tour-wrapper")],
                    tour_step_key: 8
                }],
                ak = e => e ? (0, i.jsx)(f.Xx, {
                    i18n_default_text: "Here’s a quick guide on how to use D-Bot on the go."
                }, "tour-dialog-info-mobile") : (0, i.jsx)(f.Xx, {
                    i18n_default_text: "Learn how to build your bot from scratch using a simple strategy."
                }, "tour-dialog-info-desktop"),
                aw = e => e ? (0, i.jsx)(f.Xx, {
                    i18n_default_text: "You can import a bot from your mobile device or from Google drive, see a preview in the bot builder, and start trading by running the bot."
                }, "tour-dialog-action-mobile") : (0, i.jsx)(f.Xx, {
                    i18n_default_text: "Hit the <0>Start</0> button to begin and follow the tutorial.",
                    components: [(0, i.jsx)("strong", {}, 0)]
                }, "tour-dialog-action-desktop"),
                aE = (0, i.jsx)(f.Xx, {
                    i18n_default_text: "Get started on D-Bot"
                }, "onboarding-tour-header"),
                aI = e => e ? (0, i.jsx)(f.Xx, {
                    i18n_default_text: "Bot Builder guide"
                }, "tour_header-mobile") : (0, i.jsx)(f.Xx, {
                    i18n_default_text: "Let's build a Bot!"
                }, "tour_header-desktop");
            var aA = s("84006");
            let aR = (0, r.Pi)(() => {
                    let {
                        dashboard: e
                    } = (0, j.oR)(), {
                        active_tab: t,
                        is_tour_dialog_visible: s,
                        setTourDialogVisibility: a,
                        setActiveTour: n,
                        setShowMobileTourDialog: l
                    } = e, {
                        isDesktop: r
                    } = (0, N.F)(), o = 1 === t ? "onboard_tour_token" : "bot_builder_token", c = () => {
                        !r && l(!1), a(!1), n(""), (0, aA.X7)(new Date().getTime(), o)
                    }, d = t === t2.ve.DASHBOARD, u = ak(!r), h = aw(!r), _ = 1 === t ? aE : aI(!r);
                    return (0, i.jsx)("div", {
                        children: (0, i.jsxs)(sB.Z, {
                            is_visible: s,
                            cancel_button_text: (0, f.NC)("Skip"),
                            onCancel: () => c(),
                            confirm_button_text: (0, f.NC)("Start"),
                            onConfirm: () => {
                                n(aA.TJ[t]), !r && l(!1), a(!1), (0, aA.X7)(new Date().getTime(), o)
                            },
                            is_mobile_full_width: !0,
                            className: "dc-dialog tour-dialog",
                            has_close_icon: !1,
                            portal_element_id: "modal_root",
                            children: [(0, i.jsx)("div", {
                                className: "dc-dialog__content__header",
                                children: (0, i.jsx)(es.Z, {
                                    weight: "bold",
                                    color: "prominent",
                                    size: r ? "s" : "xs",
                                    children: _
                                })
                            }), (0, i.jsx)("div", {
                                className: "dc-dialog__content__description",
                                children: (0, i.jsx)(es.Z, {
                                    size: r ? "xs" : "xxs",
                                    color: "prominent",
                                    children: (0, i.jsx)(i.Fragment, {
                                        children: d ? (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Hi! Hit <0>Start</0> for a quick tour.",
                                            components: [(0, i.jsx)("strong", {}, 0)]
                                        }, 0) : (0, i.jsxs)(i.Fragment, {
                                            children: [(0, i.jsx)("div", {
                                                className: "dc-dialog__content__description__text",
                                                children: u
                                            }), (0, i.jsx)("div", {
                                                className: "dc-dialog__content__description__text",
                                                children: h
                                            }), (0, i.jsx)("div", {
                                                className: "dc-dialog__content__description__text",
                                                children: (0, i.jsx)(f.Xx, {
                                                    i18n_default_text: "Note: You can also find this tutorial in the <0>Tutorials</0> tab.",
                                                    components: [(0, i.jsx)("strong", {}, 0)]
                                                }, 0)
                                            })]
                                        })
                                    })
                                })
                            })]
                        })
                    })
                }),
                aD = () => {
                    let [e, t] = (0, l.useState)(!1), [s, a] = (0, l.useState)(!1);
                    return {
                        is_finished: e,
                        handleJoyrideCallback: e => {
                            let {
                                action: s,
                                status: n
                            } = e;
                            "finished" === n ? t(!0) : ("close" === s || "skip" === s) && a(!0)
                        },
                        setIsFinished: t,
                        is_close_tour: s,
                        setIsCloseTour: a
                    }
                },
                aO = (0, r.Pi)(() => {
                    let {
                        is_close_tour: e,
                        is_finished: t,
                        handleJoyrideCallback: s,
                        setIsCloseTour: a
                    } = aD(), {
                        dashboard: n,
                        load_modal: r
                    } = (0, j.oR)(), {
                        active_tab: o,
                        active_tour: c,
                        setActiveTour: d,
                        setTourDialogVisibility: u
                    } = n, {
                        is_load_modal_open: h
                    } = r;
                    return !(0, a_.$8)("bot_builder_token") && 2 === o && u(!0), l.useEffect(() => {
                        t ? (u(!0), d("")) : e && (d(""), a(!1))
                    }, [e, t, d, a, u]), (0, i.jsxs)(i.Fragment, {
                        children: [t ? (0, i.jsx)(aj, {}) : h ? null : (0, i.jsx)(aR, {}), c && (0, i.jsx)(ap, {
                            handleCallback: s,
                            steps: aC,
                            styles: {
                                options: {
                                    arrowColor: "transparent",
                                    backgroundColor: "var(--general-main-2)",
                                    primaryColor: "var(--brand-purple-coral)",
                                    textColor: "var(--text-general)"
                                }
                            }
                        })]
                    })
                }),
                aL = e => {
                    let {
                        step: t,
                        steps_list: s,
                        is_transition: a = !1,
                        onStepChange: n
                    } = e;
                    return (0, i.jsx)("div", {
                        className: "dc-progress-bar-tracker",
                        children: s.map((e, s) => {
                            let l = t === s + 1;
                            return (0, i.jsx)("div", {
                                onClick: () => {
                                    n(s + 1)
                                },
                                className: U()({
                                    "dc-progress-bar-tracker-rectangle": l,
                                    "dc-progress-bar-tracker-circle": !l,
                                    "dc-progress-bar-tracker-transition": a
                                })
                            }, e)
                        })
                    })
                },
                aM = e => {
                    let {
                        label: t,
                        type: s = "default",
                        ...a
                    } = e;
                    return t ? (0, i.jsx)("button", {
                        className: s,
                        ...a,
                        children: (0, i.jsx)(es.Z, {
                            color: "prominent",
                            align: "center",
                            weight: "bold",
                            as: "span",
                            lineHeight: "s",
                            size: "xs",
                            children: t
                        })
                    }) : null
                },
                aU = (0, r.Pi)(() => {
                    let {
                        dashboard: e,
                        load_modal: t,
                        quick_strategy: s
                    } = (0, j.oR)(), {
                        toggleTourLoadModal: a
                    } = t, {
                        onTourEnd: n,
                        setTourActiveStep: r,
                        active_tour: o,
                        show_mobile_tour_dialog: c,
                        active_tab: d,
                        setShowMobileTourDialog: u,
                        setTourDialogVisibility: h
                    } = e, {
                        is_open: _
                    } = s, [m, x] = l.useState(1), p = aS.find(e => {
                        let {
                            tour_step_key: t
                        } = e;
                        return t === m
                    }), v = 3 === m ? "finish-bot-builder-tour" : "next-bot-builder-tour";
                    l.useEffect(() => {
                        r(m), c || (0, aA._y)(o, m), 2 === m ? a(!0) : "" !== o && a(!1), !(0, a_.$8)("bot_builder_token") && 2 === d && (_ ? h(!1) : h(!0), u(!0))
                    }, [m, c]);
                    let g = 3 === m ? (0, f.NC)("Finish") : (0, f.NC)("Next"),
                        b = "onboarding" === o;
                    return (0, i.jsxs)(i.Fragment, {
                        children: [c && (0, i.jsx)(aR, {}), o && !c && (0, i.jsxs)("div", {
                            "data-testid": "botbuilder-tour-mobile",
                            className: "dbot-slider dbot-slider__bot-builder-tour",
                            children: [(0, i.jsx)("div", {
                                className: "dbot-slider__label",
                                children: (0, i.jsx)(es.Z, {
                                    as: "span",
                                    size: "xs",
                                    weight: "bold",
                                    children: null == p ? void 0 : p.header
                                })
                            }), (0, i.jsx)("div", {
                                className: "dbot-slider__content",
                                children: (0, i.jsx)(es.Z, {
                                    as: "span",
                                    lineHeight: "s",
                                    size: "xs",
                                    children: null == p ? void 0 : p.content
                                })
                            }), (0, i.jsxs)("div", {
                                className: "dbot-slider__status",
                                children: [(0, i.jsx)("div", {
                                    className: "dbot-slider__progress-bar",
                                    children: (0, i.jsx)(aL, {
                                        step: m,
                                        steps_list: aS.map(e => e.tour_step_key.toString()),
                                        onStepChange: x
                                    })
                                }), (0, i.jsxs)("div", {
                                    className: "dbot-slider__button-group",
                                    children: [1 !== m && (0, i.jsx)(aM, {
                                        onClick: () => {
                                            x(m - 1)
                                        },
                                        label: (0, f.NC)("Previous"),
                                        "data-testid": "prev-bot-builder-tour"
                                    }), (0, i.jsx)(aM, {
                                        type: "danger",
                                        onClick: () => {
                                            x(m + 1), n(m, b)
                                        },
                                        label: g,
                                        "data-testid": v
                                    })]
                                })]
                            })]
                        })]
                    })
                }),
                aF = (0, r.Pi)(e => {
                    let {
                        is_mobile: t
                    } = e;
                    return (0, i.jsx)(i.Fragment, {
                        children: t ? (0, i.jsx)(aU, {}) : (0, i.jsx)(aO, {})
                    })
                });
            var aP = s("16310");
            let aZ = e => {
                    let {
                        form_values: t,
                        selected_strategy: s
                    } = e;
                    sq.Analytics.trackEvent("ce_bot_form", {
                        action: sY.om.RUN_QUICK_STRATEGY,
                        form_name: sY.oH,
                        subform_name: "quick_strategy",
                        strategy_name: (0, sK.gc)(s),
                        ...(0, sK.qc)({
                            form_values: t,
                            selected_strategy: s
                        })
                    })
                },
                az = e => {
                    let {
                        form_values: t,
                        selected_strategy: s
                    } = e;
                    sq.Analytics.trackEvent("ce_bot_form", {
                        action: sY.om.EDIT_QUICK_STRATEGY,
                        form_name: sY.oH,
                        subform_name: "quick_strategy",
                        strategy_name: (0, sK.gc)(s),
                        ...(0, sK.qc)({
                            form_values: t,
                            selected_strategy: s
                        })
                    })
                };
            var a$ = s("85414"),
                aB = s("53890"),
                aG = s("81624");
            var aV = ((n = {})[n.StrategySelect = 0] = "StrategySelect", n[n.StrategyVerified = 1] = "StrategyVerified", n[n.StrategyCompleted = 2] = "StrategyCompleted", n);
            let aX = Object.freeze({
                    ALL: 0,
                    ACCUMULATORS: 1,
                    OPTIONS: 2
                }),
                aH = [(0, f.NC)("All"), (0, f.NC)("Accumulators"), (0, f.NC)("Options")],
                aq = [{
                    name: "MARTINGALE",
                    display_name: (0, a$.j)().MARTINGALE.label,
                    id: 0,
                    parent: [(0, f.NC)("Options")]
                }, {
                    name: "D_ALEMBERT",
                    display_name: (0, a$.j)().D_ALEMBERT.label,
                    id: 1,
                    parent: [(0, f.NC)("Options")]
                }, {
                    name: "REVERSE_MARTINGALE",
                    display_name: (0, a$.j)().REVERSE_MARTINGALE.label,
                    id: 2,
                    parent: [(0, f.NC)("Options")]
                }, {
                    name: "REVERSE_D_ALEMBERT",
                    display_name: (0, a$.j)().REVERSE_D_ALEMBERT.label,
                    id: 3,
                    parent: [(0, f.NC)("Options")]
                }, {
                    name: "OSCARS_GRIND",
                    display_name: (0, a$.j)().OSCARS_GRIND.label,
                    id: 4,
                    parent: [(0, f.NC)("Options")]
                }, {
                    name: "STRATEGY_1_3_2_6",
                    display_name: (0, a$.j)().STRATEGY_1_3_2_6.label,
                    id: 5,
                    parent: [(0, f.NC)("Options")]
                }, {
                    name: "ACCUMULATORS_MARTINGALE",
                    display_name: (0, a$.j)().ACCUMULATORS_MARTINGALE.label,
                    id: 6,
                    parent: [(0, f.NC)("Accumulators")]
                }, {
                    name: "ACCUMULATORS_MARTINGALE_ON_STAT_RESET",
                    display_name: (0, a$.j)().ACCUMULATORS_MARTINGALE_ON_STAT_RESET.label,
                    id: 7,
                    parent: [(0, f.NC)("Accumulators")]
                }, {
                    name: "ACCUMULATORS_DALEMBERT",
                    display_name: (0, a$.j)().ACCUMULATORS_DALEMBERT.label,
                    id: 8,
                    parent: [(0, f.NC)("Accumulators")]
                }, {
                    name: "ACCUMULATORS_DALEMBERT_ON_STAT_RESET",
                    display_name: (0, a$.j)().ACCUMULATORS_DALEMBERT_ON_STAT_RESET.label,
                    id: 9,
                    parent: [(0, f.NC)("Accumulators")]
                }, {
                    name: "ACCUMULATORS_REVERSE_MARTINGALE",
                    display_name: (0, a$.j)().ACCUMULATORS_REVERSE_MARTINGALE.label,
                    id: 10,
                    parent: [(0, f.NC)("Accumulators")]
                }, {
                    name: "ACCUMULATORS_REVERSE_MARTINGALE_ON_STAT_RESET",
                    display_name: (0, a$.j)().ACCUMULATORS_REVERSE_MARTINGALE_ON_STAT_RESET.label,
                    id: 11,
                    parent: [(0, f.NC)("Accumulators")]
                }, {
                    name: "ACCUMULATORS_REVERSE_DALEMBERT",
                    display_name: (0, a$.j)().ACCUMULATORS_REVERSE_DALEMBERT.label,
                    id: 12,
                    parent: [(0, f.NC)("Accumulators")]
                }, {
                    name: "ACCUMULATORS_REVERSE_DALEMBERT_ON_STAT_RESET",
                    display_name: (0, a$.j)().ACCUMULATORS_REVERSE_DALEMBERT_ON_STAT_RESET.label,
                    id: 13,
                    parent: [(0, f.NC)("Accumulators")]
                }],
                aY = e => {
                    let {
                        current_step: t,
                        is_mobile: s = !1
                    } = e, a = t === aV.StrategyCompleted ? 100 : 50;
                    return s ? (0, i.jsx)(aG.D, {
                        percentage: a,
                        label: "",
                        danger_limit: 101,
                        is_loading: !1,
                        warning_limit: 0
                    }) : (0, i.jsx)("div", {
                        className: "qs-stepper",
                        children: (0, i.jsx)(aB.t, {
                            currentStep: t,
                            labels: [(0, f.NC)("Default"), (0, f.NC)("Strategy template"), (0, f.NC)("Trade parameters")]
                        })
                    })
                };
            var aW = s("17009"),
                aK = s("95975"),
                aJ = s("35371"),
                aQ = s("51667");
            let a0 = e => {
                    let {
                        title: t,
                        items: s,
                        onSelectStrategy: a
                    } = e;
                    return s.length > 0 ? (0, i.jsxs)("div", {
                        className: "strategy-template-picker__strategy",
                        children: [(0, i.jsx)("div", {
                            className: "strategy-template-picker__title",
                            children: (0, i.jsx)(es.Z, {
                                size: "xs",
                                weight: "bold",
                                children: t
                            })
                        }), s.map((e, s) => (0, i.jsx)("div", {
                            className: "strategy-template-picker__links",
                            children: (0, i.jsx)(b.r, {
                                hasChevron: !0,
                                size: "sm",
                                onClick: () => a(e.name, t),
                                children: e.display_name
                            })
                        }, s))]
                    }) : null
                },
                a1 = e => {
                    let {
                        selector_chip_value: t,
                        search_value: s,
                        is_searching: a,
                        onSelectStrategy: n
                    } = e, l = [], r = !1, o = e => (r = e.toLowerCase().includes(s.toLowerCase()), a && r || !a);
                    aq.filter(e => e.parent.some(e => o(e)) || e.display_name.toLowerCase().includes(s.toLowerCase())).forEach(e => {
                        let t = { ...e
                        };
                        if (a && "" !== s) {
                            if (e.display_name.toLowerCase().includes(s.toLowerCase())) t.parent = [...e.parent];
                            else {
                                let a = t.parent.filter(e => e.toLowerCase().includes(s.toLowerCase()));
                                t.parent = a.length > 0 ? a : e.parent
                            }
                        } else t.parent = [...e.parent];
                        l.push(t)
                    });
                    let c = l.filter(e => e.parent.includes(aH[aX.OPTIONS])),
                        d = l.filter(e => e.parent.includes(aH[aX.MULTIPLIERS])),
                        u = l.filter(e => e.parent.includes(aH[aX.ACCUMULATORS])),
                        h = aH[t],
                        _ = [{
                            type: (0, f.NC)("Accumulators"),
                            items: u
                        }, {
                            type: (0, f.NC)("Options"),
                            items: c
                        }, {
                            type: (0, f.NC)("Multipliers"),
                            items: d
                        }],
                        m = e => h === (0, f.NC)("All") || h === e,
                        x = _.filter(e => {
                            let {
                                type: t
                            } = e;
                            return m(t)
                        }),
                        p = x.some(e => {
                            let {
                                items: t
                            } = e;
                            return t.length > 0
                        });
                    return l.length > 0 && p ? (0, i.jsx)("div", {
                        className: "strategy-template-picker__strategies",
                        children: x.map(e => {
                            let {
                                type: t,
                                items: s
                            } = e;
                            return (0, i.jsx)(a0, {
                                title: t,
                                items: s,
                                onSelectStrategy: n
                            }, t)
                        })
                    }) : (0, i.jsx)("div", {
                        className: "no-results",
                        children: (0, i.jsx)(es.Z, {
                            size: "xs",
                            children: (0, f.NC)("No results found")
                        })
                    })
                },
                a5 = (0, r.Pi)(e => {
                    let {
                        setCurrentStep: t,
                        setSelectedTradeType: s
                    } = e, {
                        dashboard: a,
                        quick_strategy: n
                    } = (0, j.oR)(), {
                        setActiveTabTutorial: r,
                        setActiveTab: o,
                        setFAQSearchValue: c,
                        filterTuotrialTab: d
                    } = a, {
                        setFormVisibility: u,
                        setSelectedStrategy: h
                    } = n, [_, m] = l.useState(0), [x, p] = l.useState(!1), [v, g] = l.useState(""), b = e => {
                        m(e)
                    };
                    return (0, i.jsxs)("div", {
                        className: "strategy-template-picker",
                        children: [(0, i.jsxs)("div", {
                            className: "strategy-template-picker__panel",
                            children: [(0, i.jsx)(aJ.U, {
                                onChange: e => {
                                    g(e.target.value), p(!0), c(e.target.value), d(e.target.value)
                                },
                                placeholder: (0, f.NC)("Search"),
                                type: "text",
                                value: v,
                                inputSize: "sm"
                            }), (0, i.jsx)("button", {
                                className: "strategy-template-picker__icon",
                                onClick: () => {
                                    o(t2.ve.TUTORIAL), r(2), u(!1)
                                },
                                children: (0, i.jsx)(aK.Z, {
                                    iconSize: "sm"
                                })
                            })]
                        }), (0, i.jsx)("div", {
                            className: "strategy-template-picker__chips",
                            children: aH.map((e, t) => (0, i.jsx)(aQ.A.Selectable, {
                                onClick: () => b(t),
                                selected: t == _,
                                size: "sm",
                                label: e
                            }, t))
                        }), (0, i.jsx)(a1, {
                            selector_chip_value: _,
                            search_value: v,
                            is_searching: x,
                            onSelectStrategy: (e, a) => {
                                h(e), s(a), t(aV.StrategyVerified)
                            }
                        })]
                    })
                }),
                a2 = () => {
                    let {
                        client: e
                    } = (0, j.oR)(), {
                        currency: t,
                        balance: s,
                        is_logged_in: a
                    } = e, {
                        submitForm: n,
                        setFieldValue: i,
                        values: l,
                        isValid: r,
                        validateForm: o
                    } = (0, eM.u6)(), {
                        quick_strategy: c,
                        run_panel: d
                    } = (0, j.oR)(), {
                        toggleStopBotDialog: u,
                        setLossThresholdWarningData: h,
                        loss_threshold_warning_data: _,
                        onSubmit: m
                    } = c, x = async () => {
                        d.is_running ? (await i("action", "EDIT"), o(), n(), u()) : (await i("action", "RUN"), o(), n().then(e => {
                            r && e && m(e)
                        }))
                    };
                    return {
                        handleSubmit: async () => {
                            var e;
                            let n = Number((null == l ? void 0 : l.loss) ? ? 0),
                                i = Number((null == l ? void 0 : l.profit) ? ? 0),
                                r = JSON.parse((null === (e = localStorage) || void 0 === e ? void 0 : e.getItem("qs-dont-show-loss-threshold-warning")) ? ? "false");
                            !_.already_shown && (n > .5 * Number(s ? ? 0) || n > 2 * i) && a && !r ? h({
                                show: !0,
                                loss_amount: n,
                                currency: t,
                                already_shown: !0
                            }) : x()
                        },
                        proceedFormSubmission: x
                    }
                },
                a8 = e => {
                    let {
                        selected_trade_type: t,
                        selected_startegy_label: s,
                        children: a
                    } = e;
                    return (0, i.jsxs)(i.Fragment, {
                        children: [(0, i.jsxs)("div", {
                            className: "qs__selected-options",
                            children: [(0, i.jsxs)("div", {
                                className: "qs__selected-options__item",
                                children: [(0, i.jsx)(es.Z, {
                                    size: "xs",
                                    lineHeight: "s",
                                    children: (0, f.NC)("Trade type")
                                }), (0, i.jsx)(es.Z, {
                                    size: "xs",
                                    weight: "bold",
                                    lineHeight: "s",
                                    children: t
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "qs__selected-options__item",
                                children: [(0, i.jsx)(es.Z, {
                                    size: "xs",
                                    lineHeight: "s",
                                    children: (0, f.NC)("Strategy")
                                }), (0, i.jsx)(es.Z, {
                                    className: "qs__selected-options__item__description",
                                    weight: "bold",
                                    lineHeight: "s",
                                    children: s
                                })]
                            })]
                        }), (0, i.jsx)(aW.Z, {
                            formfields: a,
                            active_tab: "TRADE_PARAMETERS"
                        })]
                    })
                },
                a3 = (0, r.Pi)(e => {
                    let {
                        children: t,
                        current_step: s,
                        setCurrentStep: a,
                        onClickClose: n,
                        selected_trade_type: r,
                        setSelectedTradeType: o
                    } = e, c = l.useRef(null), {
                        submitForm: d,
                        isValid: u,
                        setFieldValue: h,
                        validateForm: _,
                        values: m
                    } = (0, eM.u6)(), {
                        quick_strategy: x
                    } = (0, j.oR)(), {
                        selected_strategy: p,
                        onSubmit: v,
                        is_stop_bot_dialog_open: g
                    } = x, {
                        handleSubmit: b
                    } = a2(), y = (0, a$.j)()[p].label, N = s === aV.StrategySelect;
                    l.useEffect(() => {
                        u && s === aV.StrategyVerified && a(aV.StrategyCompleted), !u && s === aV.StrategyCompleted && a(aV.StrategyVerified)
                    }, [u, s]), l.useEffect(() => {
                        _()
                    }, [p, _]);
                    let C = async () => {
                            await h("action", "EDIT"), _(), d().then(e => {
                                u && e && (az({
                                    form_values: m,
                                    selected_strategy: p
                                }), v(e))
                            })
                        },
                        S = () => {
                            b()
                        },
                        T = l.useCallback(() => {
                            switch (s) {
                                case aV.StrategySelect:
                                    return (0, i.jsx)(a5, {
                                        setCurrentStep: a,
                                        setSelectedTradeType: o
                                    });
                                case aV.StrategyVerified:
                                case aV.StrategyCompleted:
                                    return (0, i.jsx)(a8, {
                                        selected_trade_type: r,
                                        selected_startegy_label: y,
                                        children: t
                                    });
                                default:
                                    return null
                            }
                        }, [s, r, y, t, a, o]);
                    return !g && (0, i.jsxs)("div", {
                        className: "qs",
                        children: [(0, i.jsxs)("div", {
                            className: "qs__head",
                            children: [(0, i.jsx)("div", {
                                className: "qs__head__title",
                                children: (0, i.jsx)(es.Z, {
                                    weight: "bold",
                                    children: (0, f.NC)("Quick Strategy")
                                })
                            }), (0, i.jsx)("div", {
                                className: "qs__head__action",
                                children: (0, i.jsx)("span", {
                                    "data-testid": "qs-desktop-close-button",
                                    onClick: n,
                                    tabIndex: 0,
                                    onKeyDown: e => {
                                        "Enter" === e.key && n()
                                    },
                                    children: (0, i.jsx)(E.Z, {
                                        height: "20px",
                                        width: "20px"
                                    })
                                })
                            })]
                        }), (0, i.jsxs)("div", {
                            className: "qs__body",
                            children: [(0, i.jsxs)("div", {
                                className: "qs__body__sidebar",
                                children: [(0, i.jsx)("div", {
                                    className: "qs__body__sidebar__subtitle",
                                    children: (0, i.jsx)(es.Z, {
                                        size: "xs",
                                        children: (0, f.NC)("Choose a template below and set your trade parameters.")
                                    })
                                }), (0, i.jsx)(aY, {
                                    current_step: s
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "qs__body__content",
                                children: [(0, i.jsx)(er.Z, {
                                    className: "qs__form__container qs__form__container--footer",
                                    autohide: !1,
                                    refSetter: c,
                                    children: T()
                                }), !N && (0, i.jsxs)("div", {
                                    className: "qs__body__content__footer",
                                    children: [(0, i.jsx)(eA.Z, {
                                        transparent: !0,
                                        classNameSpan: "qs__body__content__footer--back",
                                        disabled: N,
                                        onClick: () => {
                                            a(aV.StrategySelect)
                                        },
                                        children: (0, f.NC)("Back")
                                    }), (0, i.jsx)(eA.Z, {
                                        secondary: !0,
                                        disabled: !u,
                                        onClick: C,
                                        children: (0, f.NC)("Load")
                                    }), (0, i.jsx)(eA.Z, {
                                        "data-testid": "qs-run-button",
                                        primary: !0,
                                        onClick: e => {
                                            e.preventDefault(), S()
                                        },
                                        disabled: !u,
                                        children: (0, f.NC)("Run")
                                    })]
                                })]
                            })]
                        })]
                    })
                }),
                a4 = l.memo(a3),
                a7 = (0, r.Pi)(e => {
                    let {
                        children: t,
                        current_step: s,
                        selected_trade_type: a,
                        setCurrentStep: n,
                        setSelectedTradeType: r
                    } = e, {
                        isValid: o,
                        validateForm: c
                    } = (0, eM.u6)(), {
                        quick_strategy: d
                    } = (0, j.oR)(), {
                        selected_strategy: u
                    } = d, h = (0, a$.j)()[u].label, _ = s === aV.StrategyVerified || s === aV.StrategyCompleted, m = s === aV.StrategySelect;
                    return l.useEffect(() => {
                        c()
                    }, [u, c]), l.useEffect(() => {
                        o && s === aV.StrategyVerified && n(aV.StrategyCompleted), !o && s === aV.StrategyCompleted && n(aV.StrategyVerified)
                    }, [o, s]), (0, i.jsx)("div", {
                        className: "qs",
                        children: (0, i.jsx)("div", {
                            className: "qs__body",
                            children: (0, i.jsx)("div", {
                                className: "qs__body__content",
                                children: (0, i.jsxs)(er.Z, {
                                    className: U()("qs__form__container qs__form__container--footer", {
                                        "qs__form__container--template": m
                                    }),
                                    autohide: !1,
                                    children: [(0, i.jsx)(aY, {
                                        setCurrentStep: n,
                                        current_step: s,
                                        isValid: o,
                                        is_mobile: !0
                                    }), m && (0, i.jsx)(a5, {
                                        setSelectedTradeType: r,
                                        setCurrentStep: n
                                    }), _ && (0, i.jsxs)(i.Fragment, {
                                        children: [(0, i.jsxs)("div", {
                                            className: "qs__selected-options",
                                            children: [(0, i.jsxs)("div", {
                                                className: "qs__selected-options__item",
                                                children: [(0, i.jsx)(es.Z, {
                                                    size: "xs",
                                                    children: (0, f.NC)("Trade type")
                                                }), (0, i.jsx)(es.Z, {
                                                    size: "xs",
                                                    weight: "bold",
                                                    children: a
                                                })]
                                            }), (0, i.jsxs)("div", {
                                                className: "qs__selected-options__item",
                                                children: [(0, i.jsx)(es.Z, {
                                                    size: "xs",
                                                    children: (0, f.NC)("Strategy")
                                                }), (0, i.jsx)(es.Z, {
                                                    className: "qs__selected-options__item__description",
                                                    size: "xs",
                                                    weight: "bold",
                                                    children: h
                                                })]
                                            })]
                                        }), (0, i.jsx)(aW.Z, {
                                            formfields: t,
                                            active_tab: "TRADE_PARAMETERS"
                                        })]
                                    })]
                                })
                            })
                        })
                    })
                }),
                a6 = (0, r.Pi)(e => {
                    let {
                        current_step: t,
                        setCurrentStep: s
                    } = e, {
                        quick_strategy: a
                    } = (0, j.oR)(), {
                        selected_strategy: n
                    } = a, {
                        isValid: l,
                        values: r
                    } = (0, eM.u6)(), {
                        handleSubmit: o
                    } = a2(), c = t === aV.StrategyVerified || t === aV.StrategyCompleted, d = t === aV.StrategySelect, u = () => {
                        aZ({
                            form_values: r,
                            selected_strategy: n
                        }), o()
                    };
                    return (0, i.jsx)(i.Fragment, {
                        children: c && (0, i.jsxs)("div", {
                            className: "qs__body__content__footer",
                            children: [(0, i.jsx)(eA.Z, {
                                secondary: !0,
                                disabled: d,
                                onClick: () => {
                                    s(aV.StrategySelect)
                                },
                                children: (0, f.NC)("Back")
                            }), (0, i.jsx)(eA.Z, {
                                primary: !0,
                                "data-testid": "qs-run-button",
                                type: "submit",
                                onClick: e => {
                                    e.preventDefault(), u()
                                },
                                disabled: !l,
                                children: (0, f.NC)("Run")
                            })]
                        })
                    })
                }),
                a9 = "loss-threshold-warning-dialog",
                ne = (0, r.Pi)(() => {
                    let {
                        quick_strategy: e
                    } = (0, j.oR)(), {
                        loss_threshold_warning_data: t,
                        setLossThresholdWarningData: s,
                        initializeLossThresholdWarningData: a
                    } = e, {
                        proceedFormSubmission: n
                    } = a2();
                    return (0, i.jsxs)(sB.Z, {
                        portal_element_id: "modal_root",
                        title: (0, f.NC)("Are you sure you want to continue?"),
                        is_visible: t.show,
                        confirm_button_text: (0, f.NC)("Yes, continue"),
                        onConfirm: () => {
                            a(), n()
                        },
                        cancel_button_text: (0, f.NC)("Edit the amount"),
                        onCancel: () => {
                            s({
                                show: !1,
                                highlight_field: ["loss"]
                            })
                        },
                        is_mobile_full_width: !1,
                        has_close_icon: !1,
                        className: a9,
                        children: [(0, i.jsx)("div", {
                            className: `${a9}__body-text`,
                            children: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "Please confirm that your loss threshold amount is {{loss_amount}} {{currency}}.",
                                values: {
                                    loss_amount: null == t ? void 0 : t.loss_amount,
                                    currency: null == t ? void 0 : t.currency
                                }
                            })
                        }), (0, i.jsx)(eb, {
                            defaultChecked: !1,
                            label: (0, f.NC)("Do not show this message again."),
                            onChange: () => {
                                var e, t;
                                let s = JSON.parse((null === (e = localStorage) || void 0 === e ? void 0 : e.getItem("qs-dont-show-loss-threshold-warning")) ? ? "false");
                                null === (t = localStorage) || void 0 === t || t.setItem("qs-dont-show-loss-threshold-warning", `${!s}`)
                            }
                        })]
                    })
                });
            var nt = s("67026"),
                ns = s("63069");
            let na = e => {
                    let {
                        parent_rect: t,
                        child_height: s = 0
                    } = e;
                    return ((null == t ? void 0 : t.top) || 0) + ((null == t ? void 0 : t.height) || 0) + s
                },
                nn = e => {
                    let {
                        parent_rect: t,
                        child_height: s = 0
                    } = e;
                    return Number(null == t ? void 0 : t.top) - s
                },
                ni = e => {
                    let {
                        preferred_alignment: t = "bottom",
                        child_el: s,
                        parent_el: a,
                        should_consider_parent_height: n = !0
                    } = e, i = null == a ? void 0 : a.getBoundingClientRect(), l = null == s ? void 0 : s.clientHeight, r = document.body.getBoundingClientRect(), {
                        top: o,
                        bottom: c,
                        left: d,
                        width: u
                    } = i || {
                        top: 0,
                        bottom: 0,
                        left: 0,
                        width: 0
                    }, h = na({
                        parent_rect: i,
                        child_height: l
                    }), _ = {
                        bottom: r.bottom - (n ? o : c) + 8,
                        insetInlineStart: d,
                        width: u,
                        transformOrigin: "bottom"
                    }, m = {
                        top: n ? c : o,
                        insetInlineStart: d,
                        width: u,
                        transformOrigin: "top"
                    };
                    if ("bottom" === t && h <= r.height) return {
                        style: m,
                        placement: "bottom"
                    };
                    let x = nn({
                        parent_rect: i,
                        child_height: l
                    });
                    return "top" === t && x >= 0 ? {
                        style: _,
                        placement: "top"
                    } : h - r.height < 0 - x ? {
                        style: m,
                        placement: "bottom"
                    } : {
                        style: _,
                        placement: "top"
                    }
                };
            var nl = s("46677");
            let nr = e => {
                l.useEffect(() => {
                    if (!e) return;
                    let t = e => e ? e.classList.contains("dc-themed-scrollbars") && e.scrollHeight > e.clientHeight ? e : t(e.parentElement) : null,
                        s = t(e.current),
                        a = navigator.userAgent.indexOf("Firefox") > -1;
                    return s && (s.style.overflow = "hidden", s.style.width = a ? "100%" : "calc(100% - 5px)"), () => {
                        s && (s.style.removeProperty("overflow"), s.style.removeProperty("width"))
                    }
                }, [e])
            };
            var no = s("33716"),
                nc = s("40150");
            let nd = e => {
                    let {
                        is_active: t,
                        is_disabled: s,
                        index: a,
                        item: n,
                        child_ref: l,
                        onItemSelection: r,
                        setActiveIndex: o
                    } = e;
                    return (0, i.jsx)("div", {
                        ref: l,
                        onMouseDown: e => {
                            e.stopPropagation(), r(n), o(a)
                        },
                        className: U()("dc-dropdown-list__item", {
                            "dc-dropdown-list__item--active": t,
                            "dc-dropdown-list__item--disabled": s
                        }),
                        children: "object" == typeof n ? n.component || n.text : n
                    })
                },
                nu = l.forwardRef((e, t) => {
                    let {
                        active_index: s,
                        list_items: a,
                        is_object_list: n,
                        onItemSelection: r,
                        setActiveIndex: o,
                        not_found_text: c
                    } = e;
                    if (null == a ? void 0 : a.some(e => "object" == typeof e && !!e.group)) {
                        let e = {};
                        a.forEach(t => {
                            let s = "object" == typeof t && t.group || "?";
                            !e[s] && (e[s] = []), e[s].push(t)
                        });
                        let c = Object.keys(e),
                            d = -1;
                        return (0, i.jsx)(i.Fragment, {
                            children: c.map((a, u) => {
                                let h = e[a],
                                    _ = !!c[u + 1];
                                return (0, i.jsxs)(l.Fragment, {
                                    children: [(0, i.jsx)("div", {
                                        className: "dc-dropdown-list__group-header",
                                        children: a
                                    }), h.map(e => (d++, (0, i.jsx)(nd, {
                                        item: e,
                                        index: d,
                                        is_active: d === s,
                                        onItemSelection: r,
                                        setActiveIndex: o,
                                        is_object_list: n,
                                        is_disabled: "object" == typeof e && "DISABLED" === e.disabled,
                                        child_ref: d === s ? t : null
                                    }, d))), _ && (0, i.jsx)("div", {
                                        className: "dc-dropdown-list__separator"
                                    })]
                                }, `group${u}`)
                            })
                        })
                    }
                    return (0, i.jsx)(i.Fragment, {
                        children: (null == a ? void 0 : a.length) ? a.map((e, a) => (0, i.jsx)(nd, {
                            item: e,
                            index: a,
                            is_active: a === s,
                            onItemSelection: r,
                            is_object_list: n,
                            setActiveIndex: o,
                            child_ref: a === s ? t : null
                        }, a)) : (0, i.jsx)("div", {
                            className: "dc-dropdown-list__item dc-dropdown-list__item--not-found",
                            children: c
                        })
                    })
                });
            nu.displayName = "ListItems";
            let nh = e => {
                let {
                    dropdown_ref: t,
                    list_item_ref: s,
                    list_wrapper_ref: a
                } = e.dropdown_refs || {}, {
                    active_index: n,
                    is_visible: l,
                    list_items: r,
                    list_height: o,
                    onScrollStop: c,
                    onItemSelection: d,
                    setActiveIndex: u,
                    style: h,
                    not_found_text: _,
                    portal_id: m
                } = e;
                if ((null == r ? void 0 : r.length) && "string" != typeof r[0] && "object" != typeof r[0]) throw Error("Dropdown received wrong data structure");
                let x = !Array.isArray(r) && "object" == typeof r,
                    p = (null == r ? void 0 : r.length) && "string" == typeof r[0],
                    j = (0, i.jsx)(ek.Z, {
                        appear: l,
                        in: l,
                        timeout: 100,
                        classNames: {
                            enter: "dc-dropdown-list--enter",
                            enterDone: "dc-dropdown-list--enter-done",
                            exit: "dc-dropdown-list--exit"
                        },
                        unmountOnExit: !0,
                        children: (0, i.jsx)("div", {
                            style: h,
                            className: "dc-dropdown-list",
                            ref: a,
                            children: (0, i.jsx)(nc.Z, {
                                height: o || "220px",
                                refSetter: t,
                                onScroll: c,
                                children: x ? Object.keys(r).map((e, t) => (0, i.jsx)(nu, {
                                    not_found_text: _,
                                    active_index: n,
                                    list_items: r[e],
                                    ref: s,
                                    onItemSelection: d,
                                    setActiveIndex: u
                                }, t)) : (0, i.jsx)(nu, {
                                    not_found_text: _,
                                    active_index: n,
                                    list_items: r,
                                    ref: s,
                                    onItemSelection: d,
                                    is_object_list: !p,
                                    setActiveIndex: u
                                })
                            })
                        })
                    });
                if (m) {
                    let e = document.getElementById(m);
                    return e && eY.createPortal(j, e)
                }
                return j
            };
            nh.displayName = "DropdownList";
            let n_ = {
                    ENTER: 13,
                    ESCAPE: 27,
                    TAB: 9,
                    KEYDOWN: 40,
                    KEYUP: 38
                },
                nm = e => "string" == typeof e,
                nx = function(e, t) {
                    let s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                        a = e.toLowerCase();
                    return t.filter(e => (nm(e) ? e.toLowerCase() : (e.text || "").toLowerCase()).includes(a)).sort((e, t) => {
                        let s = (nm(e) ? e : e.text || "").toLowerCase().indexOf(a);
                        return s - (nm(t) ? t : t.text || "").toLowerCase().indexOf(a)
                    }).filter(t => {
                        let a = nm(t) ? t : t.text || "",
                            n = a.toLowerCase(),
                            i = (0, nl._v)(n);
                        return s ? (0, nl.pp)(a, e) : i.includes(e) || n.includes(e)
                    })
                },
                np = l.memo(e => {
                    let t;
                    let s = (0, ns.Re)(),
                        {
                            autoComplete: a,
                            className: n,
                            data_testid: r,
                            dropdown_offset: o,
                            error: c,
                            has_updating_list: d = !0,
                            hide_list: u = !1,
                            historyValue: h,
                            input_id: _,
                            is_alignment_top: m,
                            is_list_visible: x = !1,
                            list_items: p,
                            list_portal_id: j,
                            not_found_text: v = s,
                            onHideDropdownList: g,
                            onItemSelection: b,
                            onSearch: y,
                            onScrollStop: f,
                            onShowDropdownList: N,
                            should_filter_by_char: C,
                            show_list: S = !1,
                            value: T,
                            ...k
                        } = e,
                        w = l.useRef(null),
                        E = l.useRef(null),
                        I = l.useRef(null),
                        A = l.useRef(null),
                        [R, D] = l.useState(!1),
                        [O, L] = l.useState(""),
                        [M, F] = l.useState(-1),
                        [P, Z] = l.useState(p),
                        [z, $] = l.useState({});
                    nr(j && R ? A : void 0);
                    let B = null;
                    l.useEffect(() => {
                        if (d) {
                            let e = [];
                            if (Z(e = x ? "function" == typeof y ? y(T.toLowerCase(), p) : nx(T.toLowerCase(), p) : p), h) {
                                let t = e.findIndex(e => ("object" == typeof e ? e.text : e) === h);
                                L(h), F(t)
                            } else L(""), F(-1)
                        }
                    }, [p, d, h]), l.useEffect(() => {
                        x && F(P.findIndex(e => ("object" == typeof e ? e.text : e) === h))
                    }, [P]), l.useEffect(() => {
                        if (S && q(), u && Y(), R && I.current) {
                            var e;
                            let t = I.current.offsetTop;
                            null === (e = w.current) || void 0 === e || e.scrollTo({
                                top: t,
                                behavior: "smooth"
                            })
                        }
                    }, [S, u, R, I]), l.useEffect(() => {
                        E.current && j && R && $(ni({
                            preferred_alignment: m ? "top" : "bottom",
                            parent_el: A.current,
                            child_el: E.current
                        }).style)
                    }, [R, m, j, null == P ? void 0 : P.length]);
                    let G = () => {
                            if (-1 !== M) {
                                var e, t, s, a, n, i, l;
                                let r = M - 1;
                                if (r < 0) {
                                    let s = null === (e = w.current) || void 0 === e ? void 0 : e.clientHeight;
                                    F(P.length - 1), null === (t = w.current) || void 0 === t || t.scrollTo({
                                        top: s,
                                        behavior: "smooth"
                                    })
                                } else {
                                    let e = Number(null === (s = I.current) || void 0 === s ? void 0 : s.getBoundingClientRect().height);
                                    if (!V(Math.floor(Number(null === (n = I.current) || void 0 === n ? void 0 : null === (a = n.getBoundingClientRect()) || void 0 === a ? void 0 : a.top)) - e)) {
                                        let t = Number(null === (i = I.current) || void 0 === i ? void 0 : i.offsetTop) - e;
                                        null === (l = w.current) || void 0 === l || l.scrollTo({
                                            top: t,
                                            behavior: "smooth"
                                        })
                                    }
                                    F(r)
                                }
                            }
                        },
                        V = e => {
                            var t, s, a;
                            let n = Number(null === (t = w.current) || void 0 === t ? void 0 : t.clientHeight),
                                i = Math.floor(Number(null === (s = E.current) || void 0 === s ? void 0 : s.getBoundingClientRect().top));
                            return !(e >= Math.floor(Number(null === (a = E.current) || void 0 === a ? void 0 : a.getBoundingClientRect().top)) + n) && e > i
                        },
                        X = () => {
                            if (-1 !== M && I.current) {
                                if ("number" == typeof M) {
                                    var e, t, s, a;
                                    let n = M + 1;
                                    if (n >= P.length) F(0), null === (e = w.current) || void 0 === e || e.scrollTo({
                                        top: 0,
                                        behavior: "smooth"
                                    });
                                    else {
                                        let e = I.current.getBoundingClientRect().height,
                                            i = Math.floor(I.current.getBoundingClientRect().top) + e + e / 2,
                                            l = Number(null === (t = w.current) || void 0 === t ? void 0 : t.clientHeight);
                                        if (!V(i)) {
                                            let t = I.current.offsetTop - (l / e - 2) * e;
                                            null === (a = w.current) || void 0 === a || null === (s = a.scrollTo) || void 0 === s || s.call(a, {
                                                top: t,
                                                behavior: "smooth"
                                            })
                                        }
                                        F(n)
                                    }
                                }
                            } else F(0)
                        },
                        H = e => {
                            e && (L(("object" == typeof e ? e.text : e) || ""), null == b || b(e))
                        },
                        q = () => {
                            D(!0), null == N || N()
                        },
                        Y = () => {
                            D(!1), null == g || g()
                        };
                    return (0, i.jsxs)("div", {
                        "data-testid": r,
                        className: U()("dc-autocomplete", n),
                        children: [(0, i.jsx)("div", {
                            ref: A,
                            className: "dc-autocomplete__input-field",
                            children: (0, i.jsx)(eH, { ...k,
                                className: "dc-autocomplete__field",
                                error: c,
                                autoComplete: a,
                                onKeyDown: e => {
                                    switch (e.keyCode) {
                                        case n_.ENTER:
                                            e.preventDefault(), Y(), H(P[M]);
                                            break;
                                        case n_.TAB:
                                            R && (Y(), H(P[M]));
                                            break;
                                        case n_.ESCAPE:
                                            e.preventDefault(), Y();
                                            break;
                                        case n_.KEYDOWN:
                                            !R && q(), X();
                                            break;
                                        case n_.KEYUP:
                                            R ? G() : q();
                                            break;
                                        default:
                                            !R && q()
                                    }
                                },
                                onInput: e => {
                                    let t = e.target.value.toLowerCase(),
                                        s = [];
                                    !(s = "function" == typeof y ? y(t, p) : nx(t, p, C)).length && L(""), Z(s)
                                },
                                input_id: _,
                                onClick: () => {
                                    R ? Y() : q()
                                },
                                onBlur: e => {
                                    e.preventDefault(), Y(), !x && Z(p), "" === O && (null == b || b({
                                        text: v,
                                        value: ""
                                    })), "function" == typeof k.onBlur && k.onBlur(e)
                                },
                                value: "function" == typeof b ? T : O,
                                trailing_icon: k.trailing_icon ? k.trailing_icon : (0, i.jsx)(no.Z, {
                                    className: (0, nt.Z)("dc-autocomplete__trailing-icon", {
                                        "dc-autocomplete__trailing-icon--opened": R,
                                        "dc-autocomplete__trailing-icon--disabled": k.disabled
                                    }),
                                    height: "24px",
                                    width: "24px"
                                })
                            })
                        }), (0, i.jsx)(nh, {
                            dropdown_refs: {
                                dropdown_ref: w,
                                list_item_ref: I,
                                list_wrapper_ref: E
                            },
                            active_index: M,
                            style: {
                                width: A.current ? `${A.current.offsetWidth}px` : "100%",
                                ...z || {
                                    marginTop: o ? `calc(-${o} + 8px)` : "8px"
                                }
                            },
                            is_visible: R || x,
                            list_items: P,
                            list_height: k.list_height,
                            onItemSelection: H,
                            setActiveIndex: F,
                            onScrollStop: e => {
                                if (!f) return;
                                let s = e.currentTarget;
                                (B = s.scrollTop) === s.scrollTop && clearTimeout(t), t = setTimeout(() => {
                                    null == f || f()
                                }, 150)
                            },
                            not_found_text: v,
                            portal_id: j
                        })]
                    })
                });
            np.displayName = "Autocomplete";
            let nj = ["ACCUMULATORS_MARTINGALE", "ACCUMULATORS_DALEMBERT", "ACCUMULATORS_MARTINGALE_ON_STAT_RESET", "ACCUMULATORS_DALEMBERT_ON_STAT_RESET", "ACCUMULATORS_REVERSE_MARTINGALE", "ACCUMULATORS_REVERSE_MARTINGALE_ON_STAT_RESET", "ACCUMULATORS_REVERSE_DALEMBERT", "ACCUMULATORS_REVERSE_DALEMBERT_ON_STAT_RESET"],
                nv = e => {
                    let {
                        symbol: t
                    } = e;
                    return (0, i.jsxs)("div", {
                        className: "qs__select__option",
                        children: [(0, i.jsx)(B, {
                            type: t.value,
                            size: "sm"
                        }), (0, i.jsx)(es.Z, {
                            className: "qs__select__option__text",
                            size: "xs",
                            color: "prominent",
                            children: t.text
                        })]
                    }, t.value)
                },
                ng = () => {
                    let {
                        quick_strategy: e
                    } = (0, j.oR)(), {
                        isDesktop: t
                    } = (0, N.F)(), {
                        setValue: s,
                        selected_strategy: a
                    } = e, [n, r] = l.useState([]), [o, c] = (0, l.useState)(!1), [d, u] = (0, l.useState)({
                        text: "",
                        value: ""
                    }), [h, _] = (0, l.useState)({
                        text: "",
                        value: ""
                    }), {
                        setFieldValue: m,
                        values: x
                    } = (0, eM.u6)(), p = nj.includes(a), v = (0, l.useMemo)(() => n.map(e => ({
                        component: (0, i.jsx)(nv, {
                            symbol: e
                        }, e.text),
                        ...e
                    })).filter(e => {
                        var t;
                        return !p || (null == e ? void 0 : null === (t = e.group) || void 0 === t ? void 0 : t.startsWith("Continuous Indices"))
                    }), [n, p]);
                    (0, l.useEffect)(() => {
                        var e, t, a;
                        let {
                            active_symbols: n
                        } = (null === Z.ApiHelpers || void 0 === Z.ApiHelpers ? void 0 : Z.ApiHelpers.instance) ? ? {}, i = null == n ? void 0 : null === (e = n.getSymbolsForBot) || void 0 === e ? void 0 : e.call(n);
                        r(i), !(null == i ? void 0 : i.find(e => (null == e ? void 0 : e.value) === (null == x ? void 0 : x.symbol))) && (m("symbol", null == i ? void 0 : null === (t = i[0]) || void 0 === t ? void 0 : t.value), s("symbol", null == i ? void 0 : null === (a = i[0]) || void 0 === a ? void 0 : a.value))
                    }, []), (0, l.useEffect)(() => {
                        let e = v.find(e => e.value === x.symbol);
                        e && u({
                            text: e.text,
                            value: e.value
                        })
                    }, [v, x.symbol, u]);
                    let g = () => {
                            t && !o && (c(!0), u({
                                text: "",
                                value: ""
                            }))
                        },
                        b = e => {
                            u({ ...d,
                                text: e.target.value
                            })
                        },
                        y = e => {
                            if (null == e ? void 0 : e.value) {
                                let {
                                    value: t
                                } = e;
                                m("symbol", t), s("symbol", t), c(!1)
                            }
                        },
                        f = () => {
                            if (t) {
                                let e = v.find(e => e.value === x.symbol);
                                e && e.text !== d.text && (u({
                                    text: e.text,
                                    value: e.value
                                }), _({
                                    text: e.text,
                                    value: e.value
                                }), c(!1)), !e && (u({
                                    text: h.text,
                                    value: h.value
                                }), c(!1))
                            }
                        };
                    return (0, i.jsx)("div", {
                        className: "qs__form__field qs__form__field__input",
                        children: (0, i.jsx)(eM.gN, {
                            name: "symbol",
                            id: "asset",
                            children: e => {
                                let {
                                    field: { ...s
                                    }
                                } = e;
                                return (0, i.jsx)(i.Fragment, {
                                    children: (0, i.jsx)(np, { ...s,
                                        readOnly: !t,
                                        inputMode: "none",
                                        "data-testid": "dt_qs_symbol",
                                        autoComplete: "off",
                                        className: "qs__autocomplete",
                                        value: d.text,
                                        list_items: v,
                                        onItemSelection: y,
                                        onChange: b,
                                        onFocus: g,
                                        onHideDropdownList: f,
                                        leading_icon: (0, i.jsx)(B, {
                                            type: d.value,
                                            size: "sm"
                                        })
                                    })
                                })
                            }
                        }, "asset")
                    })
                },
                nb = e => {
                    let {
                        trade_type: {
                            value: t,
                            icon: s,
                            text: a
                        }
                    } = e;
                    return (0, i.jsxs)("div", {
                        className: "qs__select__option",
                        children: [(null == s ? void 0 : s.length) ? s.map((e, t) => (0, i.jsx)(X, {
                            type: e,
                            className: "qs__select__option__icon",
                            size: "sm"
                        }, `${e}id-${t}`)) : null, (0, i.jsx)(es.Z, {
                            className: "qs__select__option__text",
                            size: "xs",
                            color: "prominent",
                            children: a
                        })]
                    }, t)
                },
                ny = () => {
                    let [e, t] = l.useState([]), {
                        setFieldValue: s,
                        values: a,
                        validateForm: n
                    } = (0, eM.u6)(), {
                        quick_strategy: r
                    } = (0, j.oR)(), {
                        setValue: o,
                        selected_strategy: c
                    } = r, d = nj.includes(c);
                    l.useEffect(() => {
                        if (null == a ? void 0 : a.symbol) {
                            let e = null == a ? void 0 : a.tradetype,
                                i = d ? "ACCU" : "",
                                {
                                    contracts_for: l
                                } = (null === Z.ApiHelpers || void 0 === Z.ApiHelpers ? void 0 : Z.ApiHelpers.instance) ? ? {};
                            (async () => {
                                var n, r;
                                let c = await (null == l ? void 0 : null === (n = l.getTradeTypesForQuickStrategy) || void 0 === n ? void 0 : n.call(l, null == a ? void 0 : a.symbol, i));
                                !(null == c ? void 0 : c.some(t => t.value === e)) && (null == c ? void 0 : null === (r = c[0]) || void 0 === r ? void 0 : r.value) !== e && (null == s || s("tradetype", (null == c ? void 0 : c[0].value) || ""), o("tradetype", null == c ? void 0 : c[0].value)), t(c)
                            })(), n()
                        }
                    }, [null == a ? void 0 : a.symbol]);
                    let u = l.useMemo(() => e.map(e => ({
                        component: (0, i.jsx)(nb, {
                            trade_type: e
                        }, e.text),
                        ...e
                    })), [e]);
                    return (0, i.jsx)("div", {
                        className: "qs__form__field qs__form__field__input qs__form__field__group-icons",
                        children: (0, i.jsx)(eM.gN, {
                            name: "tradetype",
                            id: "tradetype",
                            children: e => {
                                var t, a;
                                let {
                                    field: n
                                } = e, l = null == u ? void 0 : u.find(e => e.value === n.value), r = d ? "Buy" : null == l ? void 0 : l.text;
                                return (0, i.jsx)(np, { ...n,
                                    readOnly: !0,
                                    inputMode: "none",
                                    "data-testid": "dt_qs_tradetype",
                                    autoComplete: "off",
                                    className: "qs__autocomplete",
                                    value: r || "",
                                    list_items: u,
                                    onItemSelection: e => {
                                        let t = null == e ? void 0 : e.value,
                                            a = null == e ? void 0 : e.text;
                                        t && a && (null == s || s("tradetype", t), o("tradetype", t))
                                    },
                                    leading_icon: (0, i.jsxs)(es.Z, {
                                        children: [(0, i.jsx)(X, {
                                            type: (null == l ? void 0 : null === (t = l.icon) || void 0 === t ? void 0 : t[0]) || "CALL",
                                            size: "sm"
                                        }), (0, i.jsx)(X, {
                                            type: (null == l ? void 0 : null === (a = l.icon) || void 0 === a ? void 0 : a[1]) || "PUT",
                                            size: "sm"
                                        })]
                                    })
                                })
                            }
                        }, "tradetype")
                    })
                },
                nf = (0, r.Pi)(e => {
                    let {
                        name: t
                    } = e, {
                        isDesktop: s
                    } = (0, N.F)(), [a, n] = l.useState([]), {
                        quick_strategy: r
                    } = (0, j.oR)(), {
                        setValue: o
                    } = r, {
                        setFieldValue: c,
                        values: d
                    } = (0, eM.u6)(), {
                        symbol: u,
                        tradetype: h
                    } = d;
                    l.useEffect(() => {
                        if (h && u) {
                            let e = null == d ? void 0 : d.type;
                            (async () => {
                                var s, a, i;
                                let {
                                    contracts_for: l
                                } = (null === Z.ApiHelpers || void 0 === Z.ApiHelpers ? void 0 : Z.ApiHelpers.instance) ? ? {}, r = await (null == l ? void 0 : null === (s = l.getContractTypes) || void 0 === s ? void 0 : s.call(l, h));
                                n(r), !(null == r ? void 0 : r.some(t => t.value === e)) && (null == c || c(t, null == r ? void 0 : null === (a = r[0]) || void 0 === a ? void 0 : a.value), o(t, null == r ? void 0 : null === (i = r[0]) || void 0 === i ? void 0 : i.value))
                            })()
                        }
                    }, [u, h]);
                    let _ = e => {
                            null == c || c(t, e), o(t, e)
                        },
                        m = `qs-contract-type-${t}`;
                    return (0, i.jsx)("div", {
                        className: "qs__form__field qs__form__field__input no-top-spacing",
                        children: (0, i.jsx)(eM.gN, {
                            name: t,
                            id: m,
                            children: e => {
                                let {
                                    field: t
                                } = e, n = null == a ? void 0 : a.find(e => (null == e ? void 0 : e.value) === (null == t ? void 0 : t.value));
                                return s ? (0, i.jsx)(np, { ...t,
                                    readOnly: !0,
                                    inputMode: "none",
                                    "data-testid": "dt_qs_contract_type",
                                    autoComplete: "off",
                                    className: "qs__select contract-type",
                                    value: (null == n ? void 0 : n.text) || "",
                                    list_items: a,
                                    onItemSelection: e => {
                                        let {
                                            value: t
                                        } = e;
                                        t && _(t)
                                    }
                                }) : (0, i.jsx)("ul", {
                                    className: "qs__form__field__list",
                                    "data-testid": "dt_qs_contract_types",
                                    children: a.map(e => {
                                        let t = (null == n ? void 0 : n.value) === (null == e ? void 0 : e.value);
                                        return (0, i.jsx)("li", {
                                            className: U()("qs__form__field__list__item", {
                                                "qs__form__field__list__item--active": t
                                            }),
                                            onClick: () => {
                                                _(null == e ? void 0 : e.value)
                                            },
                                            children: (0, i.jsx)(es.Z, {
                                                size: "xs",
                                                color: "prominent",
                                                weight: t ? "bold " : "normal",
                                                children: null == e ? void 0 : e.text
                                            })
                                        }, null == e ? void 0 : e.value)
                                    })
                                })
                            }
                        }, m)
                    })
                }),
                nN = e => {
                    let {
                        attached: t
                    } = e, [s, a] = l.useState([]), [n, r] = l.useState(""), [o, c] = l.useState(""), {
                        quick_strategy: d
                    } = (0, j.oR)(), {
                        setValue: u,
                        setCurrentDurationMinMax: h,
                        current_duration_min_max: _
                    } = d, {
                        setFieldValue: m,
                        validateForm: x,
                        values: p
                    } = (0, eM.u6)(), {
                        symbol: v,
                        tradetype: g
                    } = p;
                    return l.useEffect(() => {
                        g && v && (async () => {
                            var e, t, s, i, l, d;
                            let {
                                contracts_for: _
                            } = (null === Z.ApiHelpers || void 0 === Z.ApiHelpers ? void 0 : Z.ApiHelpers.instance) ? ? {}, x = await (null == _ ? void 0 : null === (e = _.getDurations) || void 0 === e ? void 0 : e.call(_, v, g)), j = null == x ? void 0 : x.map(e => ({
                                text: e.display ? ? "",
                                value: e.unit ? ? "",
                                min: e.min,
                                max: e.max
                            }));
                            a(j);
                            let b = null == p ? void 0 : p.durationtype;
                            if ((null == j ? void 0 : j.some(e => e.value === b)) && n === v && o === g) {
                                let e = null == j ? void 0 : j.find(e => e.value === b);
                                h(null == e ? void 0 : e.min, null == e ? void 0 : e.max)
                            } else h(null == x ? void 0 : null === (t = x[0]) || void 0 === t ? void 0 : t.min, null == x ? void 0 : null === (s = x[0]) || void 0 === s ? void 0 : s.max), null == m || m("durationtype", null == x ? void 0 : null === (i = x[0]) || void 0 === i ? void 0 : i.unit, !0), null == m || m("duration", null == x ? void 0 : null === (l = x[0]) || void 0 === l ? void 0 : l.min, !0), u("durationtype", (null == x ? void 0 : null === (d = x[0]) || void 0 === d ? void 0 : d.unit) ? ? "");
                            r(v), c(g)
                        })()
                    }, [v, g]), (0, l.useEffect)(() => {
                        x()
                    }, [_, x]), (0, i.jsx)("div", {
                        className: U()("qs__form__field qs__form__field__input", {
                            "no-top-border-radius": t
                        }),
                        children: (0, i.jsx)(eM.gN, {
                            name: "durationtype",
                            id: "durationtype",
                            children: e => {
                                let {
                                    field: t
                                } = e, a = null == s ? void 0 : s.find(e => e.value === t.value);
                                return (0, i.jsx)(np, { ...t,
                                    readOnly: !0,
                                    inputMode: "none",
                                    "data-testid": "dt_qs_durationtype",
                                    autoComplete: "off",
                                    className: "qs__select",
                                    value: (null == a ? void 0 : a.text) || "",
                                    list_items: s,
                                    onItemSelection: e => {
                                        let {
                                            value: t,
                                            min: s,
                                            max: a
                                        } = e;
                                        t && (h(s, a), null == m || m("durationtype", t), u("durationtype", t), null == m || m("duration", s).then(() => {
                                            x()
                                        }), u("duration", s))
                                    }
                                })
                            }
                        }, "durationtype")
                    })
                },
                nC = (0, r.Pi)(e => {
                    let {
                        name: t,
                        onChange: s,
                        type: a = "text",
                        attached: n = !1,
                        disabled: r = !1,
                        min: o,
                        max: c,
                        has_currency_unit: d = !1
                    } = e, {
                        client: {
                            currency: u
                        }
                    } = (0, j.oR)(), {
                        quick_strategy: h
                    } = (0, j.oR)(), {
                        loss_threshold_warning_data: _
                    } = h, {
                        isDesktop: m
                    } = (0, N.F)(), [x, p] = l.useState(!1), {
                        setFieldValue: v,
                        setFieldTouched: g
                    } = (0, eM.u6)(), b = "number" === a, y = (e, a) => {
                        null == e || e.preventDefault(), s(t, a), g(t, !0, !0), v(t, a)
                    }, f = e => {
                        let a = e.target.value,
                            n = 0;
                        a.length >= 12 ? (n = a.slice(0, 12), n = b ? Number(n) : n) : n = b ? Number(a) : a, s(t, n)
                    };
                    return (0, i.jsx)(eM.gN, {
                        name: t,
                        id: t,
                        children: e => {
                            var s;
                            let {
                                field: l,
                                meta: h
                            } = e, {
                                error: j
                            } = h;
                            return (0, i.jsx)("div", {
                                className: U()("qs__form__field qs__form__field__input", {
                                    "no-top-spacing": n,
                                    "no-border-top": n
                                }),
                                children: (0, i.jsx)("div", {
                                    "data-testid": "qs-input-container",
                                    onMouseEnter: () => p(!0),
                                    onMouseLeave: () => p(!1),
                                    children: (0, i.jsx)(G.Z, {
                                        alignment: "bottom",
                                        message: j,
                                        is_open: m ? !!j && x : !!j,
                                        zIndex: "9999",
                                        classNameBubble: "qs__warning-bubble",
                                        has_error: !0,
                                        should_disable_pointer_events: !0,
                                        children: (0, i.jsx)(eH, {
                                            data_testId: "qs-input",
                                            className: U()("qs__input", {
                                                error: j
                                            }, {
                                                highlight: null == _ ? void 0 : null === (s = _.highlight_field) || void 0 === s ? void 0 : s.includes(t)
                                            }),
                                            type: a,
                                            leading_icon: b ? (0, i.jsx)("button", {
                                                disabled: r || !!o && l.value <= o,
                                                "data-testid": "qs-input-decrease",
                                                onClick: e => {
                                                    let t = Number(l.value) - 1;
                                                    y(e, String(t % 1 ? t.toFixed(2) : t))
                                                },
                                                children: "-"
                                            }) : void 0,
                                            trailing_icon: b ? (0, i.jsx)("button", {
                                                disabled: r || 0xe8d4a50fff == l.value || !!c && l.value >= c,
                                                "data-testid": "qs-input-increase",
                                                onClick: e => {
                                                    let t = Number(l.value) + 1;
                                                    y(e, String(t % 1 ? t.toFixed(2) : t))
                                                },
                                                children: "+"
                                            }) : null,
                                            ...l,
                                            disabled: r,
                                            onChange: e => f(e),
                                            placeholder: d ? "0.00" : "",
                                            bottom_label: d ? u : "",
                                            max_characters: 2,
                                            maxLength: 2
                                        })
                                    })
                                })
                            })
                        }
                    }, t)
                }),
                nS = e => {
                    let {
                        className: t,
                        classNameButton: s,
                        classNameLabel: a,
                        handleToggle: n,
                        id: r,
                        is_enabled: o,
                        name: c = "toggle_switch"
                    } = e;
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsx)("input", {
                            "aria-label": c,
                            className: U()("dc-toggle-switch", t),
                            id: r,
                            type: "checkbox",
                            checked: o,
                            onChange: n
                        }), (0, i.jsx)("label", {
                            className: U()("dc-toggle-switch__label", a),
                            htmlFor: r,
                            children: (0, i.jsx)("span", {
                                className: U()("dc-toggle-switch__button", s)
                            })
                        })]
                    })
                },
                nT = e => {
                    let {
                        name: t,
                        label: s,
                        description: a,
                        attached: n = !1,
                        isEnabledToggleSwitch: l,
                        setIsEnabledToggleSwitch: r
                    } = e, {
                        values: o,
                        setFieldValue: c
                    } = (0, eM.u6)(), d = async () => {
                        r(), await c(t, !(null == o ? void 0 : o[t]), !0), await c("max_stake", null == o ? void 0 : o.max_stake, !0)
                    };
                    return (0, i.jsx)(eM.gN, {
                        name: t,
                        children: () => (0, i.jsx)("div", {
                            className: U()("qs__form__field qs__form__field__input", {
                                "no-border-bottom-radius": n
                            }),
                            children: (0, i.jsx)("div", {
                                className: "qs__checkbox",
                                children: (0, i.jsxs)("div", {
                                    className: "qs__checkbox__container",
                                    children: [(0, i.jsxs)("label", {
                                        className: "dc-checkbox",
                                        children: [(0, i.jsx)(es.Z, {
                                            size: "xs",
                                            className: "dc-checkbox__label",
                                            children: s
                                        }), (0, i.jsx)(es.Z, {
                                            size: "xs",
                                            children: (0, f.NC)("(optional)")
                                        })]
                                    }), (0, i.jsx)("span", {
                                        children: (0, i.jsx)(G.Z, {
                                            classNameTargetIcon: "qs__checkbox__info",
                                            message: a,
                                            zIndex: "9999",
                                            alignment: "top",
                                            icon: "info"
                                        })
                                    }), (0, i.jsx)(nS, {
                                        id: "dt_mobile_drawer_theme_toggler",
                                        handleToggle: d,
                                        is_enabled: l,
                                        "data-testid": "qs-toggle-switch"
                                    })]
                                })
                            })
                        })
                    })
                },
                nk = e => {
                    let t, {
                        label: s,
                        description: a,
                        additional_data: n
                    } = e;
                    return t = "function" == typeof a ? a(n) : a, (0, i.jsx)("div", {
                        className: "qs__form__field",
                        children: (0, i.jsxs)("div", {
                            className: "qs__input-label",
                            children: [(0, i.jsx)(es.Z, {
                                weight: "bold",
                                className: "qs__input-label__wrapper",
                                size: "xs",
                                children: s
                            }), (0, i.jsx)("span", {
                                children: (0, i.jsx)(G.Z, {
                                    message: t,
                                    zIndex: "9999",
                                    alignment: "top",
                                    icon: "info"
                                })
                            })]
                        })
                    })
                };
            var nw = s("63999");
            let nE = (0, r.Pi)(e => {
                    let {
                        name: t
                    } = e, {
                        ui: s,
                        client: a
                    } = (0, j.oR)(), {
                        is_desktop: n
                    } = s, [r, o] = l.useState([]), {
                        quick_strategy: c
                    } = (0, j.oR)(), {
                        setValue: d,
                        setAdditionalData: u
                    } = c, {
                        setFieldValue: h,
                        values: _,
                        setFieldError: m,
                        errors: x
                    } = (0, eM.u6)(), p = l.useRef(null), v = l.useRef(null), g = l.useRef({
                        tick_count: null,
                        take_profit: null
                    });
                    l.useEffect(() => {
                        o([{
                            text: "1%",
                            value: "0.01"
                        }, {
                            text: "2%",
                            value: "0.02"
                        }, {
                            text: "3%",
                            value: "0.03"
                        }, {
                            text: "4%",
                            value: "0.04"
                        }, {
                            text: "5%",
                            value: "0.05"
                        }]), null == h || h("tradetype", "accumulator"), d("tradetype", "accumulator")
                    }, []), l.useEffect(() => {
                        var e, t;
                        _.boolean_tick_count ? (h("take_profit", 0), m("tick_count", (null === (e = g.current) || void 0 === e ? void 0 : e.tick_count) ? ? void 0), m("take_profit", void 0)) : (h("tick_count", 0), m("take_profit", (null === (t = g.current) || void 0 === t ? void 0 : t.take_profit) ? ? void 0), m("tick_count", void 0))
                    }, [_, x.take_profit, x.tick_count, _.boolean_tick_count, h, m]);
                    let b = async e => {
                            var t, s, n, i, l, r, o, c, d, h, _;
                            let x = Number(e.growth_rate),
                                j = Number(e.stake),
                                b = Number(e.take_profit),
                                y = {
                                    amount: j,
                                    currency: null == a ? void 0 : a.currency,
                                    growth_rate: x,
                                    symbol: e.symbol,
                                    limit_order: { ...!e.boolean_tick_count && {
                                            take_profit: b
                                        }
                                    }
                                };
                            p.current = { ...y,
                                boolean_tick_count: e.boolean_tick_count
                            };
                            try {
                                let a = await (0, nw.QT)(y, Z.api_base.api),
                                    l = null == a ? void 0 : null === (s = a.proposal) || void 0 === s ? void 0 : null === (t = s.validation_params) || void 0 === t ? void 0 : t.max_ticks,
                                    r = "",
                                    o = "";
                                u({
                                    max_payout: v.current,
                                    max_ticks: l
                                }), v.current = null == a ? void 0 : null === (i = a.proposal) || void 0 === i ? void 0 : null === (n = i.validation_params) || void 0 === n ? void 0 : n.max_payout;
                                let c = Number(e.tick_count);
                                !isNaN(c) && c > l ? (o = `Maximum tick count is: ${l}`, m("tick_count", o), g.current.tick_count = o) : !isNaN(c) && c < 1 ? (r = "Minimum tick count is: 1", m("tick_count", r), g.current.tick_count = r) : (g.current.tick_count = null, m("tick_count", void 0)), g.current.take_profit = null
                            } catch (s) {
                                let t = (null == s ? void 0 : s.message) ? ? (null == s ? void 0 : null === (l = s.error) || void 0 === l ? void 0 : l.message);
                                e.boolean_tick_count ? (m("tick_count", t), g.current.tick_count = t) : ((null == s ? void 0 : null === (o = s.error) || void 0 === o ? void 0 : null === (r = o.details) || void 0 === r ? void 0 : r.field) === "take_profit" && (t = 0 === Number(e.take_profit) ? null == s ? void 0 : null === (h = s.error) || void 0 === h ? void 0 : h.message : `Your total payout is ${Number(e.take_profit)+Number(e.stake)}. Enter amount less than ${v.current} ${(0,f.NC)("By changing your initial stake and/or take profit.")}`), (null == s ? void 0 : null === (d = s.error) || void 0 === d ? void 0 : null === (c = d.details) || void 0 === c ? void 0 : c.field) === "stake" && (t = `${null==s?void 0:null===(_=s.error)||void 0===_?void 0:_.message} ${(0,f.NC)("Update your initial stake.")}`), m("take_profit", t), g.current.take_profit = t)
                            }
                        },
                        y = l.useCallback(w()(b, 500, {
                            trailing: !0,
                            leading: !1
                        }), []);
                    l.useEffect(() => {
                        var e, t, s, n, i, l, r;
                        ((null === (e = p.current) || void 0 === e ? void 0 : e.symbol) !== _.symbol || (null === (t = p.current) || void 0 === t ? void 0 : t.amount) !== _.stake || (null === (n = p.current) || void 0 === n ? void 0 : null === (s = n.limit_order) || void 0 === s ? void 0 : s.take_profit) !== _.take_profit || (null === (i = p.current) || void 0 === i ? void 0 : i.currency) !== (null == a ? void 0 : a.currency) || (null === (l = p.current) || void 0 === l ? void 0 : l.growth_rate) !== _.growth_rate || (null === (r = p.current) || void 0 === r ? void 0 : r.boolean_tick_count) !== _.boolean_tick_count) && y(_)
                    }, [_.take_profit, _.tick_count, _.stake, _.growth_rate, null == a ? void 0 : a.currency, _.boolean_tick_count, _, y]);
                    let N = async e => {
                            null == h || h(t, e), d(t, e)
                        },
                        C = `qs-contract-type-${t}`;
                    return (0, i.jsx)("div", {
                        className: "qs__form__field qs__form__field__input no-top-spacing",
                        children: (0, i.jsx)(eM.gN, {
                            name: t,
                            id: C,
                            children: e => {
                                let {
                                    field: t
                                } = e, s = null == r ? void 0 : r.find(e => (null == e ? void 0 : e.value) === (null == t ? void 0 : t.value));
                                return n ? (0, i.jsx)(np, { ...t,
                                    readOnly: !0,
                                    inputMode: "none",
                                    "data-testid": "dt_qs_contract_type",
                                    autoComplete: "off",
                                    className: "qs__select contract-type",
                                    value: (null == s ? void 0 : s.text) || "",
                                    list_items: r,
                                    onItemSelection: e => {
                                        let {
                                            value: t
                                        } = e;
                                        t && N(t)
                                    }
                                }) : (0, i.jsx)("ul", {
                                    className: "qs__form__field__list",
                                    "data-testid": "dt_qs_contract_types",
                                    children: r.map(e => {
                                        let t = (null == s ? void 0 : s.value) === (null == e ? void 0 : e.value);
                                        return (0, i.jsx)("li", {
                                            className: U()("qs__form__field__list__item", {
                                                "qs__form__field__list__item--active": t
                                            }),
                                            onClick: () => {
                                                N(null == e ? void 0 : e.value)
                                            },
                                            onChange: () => {
                                                N(null == e ? void 0 : e.value)
                                            },
                                            children: (0, i.jsx)(es.Z, {
                                                size: "xs",
                                                color: "prominent",
                                                weight: t ? "bold " : "normal",
                                                children: null == e ? void 0 : e.text
                                            })
                                        }, null == e ? void 0 : e.value)
                                    })
                                })
                            }
                        }, C)
                    })
                }),
                nI = [{
                    text: "Take Profit",
                    value: "take_profit"
                }, {
                    text: "Tick Count",
                    value: "tick_count"
                }],
                nA = e => {
                    let {
                        attached: t
                    } = e, {
                        quick_strategy: s
                    } = (0, j.oR)(), {
                        setValue: a
                    } = s, {
                        setFieldValue: n,
                        values: r
                    } = (0, eM.u6)(), [o, c] = (0, l.useState)(r.boolean_tick_count ? nI[1] : nI[0]), d = e => {
                        if (null == e ? void 0 : e.value) {
                            let {
                                value: t
                            } = e, s = "take_profit" === t;
                            a("boolean_tick_count", !s), null == n || n("boolean_tick_count", !s), c({ ...o,
                                text: s ? "Take Profit" : "Tick Count"
                            })
                        }
                    };
                    return (0, i.jsx)("div", {
                        className: U()("qs__form__field qs__form__field__input", {
                            "no-top-border-radius": t
                        }),
                        children: (0, i.jsx)(eM.gN, {
                            name: "sell_conditions",
                            id: "sell_conditions",
                            children: e => {
                                let {
                                    field: t
                                } = e;
                                return (0, i.jsx)(np, { ...t,
                                    readOnly: !0,
                                    inputMode: "none",
                                    "data-testid": "dt_qs_sell_conditions",
                                    autoComplete: "off",
                                    className: "qs__select",
                                    value: o.text,
                                    list_items: nI,
                                    onItemSelection: d
                                })
                            }
                        }, "sell_conditions")
                    })
                },
                nR = (0, r.Pi)(() => {
                    var e;
                    let {
                        quick_strategy: t
                    } = (0, j.oR)(), {
                        selected_strategy: s,
                        setValue: a,
                        form_data: n
                    } = t, r = null === (e = (0, a$.j)()[s]) || void 0 === e ? void 0 : e.fields, {
                        isDesktop: o
                    } = (0, N.F)(), {
                        values: c,
                        setFieldTouched: d,
                        setFieldValue: u
                    } = (0, eM.u6)(), {
                        current_duration_min_max: h,
                        additional_data: _
                    } = t, [m, x] = l.useState((null == c ? void 0 : c.boolean_max_stake) ? ? !1);
                    l.useEffect(() => {
                        window.addEventListener("keydown", v);
                        let e = null;
                        try {
                            e = JSON.parse(localStorage.getItem("qs-fields") ? ? "{}")
                        } catch {
                            e = null
                        }
                        return x(!!(null == e ? void 0 : e.boolean_max_stake)), () => {
                            window.removeEventListener("keydown", v)
                        }
                    }, []), l.useEffect(() => {
                        !m && (null == c ? void 0 : c.max_stake) && u("max_stake", 0)
                    }, [m, null == c ? void 0 : c.max_stake]);
                    let p = async (e, t) => {
                            a(e, t), await d(e, !0, !0), await u(e, t, !0)
                        },
                        v = e => {
                            (null == e ? void 0 : e.key) && "Enter" == e.key && (e.preventDefault(), e.stopPropagation())
                        },
                        g = e => e.every(e => {
                            var t;
                            let s = null == c ? void 0 : null === (t = c[e.key]) || void 0 === t ? void 0 : t.toString();
                            return e.multiple ? e.multiple.includes(s) : c[e.key] === e.value
                        }),
                        b = () => {
                            x(e => !e)
                        };
                    return (0, i.jsx)("div", {
                        children: r.map((e, t) => (null == e ? void 0 : e.length) ? (0, i.jsx)("div", {
                            className: "qs__body__content__form__group",
                            children: e.map((e, t) => {
                                var s, a;
                                let r = `${e.name||e.type} + ${t}`;
                                if (!o && (null === (s = e.hide) || void 0 === s ? void 0 : s.includes("mobile")) || o && (null === (a = e.hide) || void 0 === a ? void 0 : a.includes("desktop"))) return null;
                                switch (e.type) {
                                    case "number":
                                        {
                                            let t;
                                            if (!e.name) return null;
                                            let {
                                                should_have: s = [],
                                                hide_without_should_have: a = !1,
                                                has_currency_unit: i = !1
                                            } = e,
                                            c = g(s),
                                            d = 1;
                                            "duration" === e.name && h && (d = h.min, t = h.max);
                                            let u = e.should_have;
                                            if (u && "max_stake" === e.name && isNaN(d = +(null == n ? void 0 : n.stake)) && (d = 1), u && "last_digit_prediction" === e.name && ((isNaN(+(null == n ? void 0 : n.last_digit_prediction)) || 1 == +(null == n ? void 0 : n.last_digit_prediction)) && (d = 0), +(null == n ? void 0 : n.last_digit_prediction) > 0 && (d = +(null == n ? void 0 : n.last_digit_prediction) - 1), t = 9), null == s ? void 0 : s.length) {
                                                if (!c && (!o || a)) return null;
                                                return (0, l.createElement)(nC, { ...e,
                                                    key: r,
                                                    name: e.name,
                                                    disabled: !c,
                                                    onChange: p,
                                                    min: d,
                                                    max: t,
                                                    has_currency_unit: i
                                                })
                                            }
                                            return (0, l.createElement)(nC, { ...e,
                                                onChange: p,
                                                key: r,
                                                name: e.name,
                                                min: d,
                                                max: t,
                                                has_currency_unit: i
                                            })
                                        }
                                    case "label":
                                        {
                                            if (!e.label) return null;
                                            let {
                                                should_have: t = [],
                                                hide_without_should_have: s = !1
                                            } = e;
                                            if (!g(t) && s) return null;
                                            return (0, i.jsx)(nk, {
                                                label: e.label,
                                                description: e.description ? ? "",
                                                additional_data: _
                                            }, r)
                                        }
                                    case "checkbox":
                                        return (0, l.createElement)(nT, { ...e,
                                            key: r,
                                            name: e.name,
                                            label: e.label,
                                            isEnabledToggleSwitch: !!m,
                                            setIsEnabledToggleSwitch: b
                                        });
                                    case "symbol":
                                        return (0, l.createElement)(ng, { ...e,
                                            key: r
                                        });
                                    case "tradetype":
                                        return (0, l.createElement)(ny, { ...e,
                                            key: r
                                        });
                                    case "durationtype":
                                        return (0, l.createElement)(nN, { ...e,
                                            key: r
                                        });
                                    case "contract_type":
                                        return (0, l.createElement)(nf, { ...e,
                                            key: r,
                                            name: e.name
                                        });
                                    case "growth_rate":
                                        return (0, l.createElement)(nE, { ...e,
                                            key: r,
                                            name: e.name
                                        });
                                    case "sell_conditions":
                                        return (0, l.createElement)(nA, { ...e,
                                            key: r
                                        });
                                    default:
                                        return null
                                }
                            })
                        }, t) : null)
                    })
                }),
                nD = function(e, t) {
                    let s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "DEFAULT";
                    return ({
                        DURATION: {
                            MIN: (0, f.NC)("Minimum duration: {{ value }}", {
                                value: t
                            }),
                            MAX: (0, f.NC)("Maximum duration: {{ value }}", {
                                value: t
                            })
                        },
                        LAST_DIGIT_PREDICTION: {
                            MIN: (0, f.NC)("Enter a value from {{ value }} to 9.", {
                                value: t
                            }),
                            MAX: (0, f.NC)("Enter a value from 0 to {{ value }}.", {
                                value: t
                            })
                        },
                        DEFAULT: {
                            MIN: (0, f.NC)("The value must be equal or greater than {{ value }}", {
                                value: t
                            }),
                            MAX: (0, f.NC)("The value must be equal or less than {{ value }}", {
                                value: t
                            })
                        }
                    })[s][e]
                },
                nO = (0, r.Pi)(e => {
                    var t;
                    let {
                        children: s
                    } = e, {
                        quick_strategy: a
                    } = (0, j.oR)(), {
                        selected_strategy: n,
                        form_data: r,
                        initializeLossThresholdWarningData: o
                    } = a, c = null === (t = (0, a$.j)()[n]) || void 0 === t ? void 0 : t.fields, [d, u] = (0, l.useState)(aP.Ry().shape({})), h = (0, l.useRef)(!0), _ = null, m = () => {
                        let e = null;
                        try {
                            e = JSON.parse(localStorage.getItem("qs-fields") ? ? "{}")
                        } catch {
                            e = null
                        }
                        return e
                    };
                    l.useEffect(() => () => {
                        h.current = !1
                    }, []), l.useEffect(() => {
                        o()
                    }, []);
                    let x = e => {
                        let t = {};
                        c.forEach(s => {
                            if (!(null == s ? void 0 : s.length)) return null;
                            s.forEach(s => {
                                var n, i;
                                if ((null == s ? void 0 : null === (n = s.validation) || void 0 === n ? void 0 : n.length) && (null == s ? void 0 : s.name) && s.validation.includes("number")) {
                                    let n = aP.Rx().typeError((0, f.NC)("Must be a number")),
                                        l = 0,
                                        o = 10,
                                        c = nD("MIN", 0),
                                        d = nD("MAX", o),
                                        u = "",
                                        {
                                            current_duration_min_max: h
                                        } = a;
                                    "duration" === s.name && h && (l = h.min, o = h.max, c = nD("MIN", l, "DURATION"), d = nD("MAX", o, "DURATION"));
                                    let m = !s.should_have || (null === (i = s.should_have) || void 0 === i ? void 0 : i.every(t => {
                                        var s;
                                        let a = null == e ? void 0 : null === (s = e[t.key]) || void 0 === s ? void 0 : s.toString();
                                        return t.multiple ? t.multiple.includes(a) : (null == e ? void 0 : e[t.key]) === t.value
                                    }));
                                    m && "max_stake" === s.name && (isNaN(l = +(null == r ? void 0 : r.stake)) && (l = +((null == _ ? void 0 : _.stake) ? ? 0)), c = nD("MIN", l)), m && "last_digit_prediction" === s.name && (l = 0, d = nD("MAX", o = 9, "LAST_DIGIT_PREDICTION"), u = "Enter a value from 0 to 9."), m && s.validation.forEach(e => {
                                        if ("string" == typeof e) switch (e) {
                                            case "required":
                                                n = n.required((0, f.NC)("Field cannot be empty"));
                                                break;
                                            case "min":
                                                n = n.min(l, c);
                                                break;
                                            case "max":
                                                n = n.max(o, d);
                                                break;
                                            case "ceil":
                                                n = n.round("ceil");
                                                break;
                                            case "floor":
                                                n = n.round("floor");
                                                break;
                                            case "integer":
                                                n = n.integer(u)
                                        } else "object" == typeof e && (null == e ? void 0 : e.type) && (n = n[e.type](e.value, (0, f.NC)(e.getMessage(e.value))))
                                    }), t[s.name] = n
                                }
                            })
                        }), h.current && u(aP.Ry().shape(t))
                    };
                    return (0, i.jsx)(eM.J9, {
                        initialValues: (() => {
                            let e = m();
                            return _ = {
                                symbol: (null == e ? void 0 : e.symbol) ? ? (0, Z.config)().QUICK_STRATEGY.DEFAULT.symbol,
                                tradetype: (null == e ? void 0 : e.tradetype) ? ? "",
                                type: (null == e ? void 0 : e.type) ? ? "",
                                durationtype: (null == e ? void 0 : e.durationtype) ? ? (0, Z.config)().QUICK_STRATEGY.DEFAULT.durationtype,
                                duration: (null == e ? void 0 : e.duration) ? ? "1",
                                stake: (null == e ? void 0 : e.stake) ? ? "1",
                                loss: (null == e ? void 0 : e.loss) ? ? "",
                                profit: (null == e ? void 0 : e.profit) ? ? "",
                                size: (null == e ? void 0 : e.size) ? ? String((0, Z.config)().QUICK_STRATEGY.DEFAULT.size),
                                unit: (null == e ? void 0 : e.unit) ? ? String((0, Z.config)().QUICK_STRATEGY.DEFAULT.unit),
                                action: (null == e ? void 0 : e.action) ? ? "RUN",
                                max_stake: (null == e ? void 0 : e.max_stake) ? ? 10,
                                boolean_max_stake: (null == e ? void 0 : e.boolean_max_stake) ? ? !1,
                                last_digit_prediction: (null == e ? void 0 : e.last_digit_prediction) ? ? 1,
                                growth_rate: (null == e ? void 0 : e.growth_rate) ? ? "0.01",
                                tick_count: (null == e ? void 0 : e.tick_count) ? ? 0,
                                take_profit: (null == e ? void 0 : e.take_profit) ? ? 0,
                                boolean_tick_count: (null == e ? void 0 : e.boolean_tick_count) ? ? !1,
                                max_payout: (null == e ? void 0 : e.max_payout) ? ? 0,
                                max_ticks: (null == e ? void 0 : e.max_ticks) ? ? 0
                            }
                        })(),
                        validationSchema: d,
                        onSubmit: e => {
                            var t;
                            return x(e), null === (t = localStorage) || void 0 === t || t.setItem("qs-fields", JSON.stringify(e)), e
                        },
                        validate: e => x(e),
                        validateOnChange: !1,
                        children: s
                    })
                }),
                nL = (0, r.Pi)(() => {
                    let {
                        quick_strategy: e
                    } = (0, j.oR)(), {
                        isDesktop: t
                    } = (0, N.F)(), {
                        is_open: s,
                        setFormVisibility: a,
                        form_data: n,
                        selected_strategy: r
                    } = e, o = (0, l.useRef)(null), [c, d] = l.useState(aV.StrategySelect), [u, h] = l.useState(""), _ = () => {
                        var e, t, s;
                        let a = (null === (s = o.current) || void 0 === s ? void 0 : null === (t = s.querySelector(".active")) || void 0 === t ? void 0 : null === (e = t.textContent) || void 0 === e ? void 0 : e.toLowerCase()) === "learn more" ? "learn more" : "trade parameters";
                        (0, tJ._W)({
                            subform_name: "quick_strategy",
                            quick_strategy_tab: a,
                            selected_strategy: r,
                            form_values: n
                        })
                    }, m = () => {
                        _(), a(!1)
                    };
                    return (0, i.jsx)(nO, {
                        children: (0, i.jsxs)(eM.l0, {
                            children: [(0, i.jsx)(ne, {}), t ? (0, i.jsx)(C.Z, {
                                className: "modal--strategy",
                                is_open: s,
                                width: "72rem",
                                children: (0, i.jsx)(a4, {
                                    onClickClose: m,
                                    setCurrentStep: d,
                                    current_step: c,
                                    selected_trade_type: u,
                                    setSelectedTradeType: h,
                                    children: (0, i.jsx)(nR, {})
                                })
                            }) : (0, i.jsxs)(i.Fragment, {
                                children: [(0, i.jsx)(sb, {
                                    is_modal_open: s,
                                    className: "quick-strategy__wrapper",
                                    header: (0, i.jsx)(es.Z, {
                                        size: "xs",
                                        weight: "bold",
                                        children: (0, f.NC)(`Step ${c===aV.StrategyCompleted?2:1}/2: Choose your strategy`)
                                    }),
                                    onClickClose: m,
                                    height_offset: "8rem",
                                    children: (0, i.jsx)(a7, {
                                        setCurrentStep: d,
                                        current_step: c,
                                        selected_trade_type: u,
                                        setSelectedTradeType: h,
                                        children: (0, i.jsx)(nR, {})
                                    })
                                }), (0, i.jsx)(a6, {
                                    setCurrentStep: d,
                                    current_step: c
                                })]
                            })]
                        })
                    })
                });
            var nM = s("18908"),
                nU = s("69103"),
                nF = s("27086"),
                nP = s("35651");
            let nZ = (0, r.Pi)(e => {
                    let {
                        block_node: t,
                        should_hide_display_name: s
                    } = e, {
                        flyout: a
                    } = (0, j.oR)(), {
                        initBlockWorkspace: n
                    } = a, r = l.useRef();
                    return l.useEffect(() => {
                        n(r, t)
                    }, []), (0, i.jsx)("div", {
                        ref: e => r = e,
                        className: U()({
                            "flyout__block-workspace--center": s,
                            "flyout__block-workspace--top": !s
                        }),
                        "data-testid": "flyout-block-workspace"
                    })
                }),
                nz = e => {
                    let {
                        onInfoClick: t,
                        block_node: s,
                        is_active: a,
                        should_hide_display_name: n
                    } = e, l = s.getAttribute("type") || "", r = window.Blockly.Blocks[l].meta(), o = "variables_get" === l, c = "variables_set" === l, {
                        display_name: d,
                        description: u
                    } = r, h = () => (0, i.jsx)("div", {
                        className: "flyout__item-buttons",
                        children: (0, i.jsx)(eA.Z, {
                            id: `db-flyout__add--${l}`,
                            "data-testid": `dt_flyout__add_${l}`,
                            className: "flyout__button-add flyout__button-add--hide",
                            has_effect: !0,
                            is_plus: !0,
                            onClick: () => window.Blockly.derivWorkspace.addBlockNode(s),
                            type: "button",
                            children: (0, i.jsx)(nP.Z, {
                                height: "24px",
                                width: "24px",
                                fill: "var(--text-general)"
                            })
                        })
                    });
                    return (0, i.jsxs)(i.Fragment, {
                        children: [c && (0, i.jsx)("div", {
                            className: "flyout__hr"
                        }), (0, i.jsxs)("div", {
                            className: U()("flyout__item", {
                                "flyout__item--active": a
                            }),
                            children: [!n && (0, i.jsxs)(i.Fragment, {
                                children: [(0, i.jsxs)("div", {
                                    className: "flyout__item-header",
                                    children: [(0, i.jsx)(es.Z, {
                                        size: o ? "xs" : "xsm",
                                        lineHeight: o ? void 0 : "xl",
                                        weight: o ? void 0 : "bold",
                                        children: d
                                    }), !o && (0, i.jsx)(h, {})]
                                }), (0, i.jsxs)("div", {
                                    className: "flyout__item-description",
                                    children: [u, t && (0, i.jsx)("a", {
                                        id: d.replace(/\s/gi, "-"),
                                        className: "flyout__item-info",
                                        onClick: t,
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: "Learn more"
                                        })
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "flyout__block-workspace__header",
                                children: [(0, i.jsx)(nZ, {
                                    block_node: s,
                                    should_hide_display_name: !0
                                }), o && (0, i.jsx)(h, {})]
                            })]
                        })]
                    })
                };
            var n$ = s("43774");
            let nB = e => {
                    let {
                        width: t,
                        url: s
                    } = e;
                    return (0, i.jsx)("div", {
                        className: "flyout__item",
                        "data-testid": "dt_flyout_image",
                        children: (0, i.jsx)("img", {
                            src: s,
                            className: "flyout__image",
                            style: {
                                width: t
                            }
                        })
                    })
                },
                nG = e => {
                    let {
                        text: t
                    } = e;
                    return (0, i.jsx)(es.Z, {
                        as: "p",
                        size: "xs",
                        styles: {
                            lineHeight: "1.3em"
                        },
                        children: t
                    })
                },
                nV = e => (0, i.jsx)("div", {
                    className: "flyout__item",
                    "data-testid": "dt_flyout_video_container",
                    children: (0, i.jsx)("iframe", {
                        "data-testid": "dt_flyout_video",
                        className: "flyout__video",
                        src: e.url,
                        frameBorder: "0",
                        allow: "accelerometer; encrypted-media; gyroscope; picture-in-picture",
                        allowFullScreen: !0,
                        width: "100%"
                    })
                }),
                nX = (0, r.Pi)(() => {
                    let {
                        flyout: e,
                        flyout_help: t
                    } = (0, j.oR)(), {
                        block_node: s,
                        block_type: a,
                        examples: n,
                        help_string: r,
                        onBackClick: o,
                        onSequenceClick: c,
                        should_next_disable: d,
                        should_previous_disable: u,
                        title: h
                    } = t, {
                        is_search_flyout: _
                    } = e, m = r && (0, nU.S)(window.__webpack_public_path__)[a], x = 0;
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsxs)("div", {
                            className: "flyout__help-header",
                            "data-testid": "dt_flyout_help_base",
                            children: [(0, i.jsx)("button", {
                                className: "dc-btn flyout__button-back",
                                onClick: o,
                                children: (0, i.jsx)(n$.Z, {
                                    height: "16px",
                                    width: "16px",
                                    fill: "var(--text-general)"
                                })
                            }), (0, i.jsx)(es.Z, {
                                weight: "bold",
                                className: "flyout__help-title",
                                children: h
                            }), (0, i.jsx)("div", {
                                className: "flyout__item-buttons",
                                children: (0, i.jsx)(eA.Z, {
                                    className: "flyout__button-add",
                                    has_effect: !0,
                                    id: `db-flyout-help__add--${a}`,
                                    onClick: () => window.Blockly.derivWorkspace.addBlockNode(s),
                                    primary: !0,
                                    text: (0, f.NC)("Add"),
                                    type: "button"
                                })
                            })]
                        }), (0, i.jsx)("div", {
                            className: "flyout__help-content",
                            children: m && m.map((e, t) => {
                                let {
                                    type: l,
                                    width: o,
                                    url: c,
                                    example_id: d
                                } = e, {
                                    text: u
                                } = r, h = n.find(e => e.id === d);
                                switch (l) {
                                    case nU.I.TEXT:
                                        if (x < u.length) return (0, i.jsx)(nG, {
                                            text: u[x++]
                                        }, `${a}_${t}`);
                                        return null;
                                    case nU.I.VIDEO:
                                        return (0, i.jsx)(nV, {
                                            url: c
                                        }, `${a}_${t}`);
                                    case nU.I.IMAGE:
                                        return (0, i.jsx)(nB, {
                                            width: o,
                                            url: c
                                        }, `${a}_${t}`);
                                    case nU.I.BLOCK:
                                        return (0, i.jsx)(nZ, {
                                            block_node: s
                                        }, `${a}_${t}`);
                                    case nU.I.EXAMPLE:
                                        if (h) return (0, i.jsx)(nZ, {
                                            block_node: h.childNodes[0]
                                        }, `${a}_${t}`);
                                        return null;
                                    default:
                                        return null
                                }
                            })
                        }), !_ && !(u && d) && (0, i.jsxs)("div", {
                            className: "flyout__help-footer",
                            children: [(0, i.jsx)(eA.Z, {
                                className: "flyout__button-previous",
                                secondary: !0,
                                onClick: () => c(!1),
                                text: (0, f.NC)("Previous"),
                                type: "button",
                                is_disabled: u,
                                renderText: e => u && (0, i.jsx)(es.Z, {
                                    size: "xs",
                                    weight: "bold",
                                    align: "center",
                                    color: "disabled",
                                    children: e
                                })
                            }), (0, i.jsx)(eA.Z, {
                                className: "flyout__button-next",
                                secondary: !0,
                                onClick: () => c(!0),
                                text: (0, f.NC)("Next"),
                                type: "button",
                                is_disabled: d,
                                renderText: e => d && (0, i.jsx)(es.Z, {
                                    size: "xs",
                                    weight: "bold",
                                    align: "center",
                                    color: "disabled",
                                    children: e
                                })
                            })]
                        })]
                    })
                }),
                nH = e => {
                    let {
                        search_term: t,
                        total_result: s
                    } = e;
                    return (0, i.jsxs)("div", {
                        className: "flyout__search-header",
                        children: [(0, i.jsx)(es.Z, {
                            weight: "bold",
                            className: "flyout__search-header-text",
                            children: (0, f.NC)('Results for "{{ search_term }}"', {
                                search_term: t,
                                interpolation: {
                                    escapeValue: !1
                                }
                            })
                        }), (0, i.jsx)(es.Z, {
                            weight: "bold",
                            color: "profit-success",
                            className: "flyout__search-header-text",
                            children: `${s} ${s>1?(0,f.NC)("results"):(0,f.NC)("result")}`
                        })]
                    })
                },
                nq = e => {
                    let t = l.useRef(),
                        {
                            flyout_content: s,
                            active_helper: a,
                            setHelpContent: n,
                            initFlyoutHelp: r,
                            is_empty: o,
                            is_search_flyout: c,
                            selected_category: d,
                            first_get_variable_block_index: u
                        } = e;
                    return (0, i.jsx)("div", {
                        ref: t,
                        className: U()("flyout__content", {
                            "flyout__normal-content": !c
                        }),
                        children: (0, i.jsxs)(er.Z, {
                            className: "flyout__content-scrollbar",
                            children: [(null == d ? void 0 : d.getAttribute("id")) === "indicators" && (0, i.jsxs)("div", {
                                className: "flyout__content-disclaimer",
                                children: [(0, i.jsx)("span", {
                                    className: "flyout__content-disclaimer-icon",
                                    children: (0, i.jsx)(nF.Z, {
                                        className: "flyout__content-disclaimer__warning-icon",
                                        height: "24px",
                                        width: "24px",
                                        fill: "var(--text-general)"
                                    })
                                }), (0, i.jsx)("span", {
                                    className: "flyout__content-disclaimer-text",
                                    children: (0, f.NC)("Indicators on the chart tab are for indicative purposes only and may vary slightly from the ones on the {{platform_name_dbot}} workspace.", {
                                        platform_name_dbot: (0, m.$Xq)("dbot").name
                                    })
                                })]
                            }), o ? (0, i.jsx)("div", {
                                className: "flyout__search-empty",
                                children: (0, i.jsx)(es.Z, {
                                    as: "h2",
                                    weight: "bold",
                                    lineHeight: "xs",
                                    children: (0, f.NC)("No results found")
                                })
                            }) : s.map((e, t) => {
                                switch (e.tagName.toUpperCase()) {
                                    case window.Blockly.Xml.NODE_BLOCK:
                                        {
                                            var s, l, o, d;
                                            let h = e.getAttribute("type") || "";
                                            return (0, i.jsx)(nz, {
                                                id: `flyout__item-workspace--${t}`,
                                                block_node: e,
                                                should_hide_display_name: "variables_get" === h && t !== u,
                                                onInfoClick: (0, nU.S)(window.__webpack_public_path__)[h] && (c ? () => n(e) : () => r(e, h)),
                                                is_active: a === h
                                            }, `${e.getAttribute("type")}${null===(d=window)||void 0===d?void 0:null===(o=d.Blockly)||void 0===o?void 0:null===(l=o.utils)||void 0===l?void 0:null===(s=l.idGenerator)||void 0===s?void 0:s.genUid()}`)
                                        }
                                    case window.Blockly.Xml.NODE_LABEL:
                                        return (0, i.jsx)("div", {
                                            className: "flyout__item-label-bold",
                                            children: e.getAttribute("text")
                                        }, `${e.getAttribute("text")}${t}`);
                                    case window.Blockly.Xml.NODE_INPUT:
                                        return (0, i.jsx)(eH, {
                                            className: `${e.getAttribute("className")}`,
                                            type: `${e.getAttribute("type")}`,
                                            name: `${e.getAttribute("name")}`,
                                            placeholder: `${e.getAttribute("placeholder")}`,
                                            autoComplete: "off"
                                        }, `${e.getAttribute("name")}${t}`);
                                    case window.Blockly.Xml.NODE_BUTTON:
                                        {
                                            let s = e.getAttribute("callbackKey"),
                                                a = e.getAttribute("id");
                                            return (0, i.jsx)("button", {
                                                id: a,
                                                className: U()("dc-btn", "dc-btn-effect", "dc-btn--primary", `${e.getAttribute("className")}`),
                                                onClick: e => {
                                                    let t = window.Blockly.derivWorkspace,
                                                        a = t.getButtonCallback(s);
                                                    e.targetWorkspace_ = t, e.getTargetWorkspace = () => e.targetWorkspace_, null == a || a(e)
                                                },
                                                children: e.getAttribute("text")
                                            }, `${s}${t}`)
                                        }
                                    default:
                                        return null
                                }
                            })]
                        })
                    })
                },
                nY = (0, r.Pi)(() => {
                    let {
                        flyout: e,
                        flyout_help: t
                    } = (0, j.oR)(), {
                        active_helper: s,
                        initFlyoutHelp: a,
                        setHelpContent: n
                    } = t, {
                        flyout_content: r,
                        flyout_width: o,
                        is_help_content: c,
                        is_search_flyout: d,
                        is_visible: u,
                        onMount: h,
                        onUnmount: _,
                        search_term: m,
                        selected_category: x,
                        first_get_variable_block_index: p
                    } = e;
                    if (l.useEffect(() => (h(), () => _()), [h, _]), u && d) {
                        var v;
                        null === nM.default || void 0 === nM.default || null === (v = nM.default.pushDataLayer) || void 0 === v || v.call(nM.default, {
                            event: "dbot_search_results",
                            value: !0
                        })
                    }
                    let g = Object.keys(r).length;
                    return u && (0, i.jsxs)("div", {
                        id: "gtm-search-results",
                        className: U()("flyout", {
                            flyout__search: d,
                            flyout__help: c,
                            flyout__normal: !c && !d
                        }),
                        style: {
                            width: `${o}px`
                        },
                        children: [d && !c && (0, i.jsx)(nH, {
                            search_term: m,
                            total_result: g
                        }), c ? (0, i.jsx)(nX, {}) : (0, i.jsx)(nq, {
                            is_empty: 0 === g,
                            flyout_content: r,
                            active_helper: s,
                            setHelpContent: n,
                            initFlyoutHelp: a,
                            is_search_flyout: d,
                            selected_category: x,
                            first_get_variable_block_index: p
                        })]
                    })
                }),
                nW = e => {
                    let {
                        is_running: t,
                        is_multiplier: s,
                        is_contract_dialog_open: a,
                        is_stop_bot_dialog_open: n,
                        closeMultiplierContract: r,
                        onOkButtonClick: o,
                        toggleStopBotDialog: c
                    } = e, d = t && s ? (0, f.NC)("Keep my contract") : (0, f.NC)("Stop my bot"), u = t && s ? (0, f.NC)("Close my contract") : (0, f.NC)("Back"), h = t && s ? (0, f.NC)("Keep your current contract?") : (0, f.NC)("Stop your current bot?"), _ = t && s ? r : c;
                    return (0, i.jsx)(l.Fragment, {
                        children: (0, i.jsx)(sB.Z, {
                            portal_element_id: "modal_root",
                            title: h,
                            is_visible: t ? n : a,
                            confirm_button_text: d,
                            onConfirm: o,
                            cancel_button_text: u,
                            onCancel: _,
                            is_mobile_full_width: !1,
                            className: "toolbar__dialog",
                            has_close_icon: !0,
                            children: t && s ? (0, i.jsxs)(i.Fragment, {
                                children: [(0, i.jsxs)(es.Z, {
                                    as: "p",
                                    lineHeight: "s",
                                    size: "xs",
                                    styles: {
                                        paddingBottom: "2rem",
                                        paddingTop: "1rem"
                                    },
                                    children: [(0, i.jsx)(f.Xx, {
                                        i18n_default_text: "Close your contract now or keep it running. If you decide to keep it running, you can check and close it later on the "
                                    }), (0, i.jsx)(es.Z, {
                                        weight: "bold",
                                        as: "span",
                                        lineHeight: "s",
                                        size: "xs",
                                        children: (0, i.jsx)(sJ.Z, {
                                            className: "link",
                                            onClick: () => window.location.assign(m.xOw.reports),
                                            children: (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "Reports"
                                            })
                                        }, 0)
                                    }), (0, i.jsx)(f.Xx, {
                                        i18n_default_text: " page."
                                    })]
                                }), (0, i.jsx)(es.Z, {
                                    as: "p",
                                    lineHeight: "s",
                                    size: "xs",
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "The Quick Strategy you just created will be loaded to the workspace."
                                    })
                                })]
                            }) : (0, i.jsxs)(i.Fragment, {
                                children: [(0, i.jsx)(es.Z, {
                                    as: "p",
                                    lineHeight: "s",
                                    size: "xs",
                                    styles: {
                                        paddingBottom: "2rem",
                                        paddingTop: "1rem"
                                    },
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "Stopping the current bot will load the Quick Strategy you just created to the workspace."
                                    })
                                }), (0, i.jsxs)(es.Z, {
                                    as: "p",
                                    lineHeight: "s",
                                    size: "xs",
                                    children: [(0, i.jsx)(f.Xx, {
                                        i18n_default_text: "Any open contracts can be viewed on the "
                                    }), (0, i.jsx)(es.Z, {
                                        weight: "bold",
                                        as: "span",
                                        lineHeight: "s",
                                        size: "xs",
                                        children: (0, i.jsx)(sJ.Z, {
                                            className: "link",
                                            onClick: () => window.location.assign(m.xOw.reports),
                                            children: (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "Reports"
                                            })
                                        }, 0)
                                    }), (0, i.jsx)(es.Z, {
                                        as: "span",
                                        lineHeight: "s",
                                        size: "xs",
                                        styles: {
                                            paddingInlineStart: "0.4rem"
                                        },
                                        children: (0, i.jsx)(f.Xx, {
                                            i18n_default_text: " page."
                                        })
                                    })]
                                })]
                            })
                        })
                    })
                },
                nK = (0, r.Pi)(() => {
                    let {
                        run_panel: e,
                        quick_strategy: t,
                        summary_card: s
                    } = (0, j.oR)(), {
                        is_contract_dialog_open: a,
                        is_stop_bot_dialog_open: n,
                        toggleStopBotDialog: l
                    } = t, {
                        is_running: r,
                        closeMultiplierContract: o,
                        stopMyBot: c,
                        is_dialog_open: d
                    } = e, {
                        is_multiplier: u
                    } = s;
                    return (0, i.jsx)(nW, {
                        is_running: r,
                        onOkButtonClick: c,
                        is_contract_dialog_open: a,
                        is_stop_bot_dialog_open: n,
                        is_multiplier: u,
                        closeMultiplierContract: o,
                        is_dialog_open: d,
                        toggleStopBotDialog: l
                    })
                }),
                nJ = e => {
                    let {
                        popover_message: t,
                        button_id: s,
                        button_classname: a,
                        buttonOnClick: n,
                        icon: l,
                        button_text: r
                    } = e;
                    return (0, i.jsx)(G.Z, {
                        alignment: "bottom",
                        message: t,
                        should_disable_pointer_events: !0,
                        children: (0, i.jsx)(eA.Z, {
                            id: s,
                            className: a,
                            has_effect: !0,
                            onClick: n,
                            icon: l,
                            green: !0,
                            children: r
                        })
                    })
                };
            var nQ = s("52068"),
                n0 = s("62705"),
                n1 = s("48073"),
                n5 = s("81712"),
                n2 = s("66090"),
                n8 = s("87348"),
                n3 = s("46340"),
                n4 = s("79800"),
                n7 = s("70342"),
                n6 = s("80246"),
                n9 = s("83069");
            let ie = e => {
                    let {
                        popover_message: t,
                        icon: s
                    } = e;
                    return (0, i.jsxs)(i.Fragment, {
                        children: [(0, i.jsx)(eq.Z, {
                            children: s
                        }), (0, i.jsx)(tt.Z, {
                            children: (0, i.jsx)(G.Z, {
                                alignment: "bottom",
                                message: t,
                                zIndex: String(st.TOOLBAR),
                                should_disable_pointer_events: !0,
                                children: s
                            })
                        })]
                    })
                },
                it = (0, r.Pi)(() => {
                    let {
                        dashboard: e,
                        toolbar: t,
                        load_modal: s,
                        save_modal: a
                    } = (0, j.oR)(), {
                        setPreviewOnPopup: n,
                        setChartModalVisibility: l,
                        setTradingViewModalVisibility: r,
                        setAnalysistoolVisibility: o
                    } = e, {
                        has_redo_stack: c,
                        has_undo_stack: d,
                        onResetClick: u,
                        onSortClick: h,
                        onUndoClick: _,
                        onZoomInOutClick: m
                    } = t, {
                        toggleSaveModal: x
                    } = a, {
                        toggleLoadModal: p
                    } = s, {
                        isDesktop: v
                    } = (0, N.F)();
                    return (0, i.jsx)("div", {
                        className: "toolbar__wrapper",
                        children: (0, i.jsxs)("div", {
                            className: "toolbar__group toolbar__group-btn",
                            "data-testid": "dt_toolbar_group_btn",
                            children: [(0, i.jsx)(ie, {
                                popover_message: (0, f.NC)("Reset"),
                                icon: (0, i.jsx)("span", {
                                    id: "db-toolbar__reset-button",
                                    className: "toolbar__icon",
                                    onClick: u,
                                    "data-testid": "dt_toolbar_reset_button",
                                    children: (0, i.jsx)(nQ.Z, {})
                                })
                            }), (0, i.jsx)(ie, {
                                popover_message: (0, f.NC)("Import"),
                                icon: (0, i.jsx)("span", {
                                    className: "toolbar__icon",
                                    id: "db-toolbar__import-button",
                                    "data-testid": "dt_toolbar_import_button",
                                    onClick: () => {
                                        n(!0), p(), (0, tJ.m5)({
                                            subpage_name: "bot_builder",
                                            subform_source: "bot_builder",
                                            subform_name: "load_strategy",
                                            load_strategy_tab: "recent"
                                        })
                                    },
                                    children: (0, i.jsx)(n0.Z, {})
                                })
                            }), (0, i.jsx)(ie, {
                                popover_message: (0, f.NC)("Save"),
                                icon: (0, i.jsx)("span", {
                                    className: "toolbar__icon",
                                    id: "db-toolbar__save-button",
                                    "data-testid": "dt_toolbar_save_button",
                                    onClick: x,
                                    children: (0, i.jsx)(n1.Z, {})
                                })
                            }), (0, i.jsx)(ie, {
                                popover_message: (0, f.NC)("Sort blocks"),
                                icon: (0, i.jsx)("span", {
                                    className: "toolbar__icon",
                                    id: "db-toolbar__sort-button",
                                    "data-testid": "dt_toolbar_sort_button",
                                    onClick: h,
                                    children: (0, i.jsx)(n5.Z, {})
                                })
                            }), (0, i.jsx)("div", {
                                className: "vertical-divider"
                            }), (0, i.jsx)(ie, {
                                popover_message: (0, f.NC)("Charts"),
                                icon: (0, i.jsx)("span", {
                                    className: "toolbar__icon",
                                    id: "db-toolbar__charts-button",
                                    onClick: () => l(),
                                    children: (0, i.jsx)(n2.Z, {})
                                })
                            }), (0, i.jsx)(ie, {
                                popover_message: (0, f.NC)("TradingView Chart"),
                                icon: (0, i.jsx)("span", {
                                    className: "toolbar__icon",
                                    id: "db-toolbar__tradingview-button",
                                    onClick: () => r(),
                                    children: (0, i.jsx)(n8.Z, {})
                                })
                            }), (0, i.jsx)(ie, {
                                popover_message: (0, f.NC)("Analysistool"),
                                icon: (0, i.jsx)("span", {
                                    className: "toolbar__icon",
                                    id: "db-toolbar__tradingview-button",
                                    onClick: () => o(),
                                    children: (0, i.jsx)(n3.Z, {
                                        fill: "#ff0000",
                                        iconSize: "md"
                                    })
                                })
                            }), (0, i.jsx)("div", {
                                className: "vertical-divider"
                            }), (0, i.jsx)(ie, {
                                popover_message: (0, f.NC)("Undo"),
                                icon: (0, i.jsx)("span", {
                                    className: U()("toolbar__icon undo", {
                                        "toolbar__icon--disabled": !d
                                    }),
                                    id: "db-toolbar__undo-button",
                                    "data-testid": "dt_toolbar_undo_button",
                                    onClick: () => _(!1),
                                    children: (0, i.jsx)(n4.Z, {})
                                })
                            }), (0, i.jsx)(ie, {
                                popover_message: (0, f.NC)("Redo"),
                                icon: (0, i.jsx)("span", {
                                    className: U()("toolbar__icon redo", {
                                        "toolbar__icon--disabled": !c
                                    }),
                                    id: "db-toolbar__redo-button",
                                    "data-testid": "dt_toolbar_redo_button",
                                    onClick: () => _(!0),
                                    children: (0, i.jsx)(n7.Z, {})
                                })
                            }), (0, i.jsx)("div", {
                                className: "vertical-divider"
                            }), (0, i.jsx)(ie, {
                                popover_message: (0, f.NC)("Zoom in"),
                                icon: (0, i.jsx)("span", {
                                    className: "toolbar__icon",
                                    id: "db-toolbar__zoom-in-button",
                                    "data-testid": "dt_toolbar_zoom_in_button",
                                    onClick: () => m(!0),
                                    children: (0, i.jsx)(n6.Z, {})
                                })
                            }), (0, i.jsx)(ie, {
                                popover_message: (0, f.NC)("Zoom out"),
                                icon: (0, i.jsx)("span", {
                                    className: "toolbar__icon",
                                    id: "db-toolbar__zoom-out",
                                    "data-testid": "dt_toolbar_zoom_out_button",
                                    onClick: () => m(!1),
                                    children: (0, i.jsx)(n9.Z, {})
                                })
                            })]
                        })
                    })
                }),
                is = (0, r.Pi)(() => {
                    let {
                        run_panel: e,
                        toolbar: t,
                        quick_strategy: s
                    } = (0, j.oR)(), {
                        isDesktop: a
                    } = (0, N.F)(), {
                        is_dialog_open: n,
                        closeResetDialog: r,
                        onResetOkButtonClick: o
                    } = t, {
                        is_running: c
                    } = e, {
                        setFormVisibility: d
                    } = s, u = c ? (0, f.NC)("Yes") : (0, f.NC)("OK"), h = c ? (0, f.NC)("No") : (0, f.NC)("Cancel");
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsx)("div", {
                            className: "toolbar dashboard__toolbar",
                            "data-testid": "dt_dashboard_toolbar",
                            children: (0, i.jsxs)("div", {
                                className: "toolbar__section",
                                children: [!a && (0, i.jsx)(nJ, {
                                    popover_message: (0, f.NC)("Click here to start building your Binarytools."),
                                    button_id: "db-toolbar__get-started-button",
                                    button_classname: "toolbar__btn toolbar__btn--icon toolbar__btn--start",
                                    buttonOnClick: () => {
                                        d(!0), (0, tJ.m5)({
                                            subpage_name: "bot_builder",
                                            subform_source: "bot_builder",
                                            subform_name: "quick_strategy"
                                        })
                                    },
                                    button_text: (0, f.NC)("Quick strategy")
                                }), a && (0, i.jsx)(it, {})]
                            })
                        }), !a && (0, i.jsx)(it, {}), (0, i.jsx)(sB.Z, {
                            portal_element_id: "modal_root",
                            title: (0, f.NC)("Are you sure?"),
                            is_visible: n,
                            confirm_button_text: u,
                            onConfirm: o,
                            cancel_button_text: h,
                            onCancel: r,
                            is_mobile_full_width: !1,
                            className: "toolbar__dialog",
                            has_close_icon: !0,
                            children: c ? (0, i.jsx)(f.Xx, {
                                i18n_default_text: "The workspace will be reset to the default strategy and any unsaved changes will be lost. <0>Note: This will not affect your running bot.</0>",
                                components: [(0, i.jsx)("div", {
                                    className: "toolbar__dialog-text--second",
                                    "data-testid": "dt_toolbar_dialog_text_second"
                                }, 0)]
                            }) : (0, i.jsx)(f.Xx, {
                                i18n_default_text: "Any unsaved changes will be lost."
                            })
                        })]
                    })
                });
            var ia = s("88720"),
                ii = s("16232"),
                il = s("40877");
            let ir = (0, r.Pi)(e => {
                    let {
                        search: t,
                        is_search_loading: s,
                        onClick: a
                    } = e;
                    return t ? s ? (0, i.jsx)("div", {
                        className: "loader",
                        "data-testid": "loader"
                    }) : (0, i.jsx)(il.Z, {
                        onClick: a,
                        height: "18px",
                        width: "18px",
                        fill: "var(--text-general)"
                    }) : (0, i.jsx)(ii.Z, {
                        height: "20px",
                        width: "20px",
                        fill: "var(--text-general)"
                    })
                }),
                io = e => {
                    let {
                        is_search_loading: t,
                        onSearch: s,
                        onSearchBlur: a,
                        onSearchClear: n,
                        onSearchKeyUp: l
                    } = e;
                    return (0, i.jsx)("div", {
                        className: "db-toolbox__search",
                        children: (0, i.jsx)(eM.J9, {
                            initialValues: {
                                search: ""
                            },
                            onSubmit: s,
                            children: e => {
                                let {
                                    submitForm: s,
                                    values: {
                                        search: r
                                    },
                                    setFieldValue: o
                                } = e;
                                return (0, i.jsx)(eM.l0, {
                                    children: (0, i.jsx)(eM.gN, {
                                        name: "search",
                                        children: e => {
                                            let {
                                                field: c
                                            } = e;
                                            return (0, i.jsx)(eH, { ...c,
                                                className: "db-toolbox__search-field",
                                                type: "text",
                                                name: "search",
                                                placeholder: (0, f.NC)("Search"),
                                                onKeyUp: () => l(s),
                                                onFocus: s,
                                                onBlur: a,
                                                leading_icon: (0, i.jsx)(ir, {
                                                    search: r,
                                                    is_search_loading: t,
                                                    onClick: () => n(o)
                                                })
                                            })
                                        }
                                    })
                                })
                            }
                        })
                    })
                };
            var ic = s("97762");
            let id = e => {
                    let { ...t
                    } = e;
                    return l.createElement("arg", t)
                },
                iu = e => {
                    let { ...t
                    } = e;
                    return l.createElement("block", t)
                },
                ih = e => {
                    let { ...t
                    } = e;
                    return l.createElement("category", t)
                },
                i_ = e => {
                    let { ...t
                    } = e;
                    return l.createElement("example", t)
                },
                im = e => {
                    let { ...t
                    } = e;
                    return l.createElement("examples", t)
                },
                ix = e => {
                    let { ...t
                    } = e;
                    return l.createElement("field", t)
                },
                ip = e => {
                    let { ...t
                    } = e;
                    return l.createElement("mutation", t)
                },
                ij = e => {
                    let { ...t
                    } = e;
                    return l.createElement("next", t)
                },
                iv = e => {
                    let { ...t
                    } = e;
                    return l.createElement("shadow", t)
                },
                ig = e => {
                    let { ...t
                    } = e;
                    return l.createElement("statement", t)
                },
                ib = e => {
                    let { ...t
                    } = e;
                    return l.createElement("value", t)
                },
                iy = e => {
                    let { ...t
                    } = e;
                    return l.createElement("xml", t)
                },
                iN = () => ic.renderToStaticMarkup((0, i.jsxs)(iy, {
                    xmlns: "http://www.w3.org/1999/xhtml",
                    id: "toolbox",
                    children: [(0, i.jsxs)(ih, {
                        id: "trade_parameters",
                        name: (0, f.NC)("Trade parameters"),
                        children: [(0, i.jsx)(iu, {
                            type: "trade_definition",
                            children: (0, i.jsx)(ig, {
                                name: "TRADE_OPTIONS",
                                children: (0, i.jsxs)(iu, {
                                    type: "trade_definition_market",
                                    deletable: "false",
                                    movable: "false",
                                    children: [(0, i.jsx)(ix, {
                                        name: "MARKET_LIST"
                                    }), (0, i.jsx)(ix, {
                                        name: "SUBMARKET_LIST"
                                    }), (0, i.jsx)(ix, {
                                        name: "SYMBOL_LIST"
                                    }), (0, i.jsx)(ij, {
                                        children: (0, i.jsxs)(iu, {
                                            type: "trade_definition_tradetype",
                                            deletable: "false",
                                            movable: "false",
                                            children: [(0, i.jsx)(ix, {
                                                name: "TRADETYPECAT_LIST"
                                            }), (0, i.jsx)(ix, {
                                                name: "TRADETYPE_LIST"
                                            }), (0, i.jsx)(ij, {
                                                children: (0, i.jsxs)(iu, {
                                                    type: "trade_definition_contracttype",
                                                    deletable: "false",
                                                    movable: "false",
                                                    children: [(0, i.jsx)(ix, {
                                                        name: "TYPE_LIST"
                                                    }), (0, i.jsx)(ij, {
                                                        children: (0, i.jsxs)(iu, {
                                                            type: "trade_definition_candleinterval",
                                                            deletable: "false",
                                                            movable: "false",
                                                            children: [(0, i.jsx)(ix, {
                                                                name: "CANDLEINTERVAL_LIST",
                                                                children: "60"
                                                            }), (0, i.jsx)(ij, {
                                                                children: (0, i.jsxs)(iu, {
                                                                    type: "trade_definition_restartbuysell",
                                                                    deletable: "false",
                                                                    movable: "false",
                                                                    children: [(0, i.jsx)(ix, {
                                                                        name: "TIME_MACHINE_ENABLED",
                                                                        children: "FALSE"
                                                                    }), (0, i.jsx)(ij, {
                                                                        children: (0, i.jsx)(iu, {
                                                                            type: "trade_definition_restartonerror",
                                                                            deletable: "false",
                                                                            movable: "false",
                                                                            children: (0, i.jsx)(ix, {
                                                                                name: "RESTARTONERROR",
                                                                                children: "TRUE"
                                                                            })
                                                                        })
                                                                    })]
                                                                })
                                                            })]
                                                        })
                                                    })]
                                                })
                                            })]
                                        })
                                    })]
                                })
                            })
                        }), (0, i.jsxs)(iu, {
                            type: "trade_definition_tradeoptions",
                            children: [(0, i.jsx)(ip, {
                                has_first_barrier: "false",
                                has_second_barrier: "false",
                                has_prediction: "false"
                            }), (0, i.jsx)(ix, {
                                name: "DURATIONTYPE_LIST"
                            }), (0, i.jsx)(ix, {
                                name: "CURRENCY_LIST",
                                children: "USD"
                            }), (0, i.jsx)(ib, {
                                name: "DURATION",
                                children: (0, i.jsx)(iv, {
                                    type: "math_number",
                                    children: (0, i.jsx)(ix, {
                                        name: "NUM",
                                        children: "1"
                                    })
                                })
                            }), (0, i.jsx)(ib, {
                                name: "AMOUNT",
                                children: (0, i.jsx)(iv, {
                                    type: "math_number",
                                    children: (0, i.jsx)(ix, {
                                        name: "NUM",
                                        children: "1"
                                    })
                                })
                            }), (0, i.jsx)(ix, {
                                name: "AMOUNT_LIMITS"
                            })]
                        }), (0, i.jsxs)(iu, {
                            type: "trade_definition_multiplier",
                            children: [(0, i.jsx)(ix, {
                                name: "MULTIPLIERTYPE_LIST"
                            }), (0, i.jsx)(ix, {
                                name: "CURRENCY_LIST",
                                children: "USD"
                            }), (0, i.jsx)(ib, {
                                name: "AMOUNT",
                                children: (0, i.jsx)(iv, {
                                    type: "math_number",
                                    children: (0, i.jsx)(ix, {
                                        name: "NUM",
                                        children: "1"
                                    })
                                })
                            }), (0, i.jsx)(ix, {
                                name: "AMOUNT_LIMITS"
                            })]
                        }), (0, i.jsx)(iu, {
                            type: "multiplier_take_profit",
                            children: (0, i.jsx)(ib, {
                                name: "AMOUNT",
                                children: (0, i.jsx)(iv, {
                                    type: "math_number",
                                    children: (0, i.jsx)(ix, {
                                        name: "NUM",
                                        children: "0"
                                    })
                                })
                            })
                        }), (0, i.jsx)(iu, {
                            type: "multiplier_stop_loss",
                            children: (0, i.jsx)(ib, {
                                name: "AMOUNT",
                                children: (0, i.jsx)(iv, {
                                    type: "math_number",
                                    children: (0, i.jsx)(ix, {
                                        name: "NUM",
                                        children: "0"
                                    })
                                })
                            })
                        }), (0, i.jsxs)(iu, {
                            type: "trade_definition_accumulator",
                            children: [(0, i.jsx)(ix, {
                                name: "GROWTHRATE_LIST"
                            }), (0, i.jsx)(ix, {
                                name: "CURRENCY_LIST",
                                children: "USD"
                            }), (0, i.jsx)(ib, {
                                name: "AMOUNT",
                                children: (0, i.jsx)(iv, {
                                    type: "math_number",
                                    children: (0, i.jsx)(ix, {
                                        name: "NUM",
                                        children: "1"
                                    })
                                })
                            })]
                        }), (0, i.jsx)(iu, {
                            type: "accumulator_take_profit",
                            children: (0, i.jsx)(ib, {
                                name: "AMOUNT",
                                children: (0, i.jsx)(iv, {
                                    type: "math_number",
                                    children: (0, i.jsx)(ix, {
                                        name: "NUM",
                                        children: "0"
                                    })
                                })
                            })
                        })]
                    }), (0, i.jsxs)(ih, {
                        id: "purchase_conditions",
                        name: (0, f.NC)("Purchase conditions"),
                        children: [(0, i.jsx)(iu, {
                            type: "before_purchase"
                        }), (0, i.jsx)(iu, {
                            type: "apollo_purchase"
                        })]
                    }), (0, i.jsxs)(ih, {
                        id: "sell_conditions",
                        name: (0, f.NC)("Sell conditions (optional)"),
                        children: [(0, i.jsx)(iu, {
                            type: "during_purchase"
                        }), (0, i.jsx)(iu, {
                            type: "sell_at_market"
                        })]
                    }), (0, i.jsxs)(ih, {
                        id: "trade_results",
                        name: (0, f.NC)("Restart trading conditions"),
                        children: [(0, i.jsx)(iu, {
                            type: "after_purchase"
                        }), (0, i.jsx)(iu, {
                            type: "trade_again"
                        })]
                    }), (0, i.jsxs)(ih, {
                        id: "analysis",
                        name: (0, f.NC)("Analysis"),
                        children: [(0, i.jsxs)(ih, {
                            id: "indicators",
                            name: (0, f.NC)("Indicators"),
                            children: [(0, i.jsx)(iu, {
                                type: "sma_statement",
                                children: (0, i.jsx)(ig, {
                                    name: "STATEMENT",
                                    children: (0, i.jsxs)(iu, {
                                        type: "input_list",
                                        deletable: "false",
                                        movable: "false",
                                        children: [(0, i.jsx)(ib, {
                                            name: "INPUT_LIST"
                                        }), (0, i.jsx)(ij, {
                                            children: (0, i.jsx)(iu, {
                                                type: "period",
                                                deletable: "false",
                                                movable: "false",
                                                children: (0, i.jsx)(ib, {
                                                    name: "PERIOD",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "10"
                                                        })
                                                    })
                                                })
                                            })
                                        })]
                                    })
                                })
                            }), (0, i.jsx)(iu, {
                                type: "smaa_statement",
                                children: (0, i.jsx)(ig, {
                                    name: "STATEMENT",
                                    children: (0, i.jsxs)(iu, {
                                        type: "input_list",
                                        deletable: "false",
                                        movable: "false",
                                        children: [(0, i.jsx)(ib, {
                                            name: "INPUT_LIST"
                                        }), (0, i.jsx)(ij, {
                                            children: (0, i.jsx)(iu, {
                                                type: "period",
                                                deletable: "false",
                                                movable: "false",
                                                children: (0, i.jsx)(ib, {
                                                    name: "PERIOD",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "10"
                                                        })
                                                    })
                                                })
                                            })
                                        })]
                                    })
                                })
                            }), (0, i.jsxs)(iu, {
                                type: "bb_statement",
                                children: [(0, i.jsx)(ix, {
                                    name: "BBRESULT_LIST",
                                    children: "0"
                                }), (0, i.jsx)(ig, {
                                    name: "STATEMENT",
                                    children: (0, i.jsxs)(iu, {
                                        type: "input_list",
                                        deletable: "false",
                                        movable: "false",
                                        children: [(0, i.jsx)(ib, {
                                            name: "INPUT_LIST"
                                        }), (0, i.jsx)(ij, {
                                            children: (0, i.jsxs)(iu, {
                                                type: "period",
                                                deletable: "false",
                                                movable: "false",
                                                children: [(0, i.jsx)(ib, {
                                                    name: "PERIOD",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "10"
                                                        })
                                                    })
                                                }), (0, i.jsx)(ij, {
                                                    children: (0, i.jsxs)(iu, {
                                                        type: "std_dev_multiplier_up",
                                                        deletable: "false",
                                                        movable: "false",
                                                        children: [(0, i.jsx)(ib, {
                                                            name: "UPMULTIPLIER",
                                                            children: (0, i.jsx)(iv, {
                                                                type: "math_number",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "NUM",
                                                                    children: "5"
                                                                })
                                                            })
                                                        }), (0, i.jsx)(ij, {
                                                            children: (0, i.jsx)(iu, {
                                                                type: "std_dev_multiplier_down",
                                                                children: (0, i.jsx)(ib, {
                                                                    name: "DOWNMULTIPLIER",
                                                                    children: (0, i.jsx)(iv, {
                                                                        type: "math_number",
                                                                        children: (0, i.jsx)(ix, {
                                                                            name: "NUM",
                                                                            children: "5"
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })]
                                                    })
                                                })]
                                            })
                                        })]
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "bba_statement",
                                children: [(0, i.jsx)(ix, {
                                    name: "BBRESULT_LIST",
                                    children: "0"
                                }), (0, i.jsx)(ig, {
                                    name: "STATEMENT",
                                    children: (0, i.jsxs)(iu, {
                                        type: "input_list",
                                        deletable: "false",
                                        movable: "false",
                                        children: [(0, i.jsx)(ib, {
                                            name: "INPUT_LIST"
                                        }), (0, i.jsx)(ij, {
                                            children: (0, i.jsxs)(iu, {
                                                type: "period",
                                                deletable: "false",
                                                movable: "false",
                                                children: [(0, i.jsx)(ib, {
                                                    name: "PERIOD",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "10"
                                                        })
                                                    })
                                                }), (0, i.jsx)(ij, {
                                                    children: (0, i.jsxs)(iu, {
                                                        type: "std_dev_multiplier_up",
                                                        deletable: "false",
                                                        movable: "false",
                                                        children: [(0, i.jsx)(ib, {
                                                            name: "UPMULTIPLIER",
                                                            children: (0, i.jsx)(iv, {
                                                                type: "math_number",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "NUM",
                                                                    children: "5"
                                                                })
                                                            })
                                                        }), (0, i.jsx)(ij, {
                                                            children: (0, i.jsx)(iu, {
                                                                type: "std_dev_multiplier_down",
                                                                children: (0, i.jsx)(ib, {
                                                                    name: "DOWNMULTIPLIER",
                                                                    children: (0, i.jsx)(iv, {
                                                                        type: "math_number",
                                                                        children: (0, i.jsx)(ix, {
                                                                            name: "NUM",
                                                                            children: "5"
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })]
                                                    })
                                                })]
                                            })
                                        })]
                                    })
                                })]
                            }), (0, i.jsx)(iu, {
                                type: "ema_statement",
                                children: (0, i.jsx)(ig, {
                                    name: "STATEMENT",
                                    children: (0, i.jsxs)(iu, {
                                        type: "input_list",
                                        deletable: "false",
                                        movable: "false",
                                        children: [(0, i.jsx)(ib, {
                                            name: "INPUT_LIST"
                                        }), (0, i.jsx)(ij, {
                                            children: (0, i.jsx)(iu, {
                                                type: "period",
                                                deletable: "false",
                                                movable: "false",
                                                children: (0, i.jsx)(ib, {
                                                    name: "PERIOD",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "10"
                                                        })
                                                    })
                                                })
                                            })
                                        })]
                                    })
                                })
                            }), (0, i.jsx)(iu, {
                                type: "emaa_statement",
                                children: (0, i.jsx)(ig, {
                                    name: "STATEMENT",
                                    children: (0, i.jsxs)(iu, {
                                        type: "input_list",
                                        deletable: "false",
                                        movable: "false",
                                        children: [(0, i.jsx)(ib, {
                                            name: "INPUT_LIST"
                                        }), (0, i.jsx)(ij, {
                                            children: (0, i.jsx)(iu, {
                                                type: "period",
                                                deletable: "false",
                                                movable: "false",
                                                children: (0, i.jsx)(ib, {
                                                    name: "PERIOD",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "10"
                                                        })
                                                    })
                                                })
                                            })
                                        })]
                                    })
                                })
                            }), (0, i.jsx)(iu, {
                                type: "rsi_statement",
                                children: (0, i.jsx)(ig, {
                                    name: "STATEMENT",
                                    children: (0, i.jsx)(iu, {
                                        type: "input_list",
                                        deletable: "false",
                                        movable: "false",
                                        children: (0, i.jsx)(ij, {
                                            children: (0, i.jsx)(iu, {
                                                type: "period",
                                                deletable: "false",
                                                movable: "false",
                                                children: (0, i.jsx)(ib, {
                                                    name: "PERIOD",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "10"
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            }), (0, i.jsx)(iu, {
                                type: "rsia_statement",
                                children: (0, i.jsx)(ig, {
                                    name: "STATEMENT",
                                    children: (0, i.jsxs)(iu, {
                                        type: "input_list",
                                        deletable: "false",
                                        movable: "false",
                                        children: [(0, i.jsx)(ib, {
                                            name: "INPUT_LIST"
                                        }), (0, i.jsx)(ij, {
                                            children: (0, i.jsx)(iu, {
                                                type: "period",
                                                deletable: "false",
                                                movable: "false",
                                                children: (0, i.jsx)(ib, {
                                                    name: "PERIOD",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "10"
                                                        })
                                                    })
                                                })
                                            })
                                        })]
                                    })
                                })
                            }), (0, i.jsxs)(iu, {
                                type: "macda_statement",
                                children: [(0, i.jsx)(ix, {
                                    name: "MACDFIELDS_LIST",
                                    children: "1"
                                }), (0, i.jsx)(ig, {
                                    name: "STATEMENT",
                                    children: (0, i.jsxs)(iu, {
                                        type: "input_list",
                                        deletable: "false",
                                        movable: "false",
                                        children: [(0, i.jsx)(ib, {
                                            name: "INPUT_LIST"
                                        }), (0, i.jsx)(ij, {
                                            children: (0, i.jsxs)(iu, {
                                                type: "fast_ema_period",
                                                deletable: "false",
                                                movable: "false",
                                                children: [(0, i.jsx)(ib, {
                                                    name: "FAST_EMA_PERIOD",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "12"
                                                        })
                                                    })
                                                }), (0, i.jsx)(ij, {
                                                    children: (0, i.jsxs)(iu, {
                                                        type: "slow_ema_period",
                                                        deletable: "false",
                                                        movable: "false",
                                                        children: [(0, i.jsx)(ib, {
                                                            name: "SLOW_EMA_PERIOD",
                                                            children: (0, i.jsx)(iv, {
                                                                type: "math_number",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "NUM",
                                                                    children: "26"
                                                                })
                                                            })
                                                        }), (0, i.jsx)(ij, {
                                                            children: (0, i.jsx)(iu, {
                                                                type: "signal_ema_period",
                                                                deletable: "false",
                                                                movable: "false",
                                                                children: (0, i.jsx)(ib, {
                                                                    name: "SIGNAL_EMA_PERIOD",
                                                                    children: (0, i.jsx)(iv, {
                                                                        type: "math_number",
                                                                        children: (0, i.jsx)(ix, {
                                                                            name: "NUM",
                                                                            children: "9"
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })]
                                                    })
                                                })]
                                            })
                                        })]
                                    })
                                })]
                            })]
                        }), (0, i.jsxs)(ih, {
                            name: (0, f.NC)("Tick and candle analysis"),
                            id: "tick_analysis",
                            children: [(0, i.jsx)(iu, {
                                type: "tick_analysis"
                            }), (0, i.jsx)(iu, {
                                type: "tick"
                            }), (0, i.jsx)(iu, {
                                type: "last_digit"
                            }), (0, i.jsx)(iu, {
                                type: "stat"
                            }), (0, i.jsx)(iu, {
                                type: "stat_list"
                            }), (0, i.jsx)(iu, {
                                type: "ticks"
                            }), (0, i.jsx)(iu, {
                                type: "lastDigitList"
                            }), (0, i.jsx)(iu, {
                                type: "check_direction"
                            }), (0, i.jsx)(iu, {
                                type: "is_candle_black"
                            }), (0, i.jsxs)(iu, {
                                type: "read_ohlc",
                                children: [(0, i.jsx)(ix, {
                                    name: "OHLCFIELD_LIST",
                                    children: "open"
                                }), (0, i.jsx)(ix, {
                                    name: "CANDLEINTERVAL_LIST",
                                    children: "default"
                                }), (0, i.jsx)(ib, {
                                    name: "CANDLEINDEX",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "1"
                                        })
                                    })
                                })]
                            }), (0, i.jsx)(iu, {
                                type: "read_ohlc_obj"
                            }), (0, i.jsx)(iu, {
                                type: "ohlc_values"
                            }), (0, i.jsx)(iu, {
                                type: "ohlc_values_in_list"
                            }), (0, i.jsxs)(iu, {
                                type: "get_ohlc",
                                children: [(0, i.jsx)(ix, {
                                    name: "CANDLEINTERVAL_LIST",
                                    children: "default"
                                }), (0, i.jsx)(ib, {
                                    name: "CANDLEINDEX",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "1"
                                        })
                                    })
                                })]
                            }), (0, i.jsx)(iu, {
                                type: "ohlc"
                            })]
                        }), (0, i.jsxs)(ih, {
                            name: (0, f.NC)("Contract"),
                            id: "contract_details",
                            children: [(0, i.jsx)(iu, {
                                type: "contract_check_result"
                            }), (0, i.jsx)(iu, {
                                type: "read_details"
                            }), (0, i.jsx)(iu, {
                                type: "sell_price"
                            }), (0, i.jsx)(iu, {
                                type: "check_sell"
                            }), (0, i.jsx)(iu, {
                                type: "payout"
                            }), (0, i.jsx)(iu, {
                                type: "ask_price"
                            })]
                        }), (0, i.jsxs)(ih, {
                            name: (0, f.NC)("Stats"),
                            id: "stats",
                            children: [(0, i.jsx)(iu, {
                                type: "balance"
                            }), (0, i.jsx)(iu, {
                                type: "total_profit"
                            }), (0, i.jsx)(iu, {
                                type: "total_runs"
                            })]
                        })]
                    }), (0, i.jsxs)(ih, {
                        id: "utility",
                        name: (0, f.NC)("Utility"),
                        children: [(0, i.jsx)(ih, {
                            name: (0, f.NC)("Custom functions"),
                            id: "custom_functions",
                            dynamic: "PROCEDURE"
                        }), (0, i.jsx)(ih, {
                            name: (0, f.NC)("Variables"),
                            id: "variables",
                            dynamic: "VARIABLE"
                        }), (0, i.jsxs)(ih, {
                            name: (0, f.NC)("Notifications"),
                            id: "notifications",
                            children: [(0, i.jsx)(iu, {
                                type: "text_print",
                                children: (0, i.jsx)(ib, {
                                    name: "TEXT",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: "abc"
                                        })
                                    })
                                })
                            }), (0, i.jsxs)(iu, {
                                type: "text_prompt_ext",
                                children: [(0, i.jsx)(ix, {
                                    name: "TYPE",
                                    children: "TEXT"
                                }), (0, i.jsx)(ib, {
                                    name: "TEXT",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: "abc"
                                        })
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "notify",
                                children: [(0, i.jsx)(ix, {
                                    name: "NOTIFICATION_TYPE",
                                    children: "success"
                                }), (0, i.jsx)(ib, {
                                    name: "MESSAGE",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: "abc"
                                        })
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "notify_telegram",
                                children: [(0, i.jsx)(ib, {
                                    name: "TELEGRAM_ACCESS_TOKEN",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "TELEGRAM_CHAT_ID",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "TELEGRAM_MESSAGE",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: "abc"
                                        })
                                    })
                                })]
                            })]
                        }), (0, i.jsxs)(ih, {
                            name: (0, f.NC)("Time"),
                            id: "time",
                            children: [(0, i.jsx)(iu, {
                                type: "epoch"
                            }), (0, i.jsx)(iu, {
                                type: "timeout"
                            }), (0, i.jsx)(iu, {
                                type: "tick_delay"
                            }), (0, i.jsx)(iu, {
                                type: "totimestamp",
                                children: (0, i.jsx)(ib, {
                                    name: "DATETIME",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: "yyyy-mm-dd hh:mm:ss"
                                        })
                                    })
                                })
                            }), (0, i.jsx)(iu, {
                                type: "todatetime",
                                children: (0, i.jsx)(ib, {
                                    name: "TIMESTAMP",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "0"
                                        })
                                    })
                                })
                            })]
                        }), (0, i.jsxs)(ih, {
                            name: (0, f.NC)("Math"),
                            id: "math",
                            children: [(0, i.jsx)(iu, {
                                type: "math_number"
                            }), (0, i.jsxs)(iu, {
                                type: "math_arithmetic",
                                children: [(0, i.jsx)(ix, {
                                    name: "OP",
                                    children: "ADD"
                                }), (0, i.jsx)(ib, {
                                    name: "A",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "1"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "B",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "1"
                                        })
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "math_single",
                                children: [(0, i.jsx)(ix, {
                                    name: "OP",
                                    children: "ROOT"
                                }), (0, i.jsx)(ib, {
                                    name: "NUM",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "9"
                                        })
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "math_trig",
                                children: [(0, i.jsx)(ix, {
                                    name: "OP",
                                    children: "SIN"
                                }), (0, i.jsx)(ib, {
                                    name: "NUM",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "45"
                                        })
                                    })
                                })]
                            }), (0, i.jsx)(iu, {
                                type: "math_constant"
                            }), (0, i.jsxs)(iu, {
                                type: "math_number_property",
                                children: [(0, i.jsx)(ip, {
                                    divisor_input: "false"
                                }), (0, i.jsx)(ix, {
                                    name: "PROPERTY",
                                    children: "EVEN"
                                }), (0, i.jsx)(ib, {
                                    name: "NUMBER_TO_CHECK",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "0"
                                        })
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "math_change",
                                children: [(0, i.jsx)(ix, {
                                    name: "VAR",
                                    variabletype: "",
                                    children: "item"
                                }), (0, i.jsx)(ib, {
                                    name: "DELTA",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "1"
                                        })
                                    })
                                })]
                            }), (0, i.jsx)(iu, {
                                type: "math_on_list"
                            }), (0, i.jsxs)(iu, {
                                type: "math_round",
                                children: [(0, i.jsx)(ix, {
                                    name: "OP",
                                    children: "ROUND"
                                }), (0, i.jsx)(ib, {
                                    name: "NUM",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "3.1"
                                        })
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "math_modulo",
                                children: [(0, i.jsx)(ib, {
                                    name: "DIVIDEND",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "64"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "DIVISOR",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "10"
                                        })
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "math_constrain",
                                children: [(0, i.jsx)(ib, {
                                    name: "Value",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "50"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "LOW",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "1"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "HIGH",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "100"
                                        })
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "math_random_int",
                                children: [(0, i.jsx)(ib, {
                                    name: "FROM",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "1"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "TO",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "100"
                                        })
                                    })
                                })]
                            }), (0, i.jsx)(iu, {
                                type: "math_random_float"
                            })]
                        }), (0, i.jsxs)(ih, {
                            name: (0, f.NC)("Text"),
                            id: "text",
                            children: [(0, i.jsx)(iu, {
                                type: "text",
                                children: (0, i.jsx)(ix, {
                                    name: "TEXT",
                                    children: "abc"
                                })
                            }), (0, i.jsxs)(iu, {
                                type: "text_join",
                                children: [(0, i.jsx)(ix, {
                                    name: "VARIABLE",
                                    variabletype: "",
                                    children: "text"
                                }), (0, i.jsx)(ig, {
                                    name: "STACK",
                                    children: (0, i.jsx)(iu, {
                                        type: "text_statement",
                                        movable: "false",
                                        children: (0, i.jsx)(ib, {
                                            name: "TEXT",
                                            children: (0, i.jsx)(iv, {
                                                type: "text",
                                                children: (0, i.jsx)(ix, {
                                                    name: "TEXT",
                                                    children: "abc"
                                                })
                                            })
                                        })
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "text_append",
                                children: [(0, i.jsx)(ix, {
                                    name: "VAR",
                                    variabletype: "",
                                    children: "text"
                                }), (0, i.jsx)(ib, {
                                    name: "TEXT",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: "abc"
                                        })
                                    })
                                })]
                            }), (0, i.jsx)(iu, {
                                type: "text_length",
                                children: (0, i.jsx)(ib, {
                                    name: "Value",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: "abc"
                                        })
                                    })
                                })
                            }), (0, i.jsx)(iu, {
                                type: "text_isEmpty",
                                children: (0, i.jsx)(ib, {
                                    name: "Value",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT"
                                        })
                                    })
                                })
                            }), (0, i.jsxs)(iu, {
                                type: "text_indexOf",
                                children: [(0, i.jsx)(ix, {
                                    name: "END",
                                    children: "FIRST"
                                }), (0, i.jsx)(ib, {
                                    name: "Value",
                                    children: (0, i.jsx)(iu, {
                                        type: "variables_get",
                                        children: (0, i.jsx)(ix, {
                                            name: "VAR",
                                            variabletype: "",
                                            children: "text"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "FIND",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: "abc"
                                        })
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "text_charAt",
                                children: [(0, i.jsx)(ip, {
                                    at: "true"
                                }), (0, i.jsx)(ix, {
                                    name: "WHERE",
                                    children: "FROM_START"
                                }), (0, i.jsx)(ib, {
                                    name: "Value",
                                    children: (0, i.jsx)(iu, {
                                        type: "variables_get",
                                        children: (0, i.jsx)(ix, {
                                            name: "VAR",
                                            variabletype: "",
                                            children: "item"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "AT",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number_positive",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "1"
                                        })
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "text_getSubstring",
                                children: [(0, i.jsx)(ip, {
                                    at1: "true",
                                    at2: "true"
                                }), (0, i.jsx)(ix, {
                                    name: "WHERE1",
                                    children: "FROM_START"
                                }), (0, i.jsx)(ix, {
                                    name: "WHERE2",
                                    children: "FROM_START"
                                }), (0, i.jsx)(ib, {
                                    name: "STRING",
                                    children: (0, i.jsx)(iu, {
                                        type: "variables_get",
                                        children: (0, i.jsx)(ix, {
                                            name: "VAR",
                                            variabletype: "",
                                            children: "text"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "AT1",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number_positive",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "0"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "AT2",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number_positive",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "2"
                                        })
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "text_changeCase",
                                children: [(0, i.jsx)(ix, {
                                    name: "CASE",
                                    children: "UPPERCASE"
                                }), (0, i.jsx)(ib, {
                                    name: "TEXT",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: "abc"
                                        })
                                    })
                                })]
                            }), (0, i.jsxs)(iu, {
                                type: "text_trim",
                                children: [(0, i.jsx)(ix, {
                                    name: "MODE",
                                    children: "BOTH"
                                }), (0, i.jsx)(ib, {
                                    name: "TEXT",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: "abc"
                                        })
                                    })
                                })]
                            })]
                        }), (0, i.jsxs)(ih, {
                            name: (0, f.NC)("Logic"),
                            id: "logic",
                            children: [(0, i.jsx)(iu, {
                                type: "controls_if"
                            }), (0, i.jsx)(iu, {
                                type: "logic_compare"
                            }), (0, i.jsx)(iu, {
                                type: "logic_operation"
                            }), (0, i.jsx)(iu, {
                                type: "logic_negate"
                            }), (0, i.jsx)(iu, {
                                type: "logic_boolean"
                            }), (0, i.jsx)(iu, {
                                type: "logic_null"
                            }), (0, i.jsx)(iu, {
                                type: "logic_ternary"
                            })]
                        }), (0, i.jsxs)(ih, {
                            name: (0, f.NC)("Lists"),
                            id: "lists",
                            children: [(0, i.jsxs)(iu, {
                                type: "lists_create_with",
                                children: [(0, i.jsx)(ix, {
                                    name: "VARIABLE",
                                    variabletype: "",
                                    children: "list"
                                }), (0, i.jsx)(ig, {
                                    name: "STACK",
                                    children: (0, i.jsx)(iu, {
                                        type: "lists_statement",
                                        movable: "false",
                                        children: (0, i.jsx)(ij, {
                                            children: (0, i.jsx)(iu, {
                                                type: "lists_statement",
                                                movable: "false"
                                            })
                                        })
                                    })
                                })]
                            }), (0, i.jsx)(iu, {
                                type: "lists_repeat",
                                children: (0, i.jsx)(ib, {
                                    name: "NUM",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "5"
                                        })
                                    })
                                })
                            }), (0, i.jsx)(iu, {
                                type: "lists_length"
                            }), (0, i.jsx)(iu, {
                                type: "lists_isEmpty"
                            }), (0, i.jsx)(iu, {
                                type: "lists_indexOf"
                            }), (0, i.jsx)(iu, {
                                type: "lists_getIndex"
                            }), (0, i.jsx)(iu, {
                                type: "lists_setIndex"
                            }), (0, i.jsx)(iu, {
                                type: "lists_getSublist"
                            }), (0, i.jsxs)(iu, {
                                type: "lists_split",
                                children: [(0, i.jsx)(ip, {
                                    mode: "SPLIT"
                                }), (0, i.jsx)(ix, {
                                    name: "MODE",
                                    children: "SPLIT"
                                }), (0, i.jsx)(ib, {
                                    name: "DELIM",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: ","
                                        })
                                    })
                                })]
                            }), (0, i.jsx)(iu, {
                                type: "lists_sort"
                            })]
                        }), (0, i.jsxs)(ih, {
                            name: (0, f.NC)("Loops"),
                            id: "loops",
                            children: [(0, i.jsx)(iu, {
                                type: "controls_repeat"
                            }), (0, i.jsx)(iu, {
                                type: "controls_repeat_ext"
                            }), (0, i.jsx)(iu, {
                                type: "controls_whileUntil"
                            }), (0, i.jsx)(iu, {
                                type: "controls_for"
                            }), (0, i.jsx)(iu, {
                                type: "controls_forEach"
                            }), (0, i.jsx)(iu, {
                                type: "controls_flow_statements"
                            })]
                        }), (0, i.jsxs)(ih, {
                            name: (0, f.NC)("Miscellaneous"),
                            id: "misc",
                            children: [(0, i.jsx)(iu, {
                                type: "loader"
                            }), (0, i.jsx)(iu, {
                                type: "block_holder"
                            }), (0, i.jsx)(iu, {
                                type: "console",
                                children: (0, i.jsx)(ib, {
                                    name: "MESSAGE",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: "abc"
                                        })
                                    })
                                })
                            })]
                        })]
                    }), (0, i.jsxs)(ih, {
                        id: "virtual_hook_blocks",
                        name: (0, f.NC)("Virtual Hook Switcher"),
                        children: [(0, i.jsx)(iu, {
                            type: "vh_settings",
                            children: (0, i.jsx)(ig, {
                                name: "STATEMENT",
                                children: (0, i.jsxs)(iu, {
                                    type: "martingale",
                                    deletable: "false",
                                    movable: "false",
                                    children: [(0, i.jsx)(ib, {
                                        name: "MARTINGALE",
                                        children: (0, i.jsx)(iv, {
                                            type: "math_number",
                                            children: (0, i.jsx)(ix, {
                                                name: "NUM",
                                                children: "1.5"
                                            })
                                        })
                                    }), (0, i.jsx)(ij, {
                                        children: (0, i.jsxs)(iu, {
                                            type: "max_steps",
                                            deletable: "false",
                                            movable: "false",
                                            children: [(0, i.jsx)(ib, {
                                                name: "MAX_STEPS",
                                                children: (0, i.jsx)(iv, {
                                                    type: "math_number",
                                                    children: (0, i.jsx)(ix, {
                                                        name: "NUM",
                                                        children: "3"
                                                    })
                                                })
                                            }), (0, i.jsx)(ij, {
                                                children: (0, i.jsxs)(iu, {
                                                    type: "min_trades",
                                                    deletable: "false",
                                                    movable: "false",
                                                    children: [(0, i.jsx)(ib, {
                                                        name: "MIN_TRADES",
                                                        children: (0, i.jsx)(iv, {
                                                            type: "math_number",
                                                            children: (0, i.jsx)(ix, {
                                                                name: "NUM",
                                                                children: "1"
                                                            })
                                                        })
                                                    }), (0, i.jsx)(ij, {
                                                        children: (0, i.jsxs)(iu, {
                                                            type: "take_profit",
                                                            deletable: "false",
                                                            movable: "false",
                                                            children: [(0, i.jsx)(ib, {
                                                                name: "TAKE_PROFIT",
                                                                children: (0, i.jsx)(iv, {
                                                                    type: "math_number",
                                                                    children: (0, i.jsx)(ix, {
                                                                        name: "NUM",
                                                                        children: "5"
                                                                    })
                                                                })
                                                            }), (0, i.jsx)(ij, {
                                                                children: (0, i.jsx)(iu, {
                                                                    type: "stop_loss",
                                                                    deletable: "false",
                                                                    movable: "false",
                                                                    children: (0, i.jsx)(ib, {
                                                                        name: "STOP_LOSS",
                                                                        children: (0, i.jsx)(iv, {
                                                                            type: "math_number",
                                                                            children: (0, i.jsx)(ix, {
                                                                                name: "NUM",
                                                                                children: "50"
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })]
                                                        })
                                                    })]
                                                })
                                            })]
                                        })
                                    })]
                                })
                            })
                        }), (0, i.jsx)(iu, {
                            type: "enable_virtual_hook",
                            children: (0, i.jsx)(ix, {
                                name: "NOTIFICATION_TYPE",
                                children: "disable"
                            })
                        }), (0, i.jsx)(iu, {
                            type: "vh_status"
                        })]
                    }), (0, i.jsxs)(ih, {
                        id: "apollo_notifications",
                        name: (0, f.NC)("Custom Notification"),
                        children: [(0, i.jsxs)(iu, {
                            type: "apollo_notify",
                            children: [(0, i.jsx)(ix, {
                                name: "NOTIFICATION_TYPE",
                                children: "success"
                            }), (0, i.jsx)(ib, {
                                name: "MESSAGE",
                                children: (0, i.jsx)(iv, {
                                    type: "text",
                                    children: (0, i.jsx)(ix, {
                                        name: "TEXT",
                                        children: "abc"
                                    })
                                })
                            })]
                        }), (0, i.jsx)(iu, {
                            type: "set_tp"
                        }), (0, i.jsx)(iu, {
                            type: "set_sl"
                        })]
                    }), (0, i.jsx)(ih, {
                        id: "utility",
                        name: (0, f.NC)("Binarytools"),
                        children: (0, i.jsxs)(iu, {
                            type: "btnotify",
                            children: [(0, i.jsx)(ix, {
                                name: "NOTIFICATION_TYPE",
                                children: "success"
                            }), (0, i.jsx)(ib, {
                                name: "MESSAGE",
                                children: (0, i.jsx)(iv, {
                                    type: "text",
                                    children: (0, i.jsx)(ix, {
                                        name: "TEXT",
                                        children: "Binarytool"
                                    })
                                })
                            })]
                        })
                    }), (0, i.jsxs)(ih, {
                        id: "apollo_contract_modifers",
                        name: (0, f.NC)("Contract modifiers"),
                        children: [(0, i.jsx)(iu, {
                            type: "contract_changer_block",
                            children: (0, i.jsx)(ix, {
                                name: "CONTRACT_CHANGER",
                                children: "disable"
                            })
                        }), (0, i.jsx)(iu, {
                            type: "custom_prediction_setter",
                            children: (0, i.jsx)(ix, {
                                name: "PREDICTION_ACTIVE_TYPE",
                                children: "0"
                            })
                        }), (0, i.jsx)(iu, {
                            type: "active_symbol_changer",
                            children: (0, i.jsx)(ix, {
                                name: "SYMBOL_ACTIVE_TYPE",
                                children: "disable"
                            })
                        })]
                    }), (0, i.jsxs)(ih, {
                        id: "barrier_settings",
                        name: (0, f.NC)("Barrier Settings"),
                        children: [(0, i.jsx)(iu, {
                            type: "enable_barrier_changer",
                            children: (0, i.jsx)(ix, {
                                name: "NOTIFICATION_TYPE",
                                children: "disable"
                            })
                        }), (0, i.jsxs)(iu, {
                            type: "barrier_changer",
                            children: [(0, i.jsx)(ix, {
                                name: "VAR",
                                variabletype: "",
                                children: "text"
                            }), (0, i.jsx)(ib, {
                                name: "TEXT",
                                children: (0, i.jsx)(iv, {
                                    type: "text",
                                    children: (0, i.jsx)(ix, {
                                        name: "TEXT",
                                        children: "abc"
                                    })
                                })
                            })]
                        })]
                    }), (0, i.jsxs)(im, {
                        id: "examples",
                        children: [(0, i.jsx)(i_, {
                            id: "sell_available",
                            children: (0, i.jsx)(iu, {
                                type: "during_purchase",
                                children: (0, i.jsx)(ig, {
                                    name: "DURING_PURCHASE_STACK",
                                    children: (0, i.jsxs)(iu, {
                                        type: "controls_if",
                                        children: [(0, i.jsx)(ib, {
                                            name: "IF0",
                                            children: (0, i.jsx)(iu, {
                                                type: "check_sell"
                                            })
                                        }), (0, i.jsx)(ig, {
                                            name: "DO0",
                                            children: (0, i.jsx)(iu, {
                                                type: "sell_at_market"
                                            })
                                        })]
                                    })
                                })
                            })
                        }), (0, i.jsx)(i_, {
                            id: "trade_again",
                            children: (0, i.jsx)(iu, {
                                type: "after_purchase",
                                children: (0, i.jsx)(ig, {
                                    name: "AFTERPURCHASE_STACK",
                                    children: (0, i.jsx)(iu, {
                                        type: "controls_if",
                                        children: (0, i.jsx)(ib, {
                                            name: "IF0",
                                            children: (0, i.jsxs)(iu, {
                                                type: "logic_compare",
                                                children: [(0, i.jsx)(ix, {
                                                    name: "OP",
                                                    children: "EQ"
                                                }), (0, i.jsx)(ib, {
                                                    name: "A",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "total_profit"
                                                    })
                                                }), (0, i.jsx)(ib, {
                                                    name: "B",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "variables_get",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "VAR",
                                                            variabletype: "",
                                                            children: "target_profit"
                                                        })
                                                    })
                                                })]
                                            })
                                        })
                                    })
                                })
                            })
                        }), (0, i.jsx)(i_, {
                            id: "sma_block_example",
                            children: (0, i.jsxs)(iu, {
                                type: "sma_statement",
                                children: [(0, i.jsx)(ix, {
                                    name: "VARIABLE",
                                    variabletype: "",
                                    children: "sma"
                                }), (0, i.jsx)(ig, {
                                    name: "STATEMENT",
                                    children: (0, i.jsxs)(iu, {
                                        type: "input_list",
                                        deletable: "false",
                                        movable: "false",
                                        children: [(0, i.jsx)(ib, {
                                            name: "INPUT_LIST",
                                            children: (0, i.jsxs)(iu, {
                                                type: "ohlc_values",
                                                children: [(0, i.jsx)(ix, {
                                                    name: "OHLCFIELD_LIST",
                                                    children: "open"
                                                }), (0, i.jsx)(ix, {
                                                    name: "CANDLEINTERVAL_LIST",
                                                    children: "default"
                                                })]
                                            })
                                        }), (0, i.jsx)(ij, {
                                            children: (0, i.jsx)(iu, {
                                                type: "period",
                                                deletable: "false",
                                                movable: "false",
                                                children: (0, i.jsx)(ib, {
                                                    name: "PERIOD",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "10"
                                                        })
                                                    })
                                                })
                                            })
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "sma_array",
                            children: (0, i.jsxs)(iu, {
                                type: "smaa_statement",
                                children: [(0, i.jsx)(ix, {
                                    name: "VARIABLE",
                                    variabletype: "",
                                    children: "smaa"
                                }), (0, i.jsx)(ig, {
                                    name: "STATEMENT",
                                    children: (0, i.jsx)(iu, {
                                        type: "input_list",
                                        deletable: "false",
                                        movable: "false",
                                        children: (0, i.jsx)(ij, {
                                            children: (0, i.jsx)(iu, {
                                                type: "period",
                                                deletable: "false",
                                                movable: "false",
                                                children: (0, i.jsx)(ib, {
                                                    name: "PERIOD",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "10"
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "sma_block_example_1",
                            children: (0, i.jsxs)(iu, {
                                type: "sma_statement",
                                children: [(0, i.jsx)(ix, {
                                    name: "VARIABLE",
                                    variabletype: "",
                                    children: "sma"
                                }), (0, i.jsx)(ig, {
                                    name: "STATEMENT",
                                    children: (0, i.jsxs)(iu, {
                                        type: "input_list",
                                        deletable: "false",
                                        movable: "false",
                                        children: [(0, i.jsx)(ib, {
                                            name: "INPUT_LIST",
                                            children: (0, i.jsx)(iu, {
                                                type: "ticks"
                                            })
                                        }), (0, i.jsx)(ij, {
                                            children: (0, i.jsx)(iu, {
                                                type: "period",
                                                deletable: "false",
                                                movable: "false",
                                                children: (0, i.jsx)(ib, {
                                                    name: "PERIOD",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "10"
                                                        })
                                                    })
                                                })
                                            })
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "in_candle_list_read",
                            children: (0, i.jsxs)(iu, {
                                type: "variables_set",
                                children: [(0, i.jsx)(ix, {
                                    name: "VAR",
                                    variabletype: "",
                                    children: "op"
                                }), (0, i.jsx)(ib, {
                                    name: "VALUE",
                                    children: (0, i.jsxs)(iu, {
                                        type: "read_ohlc",
                                        children: [(0, i.jsx)(ix, {
                                            name: "OHLCFIELD_LIST",
                                            children: "open"
                                        }), (0, i.jsx)(ix, {
                                            name: "CANDLEINTERVAL_LIST",
                                            children: "default"
                                        }), (0, i.jsx)(ib, {
                                            name: "CANDLEINDEX",
                                            children: (0, i.jsx)(iv, {
                                                type: "math_number",
                                                children: (0, i.jsx)(ix, {
                                                    name: "NUM",
                                                    children: "1"
                                                })
                                            })
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "read_candle_value",
                            children: (0, i.jsxs)(iu, {
                                type: "variables_set",
                                children: [(0, i.jsx)(ix, {
                                    name: "VAR",
                                    variabletype: "",
                                    children: "op"
                                }), (0, i.jsx)(ib, {
                                    name: "VALUE",
                                    children: (0, i.jsxs)(iu, {
                                        type: "read_ohlc_obj",
                                        children: [(0, i.jsx)(ix, {
                                            name: "OHLCFIELD_LIST",
                                            children: "open"
                                        }), (0, i.jsx)(ib, {
                                            name: "OHLCOBJ",
                                            children: (0, i.jsxs)(iu, {
                                                type: "read_ohlc",
                                                children: [(0, i.jsx)(ix, {
                                                    name: "OHLCFIELD_LIST",
                                                    children: "open"
                                                }), (0, i.jsx)(ix, {
                                                    name: "CANDLEINTERVAL_LIST",
                                                    children: "default"
                                                }), (0, i.jsx)(ib, {
                                                    name: "CANDLEINDEX",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "1"
                                                        })
                                                    })
                                                })]
                                            })
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "candle_list",
                            children: (0, i.jsxs)(iu, {
                                type: "variables_set",
                                children: [(0, i.jsx)(ix, {
                                    name: "VAR",
                                    variabletype: "",
                                    children: "candle_list"
                                }), (0, i.jsx)(ib, {
                                    name: "VALUE",
                                    children: (0, i.jsxs)(iu, {
                                        type: "ohlc_values",
                                        children: [(0, i.jsx)(ix, {
                                            name: "OHLCFIELD_LIST",
                                            children: "open"
                                        }), (0, i.jsx)(ix, {
                                            name: "CANDLEINTERVAL_LIST",
                                            children: "default"
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "candle_list_1",
                            children: (0, i.jsxs)(iu, {
                                type: "variables_set",
                                children: [(0, i.jsx)(ix, {
                                    name: "VAR",
                                    variabletype: "",
                                    children: "cl"
                                }), (0, i.jsx)(ib, {
                                    name: "VALUE",
                                    children: (0, i.jsxs)(iu, {
                                        type: "ohlc_values_in_list",
                                        children: [(0, i.jsx)(ix, {
                                            name: "OHLCFIELD_LIST",
                                            children: "open"
                                        }), (0, i.jsx)(ib, {
                                            name: "OHLCLIST",
                                            children: (0, i.jsx)(iu, {
                                                type: "ohlc",
                                                children: (0, i.jsx)(ix, {
                                                    name: "CANDLEINTERVAL_LIST",
                                                    children: "default"
                                                })
                                            })
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "get_candle",
                            children: (0, i.jsxs)(iu, {
                                type: "variables_set",
                                children: [(0, i.jsx)(ix, {
                                    name: "VAR",
                                    variabletype: "",
                                    children: "candle_open_price"
                                }), (0, i.jsx)(ib, {
                                    name: "VALUE",
                                    children: (0, i.jsxs)(iu, {
                                        type: "read_ohlc_obj",
                                        children: [(0, i.jsx)(ix, {
                                            name: "OHLCFIELD_LIST",
                                            children: "epoch"
                                        }), (0, i.jsx)(ib, {
                                            name: "OHLCOBJ",
                                            children: (0, i.jsxs)(iu, {
                                                type: "get_ohlc",
                                                children: [(0, i.jsx)(ix, {
                                                    name: "CANDLEINTERVAL_LIST",
                                                    children: "default"
                                                }), (0, i.jsx)(ib, {
                                                    name: "CANDLEINDEX",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "2"
                                                        })
                                                    })
                                                })]
                                            })
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "check_result",
                            children: (0, i.jsx)(iu, {
                                type: "after_purchase",
                                children: (0, i.jsx)(ig, {
                                    name: "AFTERPURCHASE_STACK",
                                    children: (0, i.jsxs)(iu, {
                                        type: "controls_if",
                                        children: [(0, i.jsx)(ib, {
                                            name: "IF0",
                                            children: (0, i.jsx)(iu, {
                                                type: "contract_check_result",
                                                children: (0, i.jsx)(ix, {
                                                    name: "CHECK_RESULT",
                                                    children: "win"
                                                })
                                            })
                                        }), (0, i.jsx)(ig, {
                                            name: "DO0",
                                            children: (0, i.jsx)(iu, {
                                                type: "trade_again"
                                            })
                                        })]
                                    })
                                })
                            })
                        }), (0, i.jsx)(i_, {
                            id: "sell_pl",
                            children: (0, i.jsx)(iu, {
                                type: "during_purchase",
                                children: (0, i.jsx)(ig, {
                                    name: "DURING_PURCHASE_STACK",
                                    children: (0, i.jsxs)(iu, {
                                        type: "controls_if",
                                        children: [(0, i.jsx)(ib, {
                                            name: "IF0",
                                            children: (0, i.jsx)(iu, {
                                                type: "check_sell"
                                            })
                                        }), (0, i.jsx)(ig, {
                                            name: "DO0",
                                            children: (0, i.jsxs)(iu, {
                                                type: "controls_if",
                                                children: [(0, i.jsx)(ib, {
                                                    name: "IF0",
                                                    children: (0, i.jsxs)(iu, {
                                                        type: "logic_compare",
                                                        children: [(0, i.jsx)(ix, {
                                                            name: "OP",
                                                            children: "EQ"
                                                        }), (0, i.jsx)(ib, {
                                                            name: "A",
                                                            children: (0, i.jsx)(iu, {
                                                                type: "sell_price"
                                                            })
                                                        }), (0, i.jsx)(ib, {
                                                            name: "B",
                                                            children: (0, i.jsx)(iu, {
                                                                type: "variables_get",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "VAR",
                                                                    variabletype: "",
                                                                    children: "stake"
                                                                })
                                                            })
                                                        })]
                                                    })
                                                }), (0, i.jsx)(ig, {
                                                    name: "DO0",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "sell_at_market"
                                                    })
                                                })]
                                            })
                                        })]
                                    })
                                })
                            })
                        }), (0, i.jsx)(i_, {
                            id: "if-return",
                            children: (0, i.jsxs)(iu, {
                                type: "procedures_defreturn",
                                children: [(0, i.jsx)(ip, {
                                    children: (0, i.jsx)(id, {
                                        name: "x"
                                    })
                                }), (0, i.jsx)(ix, {
                                    name: "NAME",
                                    children: "do something"
                                }), (0, i.jsx)(ig, {
                                    name: "STACK",
                                    children: (0, i.jsxs)(iu, {
                                        type: "procedures_ifreturn",
                                        children: [(0, i.jsx)(ip, {
                                            value: "1"
                                        }), (0, i.jsx)(ib, {
                                            name: "CONDITION",
                                            children: (0, i.jsxs)(iu, {
                                                type: "logic_compare",
                                                children: [(0, i.jsx)(ix, {
                                                    name: "OP",
                                                    children: "EQ"
                                                }), (0, i.jsx)(ib, {
                                                    name: "A",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "variables_get",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "VAR",
                                                            variabletype: "",
                                                            children: "x"
                                                        })
                                                    })
                                                }), (0, i.jsx)(ib, {
                                                    name: "B",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "variables_get",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "VAR",
                                                            variabletype: "",
                                                            children: "x"
                                                        })
                                                    })
                                                })]
                                            })
                                        }), (0, i.jsx)(ib, {
                                            name: "VALUE",
                                            children: (0, i.jsx)(iu, {
                                                type: "text",
                                                children: (0, i.jsx)(ix, {
                                                    name: "TEXT",
                                                    children: "x must be positive or zero"
                                                })
                                            })
                                        })]
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "RETURN",
                                    children: (0, i.jsxs)(iu, {
                                        type: "math_single",
                                        children: [(0, i.jsx)(ix, {
                                            name: "OP",
                                            children: "ROOT"
                                        }), (0, i.jsxs)(ib, {
                                            name: "NUM",
                                            children: [(0, i.jsx)(iv, {
                                                type: "math_number",
                                                children: (0, i.jsx)(ix, {
                                                    name: "NUM",
                                                    children: "9"
                                                })
                                            }), (0, i.jsx)(iu, {
                                                type: "variables_get",
                                                children: (0, i.jsx)(ix, {
                                                    name: "VAR",
                                                    variabletype: "",
                                                    children: "x"
                                                })
                                            })]
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "notify_telegram",
                            children: (0, i.jsxs)(iu, {
                                type: "notify_telegram",
                                children: [(0, i.jsxs)(ib, {
                                    name: "TELEGRAM_ACCESS_TOKEN",
                                    children: [(0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT"
                                        })
                                    }), (0, i.jsx)(iu, {
                                        type: "variables_get",
                                        children: (0, i.jsx)(ix, {
                                            name: "VAR",
                                            variabletype: "",
                                            children: "access_token"
                                        })
                                    })]
                                }), (0, i.jsxs)(ib, {
                                    name: "TELEGRAM_CHAT_ID",
                                    children: [(0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT"
                                        })
                                    }), (0, i.jsx)(iu, {
                                        type: "variables_get",
                                        children: (0, i.jsx)(ix, {
                                            name: "VAR",
                                            variabletype: "",
                                            children: "chat_id"
                                        })
                                    })]
                                }), (0, i.jsx)(ib, {
                                    name: "TELEGRAM_MESSAGE",
                                    children: (0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: "Enjoy!"
                                        })
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "epoch",
                            children: (0, i.jsxs)(iu, {
                                type: "variables_set",
                                children: [(0, i.jsx)(ix, {
                                    name: "VAR",
                                    variabletype: "",
                                    children: "candle"
                                }), (0, i.jsx)(ib, {
                                    name: "VALUE",
                                    children: (0, i.jsxs)(iu, {
                                        type: "read_ohlc",
                                        children: [(0, i.jsx)(ix, {
                                            name: "OHLCFIELD_LIST",
                                            children: "open"
                                        }), (0, i.jsx)(ix, {
                                            name: "CANDLEINTERVAL_LIST",
                                            children: "default"
                                        }), (0, i.jsx)(ib, {
                                            name: "CANDLEINDEX",
                                            children: (0, i.jsx)(iv, {
                                                type: "math_number",
                                                children: (0, i.jsx)(ix, {
                                                    name: "NUM",
                                                    children: "1"
                                                })
                                            })
                                        })]
                                    })
                                }), (0, i.jsx)(ij, {
                                    children: (0, i.jsxs)(iu, {
                                        type: "variables_set",
                                        children: [(0, i.jsx)(ix, {
                                            name: "VAR",
                                            variabletype: "",
                                            children: "Open Time"
                                        }), (0, i.jsx)(ib, {
                                            name: "VALUE",
                                            children: (0, i.jsxs)(iu, {
                                                type: "read_ohlc_obj",
                                                children: [(0, i.jsx)(ix, {
                                                    name: "OHLCFIELD_LIST",
                                                    children: "epoch"
                                                }), (0, i.jsx)(ib, {
                                                    name: "OHLCOBJ",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "variables_get",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "VAR",
                                                            variabletype: "",
                                                            children: "candle"
                                                        })
                                                    })
                                                })]
                                            })
                                        }), (0, i.jsx)(ij, {
                                            children: (0, i.jsxs)(iu, {
                                                type: "variables_set",
                                                children: [(0, i.jsx)(ix, {
                                                    name: "VAR",
                                                    variabletype: "",
                                                    children: "Open Time"
                                                }), (0, i.jsx)(ib, {
                                                    name: "VALUE",
                                                    children: (0, i.jsxs)(iu, {
                                                        type: "math_arithmetic",
                                                        children: [(0, i.jsx)(ix, {
                                                            name: "OP",
                                                            children: "MINUS"
                                                        }), (0, i.jsxs)(ib, {
                                                            name: "A",
                                                            children: [(0, i.jsx)(iv, {
                                                                type: "math_number",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "NUM",
                                                                    children: "1"
                                                                })
                                                            }), (0, i.jsx)(iu, {
                                                                type: "epoch"
                                                            })]
                                                        }), (0, i.jsxs)(ib, {
                                                            name: "B",
                                                            children: [(0, i.jsx)(iv, {
                                                                type: "math_number",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "NUM",
                                                                    children: "1"
                                                                })
                                                            }), (0, i.jsx)(iu, {
                                                                type: "variables_get",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "VAR",
                                                                    variabletype: "",
                                                                    children: "Open Time"
                                                                })
                                                            })]
                                                        })]
                                                    })
                                                }), (0, i.jsx)(ij, {
                                                    children: (0, i.jsx)(iu, {
                                                        type: "controls_if",
                                                        children: (0, i.jsx)(ib, {
                                                            name: "IF0",
                                                            children: (0, i.jsxs)(iu, {
                                                                type: "logic_compare",
                                                                children: [(0, i.jsx)(ix, {
                                                                    name: "OP",
                                                                    children: "GTE"
                                                                }), (0, i.jsx)(ib, {
                                                                    name: "A",
                                                                    children: (0, i.jsx)(iu, {
                                                                        type: "variables_get",
                                                                        children: (0, i.jsx)(ix, {
                                                                            name: "VAR",
                                                                            variabletype: "",
                                                                            children: "Time Since Candle Opened"
                                                                        })
                                                                    })
                                                                }), (0, i.jsx)(ib, {
                                                                    name: "B",
                                                                    children: (0, i.jsx)(iu, {
                                                                        type: "math_number",
                                                                        children: (0, i.jsx)(ix, {
                                                                            name: "NUM",
                                                                            children: "30"
                                                                        })
                                                                    })
                                                                })]
                                                            })
                                                        })
                                                    })
                                                })]
                                            })
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "totimestamp",
                            children: (0, i.jsx)(iu, {
                                type: "before_purchase",
                                children: (0, i.jsx)(ig, {
                                    name: "BEFOREPURCHASE_STACK",
                                    children: (0, i.jsxs)(iu, {
                                        type: "controls_if",
                                        children: [(0, i.jsx)(ib, {
                                            name: "IF0",
                                            children: (0, i.jsxs)(iu, {
                                                type: "logic_compare",
                                                children: [(0, i.jsx)(ix, {
                                                    name: "OP",
                                                    children: "EQ"
                                                }), (0, i.jsx)(ib, {
                                                    name: "A",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "epoch"
                                                    })
                                                }), (0, i.jsx)(ib, {
                                                    name: "B",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "totimestamp",
                                                        children: (0, i.jsx)(ib, {
                                                            name: "DATETIME",
                                                            children: (0, i.jsx)(iv, {
                                                                type: "text",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "TEXT",
                                                                    children: "1957-08-31 00:00:00"
                                                                })
                                                            })
                                                        })
                                                    })
                                                })]
                                            })
                                        }), (0, i.jsx)(ig, {
                                            name: "DO0",
                                            children: (0, i.jsx)(iu, {
                                                type: "apollo_purchase",
                                                children: (0, i.jsx)(ix, {
                                                    name: "PURCHASE_LIST",
                                                    children: "CALL"
                                                })
                                            })
                                        })]
                                    })
                                })
                            })
                        }), (0, i.jsx)(i_, {
                            id: "todatetime",
                            children: (0, i.jsxs)(iu, {
                                type: "notify",
                                children: [(0, i.jsx)(ix, {
                                    name: "NOTIFICATION_TYPE",
                                    children: "success"
                                }), (0, i.jsx)(ix, {
                                    name: "NOTIFICATION_SOUND",
                                    children: "silent"
                                }), (0, i.jsxs)(ib, {
                                    name: "MESSAGE",
                                    children: [(0, i.jsx)(iv, {
                                        type: "text",
                                        children: (0, i.jsx)(ix, {
                                            name: "TEXT",
                                            children: "abc"
                                        })
                                    }), (0, i.jsx)(iu, {
                                        type: "todatetime",
                                        children: (0, i.jsxs)(ib, {
                                            name: "TIMESTAMP",
                                            children: [(0, i.jsx)(iv, {
                                                type: "math_number",
                                                children: (0, i.jsx)(ix, {
                                                    name: "NUM",
                                                    children: "0"
                                                })
                                            }), (0, i.jsx)(iu, {
                                                type: "epoch"
                                            })]
                                        })
                                    })]
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "constrain",
                            children: (0, i.jsxs)(iu, {
                                type: "math_constrain",
                                children: [(0, i.jsx)(ib, {
                                    name: "VALUE",
                                    children: (0, i.jsx)(iu, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "5"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "LOW",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "10"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "HIGH",
                                    children: (0, i.jsx)(iv, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "20"
                                        })
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "controls_if",
                            children: (0, i.jsxs)(iu, {
                                type: "controls_if",
                                children: [(0, i.jsx)(ip, {
                                    elseif: "1",
                                    else: "1"
                                }), (0, i.jsx)(ib, {
                                    name: "IF0",
                                    children: (0, i.jsxs)(iu, {
                                        type: "logic_compare",
                                        children: [(0, i.jsx)(ix, {
                                            name: "OP",
                                            children: "EQ"
                                        }), (0, i.jsx)(ib, {
                                            name: "A",
                                            children: (0, i.jsx)(iu, {
                                                type: "variables_get",
                                                children: (0, i.jsx)(ix, {
                                                    name: "VAR",
                                                    variabletype: "",
                                                    children: "var1"
                                                })
                                            })
                                        }), (0, i.jsx)(ib, {
                                            name: "B",
                                            children: (0, i.jsx)(iu, {
                                                type: "variables_get",
                                                children: (0, i.jsx)(ix, {
                                                    name: "VAR",
                                                    variabletype: "",
                                                    children: "var2"
                                                })
                                            })
                                        })]
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "IF1",
                                    children: (0, i.jsxs)(iu, {
                                        type: "logic_compare",
                                        children: [(0, i.jsx)(ix, {
                                            name: "OP",
                                            children: "EQ"
                                        }), (0, i.jsx)(ib, {
                                            name: "A",
                                            children: (0, i.jsx)(iu, {
                                                type: "variables_get",
                                                children: (0, i.jsx)(ix, {
                                                    name: "VAR",
                                                    variabletype: "",
                                                    children: "var3"
                                                })
                                            })
                                        }), (0, i.jsx)(ib, {
                                            name: "B",
                                            children: (0, i.jsx)(iu, {
                                                type: "variables_get",
                                                children: (0, i.jsx)(ix, {
                                                    name: "VAR",
                                                    variabletype: "",
                                                    children: "var4"
                                                })
                                            })
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "compare_logic",
                            children: (0, i.jsx)(iu, {
                                type: "logic_compare",
                                children: (0, i.jsx)(ix, {
                                    name: "OP",
                                    children: "EQ"
                                })
                            })
                        }), (0, i.jsx)(i_, {
                            id: "compare_logic_1",
                            children: (0, i.jsx)(iu, {
                                type: "logic_operation",
                                children: (0, i.jsx)(ix, {
                                    name: "OP",
                                    children: "AND"
                                })
                            })
                        }), (0, i.jsx)(i_, {
                            id: "repeat_while",
                            children: (0, i.jsxs)(iu, {
                                type: "variables_set",
                                children: [(0, i.jsx)(ix, {
                                    name: "VAR",
                                    variabletype: "",
                                    children: "x"
                                }), (0, i.jsx)(ib, {
                                    name: "VALUE",
                                    children: (0, i.jsx)(iu, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "0"
                                        })
                                    })
                                }), (0, i.jsx)(ij, {
                                    children: (0, i.jsxs)(iu, {
                                        type: "controls_whileUntil",
                                        children: [(0, i.jsx)(ix, {
                                            name: "MODE",
                                            children: "WHILE"
                                        }), (0, i.jsx)(ib, {
                                            name: "BOOL",
                                            children: (0, i.jsxs)(iu, {
                                                type: "logic_compare",
                                                children: [(0, i.jsx)(ix, {
                                                    name: "OP",
                                                    children: "LTE"
                                                }), (0, i.jsx)(ib, {
                                                    name: "A",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "variables_get",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "VAR",
                                                            variabletype: "",
                                                            children: "x"
                                                        })
                                                    })
                                                }), (0, i.jsx)(ib, {
                                                    name: "B",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "10"
                                                        })
                                                    })
                                                })]
                                            })
                                        }), (0, i.jsx)(ig, {
                                            name: "DO",
                                            children: (0, i.jsxs)(iu, {
                                                type: "math_change",
                                                children: [(0, i.jsx)(ix, {
                                                    name: "VAR",
                                                    variabletype: "",
                                                    children: "x"
                                                }), (0, i.jsx)(ib, {
                                                    name: "DELTA",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "1"
                                                        })
                                                    })
                                                }), (0, i.jsx)(ij, {
                                                    children: (0, i.jsxs)(iu, {
                                                        type: "notify",
                                                        children: [(0, i.jsx)(ix, {
                                                            name: "NOTIFICATION_TYPE",
                                                            children: "success"
                                                        }), (0, i.jsx)(ix, {
                                                            name: "NOTIFICATION_SOUND",
                                                            children: "silent"
                                                        }), (0, i.jsxs)(ib, {
                                                            name: "MESSAGE",
                                                            children: [(0, i.jsx)(iv, {
                                                                type: "text",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "TEXT",
                                                                    children: "abc"
                                                                })
                                                            }), (0, i.jsx)(iu, {
                                                                type: "variables_get",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "VAR",
                                                                    variabletype: "",
                                                                    children: "x"
                                                                })
                                                            })]
                                                        })]
                                                    })
                                                })]
                                            })
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "repeat_until",
                            children: (0, i.jsxs)(iu, {
                                type: "variables_set",
                                children: [(0, i.jsx)(ix, {
                                    name: "VAR",
                                    variabletype: "",
                                    children: "x"
                                }), (0, i.jsx)(ib, {
                                    name: "VALUE",
                                    children: (0, i.jsx)(iu, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "20"
                                        })
                                    })
                                }), (0, i.jsx)(ij, {
                                    children: (0, i.jsxs)(iu, {
                                        type: "controls_whileUntil",
                                        children: [(0, i.jsx)(ix, {
                                            name: "MODE",
                                            children: "UNTIL"
                                        }), (0, i.jsx)(ib, {
                                            name: "BOOL",
                                            children: (0, i.jsxs)(iu, {
                                                type: "logic_compare",
                                                children: [(0, i.jsx)(ix, {
                                                    name: "OP",
                                                    children: "EQ"
                                                }), (0, i.jsx)(ib, {
                                                    name: "A",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "variables_get",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "VAR",
                                                            variabletype: "",
                                                            children: "x"
                                                        })
                                                    })
                                                }), (0, i.jsx)(ib, {
                                                    name: "B",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "10"
                                                        })
                                                    })
                                                })]
                                            })
                                        }), (0, i.jsx)(ig, {
                                            name: "DO",
                                            children: (0, i.jsxs)(iu, {
                                                type: "math_change",
                                                children: [(0, i.jsx)(ix, {
                                                    name: "VAR",
                                                    variabletype: "",
                                                    children: "x"
                                                }), (0, i.jsx)(ib, {
                                                    name: "DELTA",
                                                    children: (0, i.jsx)(iv, {
                                                        type: "math_number",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "NUM",
                                                            children: "-1"
                                                        })
                                                    })
                                                }), (0, i.jsx)(ij, {
                                                    children: (0, i.jsxs)(iu, {
                                                        type: "notify",
                                                        children: [(0, i.jsx)(ix, {
                                                            name: "NOTIFICATION_TYPE",
                                                            children: "success"
                                                        }), (0, i.jsx)(ix, {
                                                            name: "NOTIFICATION_SOUND",
                                                            children: "silent"
                                                        }), (0, i.jsxs)(ib, {
                                                            name: "MESSAGE",
                                                            children: [(0, i.jsx)(iv, {
                                                                type: "text",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "TEXT",
                                                                    children: "abc"
                                                                })
                                                            }), (0, i.jsx)(iu, {
                                                                type: "variables_get",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "VAR",
                                                                    variabletype: "",
                                                                    children: "x"
                                                                })
                                                            })]
                                                        })]
                                                    })
                                                })]
                                            })
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "controls_for",
                            children: (0, i.jsxs)(iu, {
                                type: "controls_for",
                                children: [(0, i.jsx)(ix, {
                                    name: "VAR",
                                    variabletype: "",
                                    children: "i"
                                }), (0, i.jsx)(ib, {
                                    name: "FROM",
                                    children: (0, i.jsx)(iu, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "0"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "TO",
                                    children: (0, i.jsx)(iu, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "10"
                                        })
                                    })
                                }), (0, i.jsx)(ib, {
                                    name: "BY",
                                    children: (0, i.jsx)(iu, {
                                        type: "math_number",
                                        children: (0, i.jsx)(ix, {
                                            name: "NUM",
                                            children: "2"
                                        })
                                    })
                                }), (0, i.jsx)(ig, {
                                    name: "DO",
                                    children: (0, i.jsxs)(iu, {
                                        type: "notify",
                                        children: [(0, i.jsx)(ix, {
                                            name: "NOTIFICATION_TYPE",
                                            children: "success"
                                        }), (0, i.jsx)(ix, {
                                            name: "NOTIFICATION_SOUND",
                                            children: "silent"
                                        }), (0, i.jsxs)(ib, {
                                            name: "MESSAGE",
                                            children: [(0, i.jsx)(iv, {
                                                type: "text",
                                                children: (0, i.jsx)(ix, {
                                                    name: "TEXT",
                                                    children: "abc"
                                                })
                                            }), (0, i.jsx)(iu, {
                                                type: "variables_get",
                                                children: (0, i.jsx)(ix, {
                                                    name: "VAR",
                                                    variabletype: "",
                                                    children: "i"
                                                })
                                            })]
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "controls_forEach",
                            children: (0, i.jsxs)(iu, {
                                type: "lists_create_with",
                                children: [(0, i.jsx)(ix, {
                                    name: "VARIABLE",
                                    children: "list"
                                }), (0, i.jsx)(ig, {
                                    name: "STACK",
                                    children: (0, i.jsxs)(iu, {
                                        type: "lists_statement",
                                        children: [(0, i.jsx)(ib, {
                                            name: "VALUE",
                                            children: (0, i.jsx)(iu, {
                                                type: "variables_get",
                                                children: (0, i.jsx)(ix, {
                                                    name: "VAR",
                                                    variabletype: "",
                                                    children: "item1"
                                                })
                                            })
                                        }), (0, i.jsx)(ij, {
                                            children: (0, i.jsxs)(iu, {
                                                type: "lists_statement",
                                                children: [(0, i.jsx)(ib, {
                                                    name: "VALUE",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "variables_get",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "VAR",
                                                            variabletype: "",
                                                            children: "item2"
                                                        })
                                                    })
                                                }), (0, i.jsx)(ij, {
                                                    children: (0, i.jsx)(iu, {
                                                        type: "lists_statement",
                                                        children: (0, i.jsx)(ib, {
                                                            name: "VALUE",
                                                            children: (0, i.jsx)(iu, {
                                                                type: "variables_get",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "VAR",
                                                                    variabletype: "",
                                                                    children: "item3"
                                                                })
                                                            })
                                                        })
                                                    })
                                                })]
                                            })
                                        })]
                                    })
                                }), (0, i.jsx)(ij, {
                                    children: (0, i.jsxs)(iu, {
                                        type: "controls_forEach",
                                        children: [(0, i.jsx)(ix, {
                                            name: "VAR",
                                            variabletype: "",
                                            children: "i"
                                        }), (0, i.jsx)(ib, {
                                            name: "LIST",
                                            children: (0, i.jsx)(iu, {
                                                type: "variables_get",
                                                children: (0, i.jsx)(ix, {
                                                    name: "VAR",
                                                    variabletype: "",
                                                    children: "list"
                                                })
                                            })
                                        }), (0, i.jsx)(ig, {
                                            name: "DO",
                                            children: (0, i.jsxs)(iu, {
                                                type: "notify",
                                                children: [(0, i.jsx)(ix, {
                                                    name: "NOTIFICATION_TYPE",
                                                    children: "success"
                                                }), (0, i.jsx)(ix, {
                                                    name: "NOTIFICATION_SOUND",
                                                    children: "silent"
                                                }), (0, i.jsxs)(ib, {
                                                    name: "MESSAGE",
                                                    children: [(0, i.jsx)(iv, {
                                                        type: "text",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "TEXT",
                                                            children: "abc"
                                                        })
                                                    }), (0, i.jsx)(iu, {
                                                        type: "variables_get",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "VAR",
                                                            variabletype: "",
                                                            children: "i"
                                                        })
                                                    })]
                                                })]
                                            })
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "break_out",
                            children: (0, i.jsxs)(iu, {
                                type: "variables_set",
                                children: [(0, i.jsx)(ix, {
                                    name: "VAR",
                                    variabletype: "",
                                    children: "x"
                                }), (0, i.jsx)(ib, {
                                    name: "VALUE",
                                    children: (0, i.jsx)(iu, {
                                        type: "logic_boolean",
                                        children: (0, i.jsx)(ix, {
                                            name: "BOOL",
                                            children: "TRUE"
                                        })
                                    })
                                }), (0, i.jsx)(ij, {
                                    children: (0, i.jsxs)(iu, {
                                        type: "controls_repeat",
                                        children: [(0, i.jsx)(ix, {
                                            name: "TIMES",
                                            children: "10"
                                        }), (0, i.jsx)(ig, {
                                            name: "DO",
                                            children: (0, i.jsxs)(iu, {
                                                type: "controls_if",
                                                children: [(0, i.jsx)(ib, {
                                                    name: "IF0",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "logic_negate",
                                                        children: (0, i.jsx)(ib, {
                                                            name: "BOOL",
                                                            children: (0, i.jsx)(iu, {
                                                                type: "variables_get",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "VAR",
                                                                    variabletype: "",
                                                                    children: "x"
                                                                })
                                                            })
                                                        })
                                                    })
                                                }), (0, i.jsx)(ig, {
                                                    name: "DO0",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "controls_flow_statements",
                                                        children: (0, i.jsx)(ix, {
                                                            name: "FLOW",
                                                            children: "BREAK"
                                                        })
                                                    })
                                                }), (0, i.jsx)(ij, {
                                                    children: (0, i.jsxs)(iu, {
                                                        type: "notify",
                                                        children: [(0, i.jsx)(ix, {
                                                            name: "NOTIFICATION_TYPE",
                                                            children: "success"
                                                        }), (0, i.jsx)(ix, {
                                                            name: "NOTIFICATION_SOUND",
                                                            children: "silent"
                                                        }), (0, i.jsx)(ib, {
                                                            name: "MESSAGE",
                                                            children: (0, i.jsx)(iv, {
                                                                type: "text",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "TEXT",
                                                                    children: "abc"
                                                                })
                                                            })
                                                        })]
                                                    })
                                                })]
                                            })
                                        })]
                                    })
                                })]
                            })
                        }), (0, i.jsx)(i_, {
                            id: "continue",
                            children: (0, i.jsxs)(iu, {
                                type: "variables_set",
                                children: [(0, i.jsx)(ix, {
                                    name: "VAR",
                                    variabletype: "",
                                    children: "x"
                                }), (0, i.jsx)(ib, {
                                    name: "VALUE",
                                    children: (0, i.jsx)(iu, {
                                        type: "logic_boolean",
                                        children: (0, i.jsx)(ix, {
                                            name: "BOOL",
                                            children: "FALSE"
                                        })
                                    })
                                }), (0, i.jsx)(ij, {
                                    children: (0, i.jsxs)(iu, {
                                        type: "controls_repeat",
                                        children: [(0, i.jsx)(ix, {
                                            name: "TIMES",
                                            children: "10"
                                        }), (0, i.jsx)(ig, {
                                            name: "DO",
                                            children: (0, i.jsxs)(iu, {
                                                type: "controls_if",
                                                children: [(0, i.jsx)(ib, {
                                                    name: "IF0",
                                                    children: (0, i.jsx)(iu, {
                                                        type: "logic_negate",
                                                        children: (0, i.jsx)(ib, {
                                                            name: "BOOL",
                                                            children: (0, i.jsx)(iu, {
                                                                type: "variables_get",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "VAR",
                                                                    variabletype: "",
                                                                    children: "x"
                                                                })
                                                            })
                                                        })
                                                    })
                                                }), (0, i.jsx)(ig, {
                                                    name: "DO0",
                                                    children: (0, i.jsxs)(iu, {
                                                        type: "variables_set",
                                                        children: [(0, i.jsx)(ix, {
                                                            name: "VAR",
                                                            variabletype: "",
                                                            children: "x"
                                                        }), (0, i.jsx)(ib, {
                                                            name: "VALUE",
                                                            children: (0, i.jsx)(iu, {
                                                                type: "logic_boolean",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "BOOL",
                                                                    children: "TRUE"
                                                                })
                                                            })
                                                        }), (0, i.jsx)(ij, {
                                                            children: (0, i.jsx)(iu, {
                                                                type: "controls_flow_statements",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "FLOW",
                                                                    children: "CONTINUE"
                                                                })
                                                            })
                                                        })]
                                                    })
                                                }), (0, i.jsx)(ij, {
                                                    children: (0, i.jsxs)(iu, {
                                                        type: "notify",
                                                        children: [(0, i.jsx)(ix, {
                                                            name: "NOTIFICATION_TYPE",
                                                            children: "success"
                                                        }), (0, i.jsx)(ix, {
                                                            name: "NOTIFICATION_SOUND",
                                                            children: "silent"
                                                        }), (0, i.jsx)(ib, {
                                                            name: "MESSAGE",
                                                            children: (0, i.jsx)(iv, {
                                                                type: "text",
                                                                children: (0, i.jsx)(ix, {
                                                                    name: "TEXT",
                                                                    children: "abc"
                                                                })
                                                            })
                                                        })]
                                                    })
                                                })]
                                            })
                                        })]
                                    })
                                })]
                            })
                        })]
                    })]
                })),
                iC = (0, r.Pi)(() => {
                    let {
                        isDesktop: e
                    } = (0, N.F)(), {
                        toolbox: t,
                        flyout: s,
                        quick_strategy: a
                    } = (0, j.oR)(), {
                        hasSubCategory: n,
                        is_search_loading: r,
                        onMount: o,
                        onSearch: c,
                        onSearchBlur: d,
                        onSearchClear: u,
                        onSearchKeyUp: h,
                        onToolboxItemClick: _,
                        onToolboxItemExpand: m,
                        onUnmount: x,
                        sub_category_index: p,
                        toolbox_dom: v
                    } = t, {
                        setFormVisibility: g
                    } = a, {
                        setVisibility: b,
                        selected_category: y
                    } = s, C = l.useRef(iN()), [S, T] = l.useState(!0);
                    return (l.useEffect(() => (o(C), () => x()), []), e) ? (0, i.jsxs)("div", {
                        className: "db-toolbox",
                        "data-testid": "dashboard__toolbox",
                        children: [(0, i.jsx)(nJ, {
                            popover_message: (0, f.NC)("Click here to start building your Binarytools."),
                            button_id: "db-toolbar__get-started-button",
                            button_classname: "toolbar__btn toolbar__btn--icon toolbar__btn--start",
                            buttonOnClick: () => {
                                g(!0), (0, tJ.m5)({
                                    subpage_name: "bot_builder",
                                    subform_source: "bot_builder",
                                    subform_name: "quick_strategy"
                                })
                            },
                            button_text: (0, f.NC)("Quick strategy")
                        }), (0, i.jsxs)("div", {
                            id: "gtm-toolbox",
                            className: "db-toolbox__content",
                            children: [(0, i.jsx)("div", {
                                className: "db-toolbox__header",
                                children: (0, i.jsxs)("div", {
                                    className: "db-toolbox__title",
                                    "data-testid": "db-toolbox__title",
                                    onClick: () => {
                                        T(!S), b(!1)
                                    },
                                    children: [(0, f.NC)("Blocks menu"), (0, i.jsx)("span", {
                                        className: U()("db-toolbox__title__chevron", {
                                            "db-toolbox__title__chevron--active": S
                                        }),
                                        children: (0, i.jsx)(ia.Z, {
                                            fill: "var(--text-general)"
                                        })
                                    })]
                                })
                            }), (0, i.jsxs)("div", {
                                className: U()("db-toolbox__content-wrapper", {
                                    active: S
                                }),
                                "data-testid": "db-toolbox__content-wrapper",
                                children: [(0, i.jsx)(io, {
                                    is_search_loading: r,
                                    onSearch: c,
                                    onSearchBlur: d,
                                    onSearchClear: u,
                                    onSearchKeyUp: h
                                }), (0, i.jsx)("div", {
                                    className: "db-toolbox__category-menu",
                                    children: v && Array.from(v.childNodes).map((e, t) => {
                                        if ("CATEGORY" === e.tagName.toUpperCase()) {
                                            let s = n(e.children),
                                                a = p.includes(t);
                                            return (0, i.jsxs)("div", {
                                                className: U()("db-toolbox__row", {
                                                    "db-toolbox__row--active": (null == y ? void 0 : y.getAttribute("id")) === (null == e ? void 0 : e.id)
                                                }),
                                                children: [(0, i.jsx)("div", {
                                                    className: "db-toolbox__item",
                                                    onClick: () => {
                                                        s ? m(t) : _(e)
                                                    },
                                                    children: (0, i.jsxs)("div", {
                                                        className: "db-toolbox__category-text",
                                                        children: [(0, i.jsx)("div", {
                                                            className: "db-toolbox__label",
                                                            children: (0, f.NC)(e.getAttribute("name"))
                                                        }), s && (0, i.jsx)("div", {
                                                            className: U()("db-toolbox__category-arrow", {
                                                                "db-toolbox__category-arrow--active": a
                                                            }),
                                                            children: (0, i.jsx)(ia.Z, {
                                                                fill: "var(--text-general)"
                                                            })
                                                        })]
                                                    })
                                                }), s && a && Array.from(e.childNodes).map(e => (0, i.jsx)("div", {
                                                    className: U()("db-toolbox__sub-category-row", {
                                                        "db-toolbox__sub-category-row--active": (null == y ? void 0 : y.getAttribute("id")) === (null == e ? void 0 : e.id)
                                                    }),
                                                    onClick: () => {
                                                        _(e)
                                                    },
                                                    children: (0, i.jsx)(es.Z, {
                                                        size: "xxs",
                                                        children: e.getAttribute("name")
                                                    })
                                                }, `db-toolbox__sub-category-row--${e.getAttribute("id")}`))]
                                            }, `db-toolbox__row--${e.getAttribute("id")}`)
                                        }
                                        return null
                                    })
                                })]
                            })]
                        })]
                    }) : null
                }),
                iS = (0, r.Pi)(() => {
                    var e;
                    let {
                        blockly_store: t
                    } = (0, j.oR)(), {
                        onMount: s,
                        onUnmount: a,
                        is_loading: n
                    } = t;
                    return (l.useEffect(() => (s(), () => {
                        a()
                    }), []), n) ? null : (null === (e = window.Blockly) || void 0 === e ? void 0 : e.derivWorkspace) ? (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsx)(iC, {}), (0, i.jsx)(is, {}), (0, i.jsx)(nY, {}), (0, i.jsx)(nK, {})]
                    }) : null
                }),
                iT = (0, r.Pi)(() => {
                    let {
                        dashboard: e,
                        app: t,
                        run_panel: s,
                        toolbar: a,
                        quick_strategy: n,
                        blockly_store: r
                    } = (0, j.oR)(), {
                        active_tab: o,
                        active_tour: c,
                        is_preview_on_popup: d
                    } = e, {
                        is_open: u
                    } = n, {
                        is_running: h
                    } = s, {
                        is_loading: _
                    } = r, m = l.useRef(!1), x = l.useRef(!1), {
                        isDesktop: p
                    } = (0, N.F)(), {
                        onMount: v,
                        onUnmount: g
                    } = t, b = l.useRef(null), y = null;
                    l.useEffect(() => (v(), () => g()), [v, g]), l.useEffect(() => {
                        var e;
                        let t = null === (e = window.Blockly) || void 0 === e ? void 0 : e.derivWorkspace;
                        return t && h && !m.current ? (m.current = !0, t.addChangeListener(C)) : S(), () => {
                            t && m.current && S()
                        }
                    }, [h]);
                    let C = e => {
                            let {
                                is_reset_button_clicked: t
                            } = a;
                            "selected" === e.type || t ? t && S() : ((0, sV.J)((0, sX.xG)().workspace_change), S())
                        },
                        S = () => {
                            var e, t;
                            m.current = !1, null === (t = window.Blockly) || void 0 === t || null === (e = t.derivWorkspace) || void 0 === e || e.removeChangeListener(C)
                        };
                    l.useEffect(() => {
                        var e;
                        let t = null === (e = window.Blockly) || void 0 === e ? void 0 : e.derivWorkspace;
                        t && !x.current && (x.current = !0, t.addChangeListener(T))
                    }, [_]);
                    let T = e => {
                            let {
                                is_reset_button_clicked: t,
                                setResetButtonState: s
                            } = a;
                            "delete" === e.type && !t && (y = e.blockId), "selected" === e.type && y === e.oldElementId && k(), "change" === e.type && "AMOUNT_LIMITS" === e.name && "(min: 0.35 - max: 50000)" === e.newValue && t && s(!1)
                        },
                        k = () => {
                            (0, sV.J)((0, sX.xG)().block_delete, {
                                label: (0, f.NC)("Undo"),
                                onClick: e => {
                                    window.Blockly.derivWorkspace.undo(), null == e || e()
                                }
                            })
                        };
                    return (0, i.jsxs)(i.Fragment, {
                        children: [(0, i.jsx)("div", {
                            className: U()("bot-builder", {
                                "bot-builder--active": 2 === o && !d,
                                "bot-builder--inactive": d,
                                "bot-builder--tour-active": c
                            }),
                            children: (0, i.jsx)("div", {
                                id: "scratch_div",
                                ref: b,
                                children: (0, i.jsx)(iS, {})
                            })
                        }), 2 === o && (0, i.jsx)(aF, {
                            is_mobile: !p
                        }), (0, i.jsx)(ar, {}), (0, i.jsx)(ah, {}), u && (0, i.jsx)(nL, {})]
                    })
                });
            var ik = s("89250"),
                iw = s("46883");
            let iE = () => (0, i.jsx)("iframe", {
                    id: "trading-view-iframe",
                    style: {
                        width: "100%",
                        height: "100%",
                        backgroundColor: "white"
                    },
                    src: "https://charts.deriv.com/deriv?hide-signup=true"
                }),
                iI = (e, t, s) => {
                    let a = e.length;
                    t.length;
                    let n = e.filter(e => e % 2 == 0).length,
                        i = e.filter(e => e % 2 != 0).length,
                        l = e.filter(e => e > s).length,
                        r = e.filter(e => e <= s).length,
                        o = e.filter(e => e === s).length,
                        c = e.filter(e => e !== s).length,
                        d = 0,
                        u = 0;
                    for (let e = 1; e < t.length; e++) t[e] > t[e - 1] ? d++ : t[e] < t[e - 1] && u++;
                    let h = d + u,
                        _ = h > 0 ? d / h * 100 : 0;
                    return {
                        evenPercentage: n / a * 100,
                        oddPercentage: i / a * 100,
                        overPercentage: l / a * 100,
                        underPercentage: r / a * 100,
                        matchesPercentage: o / a * 100,
                        differsPercentage: c / a * 100,
                        risePercentage: _,
                        fallPercentage: h > 0 ? u / h * 100 : 0
                    }
                },
                iA = (0, r.Pi)(() => {
                    var e, t, s;
                    let [a, n] = (0, l.useState)("AUTOLDP"), [r, o] = (0, l.useState)(!1), [c, d] = (0, l.useState)("Updating..."), [u, h] = (0, l.useState)([]), [_, m] = (0, l.useState)(0), [x, p] = (0, l.useState)(1e3), [v, g] = (0, l.useState)([]), [b, y] = (0, l.useState)("R_100"), [f, N] = (0, l.useState)("R_100"), [C, S] = (0, l.useState)(2), [T, k] = (0, l.useState)(!1), [w, E] = (0, l.useState)(!1), [I, A] = (0, l.useState)(!1), [R, D] = (0, l.useState)(!1), [O, L] = (0, l.useState)(5), {
                        ui: M
                    } = (0, j.oR)(), {
                        is_dark_mode_on: U
                    } = M;
                    (0, l.useEffect)(() => {
                        P();
                        let e = localStorage.getItem("no_of_ticks"),
                            t = localStorage.getItem("active_card");
                        null !== e && p(parseFloat(e)), null !== t && n(t)
                    }, []), (0, l.useEffect)(() => {
                        f !== b && Z.api_base4.api.send({
                            ticks_history: b,
                            adjust_start_time: 1,
                            count: 5e3,
                            end: "latest",
                            start: 1,
                            style: "ticks"
                        }), N(b)
                    }, [b]);
                    let F = (e, t) => {
                            let s = e.toFixed(t);
                            return Number(s = String(s).slice(-1))
                        },
                        P = async () => {
                            if (await new Promise(e => setTimeout(e, 5e3)), !r && (Z.api_base4.api.send({
                                    active_symbols: "brief",
                                    product_type: "basic"
                                }), o(!0)), Z.api_base4.api) {
                                let e = Z.api_base4.api.onMessage().subscribe(e => {
                                    let {
                                        data: t
                                    } = e;
                                    if ("tick" === t.msg_type) {
                                        let {
                                            tick: e
                                        } = t, {
                                            ask: s,
                                            id: a,
                                            pip_size: n
                                        } = e;
                                        m(F(s, n)), d(s), z(), h(e => [...e, s])
                                    }
                                    if ("history" === t.msg_type) {
                                        let {
                                            history: e,
                                            pip_size: s
                                        } = t;
                                        S(s);
                                        let {
                                            prices: a
                                        } = e, {
                                            ticks_history: n
                                        } = t.echo_req;
                                        h(a), y(n), Z.api_base4.api.send({
                                            ticks: n,
                                            subscribe: 1
                                        })
                                    }
                                    if ("active_symbols" === t.msg_type) {
                                        let {
                                            active_symbols: e
                                        } = t, s = e.filter(e => "synthetics" === e.subgroup);
                                        s.sort((e, t) => e.display_order - t.display_order), Z.api_base4.api.send({
                                            ticks_history: s[0].symbol,
                                            adjust_start_time: 1,
                                            count: 5e3,
                                            end: "latest",
                                            start: 1,
                                            style: "ticks"
                                        }), g(s)
                                    }
                                });
                                Z.api_base4.pushSubscription(e)
                            }
                        },
                        z = () => {
                            h(e => e.slice(1))
                        },
                        $ = (() => {
                            let e = u.slice(-x),
                                t = [];
                            return e.forEach(e => {
                                let s = F(e, C);
                                t.push(s)
                            }), t
                        })(),
                        B = u.slice(-x),
                        G = (() => {
                            let e = u.slice(-1e3),
                                t = [];
                            return e.forEach(e => {
                                let s = F(e, C);
                                t.push(s)
                            }), t
                        })(),
                        V = "number" == typeof O ? O : 0,
                        {
                            evenPercentage: X,
                            oddPercentage: H,
                            overPercentage: q,
                            underPercentage: Y,
                            matchesPercentage: W,
                            differsPercentage: K,
                            risePercentage: J,
                            fallPercentage: Q
                        } = iI($, B, V),
                        ee = Array.from({
                            length: 10
                        }, (e, t) => iI(G, B, t).matchesPercentage),
                        et = [...ee].slice().sort((e, t) => t - e),
                        es = ee.indexOf(et[0]),
                        ea = ee.indexOf(et[1]),
                        en = ee.indexOf(et[et.length - 1]),
                        ei = ee.indexOf(et[et.length - 2]),
                        el = e => {
                            let t, s;
                            return e === es ? (t = 40, s = "#00a79e") : e === ea ? (t = 50, s = "#070bf7") : e === en ? (t = 40, s = "#ff0000") : e === ei ? (t = 50, s = "#ffe644") : (t = 50, s = "#777"), `#444 linear-gradient(to bottom, transparent ${t}%, ${s} 0)`
                        };
                    return (0, i.jsxs)("div", {
                        className: "analysistool",
                        style: {
                            color: U ? "#fff" : "#000"
                        },
                        children: [(0, i.jsxs)("div", {
                            className: "top-settings",
                            children: [(0, i.jsxs)("div", {
                                className: "market-settings",
                                children: [(0, i.jsx)("select", {
                                    name: "",
                                    id: "market-selection",
                                    onChange: e => {
                                        let t = e.target.value;
                                        Z.api_base4.api.forgetAll("ticks").then(() => {
                                            d("Loading..."), y(t)
                                        })
                                    },
                                    children: v.length > 0 ? v.map(e => (0, i.jsx)("option", {
                                        value: e.symbol,
                                        children: e.display_name
                                    }, e.symbol)) : (0, i.jsx)("option", {
                                        value: "",
                                        children: "SELECT MARKET"
                                    })
                                }), (0, i.jsxs)("div", {
                                    className: "number-of-ticks",
                                    children: [(0, i.jsx)("small", {
                                        children: "Ticks"
                                    }), (0, i.jsx)("input", {
                                        type: "number",
                                        name: "",
                                        id: "",
                                        value: x,
                                        onChange: e => {
                                            let t = e.target.value;
                                            p("" === t ? "" : Number(t)), localStorage.setItem("no_of_ticks", t)
                                        }
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "current-tick",
                                children: [(0, i.jsx)("h4", {
                                    children: "PRICE"
                                }), (0, i.jsx)("h3", {
                                    children: c.toString()
                                })]
                            })]
                        }), (0, i.jsx)("div", {
                            className: "circles-card",
                            children: Array.from({
                                length: 10
                            }, (e, t) => {
                                let s = iI(G, B, t).matchesPercentage,
                                    a = el(t),
                                    n = $.slice(-1)[0];
                                return (0, i.jsxs)("div", {
                                    className: "digit-item",
                                    style: {
                                        background: a,
                                        position: "relative"
                                    },
                                    children: [(0, i.jsx)("h3", {
                                        children: t
                                    }), (0, i.jsxs)("h4", {
                                        children: [s.toFixed(2), "%"]
                                    }), t === n && (0, i.jsx)("svg", {
                                        xmlns: "http://www.w3.org/2000/svg",
                                        width: "16",
                                        height: "16",
                                        style: {
                                            position: "absolute",
                                            bottom: "-15px",
                                            left: "50%",
                                            transform: "translateX(-50%)"
                                        },
                                        children: (0, i.jsx)("path", {
                                            fill: "red",
                                            d: "M8 4l6 8H2z"
                                        })
                                    })]
                                }, t)
                            })
                        }), (0, i.jsxs)("div", {
                            className: "over-under-card",
                            children: [(0, i.jsxs)("div", {
                                className: "streak-container",
                                children: [(0, i.jsx)("div", {
                                    className: "current-streak left",
                                    children: (0, i.jsx)("strong", {
                                        children: "Over/Under Analysis"
                                    })
                                }), (0, i.jsxs)("div", {
                                    className: "current-streak right",
                                    children: [(0, i.jsx)("strong", {
                                        children: "Current Streak:"
                                    }), " ", (() => {
                                        if (0 === $.length) return "No data";
                                        let e = 1,
                                            t = $[$.length - 1] > V;
                                        for (let s = $.length - 2; s >= 0; s--)
                                            if ($[s] > V === t) e++;
                                            else break;
                                        return `${e}x ${t?"Over":"Under"}`
                                    })()]
                                })]
                            }), (0, i.jsx)("div", {
                                className: "prediction-buttons",
                                children: Array.from({
                                    length: 10
                                }, (e, t) => t).map(e => (0, i.jsx)("button", {
                                    className: `prediction-button ${O===e?"active":""}`,
                                    onClick: () => L(e),
                                    children: e
                                }, e))
                            }), (0, i.jsxs)("div", {
                                className: "percentages",
                                children: [(0, i.jsxs)("div", {
                                    className: "percentage over",
                                    children: [(0, i.jsx)("strong", {
                                        children: "Over"
                                    }), (0, i.jsxs)("span", {
                                        children: [q.toFixed(1), "%"]
                                    }), (0, i.jsx)("div", {
                                        className: "percentage-bar over",
                                        children: (0, i.jsx)("div", {
                                            className: "bar",
                                            style: {
                                                width: `${q}%`
                                            }
                                        })
                                    })]
                                }), (0, i.jsxs)("div", {
                                    className: "percentage under",
                                    children: [(0, i.jsx)("strong", {
                                        children: "Under"
                                    }), (0, i.jsxs)("span", {
                                        children: [Y.toFixed(1), "%"]
                                    }), (0, i.jsx)("div", {
                                        className: "percentage-bar under",
                                        children: (0, i.jsx)("div", {
                                            className: "bar",
                                            style: {
                                                width: `${Y}%`
                                            }
                                        })
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "sequence-container",
                                children: [(e = I ? 50 : 8, $.slice(-e).map((e, t) => (0, i.jsx)("div", {
                                    className: `digit-box ${e>V?"over":"under"}`,
                                    children: e > V ? "O" : "U"
                                }, t))), (0, i.jsx)("button", {
                                    className: "more-button",
                                    onClick: () => A(!I),
                                    children: I ? "LESS" : "MORE"
                                })]
                            })]
                        }), (0, i.jsxs)("div", {
                            className: "matches-differs-card",
                            children: [(0, i.jsxs)("div", {
                                className: "streak-container",
                                children: [(0, i.jsx)("div", {
                                    className: "current-streak left",
                                    children: (0, i.jsx)("strong", {
                                        children: "Matches/Differs Analysis"
                                    })
                                }), (0, i.jsxs)("div", {
                                    className: "current-streak right",
                                    children: [(0, i.jsx)("strong", {
                                        children: "Current Streak:"
                                    }), " ", (() => {
                                        if (0 === $.length) return "No data";
                                        let e = 1,
                                            t = $[$.length - 1] === V;
                                        for (let s = $.length - 2; s >= 0; s--)
                                            if ($[s] === V === t) e++;
                                            else break;
                                        return `${e}x ${t?"Match":"Differ"}`
                                    })()]
                                })]
                            }), (0, i.jsx)("div", {
                                className: "prediction-buttons",
                                children: Array.from({
                                    length: 10
                                }, (e, t) => t).map(e => (0, i.jsx)("button", {
                                    className: `prediction-button ${O===e?"active":""}`,
                                    onClick: () => L(e),
                                    children: e
                                }, e))
                            }), (0, i.jsxs)("div", {
                                className: "percentages",
                                children: [(0, i.jsxs)("div", {
                                    className: "percentage match",
                                    children: [(0, i.jsx)("strong", {
                                        children: "Matches"
                                    }), (0, i.jsxs)("span", {
                                        children: [W.toFixed(1), "%"]
                                    }), (0, i.jsx)("div", {
                                        className: "percentage-bar match",
                                        children: (0, i.jsx)("div", {
                                            className: "bar",
                                            style: {
                                                width: `${W}%`
                                            }
                                        })
                                    })]
                                }), (0, i.jsxs)("div", {
                                    className: "percentage differ",
                                    children: [(0, i.jsx)("strong", {
                                        children: "Differs"
                                    }), (0, i.jsxs)("span", {
                                        children: [K.toFixed(1), "%"]
                                    }), (0, i.jsx)("div", {
                                        className: "percentage-bar differ",
                                        children: (0, i.jsx)("div", {
                                            className: "bar",
                                            style: {
                                                width: `${K}%`
                                            }
                                        })
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "sequence-container",
                                children: [(t = R ? 50 : 8, $.slice(-t).map((e, t) => (0, i.jsx)("div", {
                                    className: `digit-box ${e===V?"match":"differ"}`,
                                    children: e === V ? "M" : "D"
                                }, t))), (0, i.jsx)("button", {
                                    className: "more-button",
                                    onClick: () => D(!R),
                                    children: R ? "LESS" : "MORE"
                                })]
                            })]
                        }), (0, i.jsxs)("div", {
                            className: "even-odd-card",
                            children: [(0, i.jsxs)("div", {
                                className: "streak-container",
                                children: [(0, i.jsx)("div", {
                                    className: "current-streak left",
                                    children: (0, i.jsx)("strong", {
                                        children: "Even/Odd Analysis"
                                    })
                                }), (0, i.jsxs)("div", {
                                    className: "current-streak right",
                                    children: [(0, i.jsx)("strong", {
                                        children: "Current Streak:"
                                    }), " ", (() => {
                                        if (0 === $.length) return "No data";
                                        let e = 1,
                                            t = $[$.length - 1] % 2 == 0;
                                        for (let s = $.length - 2; s >= 0; s--)
                                            if ($[s] % 2 == 0 === t) e++;
                                            else break;
                                        return `${e}x ${t?"even":"odd"}`
                                    })()]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "percentages",
                                children: [(0, i.jsxs)("div", {
                                    className: "percentage even",
                                    children: [(0, i.jsx)("strong", {
                                        children: "Even"
                                    }), (0, i.jsxs)("span", {
                                        children: [X.toFixed(1), "%"]
                                    }), (0, i.jsx)("div", {
                                        className: "percentage-bar even",
                                        children: (0, i.jsx)("div", {
                                            className: "bar",
                                            style: {
                                                width: `${X}%`
                                            }
                                        })
                                    })]
                                }), (0, i.jsxs)("div", {
                                    className: "percentage odd",
                                    children: [(0, i.jsx)("strong", {
                                        children: "Odd"
                                    }), (0, i.jsxs)("span", {
                                        children: [H.toFixed(1), "%"]
                                    }), (0, i.jsx)("div", {
                                        className: "percentage-bar odd",
                                        children: (0, i.jsx)("div", {
                                            className: "bar",
                                            style: {
                                                width: `${H}%`
                                            }
                                        })
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "sequence-container",
                                children: [(s = T ? 50 : 8, $.slice(-s).map((e, t) => (0, i.jsx)("div", {
                                    className: `digit-box ${e%2==0?"even":"odd"}`,
                                    children: e % 2 == 0 ? "E" : "O"
                                }, t))), (0, i.jsx)("button", {
                                    className: "more-button",
                                    onClick: () => k(!T),
                                    children: T ? "LESS" : "MORE"
                                })]
                            })]
                        }), (0, i.jsxs)("div", {
                            className: "rise-fall-card",
                            children: [(0, i.jsxs)("div", {
                                className: "streak-container",
                                children: [(0, i.jsx)("div", {
                                    className: "current-streak left",
                                    children: (0, i.jsx)("strong", {
                                        children: "Rise/Fall Analysis"
                                    })
                                }), (0, i.jsxs)("div", {
                                    className: "current-streak right",
                                    children: [(0, i.jsx)("strong", {
                                        children: "Current Streak:"
                                    }), " ", (() => {
                                        if (B.length < 2) return "No data";
                                        let e = 1,
                                            t = B[B.length - 1] > B[B.length - 2] ? "R" : "F";
                                        for (let s = B.length - 2; s >= 1; s--)
                                            if ((B[s] > B[s - 1] ? "R" : "F") === t) e++;
                                            else break;
                                        return `${e}x ${"R"===t?"Fall":"Rise"}`
                                    })()]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "percentages",
                                children: [(0, i.jsxs)("div", {
                                    className: "percentage rise",
                                    children: [(0, i.jsx)("strong", {
                                        children: "Rise"
                                    }), (0, i.jsxs)("span", {
                                        children: [J.toFixed(1), "%"]
                                    }), (0, i.jsx)("div", {
                                        className: "percentage-bar rise",
                                        children: (0, i.jsx)("div", {
                                            className: "bar",
                                            style: {
                                                width: `${J}%`
                                            }
                                        })
                                    })]
                                }), (0, i.jsxs)("div", {
                                    className: "percentage fal",
                                    children: [(0, i.jsx)("strong", {
                                        children: "Fall"
                                    }), (0, i.jsxs)("span", {
                                        children: [Q.toFixed(1), "%"]
                                    }), (0, i.jsx)("div", {
                                        className: "percentage-bar fal",
                                        children: (0, i.jsx)("div", {
                                            className: "bar",
                                            style: {
                                                width: `${Q}%`
                                            }
                                        })
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "sequence-container",
                                children: [(e => {
                                    let t = B.slice(-e),
                                        s = [];
                                    for (let e = 1; e < t.length; e++) s.push(t[e] > t[e - 1] ? "R" : "F");
                                    return s
                                })(w ? 51 : 9).map((e, t) => (0, i.jsx)("div", {
                                    className: `digit-box ${"R"===e?"rise":"fal"}`,
                                    children: e
                                }, t)), (0, i.jsx)("button", {
                                    className: "more-button",
                                    onClick: () => E(!w),
                                    children: w ? "LESS" : "MORE"
                                })]
                            })]
                        })]
                    })
                }),
                iR = () => {
                    let {
                        run_panel: e
                    } = (0, j.oR)(), {
                        isDesktop: t
                    } = (0, N.F)(), {
                        is_drawer_open: s
                    } = e;
                    return (0, i.jsx)("div", {
                        className: U()("dashboard__chart-wrapper", {
                            "dashboard__chart-wrapper--expanded": s && t
                        }),
                        dir: "ltr",
                        children: (0, i.jsx)("div", {
                            className: "main_analysis",
                            children: (0, i.jsx)(iA, {})
                        })
                    })
                },
                iD = (0, r.Pi)(() => {
                    let {
                        dashboard: e
                    } = (0, j.oR)(), {
                        is_trading_view_modal_visible: t,
                        is_analysistool_visible: s,
                        setAnalysistoolVisibility: a,
                        setTradingViewModalVisibility: n
                    } = e;
                    return (0, i.jsxs)(l.Fragment, {
                        children: [t && (0, i.jsx)(L, {
                            boundary: ".main",
                            header: (0, f.NC)("TradingView Chart"),
                            onClose: n,
                            modalWidth: 526,
                            modalHeight: 595,
                            minWidth: 526,
                            minHeight: 524,
                            enableResizing: !0,
                            children: (0, i.jsx)("div", {
                                style: {
                                    height: "calc(100% - 6rem)",
                                    padding: "0.5rem"
                                },
                                children: (0, i.jsx)(iE, {})
                            })
                        }), s && (0, i.jsx)(L, {
                            boundary: ".main",
                            header: (0, f.NC)("Analysistool"),
                            onClose: a,
                            modalWidth: 526,
                            modalHeight: 595,
                            minWidth: 300,
                            minHeight: 400,
                            enableResizing: !0,
                            children: (0, i.jsx)("div", {
                                style: {
                                    height: "90%",
                                    width: "100%",
                                    justifyContent: "center",
                                    display: "flex",
                                    flexDirection: "column",
                                    boxSizing: "border-box"
                                },
                                children: (0, i.jsx)("div", {
                                    style: {
                                        flex: 1,
                                        overflow: "auto",
                                        paddingBottom: "1rem"
                                    },
                                    children: (0, i.jsx)(iR, {})
                                })
                            })
                        })]
                    })
                });
            var iO = s("73981"),
                iL = s("76953"),
                iM = s("47376"),
                iU = s("29357");
            let iF = (0, r.Pi)(() => {
                    let {
                        dashboard: e
                    } = (0, j.oR)(), {
                        is_chart_modal_visible: t,
                        setChartModalVisibility: s
                    } = e;
                    return (0, i.jsx)(l.Fragment, {
                        children: t && (0, i.jsx)(L, {
                            boundary: ".main",
                            header: (0, f.NC)("Chart"),
                            onClose: s,
                            modalWidth: 526,
                            modalHeight: 595,
                            minWidth: 526,
                            minHeight: 524,
                            enableResizing: !0,
                            children: (0, i.jsx)("div", {
                                className: "chart-modal-dialog",
                                "data-testid": "chart-modal-dialog",
                                children: (0, i.jsx)(iU.default, {
                                    show_digits_stats: !0
                                })
                            })
                        })
                    })
                }),
                iP = (0, r.Pi)(() => {
                    let {
                        isDesktop: e
                    } = (0, N.F)();
                    return (0, i.jsx)(l.Suspense, {
                        fallback: (0, i.jsx)(T.a, {}),
                        children: e && (0, i.jsx)(iF, {})
                    })
                }),
                iZ = (0, r.Pi)(() => {
                    let {
                        dashboard: e
                    } = (0, j.oR)(), {
                        active_tab: t,
                        active_tour: s,
                        setActiveTour: a,
                        setTourDialogVisibility: n
                    } = e, {
                        is_close_tour: r,
                        is_finished: o,
                        handleJoyrideCallback: c,
                        setIsCloseTour: d
                    } = aD();
                    return l.useEffect(() => {
                        (r || o) && (d(!1), a(""))
                    }, [r, o, a, d]), !(0, a_.$8)("onboard_tour_token") && 1 === t && n(!0), (0, i.jsxs)(i.Fragment, {
                        children: [(0, i.jsx)(aR, {}), s && (0, i.jsx)(ap, {
                            handleCallback: c,
                            steps: aN,
                            spotlightClicks: !0
                        })]
                    })
                }),
                iz = {
                    content: [],
                    header: "",
                    img: "",
                    tour_step_key: 1
                },
                i$ = (0, r.Pi)(() => {
                    let {
                        dashboard: e
                    } = (0, j.oR)(), {
                        onCloseTour: t,
                        onTourEnd: s,
                        setTourActiveStep: a,
                        active_tour: n,
                        active_tab: r,
                        setActiveTour: o
                    } = e, [c, d] = l.useState(1), [u, h] = l.useState(iz), {
                        content: _,
                        header: m,
                        img: x,
                        media: p,
                        tour_step_key: v
                    } = u, g = 1 === c ? (0, f.NC)("Start") : (0, f.NC)("Next"), b = 8 === c ? (0, f.NC)("Got it, thanks!") : g, y = "onboarding" === n;
                    return (l.useEffect(() => {
                        aT.forEach(e => {
                            e.tour_step_key === c && h(e), a(c)
                        })
                    }, [c]), l.useEffect(() => {
                        (0, a_.$8)("onboard_tour_token") || 1 !== r || o("onboarding")
                    }, [r, n]), n) ? (0, i.jsxs)("div", {
                        className: U()("dbot-slider", {
                            "dbot-slider--active": 1 === c,
                            "dbot-slider--tour-position": 1 !== c
                        }),
                        "data-testid": "onboarding-tour-mobile",
                        children: [1 !== v && (0, i.jsxs)("div", {
                            className: "dbot-slider__navbar",
                            children: [(0, i.jsx)(es.Z, {
                                color: "less-prominent",
                                weight: "less-prominent",
                                lineHeight: "s",
                                size: "xxs",
                                "data-testid": "dbot-onboard-slider__navbar",
                                children: `${v-1}/7`
                            }), (0, i.jsx)("span", {
                                onClick: t,
                                children: (0, i.jsx)(E.Z, {
                                    height: "20px",
                                    width: "20px",
                                    "data-testid": "exit-onboard-tour",
                                    className: "db-contract-card__result-icon",
                                    color: "secondary"
                                })
                            })]
                        }), m && (0, i.jsx)(es.Z, {
                            color: "prominent",
                            weight: "bold",
                            align: "center",
                            className: "dbot-slider__title",
                            as: "span",
                            lineHeight: "s",
                            size: "xs",
                            children: (0, f.NC)(m)
                        }), p && (0, i.jsx)("div", {
                            className: "dbot-slider__media",
                            children: (0, i.jsx)("video", {
                                autoPlay: !0,
                                loop: !0,
                                controls: !0,
                                preload: "auto",
                                playsInline: !0,
                                disablePictureInPicture: !0,
                                controlsList: "nodownload",
                                src: p
                            })
                        }), x && (0, i.jsx)("div", {
                            className: "dbot-slider__image",
                            children: (0, i.jsx)("img", {
                                src: x
                            })
                        }), _ && (0, i.jsx)(i.Fragment, {
                            children: _.map(e => (0, i.jsx)(es.Z, {
                                align: "center",
                                color: "prominent",
                                className: "dbot-slider__content",
                                as: "div",
                                lineHeight: "s",
                                size: "xxs",
                                children: e
                            }, e))
                        }), (0, i.jsxs)("div", {
                            className: "dbot-slider__status",
                            children: [(0, i.jsx)("div", {
                                className: "dbot-slider__progress-bar",
                                children: (0, i.jsx)(aL, {
                                    step: c,
                                    steps_list: aT.map(e => e.tour_step_key.toString()),
                                    onStepChange: d
                                })
                            }), (0, i.jsxs)("div", {
                                className: "dbot-slider__button-group",
                                children: [1 === c && (0, i.jsx)(aM, {
                                    onClick: () => {
                                        t()
                                    },
                                    label: (0, f.NC)("Skip"),
                                    "data-testid": "skip-onboard-tour"
                                }), ![1, 2, 8].includes(c) && (0, i.jsx)(aM, {
                                    onClick: () => {
                                        d(c - 1)
                                    },
                                    label: (0, f.NC)("Previous"),
                                    "data-testid": "prev-onboard-tour"
                                }), (0, i.jsx)(aM, {
                                    type: "danger",
                                    onClick: () => {
                                        d(c + 1), s(c, y)
                                    },
                                    label: b,
                                    "data-testid": 8 === v ? "finish-onboard-tour" : "next-onboard-tour"
                                })]
                            })]
                        })]
                    }) : null
                }),
                iB = (0, r.Pi)(e => {
                    let {
                        is_mobile: t
                    } = e;
                    return (0, i.jsx)(i.Fragment, {
                        children: t ? (0, i.jsx)(i$, {}) : (0, i.jsx)(iZ, {})
                    })
                });
            var iG = s("58995"),
                iV = s("69498");
            let iX = e => {
                    let {
                        dashboard_click_name: t,
                        subpage_name: s
                    } = e;
                    sq.Analytics.trackEvent("ce_bot_form", {
                        action: sY.om.DASHBOARD_CLICK,
                        form_name: sY.oH,
                        subpage_name: s,
                        dashboard_click_name: t
                    })
                },
                iH = e => {
                    let {
                        announcement_name: t
                    } = e;
                    sq.Analytics.trackEvent("ce_bot_form", {
                        action: sY.om.ANNOUNCEMENT_CLICK,
                        form_name: sY.oH,
                        subform_name: "announcements",
                        subform_source: "dashboard",
                        announcement_name: t
                    })
                },
                iq = e => {
                    let {
                        announcement_name: t,
                        announcement_action: s
                    } = e;
                    sq.Analytics.trackEvent("ce_bot_form", {
                        action: sY.om.ANNOUNCEMENT_ACTION,
                        form_name: sY.oH,
                        subform_name: "announcements",
                        subform_source: "dashboard",
                        announcement_name: t,
                        announcement_action: s
                    })
                };
            var iY = s("64376");
            let iW = e => {
                let {
                    children: t,
                    text_size: s,
                    className: a
                } = e;
                return (0, i.jsx)("button", {
                    type: "button",
                    className: (0, nt.Z)("open-livechat__link", a),
                    onClick: () => window.LC_API.open_chat_window(),
                    children: (0, i.jsx)(es.Z, {
                        size: s || "xs",
                        weight: "bold",
                        color: "brand-red-coral",
                        children: t || (0, i.jsx)(f.Xx, {
                            i18n_default_text: "live chat"
                        })
                    })
                })
            };
            var iK = s("69557");
            let iJ = e => {
                    let {
                        announce: t
                    } = e;
                    return (0, i.jsxs)(i.Fragment, {
                        children: [(0, i.jsx)(iK.Z, {
                            fill: "var(--text-info-blue)",
                            width: "24",
                            height: "26"
                        }), t && (0, i.jsx)("div", {
                            className: "notification__icon--indicator"
                        })]
                    })
                },
                iQ = e => {
                    let {
                        title: t,
                        announce: s
                    } = e;
                    return (0, i.jsx)(es.Z, {
                        size: "xs",
                        line_height: "l",
                        weight: s ? "bold" : "normal",
                        styles: s ? {} : {
                            color: "var(--text-general)"
                        },
                        children: t
                    })
                },
                i0 = e => {
                    let {
                        message: t,
                        date: s,
                        announce: a
                    } = e;
                    return (0, i.jsxs)(i.Fragment, {
                        children: [(0, i.jsx)(es.Z, {
                            size: "xs",
                            line_height: "m",
                            weight: a ? "normal" : "lighter",
                            styles: a ? {} : {
                                color: "var(--text-general)"
                            },
                            children: t
                        }), (0, i.jsx)(es.Z, {
                            size: "xxs",
                            line_height: "xl",
                            styles: {
                                color: "var(--text-primary)"
                            },
                            children: s
                        })]
                    })
                },
                i1 = e => {
                    let {
                        announce_id: t
                    } = e;
                    switch (t) {
                        case "MOVING_STRATEGIES_ANNOUNCE":
                            return (0, i.jsx)(ty.J, {
                                icon: "IcMigrateStrategy",
                                className: "category-type",
                                style: {
                                    height: 100,
                                    width: 140
                                }
                            });
                        case "BLOCKLY_ANNOUNCE":
                            return (0, i.jsx)(ty.J, {
                                icon: "IcUpgradeBlockly",
                                className: "category-type",
                                style: {
                                    height: 120,
                                    width: 120
                                }
                            });
                        case "ACCUMULATOR_ANNOUNCE":
                            return (0, i.jsx)(ty.J, {
                                icon: "IcTradetypeAccu",
                                className: "category-type",
                                style: {
                                    height: 80,
                                    width: 80
                                }
                            });
                        default:
                            return null
                    }
                },
                i5 = {
                    UPDATES_QUICK_STRATEGY_MODAL_ANNOUNCE: {
                        announcement: {
                            id: "UPDATES_QUICK_STRATEGY_MODAL_ANNOUNCE",
                            main_title: (0, f.NC)("Updates: Quick strategy modal"),
                            confirm_button_text: (0, f.NC)("Explore now"),
                            base_classname: "announcement-dialog",
                            media: [(0, m.MT8)("assets/images/dbot-new-look-QS-and-accumulators-addition.gif")],
                            title: [(0, i.jsx)(es.Z, {
                                as: "div",
                                align: "left",
                                size: "xs",
                                className: "announcement-dialog__title",
                                children: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "We've improved the Quick strategy (QS) modal for a better trading experience."
                                })
                            }, 0), (0, i.jsx)(f.Xx, {
                                i18n_default_text: "<0>What’s new:</0>",
                                components: [(0, i.jsx)("div", {}, 0)]
                            }, 1)],
                            unordered_list: [{
                                id: 0,
                                text: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "<0>A revamped design</0> for improved functionality.",
                                    components: [(0, i.jsx)("strong", {}, 0)]
                                })
                            }, {
                                id: 1,
                                text: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "<0>Support for multiple trade types </0> with a filter to find strategies by preference.",
                                    components: [(0, i.jsx)("strong", {}, 0)]
                                })
                            }, {
                                id: 2,
                                text: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "<0>Integration of Accumulators Options</0> for direct strategy application within the QS modal.",
                                    components: [(0, i.jsx)("strong", {}, 0)]
                                })
                            }]
                        },
                        should_not_be_cancel: !0,
                        switch_tab_on_confirm: t2.ve.BOT_BUILDER,
                        should_toggle_qs_modal: !0
                    },
                    MOVING_STRATEGIES_ANNOUNCE: {
                        announcement: {
                            id: "MOVING_STRATEGIES_ANNOUNCE",
                            main_title: (0, f.NC)("Moving strategies to D-Bot"),
                            confirm_button_text: (0, f.NC)("Import strategy"),
                            base_classname: "announcement-dialog",
                            title: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "<0>Follow these steps to smoothly transfer your strategies:</0>",
                                components: [(0, i.jsx)("strong", {}, 0)]
                            }),
                            numbered_content: [{
                                id: 0,
                                text: (0, f.NC)("Download your strategy in XML format and import it to D-Bot.")
                            }, {
                                id: 1,
                                text: (0, f.NC)("Run your updated strategy to check its performance.")
                            }, {
                                id: 2,
                                text: (0, f.NC)("Save the updated strategy for quicker re-imports.")
                            }],
                            plain_text: [{
                                id: 0,
                                text: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "<0>Note</0>: Uploading complex strategies may take some time. Saving them from D-Bot ensures quicker access later. If you have questions, contact us via <1/>.",
                                    components: [(0, i.jsx)("strong", {}, 0), (0, i.jsx)(iW, {
                                        className: ""
                                    }, 1)]
                                })
                            }]
                        },
                        should_not_be_cancel: !0,
                        should_toggle_load_modal: !0,
                        switch_tab_on_confirm: t2.ve.BOT_BUILDER,
                        onConfirm: () => {
                            (0, tJ.m5)({
                                subpage_name: "bot_builder",
                                subform_source: "announcements",
                                subform_name: "load_strategy",
                                load_strategy_tab: "recent"
                            })
                        }
                    },
                    BLOCKLY_ANNOUNCE: {
                        announcement: {
                            id: "BLOCKLY_ANNOUNCE",
                            main_title: (0, f.NC)("Google Blockly v10 update"),
                            base_classname: "announcement-dialog",
                            title: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "We have updated our Blockly system in D-Bot from <0>version 3 to version 10</0>. This brings:",
                                components: [(0, i.jsx)("strong", {}, 0)]
                            }),
                            numbered_content: [{
                                id: 0,
                                text: (0, f.NC)("Better security.")
                            }, {
                                id: 1,
                                text: (0, f.NC)("Faster performance.")
                            }, {
                                id: 2,
                                text: (0, f.NC)("New features for developers.")
                            }],
                            plain_text: [{
                                id: 0,
                                text: (0, i.jsx)(f.Xx, {
                                    i18n_default_text: "<0>Note</0>: Some complex strategies might face issues in the Bot Builder. If you have questions, contact us via <1/>.",
                                    components: [(0, i.jsx)("strong", {}, 0), (0, i.jsx)(iW, {
                                        className: ""
                                    }, 1)]
                                })
                            }]
                        },
                        should_not_be_cancel: !0
                    },
                    ACCUMULATOR_ANNOUNCE: {
                        announcement: {
                            id: "ACCUMULATOR_ANNOUNCE",
                            main_title: (0, f.NC)("Accumulators now on D-Bot"),
                            confirm_button_text: (0, f.NC)("Try now"),
                            cancel_button_text: (0, f.NC)("Learn more"),
                            base_classname: "announcement-dialog",
                            title: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "<0>Boost your trading strategy with Accumulators</0>",
                                components: [(0, i.jsx)("strong", {}, 0)]
                            }),
                            content: [{
                                id: 0,
                                text: (0, f.NC)("Trade Accumulators to build up potential profits with a structured approach.")
                            }, {
                                id: 1,
                                text: (0, f.NC)("Customise your investment period and price levels to fit your trading goals.")
                            }, {
                                id: 2,
                                text: (0, f.NC)("Manage risks while capitalising on market opportunities.")
                            }]
                        },
                        switch_tab_on_cancel: t2.ve.TUTORIAL,
                        switch_tab_on_confirm: t2.ve.BOT_BUILDER,
                        onConfirm: () => i3()
                    }
                },
                i2 = {
                    MODAL_BUTTON_ACTION: "modal_button_action",
                    REDIRECT_BUTTON_ACTION: "redirect_button_action"
                },
                i8 = [{
                    id: "UPDATES_QUICK_STRATEGY_MODAL_ANNOUNCE",
                    icon: iJ,
                    title: (0, f.NC)("Updated: Quick Strategy Modal"),
                    message: (0, f.NC)("We've improved the Quick strategy (QS) modal for a better trading experience."),
                    date: "18 November 2024 00:00 UTC",
                    buttonAction: i2.MODAL_BUTTON_ACTION,
                    actionText: ""
                }, {
                    id: "MOVING_STRATEGIES_ANNOUNCE",
                    icon: iJ,
                    title: (0, f.NC)("Moving strategies to D-Bot"),
                    message: (0, f.NC)("Follow these steps to smoothly transfer your strategies"),
                    date: "1 August 2024 00:00 UTC",
                    buttonAction: i2.MODAL_BUTTON_ACTION,
                    actionText: ""
                }, {
                    id: "BLOCKLY_ANNOUNCE",
                    icon: iJ,
                    title: (0, f.NC)("Google Blockly v10 update"),
                    message: (0, f.NC)("We have updated our Blockly system in D-Bot from version 3 to version 10."),
                    date: "24 July 2024 00:00 UTC",
                    buttonAction: i2.MODAL_BUTTON_ACTION,
                    actionText: ""
                }, {
                    id: "ACCUMULATOR_ANNOUNCE",
                    icon: iJ,
                    title: (0, f.NC)("Accumulators is now on D-Bot"),
                    message: (0, f.NC)("Boost your trading strategy with Accumulators."),
                    date: "2 July 2024 00:00 UTC",
                    buttonAction: i2.MODAL_BUTTON_ACTION,
                    actionText: ""
                }],
                i3 = () => {
                    Promise.resolve().then(s.bind(s, 56505)).then(e => {
                        let t = Blockly.utils.xml.textToDom(e.default);
                        ((e, s) => {
                            let a = `${e.toUpperCase()}_LIST`,
                                n = null == t ? void 0 : t.querySelectorAll(`field[name="${a}"]`);
                            null == n || n.forEach(e => {
                                e.textContent = s
                            })
                        })("tradetypecat", "accumulator");
                        let {
                            derivWorkspace: s
                        } = Blockly;
                        (0, Z.load)({
                            block_string: Blockly.Xml.domToText(t),
                            file_name: "Strategy with accumulator trade type",
                            workspace: s,
                            from: Z.save_types.UNSAVED,
                            drop_event: null,
                            strategy_id: null,
                            showIncompatibleStrategyDialog: null
                        })
                    }).catch(e => {
                        console.error("Failed to load strategy XML:", e)
                    })
                },
                i4 = (e, t, s) => {
                    switch (e.buttonAction) {
                        case i2.MODAL_BUTTON_ACTION:
                            return t(e.id, i5[e.id]);
                        case i2.REDIRECT_BUTTON_ACTION:
                            {
                                let t = i5[e.id].url_redirect;
                                if (t) return s(t);
                                return !1
                            }
                        default:
                            return !1
                    }
                },
                i7 = e => {
                    let {
                        announcement: t,
                        handleOnConfirm: s,
                        handleOnCancel: a,
                        is_announce_dialog_open: n,
                        setIsAnnounceDialogOpen: l,
                        is_tablet: r
                    } = e, {
                        id: o,
                        main_title: c,
                        confirm_button_text: d,
                        cancel_button_text: u,
                        base_classname: h,
                        title: _,
                        content: m,
                        numbered_content: x,
                        plain_text: p,
                        unordered_list: j,
                        media: v
                    } = t;
                    return (0, i.jsx)(sB.Z, {
                        portal_element_id: "modal_root",
                        title: c,
                        is_visible: n,
                        confirm_button_text: d,
                        onConfirm: s,
                        cancel_button_text: u,
                        onCancel: a,
                        is_mobile_full_width: !0,
                        has_close_icon: !0,
                        onClose: () => {
                            l(!1), (0, tJ._W)({
                                subform_name: "announcements",
                                announcement_name: c
                            })
                        },
                        className: r ? `${h} ${h}--tablet` : h,
                        children: (0, i.jsxs)("div", {
                            className: `${h}__body-text`,
                            children: [(0, i.jsx)("div", {
                                className: `${h}__body-icon--${o.toLowerCase()}`,
                                children: (0, i.jsx)(i1, {
                                    announce_id: o
                                })
                            }), Array.isArray(v) && (0, i.jsx)(i.Fragment, {
                                children: v.map((e, t) => (0, i.jsx)("img", {
                                    className: `${h}__image`,
                                    src: e,
                                    alt: e
                                }, t))
                            }), (0, i.jsxs)("div", {
                                className: `${h}__body-main-content`,
                                children: [(0, i.jsx)(es.Z, {
                                    as: "p",
                                    size: "xs",
                                    className: `${h}__title--${o.toLowerCase()}`,
                                    children: _
                                }), Array.isArray(m) && m.map(e => (0, i.jsxs)("div", {
                                    className: `${h}__body-item`,
                                    children: [(0, i.jsx)("div", {
                                        children: (0, i.jsx)(eg.Z, {
                                            fill: "var(--icon-black-plus)"
                                        })
                                    }), (0, i.jsx)(es.Z, {
                                        as: "p",
                                        lineHeight: "l",
                                        size: "xs",
                                        children: null == e ? void 0 : e.text
                                    })]
                                }, null == e ? void 0 : e.id)), Array.isArray(j) && (0, i.jsx)("ul", {
                                    className: `${h}__unordered_list`,
                                    children: j.map(e => (0, i.jsx)("li", {
                                        children: (0, i.jsx)(es.Z, {
                                            as: "div",
                                            lineHeight: "l",
                                            size: "xs",
                                            children: null == e ? void 0 : e.text
                                        })
                                    }, null == e ? void 0 : e.id))
                                }, 0), Array.isArray(x) && (0, i.jsx)("ol", {
                                    className: `${h}__body-item--numbered`,
                                    children: x.map(e => (0, i.jsx)(es.Z, {
                                        as: "li",
                                        lineHeight: "xl",
                                        size: "xs",
                                        styles: {
                                            listStyle: "auto"
                                        },
                                        children: null == e ? void 0 : e.text
                                    }, null == e ? void 0 : e.id))
                                }), Array.isArray(p) && (0, i.jsx)("div", {
                                    children: p.map(e => (0, i.jsx)("span", {
                                        children: (0, i.jsx)(es.Z, {
                                            lineHeight: "m",
                                            size: "xs",
                                            styles: {
                                                listStyle: "auto"
                                            },
                                            children: e.text
                                        }, e.id)
                                    }, null == e ? void 0 : e.id))
                                })]
                            })]
                        })
                    })
                },
                i6 = (0, r.Pi)(e => {
                    let {
                        is_mobile: t,
                        is_tablet: s,
                        handleTabChange: a
                    } = e, {
                        load_modal: {
                            toggleLoadModal: n
                        },
                        dashboard: {
                            showVideoDialog: r
                        },
                        quick_strategy: {
                            setFormVisibility: o
                        }
                    } = (0, j.oR)(), [c, d] = l.useState(!1), [u, h] = l.useState(!1), [_, m] = l.useState(null), [x, p] = l.useState({}), [v, g] = l.useState(0), b = (0, ik.s0)(), [y, N] = l.useState([]), C = "announcements__label", S = e => {
                        var t;
                        null === (t = localStorage) || void 0 === t || t.setItem("bot-announcements", JSON.stringify(e))
                    }, T = e => {
                        let t = null;
                        S({ ...t = JSON.parse(localStorage.getItem("bot-announcements") ? ? "{}"),
                            [e]: !1
                        }), p(E())
                    }, k = (e, t) => () => {
                        m(t), d(!0), h(e => !e), iH({
                            announcement_name: t.announcement.main_title
                        }), T(e)
                    }, w = e => () => {
                        b && b(e)
                    }, E = () => {
                        let e = null;
                        e = JSON.parse(localStorage.getItem("bot-announcements") ? ? "{}");
                        let t = [],
                            s = {};
                        return i8.map(a => {
                            let n = !0;
                            e && Object.hasOwn(e, a.id) && (n = e[a.id]), t.push({
                                id: a.id,
                                icon: (0, i.jsx)(a.icon, {
                                    announce: n
                                }),
                                title: (0, i.jsx)(iQ, {
                                    title: a.title,
                                    announce: n
                                }),
                                message: (0, i.jsx)(i0, {
                                    message: a.message,
                                    date: a.date,
                                    announce: n
                                }),
                                buttonAction: i4(a, k, w),
                                actionText: a.actionText
                            }), s[a.id] = n
                        }), N(t), s
                    };
                    l.useEffect(() => {
                        let e = E();
                        S(e), p(e)
                    }, []), l.useEffect(() => {
                        g(Object.values(x).filter(e => e).length)
                    }, [x]);
                    let I = () => {
                        let e = (0, iY.zw)().find(e => 4 === e.id);
                        e && r({
                            url: e.url,
                            type: "url"
                        })
                    };
                    return (0, i.jsxs)("div", {
                        className: "announcements",
                        children: [(0, i.jsxs)("button", {
                            className: "announcements__button",
                            onClick: () => {
                                h(e => !e), !u && (0, tJ.m5)({
                                    subform_name: "announcements",
                                    subform_source: "dashboard"
                                })
                            },
                            "data-testid": "btn-announcements",
                            children: [(0, i.jsx)(iG.Z, {
                                fill: "var(--icon-black-plus)",
                                iconSize: "sm"
                            }), !t && (0, i.jsx)(es.Z, {
                                size: "xs",
                                line_height: "s",
                                className: C,
                                children: (0, f.NC)("Announcements")
                            }), 0 !== v && (0, i.jsx)("div", {
                                className: "announcements__amount",
                                children: (0, i.jsx)("p", {
                                    "data-testid": "announcements__amount",
                                    children: v
                                })
                            })]
                        }), (0, i.jsx)("div", {
                            className: "notifications__wrapper",
                            children: (0, i.jsx)(iV.T, {
                                className: U()("", {
                                    "notifications__wrapper--mobile": t,
                                    "notifications__wrapper--desktop": !t,
                                    "notifications__wrapper--tablet": s
                                }),
                                clearNotificationsCallback: () => {
                                    S(Object.fromEntries(Object.keys(x).map(e => [e, !1]))), p(E())
                                },
                                componentConfig: {
                                    clearButtonText: (0, f.NC)("Mark all as read"),
                                    modalTitle: (0, f.NC)("Announcements"),
                                    noNotificationsMessage: "",
                                    noNotificationsTitle: ""
                                },
                                isOpen: u,
                                setIsOpen: h,
                                notifications: y,
                                excludedClickOutsideClass: C,
                                ...t && {
                                    appElement: document.getElementById("modal_root")
                                }
                            })
                        }), (null == _ ? void 0 : _.announcement) && (0, i.jsx)(i7, {
                            announcement: _.announcement,
                            is_announce_dialog_open: c,
                            setIsAnnounceDialogOpen: d,
                            handleOnCancel: (null == _ ? void 0 : _.should_not_be_cancel) ? null : () => {
                                var e;
                                iq({
                                    announcement_name: null == _ ? void 0 : _.announcement.main_title,
                                    announcement_action: null == _ ? void 0 : _.announcement.cancel_button_text
                                }), (null == _ ? void 0 : _.switch_tab_on_cancel) && (a(_.switch_tab_on_cancel), "ACCUMULATOR_ANNOUNCE" === _.announcement.id && I()), null == _ || null === (e = _.onCancel) || void 0 === e || e.call(_), m(null)
                            },
                            handleOnConfirm: () => {
                                var e;
                                iq({
                                    announcement_name: null == _ ? void 0 : _.announcement.main_title,
                                    announcement_action: null == _ ? void 0 : _.announcement.confirm_button_text
                                }), (null == _ ? void 0 : _.switch_tab_on_confirm) && a(_.switch_tab_on_confirm), (null == _ ? void 0 : _.should_toggle_qs_modal) && o(!0), (null == _ ? void 0 : _.should_toggle_load_modal) && n(), null == _ || null === (e = _.onConfirm) || void 0 === e || e.call(_), m(null)
                            },
                            is_tablet: s
                        })]
                    })
                });
            var i9 = s("21317"),
                le = s("96475"),
                lt = s("69483"),
                ls = s.n(lt),
                la = s("26961"),
                ln = s.n(la);
            let li = (0, r.Pi)(() => {
                    let {
                        load_modal: e,
                        dashboard: t
                    } = (0, j.oR)(), {
                        is_delete_modal_open: s,
                        onToggleDeleteDialog: a,
                        selected_strategy_id: n,
                        setDashboardStrategies: l,
                        loadStrategyToBuilder: r,
                        refreshStrategiesTheme: o,
                        resetBotBuilderStrategy: c
                    } = e, {
                        setOpenSettings: d
                    } = t, u = async (e, t) => {
                        t.length ? (n === e && await r(null == t ? void 0 : t[0]), await o()) : c()
                    }, h = async e => {
                        let t = (await (0, Z.getSavedWorkspaces)()).filter(t => t.id !== e);
                        l(t), ls().setItem("saved_workspaces", ln().compress(JSON.stringify(t))), await u(e, t), a(!1)
                    };
                    return (0, i.jsx)("div", {
                        children: (0, i.jsxs)(sB.Z, {
                            title: (0, f.NC)("Delete bot"),
                            is_visible: s,
                            confirm_button_text: (0, f.NC)("Yes, delete"),
                            onConfirm: () => {
                                h(n), a(!1), d(sX.tx.BOT_DELETE)
                            },
                            cancel_button_text: (0, f.NC)("No"),
                            onCancel: () => {
                                a(!1)
                            },
                            is_mobile_full_width: !1,
                            className: "dc-dialog__delete-strategy--delete",
                            has_close_icon: !0,
                            children: [(0, i.jsx)("div", {
                                children: (0, i.jsxs)(es.Z, {
                                    color: "prominent",
                                    lineHeight: "s",
                                    size: "xs",
                                    children: [(0, f.NC)("Your bot will be permanently deleted when you hit "), (0, i.jsx)("strong", {
                                        children: (0, f.NC)("Yes, delete.")
                                    })]
                                })
                            }), (0, i.jsx)("div", {
                                children: (0, i.jsx)(es.Z, {
                                    color: "prominent",
                                    lineHeight: "xl",
                                    size: "xs",
                                    children: (0, f.NC)("Are you sure you want to delete it?")
                                })
                            })]
                        })
                    })
                }),
                ll = e => {
                    let [t, s] = l.useState(!1), a = e => {
                        "ESCAPE" === e.key.toUpperCase() && s(!1)
                    }, n = t => {
                        var a;
                        !(null == e ? void 0 : null === (a = e.current) || void 0 === a ? void 0 : a.contains(t.target)) && s(!1)
                    };
                    return l.useEffect(() => (document.addEventListener("keydown", a, !0), document.addEventListener("click", n, !0), () => {
                        document.removeEventListener("keydown", a, !0), document.removeEventListener("click", n, !0)
                    }), []), {
                        is_dropdown_visible: t,
                        setDropdownVisibility: s
                    }
                };
            var lr = s("85127"),
                lo = s("37575"),
                lc = s("42754"),
                ld = s("33571");
            let lu = {
                    OPEN: "open",
                    SAVE: "save",
                    DELETE: "delete",
                    INIT: "init"
                },
                lh = [{
                    type: lu.OPEN,
                    icon: (0, i.jsx)(lr.Z, {
                        fill: "var(--text-general)"
                    }),
                    label: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Open"
                    })
                }, {
                    type: lu.SAVE,
                    icon: (0, i.jsx)(lc.Z, {
                        fill: "var(--text-general)",
                        className: "icon-general-fill-path",
                        iconSize: "xs",
                        path: "",
                        opacity: .8
                    }),
                    label: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Save"
                    })
                }, {
                    type: lu.DELETE,
                    icon: (0, i.jsx)(lo.Z, {
                        fill: "var(--text-general)"
                    }),
                    label: (0, i.jsx)(f.Xx, {
                        i18n_default_text: "Delete"
                    })
                }],
                l_ = (0, r.Pi)(e => {
                    let {
                        workspace: t,
                        index: s
                    } = e, {
                        dashboard: a,
                        load_modal: n,
                        save_modal: r
                    } = (0, j.oR)(), {
                        setActiveTab: o
                    } = a, {
                        toggleSaveModal: c,
                        updateBotName: d
                    } = r, {
                        dashboard_strategies: u = [],
                        getSaveType: h,
                        getSelectedStrategyID: _,
                        loadFileFromRecent: m,
                        onToggleDeleteDialog: x,
                        previewed_strategy_id: p,
                        selected_strategy_id: v,
                        setSelectedStrategyId: g
                    } = n, b = l.useRef(null), y = l.useRef(null), f = l.useRef(!1), {
                        setDropdownVisibility: C,
                        is_dropdown_visible: S
                    } = ll(y), {
                        isDesktop: T
                    } = (0, N.F)();
                    l.useEffect(() => {
                        let e;
                        return (null == u ? void 0 : u.length) && 0 === s && !f.current && (e = setTimeout(() => {
                            var e;
                            f.current = !0, null == b || null === (e = b.current) || void 0 === e || e.click()
                        }, 50)), () => {
                            e && clearTimeout(e)
                        }
                    }, [u, s]);
                    let k = async () => {
                            await m(), o(t2.ve.BOT_BUILDER), iX({
                                dashboard_click_name: "open",
                                subpage_name: "bot_builder"
                            })
                        },
                        w = () => {
                            d(null == t ? void 0 : t.name), c(), iX({
                                dashboard_click_name: "save",
                                subpage_name: "dashboard"
                            })
                        },
                        E = async e => {
                            switch (g(t.id), e) {
                                case lu.OPEN:
                                    await k();
                                    break;
                                case lu.SAVE:
                                    w();
                                    break;
                                case lu.DELETE:
                                    x(!0), iX({
                                        dashboard_click_name: "delete",
                                        subpage_name: "dashboard"
                                    })
                            }
                        },
                        I = v === t.id && S,
                        A = T ? "xs" : "xxs";
                    return (0, i.jsxs)("div", {
                        className: U()("bot-list__item", {
                            "bot-list__item--selected": p === t.id,
                            "bot-list__item--loaded": u,
                            "bot-list__item--min": !!(null == u ? void 0 : u.length) && !T
                        }),
                        ref: b,
                        onClick: e => {
                            e.stopPropagation(), S && C(!1), _(t.id), E(lu.INIT)
                        },
                        children: [(0, i.jsx)("div", {
                            className: "bot-list__item__label",
                            children: (0, i.jsx)("div", {
                                className: "text-wrapper",
                                title: t.name,
                                children: (0, i.jsx)(es.Z, {
                                    align: "left",
                                    as: "p",
                                    size: A,
                                    lineHeight: "l",
                                    children: t.name
                                })
                            })
                        }), (0, i.jsx)("div", {
                            className: "bot-list__item__time-stamp",
                            children: (0, i.jsx)(es.Z, {
                                align: "left",
                                as: "p",
                                size: A,
                                lineHeight: "l",
                                children: (0, Z.timeSince)(t.timestamp)
                            })
                        }), (0, i.jsxs)("div", {
                            className: "bot-list__item__load-type",
                            children: [aa(t.save_type, "bot-list__item__load-type__icon--active"), (0, i.jsx)("div", {
                                className: "bot-list__item__load-type__icon--saved",
                                children: (0, i.jsx)(es.Z, {
                                    align: "left",
                                    as: "p",
                                    size: A,
                                    lineHeight: "l",
                                    children: h(t.save_type)
                                })
                            })]
                        }), T ? (0, i.jsx)("div", {
                            className: "bot-list__item__actions",
                            children: lh.map(e => (0, i.jsx)("div", {
                                className: "bot-list__item__actions__action-item",
                                onClick: t => {
                                    t.stopPropagation(), E(e.type)
                                },
                                children: (0, i.jsx)(G.Z, {
                                    alignment: "top",
                                    message: e.label,
                                    zIndex: "9999",
                                    children: e.icon
                                })
                            }, e.type))
                        }) : (0, i.jsxs)(i.Fragment, {
                            children: [(0, i.jsx)("div", {
                                className: "bot-list__item__actions",
                                children: (0, i.jsx)("button", {
                                    ref: y,
                                    onClick: e => {
                                        e.stopPropagation(), C(!S), g(t.id)
                                    },
                                    tabIndex: 0,
                                    children: (0, i.jsx)(ld.Z, {
                                        height: "20px",
                                        width: "20px"
                                    })
                                })
                            }), (0, i.jsx)("div", {
                                className: U()("bot-list__item__responsive", {
                                    "bot-list__item__responsive--active": I,
                                    "bot-list__item__responsive--min": u.length <= 5
                                }),
                                children: lh.map(e => (0, i.jsxs)("div", {
                                    className: "bot-list__item__responsive__menu",
                                    onClick: t => {
                                        t.stopPropagation(), E(e.type)
                                    },
                                    children: [(0, i.jsx)("div", {
                                        className: "bot-list__item__responsive__menu__icon",
                                        children: e.icon
                                    }), (0, i.jsx)(es.Z, {
                                        color: "prominent",
                                        className: "bot-list__item__responsive__menu__item",
                                        as: "p",
                                        size: "xs",
                                        children: e.label
                                    })]
                                }, e.type))
                            })]
                        })]
                    }, t.id)
                }),
                lm = [{
                    label: (0, f.NC)("Bot name"),
                    className: "bot-list__header__label"
                }, {
                    label: (0, f.NC)("Last modified"),
                    className: "bot-list__header__time-stamp"
                }, {
                    label: (0, f.NC)("Status"),
                    className: "bot-list__header__load-type"
                }],
                lx = (0, r.Pi)(() => {
                    let {
                        load_modal: e,
                        dashboard: t
                    } = (0, j.oR)(), {
                        setDashboardStrategies: s,
                        dashboard_strategies: a
                    } = e, {
                        setStrategySaveType: n,
                        strategy_save_type: r
                    } = t, {
                        isDesktop: o
                    } = (0, N.F)(), c = l.useRef(!1), d = l.useRef(!1);
                    return (l.useEffect(() => {
                        n(""), (async () => {
                            s(await (0, Z.getSavedWorkspaces)()), !d.current && (d.current = !0)
                        })()
                    }, [r]), l.useEffect(() => {
                        !(null == a ? void 0 : a.length) && !c.current && (c.current = !0)
                    }, []), null == a ? void 0 : a.length) ? (0, i.jsxs)("div", {
                        className: "bot-list__container",
                        children: [(0, i.jsxs)("div", {
                            className: "bot-list__wrapper",
                            children: [(0, i.jsx)("div", {
                                className: "bot-list__title",
                                children: (0, i.jsx)(es.Z, {
                                    size: o ? "s" : "xs",
                                    weight: "bold",
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "Your bots:"
                                    })
                                })
                            }), (0, i.jsx)("div", {
                                className: "bot-list__header",
                                children: lm.map(e => {
                                    let {
                                        label: t,
                                        className: s
                                    } = e;
                                    return (0, i.jsx)("div", {
                                        className: s,
                                        children: (0, i.jsx)(es.Z, {
                                            size: o ? "xs" : "xxs",
                                            weight: "bold",
                                            children: t
                                        })
                                    }, t)
                                })
                            }), (0, i.jsx)("div", {
                                className: "bot-list__table",
                                children: a.map(e => (0, i.jsx)(l_, {
                                    workspace: e
                                }, e.id))
                            })]
                        }), (0, i.jsx)(li, {})]
                    }) : null
                }),
                lp = (0, r.Pi)(e => {
                    let {
                        is_mobile: t,
                        has_dashboard_strategies: s
                    } = e, {
                        dashboard: a,
                        load_modal: n,
                        quick_strategy: r
                    } = (0, j.oR)(), {
                        toggleLoadModal: o,
                        setActiveTabIndex: c
                    } = n, {
                        isDesktop: d
                    } = (0, N.F)(), {
                        onCloseDialog: u,
                        dialog_options: h,
                        is_dialog_open: _,
                        setActiveTab: m,
                        setPreviewOnPopup: x
                    } = a, {
                        setFormVisibility: p
                    } = r, v = () => {
                        o(), c(t ? 1 : 2), m(t2.ve.BOT_BUILDER)
                    }, g = () => {
                        o(), c(t ? 0 : 1), m(t2.ve.BOT_BUILDER)
                    }, b = [{
                        id: "my-computer",
                        icon: t ? (0, i.jsx)(s1.Z, {
                            height: "48px",
                            width: "48px"
                        }) : (0, i.jsx)(s5.Z, {
                            height: "48px",
                            width: "48px"
                        }),
                        content: t ? (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Local"
                        }) : (0, i.jsx)(f.Xx, {
                            i18n_default_text: "My computer"
                        }),
                        callback: () => {
                            g(), (0, tJ.m5)({
                                subpage_name: "bot_builder",
                                subform_source: "dashboard",
                                subform_name: "load_strategy",
                                load_strategy_tab: "local"
                            })
                        }
                    }, {
                        id: "google-drive",
                        icon: (0, i.jsx)(sQ.Z, {
                            height: "48px",
                            width: "48px"
                        }),
                        content: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Google Drive"
                        }),
                        callback: () => {
                            v(), (0, tJ.m5)({
                                subpage_name: "bot_builder",
                                subform_source: "dashboard",
                                subform_name: "load_strategy",
                                load_strategy_tab: "google drive"
                            })
                        }
                    }, {
                        id: "bot-builder",
                        icon: (0, i.jsx)(i9.Z, {
                            height: "48px",
                            width: "48px"
                        }),
                        content: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Bot builder"
                        }),
                        callback: () => {
                            m(t2.ve.BOT_BUILDER), iX({
                                dashboard_click_name: "bot_builder",
                                subpage_name: "bot_builder"
                            })
                        }
                    }, {
                        id: "quick-strategy",
                        icon: (0, i.jsx)(le.Z, {
                            height: "48px",
                            width: "48px"
                        }),
                        content: (0, i.jsx)(f.Xx, {
                            i18n_default_text: "Quick strategy"
                        }),
                        callback: () => {
                            m(t2.ve.BOT_BUILDER), p(!0), (0, tJ.m5)({
                                subpage_name: "bot_builder",
                                subform_source: "dashboard",
                                subform_name: "quick_strategy"
                            })
                        }
                    }];
                    return l.useMemo(() => (0, i.jsxs)("div", {
                        className: U()("tab__dashboard__table", {
                            "tab__dashboard__table--minimized": s && t
                        }),
                        children: [(0, i.jsxs)("div", {
                            className: U()("tab__dashboard__table__tiles", {
                                "tab__dashboard__table__tiles--minimized": s && t
                            }),
                            id: "tab__dashboard__table__tiles",
                            children: [b.map(e => {
                                let {
                                    icon: a,
                                    content: n,
                                    callback: l,
                                    id: r
                                } = e;
                                return (0, i.jsxs)("div", {
                                    className: U()("tab__dashboard__table__block", {
                                        "tab__dashboard__table__block--minimized": s && t
                                    }),
                                    children: [(0, i.jsx)("div", {
                                        className: U()("tab__dashboard__table__images", {
                                            "tab__dashboard__table__images--minimized": s
                                        }),
                                        width: "8rem",
                                        height: "8rem",
                                        icon: a,
                                        id: r,
                                        onClick: () => {
                                            l()
                                        },
                                        children: a
                                    }), (0, i.jsx)(es.Z, {
                                        color: "prominent",
                                        size: t ? "xxs" : "xs",
                                        children: n
                                    })]
                                }, r)
                            }), d ? (0, i.jsx)(sb, {
                                is_modal_open: _,
                                className: "load-strategy__wrapper",
                                header: (0, f.NC)("Load strategy"),
                                onClickClose: () => {
                                    x(!1), u()
                                },
                                height_offset: "80px",
                                page_overlay: !0,
                                children: (0, i.jsx)("div", {
                                    label: "Google Drive",
                                    className: "google-drive-label",
                                    children: (0, i.jsx)(s0, {})
                                })
                            }) : (0, i.jsx)(sB.Z, {
                                title: h.title,
                                is_visible: _,
                                onCancel: u,
                                is_mobile_full_width: !0,
                                className: "dc-dialog__wrapper--google-drive",
                                has_close_icon: !0,
                                children: (0, i.jsx)(s0, {})
                            })]
                        }), (0, i.jsx)(lx, {})]
                    }), [_, s])
                }),
                lj = () => [{
                    label: (0, f.NC)("Welcome to D-Bot!"),
                    content: [{
                        data: (0, f.NC)("Ready to automate your trading strategy without writing any code? You’ve come to the right place.")
                    }, {
                        data: (0, f.NC)("Check out these guides and FAQs to learn more about building your bot:")
                    }],
                    link: !1
                }, {
                    label: (0, f.NC)("Guide"),
                    content: [{
                        data: (0, f.NC)("Binarytool - your automated trading partner")
                    }],
                    link: !0
                }, {
                    label: (0, f.NC)("FAQs"),
                    content: [{
                        data: (0, f.NC)("What is D-Bot?"),
                        faq_id: "faq-0"
                    }, {
                        data: (0, f.NC)("Where do I find the blocks I need?"),
                        faq_id: "faq-1"
                    }, {
                        data: (0, f.NC)("How do I remove blocks from the workspace?"),
                        faq_id: "faq-2"
                    }],
                    link: !0
                }],
                lv = (0, r.Pi)(() => {
                    let {
                        isDesktop: e
                    } = (0, N.F)(), {
                        dashboard: t
                    } = (0, j.oR)(), {
                        active_tour: s,
                        is_info_panel_visible: a,
                        setActiveTab: n,
                        setActiveTabTutorial: l,
                        setInfoPanelVisibility: r,
                        setFaqTitle: o
                    } = t, c = (e, t, s) => {
                        let a = e ? n(t2.ve.TUTORIAL) : null,
                            i = "Guide" === t ? l(0) : l(1);
                        return o(s), {
                            tutorial_link: a,
                            tutorial_label: i
                        }
                    }, d = () => {
                        r(!1), localStorage.setItem("dbot_should_show_info", JSON.stringify(Date.now()))
                    }, u = () => (0, i.jsxs)("div", {
                        className: "db-info-panel",
                        children: [(0, i.jsx)("div", {
                            "data-testid": "close-icon",
                            className: "db-info-panel__close-action",
                            onClick: d,
                            children: (0, i.jsx)(E.Z, {
                                height: "18px",
                                width: "18px",
                                fill: "var(--text-prominent)"
                            })
                        }), lj().map(t => {
                            let {
                                label: s,
                                content: a,
                                link: n
                            } = t;
                            return (0, i.jsxs)("div", {
                                children: [(0, i.jsx)(es.Z, {
                                    color: "prominent",
                                    lineHeight: "xxl",
                                    size: e ? "m" : "s",
                                    weight: "bold",
                                    as: "h1",
                                    children: s
                                }), a.map(t => (0, i.jsx)(es.Z, {
                                    className: U()("db-info-panel__card", {
                                        "db-info-panel__content": n
                                    }),
                                    color: "prominent",
                                    lineHeight: "xl",
                                    as: "p",
                                    onClick: () => c(n, s, t.faq_id),
                                    size: e ? "s" : "xxs",
                                    children: t.data
                                }, `info-panel-tour${t.data}`))]
                            }, `${s}-${a}`)
                        })]
                    });
                    return e ? !s && (0, i.jsx)("div", {
                        className: U()("tab__dashboard__info-panel", {
                            "tab__dashboard__info-panel--active": a
                        }),
                        children: u()
                    }) : (0, i.jsx)(C.Z, {
                        className: "statistics__modal statistics__modal--mobile",
                        is_open: a,
                        toggleModal: d,
                        width: "440px",
                        children: (0, i.jsx)(C.Z.Body, {
                            children: u()
                        })
                    })
                }),
                lg = (0, r.Pi)(e => {
                    let {
                        handleTabChange: t
                    } = e, {
                        load_modal: s,
                        dashboard: a
                    } = (0, j.oR)(), {
                        dashboard_strategies: n
                    } = s, {
                        active_tab: r,
                        active_tour: o
                    } = a, c = !!(null == n ? void 0 : n.length), {
                        isDesktop: d,
                        isTablet: u
                    } = (0, N.F)();
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsx)("div", {
                            className: U()("tab__dashboard", {
                                "tab__dashboard--tour-active": o
                            }),
                            children: (0, i.jsxs)("div", {
                                className: "tab__dashboard__content",
                                children: [(0, i.jsx)(i6, {
                                    is_mobile: !d,
                                    is_tablet: u,
                                    handleTabChange: t
                                }), (0, i.jsxs)("div", {
                                    className: "quick-panel",
                                    children: [(0, i.jsxs)("div", {
                                        className: U()("tab__dashboard__header", {
                                            "tab__dashboard__header--listed": d && c
                                        }),
                                        children: [!c && (0, i.jsx)(es.Z, {
                                            className: "title",
                                            as: "h2",
                                            color: "prominent",
                                            size: d ? "sm" : "s",
                                            lineHeight: "xxl",
                                            weight: "bold",
                                            children: (0, f.NC)("Load or build your bot")
                                        }), (0, i.jsx)(es.Z, {
                                            as: "p",
                                            color: "prominent",
                                            lineHeight: "s",
                                            size: d ? "s" : "xxs",
                                            className: U()("subtitle", {
                                                "subtitle__has-list": c
                                            }),
                                            children: (0, f.NC)("Import a bot from your computer or Google Drive, build it from scratch, or start with a quick strategy.")
                                        })]
                                    }), (0, i.jsx)(lp, {
                                        has_dashboard_strategies: c,
                                        is_mobile: !d
                                    })]
                                })]
                            })
                        }), (0, i.jsx)(lv, {}), 1 === r && (0, i.jsx)(iB, {
                            is_mobile: !d
                        })]
                    })
                }),
                lb = () => (0, i.jsx)("div", {
                    className: "toolbar__section",
                    "data-testid": "dt_run_strategy",
                    children: (0, i.jsx)(t8, {
                        className: "toolbar__animation"
                    })
                }),
                ly = (0, r.Pi)(() => {
                    let {
                        load_modal: e,
                        dashboard: t
                    } = (0, j.oR)(), {
                        is_delete_modal_open: s,
                        onToggleDeleteDialog: a,
                        selected_strategy_id: n,
                        setDashboardStrategies: l,
                        loadStrategyToBuilder: r,
                        refreshStrategiesTheme: o,
                        resetBotBuilderStrategy: c
                    } = e, {
                        setOpenSettings: d
                    } = t, u = async (e, t) => {
                        t.length ? (n === e && await r(null == t ? void 0 : t[0]), await o()) : c()
                    }, h = async e => {
                        let t = (await (0, Z.getSavedWorkspaces)()).filter(t => t.id !== e);
                        l(t), ls().setItem("saved_workspaces", ln().compress(JSON.stringify(t))), await u(e, t), a(!1)
                    };
                    return (0, i.jsx)("div", {
                        children: (0, i.jsxs)(sB.Z, {
                            title: (0, f.NC)("Delete bot"),
                            is_visible: s,
                            confirm_button_text: (0, f.NC)("Yes, delete"),
                            onConfirm: () => {
                                h(n), a(!1), d(sX.tx.BOT_DELETE)
                            },
                            cancel_button_text: (0, f.NC)("No"),
                            onCancel: () => {
                                a(!1)
                            },
                            is_mobile_full_width: !1,
                            className: "dc-dialog__delete-strategy--delete",
                            has_close_icon: !0,
                            children: [(0, i.jsx)("div", {
                                children: (0, i.jsxs)(es.Z, {
                                    color: "prominent",
                                    lineHeight: "s",
                                    size: "xs",
                                    children: [(0, f.NC)("Your bot will be permanently deleted when you hit "), (0, i.jsx)("strong", {
                                        children: (0, f.NC)("Yes, delete.")
                                    })]
                                })
                            }), (0, i.jsx)("div", {
                                children: (0, i.jsx)(es.Z, {
                                    color: "prominent",
                                    lineHeight: "xl",
                                    size: "xs",
                                    children: (0, f.NC)("Are you sure you want to delete it?")
                                })
                            })]
                        })
                    })
                });
            var lf = s("30979");
            lu.OPEN, lr.Z, f.Xx, lu.SAVE, lc.Z, f.Xx, lu.DELETE, lo.Z, f.Xx;
            let lN = (0, r.Pi)(e => {
                    let {
                        workspace: t,
                        botId: s
                    } = e, {
                        dashboard: a,
                        load_modal: n,
                        toolbar: r
                    } = (0, j.oR)(), {
                        setActiveTab: o
                    } = a, {
                        dashboard_strategies: c = [],
                        previewed_strategy_id: d
                    } = n, u = l.useRef(null), {
                        isDesktop: h
                    } = (0, N.F)(), {
                        loadCustomStrategy: _
                    } = r, m = async () => {
                        let e = lf.D.findIndex(e => e.id === s); - 1 !== e && (await _(e), o(t2.ve.BOT_BUILDER))
                    };
                    return (0, i.jsxs)("div", {
                        className: U()("apollo-list__item"),
                        ref: u,
                        onClick: e => {
                            e.stopPropagation(), m()
                        },
                        children: [(0, i.jsx)("div", {
                            className: "apollo-list__item__label",
                            children: (0, i.jsxs)("div", {
                                className: "text-wrapper",
                                title: t.name,
                                children: [(0, i.jsx)("div", {
                                    className: "name_text",
                                    children: t.name
                                }), t.description && (0, i.jsx)(es.Z, {
                                    align: "left",
                                    as: "p",
                                    size: h ? "xs" : "xxs",
                                    color: "less-prominent",
                                    lineHeight: "l",
                                    children: t.description
                                })]
                            })
                        }), (0, i.jsx)("button", {
                            className: "load-bot-button",
                            onClick: e => {
                                e.stopPropagation(), m()
                            },
                            children: (0, i.jsx)(f.Xx, {
                                i18n_default_text: "Load Bot"
                            })
                        })]
                    }, t.id)
                }),
                lC = (0, r.Pi)(() => {
                    let {
                        isDesktop: e
                    } = (0, N.F)(), [t, s] = (0, l.useState)("popular");
                    if (!(null === Z.dollar_bot_list || void 0 === Z.dollar_bot_list ? void 0 : Z.dollar_bot_list.length)) return null;
                    let a = Z.dollar_bot_list.filter(e => "all" === t || e.folder === t);
                    return (0, i.jsxs)("div", {
                        className: "bot-list__apollo_container",
                        children: [(0, i.jsxs)("div", {
                            className: "bot-list__apollo_wrapper",
                            children: [(0, i.jsxs)("div", {
                                className: "category-filter",
                                children: [(0, i.jsx)("button", {
                                    className: "popular" === t ? "selected" : "",
                                    onClick: () => s("popular"),
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "Popular Bots"
                                    })
                                }), (0, i.jsx)("button", {
                                    className: "automated" === t ? "selected" : "",
                                    onClick: () => s("automated"),
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "Automated Bots"
                                    })
                                }), (0, i.jsx)("button", {
                                    className: "normal" === t ? "selected" : "",
                                    onClick: () => s("normal"),
                                    children: (0, i.jsx)(f.Xx, {
                                        i18n_default_text: "Normal Bots"
                                    })
                                })]
                            }), (0, i.jsx)("div", {
                                className: "apollo-list__wrapper",
                                children: a.map(e => (0, i.jsx)(lN, {
                                    workspace: {
                                        name: e.name,
                                        video_url: e.video_url,
                                        description: e.description
                                    },
                                    botId: e.id
                                }, e.id))
                            })]
                        }), (0, i.jsx)(ly, {})]
                    })
                }),
                lS = (0, r.Pi)(e => {
                    let {
                        is_mobile: t,
                        has_dashboard_strategies: s
                    } = e, {
                        dashboard: a
                    } = (0, j.oR)(), {
                        is_dialog_open: n
                    } = a;
                    return l.useMemo(() => (0, i.jsx)("div", {
                        className: U()("tab__dashboard__table", {
                            "tab__dashboard__table--minimized": s && t
                        }),
                        children: (0, i.jsx)(lC, {})
                    }), [n, s])
                }),
                lT = (0, r.Pi)(e => {
                    let {
                        handleTabChange: t
                    } = e, {
                        load_modal: s,
                        dashboard: a
                    } = (0, j.oR)(), {
                        dashboard_strategies: n
                    } = s, {
                        active_tab: r,
                        active_tour: o
                    } = a, c = !!(null == n ? void 0 : n.length), {
                        isDesktop: d,
                        isTablet: u
                    } = (0, N.F)();
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsx)("div", {
                            className: U()("tab__dashboard", {
                                "tab__dashboard--tour-active": o
                            }),
                            children: (0, i.jsx)("div", {
                                className: "tab__dashboard__apollo_content ",
                                children: (0, i.jsx)("div", {
                                    className: "quick-panel",
                                    children: (0, i.jsx)(lS, {
                                        has_dashboard_strategies: c,
                                        is_mobile: !d
                                    })
                                })
                            })
                        }), 1 === r && (0, i.jsx)(iB, {
                            is_mobile: !d
                        })]
                    })
                });
            var lk = s("70361");
            let lw = (0, r.Pi)(() => {
                let [e, t] = (0, l.useState)(!1), s = () => {
                    t(!e)
                };
                return (0, i.jsxs)("div", {
                    children: [(0, i.jsxs)("div", {
                        className: "risk-disclaimer-icon",
                        onClick: s,
                        children: [(0, i.jsx)(lk.gJy, {
                            className: "icon"
                        }), " ", (0, i.jsx)("b", {
                            children: "Risk Disclaimer"
                        })]
                    }), e && (0, i.jsx)("div", {
                        className: "popup_disclaimer",
                        onClick: s,
                        children: (0, i.jsxs)("div", {
                            className: "popup-content",
                            onClick: e => e.stopPropagation(),
                            children: [(0, i.jsx)("span", {
                                className: "close-button",
                                onClick: s,
                                children: "\xd7"
                            }), (0, i.jsx)("h2", {
                                children: "Risk Disclaimer"
                            }), (0, i.jsx)("p", {
                                children: "Deriv offers complex derivatives, such as options and contracts for difference (“CFDs”). These products may not be suitable for all clients, and trading them puts you at risk. Please make sure that you understand the following risks before trading Deriv products:"
                            }), (0, i.jsxs)("ul", {
                                children: [(0, i.jsx)("li", {
                                    children: "You may lose some or all of the money you invest in the trade."
                                }), (0, i.jsx)("li", {
                                    children: "If your trade involves currency conversion, exchange rates will affect your profit and loss."
                                })]
                            }), (0, i.jsx)("p", {
                                children: "You should never trade with borrowed money or with money that you cannot afford to lose."
                            }), (0, i.jsx)("div", {
                                className: "bottom_btn",
                                children: (0, i.jsx)("button", {
                                    className: "dont_show_again",
                                    onClick: s,
                                    children: "I Understand"
                                })
                            })]
                        })
                    })]
                })
            });
            var lE = s("82076"),
                lI = s("83253"),
                lA = s.n(lI),
                lR = s("23638");
            let lD = (0, r.Pi)(() => {
                var e, t;
                let {
                    ui: {
                        is_dark_mode_on: s
                    }
                } = (0, j.oR)(), [a, n] = l.useState([]), [r, o] = l.useState(""), [c, d] = l.useState([]), [u, h] = l.useState(!1), [_, x] = l.useState(""), [p, v] = l.useState(Z.config_v1.demo_copy_trading.is_active), [g, b] = l.useState([]), [y, N] = l.useState(""), [C, S] = l.useState(!1), [T, k] = l.useState(!1), [w, E] = l.useState(!1), [I, A] = l.useState(!1), R = l.useRef(!1), [D, O] = l.useState(Z.config_v1.copy_trading.is_active), {
                    client: L
                } = (0, j.oR)(), {
                    accounts: M,
                    all_accounts_balance: U
                } = L, F = Object.values(M || {}).find(e => !e.is_virtual), P = F ? null == U ? void 0 : null === (t = U.accounts) || void 0 === t ? void 0 : null === (e = t[F.loginid]) || void 0 === e ? void 0 : e.balance : 0, z = null == F ? void 0 : F.currency, $ = (0, m.O$T)(z), [B, G] = l.useState(""), [V, X] = l.useState("");
                l.useEffect(() => {
                    if (q(), (0, Z.tokenExists)((0, Z.getToken)().account_id).then(e => {
                            e ? (R.current = !0, E(!0)) : (R.current = !1, E(!1))
                        }), "undefined" != typeof localStorage) {
                        let e = localStorage.getItem("accountsList"),
                            t = e ? JSON.parse(e) : void 0;
                        if (t) {
                            let e = Object.keys(t).filter(e => e.startsWith("CR"));
                            if (b(e), e.length > 0) {
                                let t = e[0];
                                N(t), Z.config_v1.demo_copy_trading.login_id = t
                            }
                        }
                    }
                }, []), l.useEffect(() => {
                    q()
                }, [s]), l.useEffect(() => {
                    if (Z.api_base.api && !I) {
                        A(!0);
                        let e = Z.api_base.api.onMessage().subscribe(e => {
                            let {
                                data: t
                            } = e;
                            if ("copy_start" === t.msg_type) {
                                let {
                                    copy_start: e
                                } = t;
                                1 == e && (R.current = !0, E(!0), (0, Z.addCtProgramTokens)([(0, Z.getToken)().account_id]))
                            }
                            if ("copy_stop" === t.msg_type) {
                                let {
                                    copy_stop: e
                                } = t;
                                1 == e && (R.current = !1, E(!1), (0, Z.removeCtToken)((0, Z.getToken)().account_id))
                            }
                        });
                        Z.api_base.pushSubscription(e)
                    }
                }, [Z.api_base.api]);
                let H = e => {
                        v(e), Z.config_v1.demo_copy_trading.is_active = e;
                        let t = e ? "started" : "stopped";
                        X(`Demo to Real copy trading ${t} successfully`), setTimeout(() => {
                            X("")
                        }, 1e4)
                    },
                    q = async () => {
                        (0, Z.retrieveListItem)().then(e => {
                            if (e) {
                                let t = Array.isArray(e[0]) ? e[0] : e;
                                n(t.length > 0 ? t : [])
                            }
                        })
                    },
                    Y = async () => {
                        if ((0, Z.getToken)().account_id) try {
                            let e = r.trim();
                            await (0, Z.updateCopyTradingTokens)(e), (0, Z.saveListItemToStorage)(e), n(t => [e, ...t])
                        } catch (e) {
                            void 0 !== e.error ? (x(e.error.message), h(!0)) : console.log(e)
                        } finally {
                            o("")
                        } else x((0, f.NC)("It seems you haven't logged in, please login in and try adding the token again.")), h(!0)
                    },
                    W = e => {
                        (0, Z.deleteItemFromStorage)(e), (0, Z.removeCopyTradingTokens)(e), d(t => [...t, e])
                    },
                    K = e => {
                        n(a.filter(t => t !== e)), d(t => t.filter(t => t !== e))
                    },
                    J = async () => {
                        S(!0);
                        let e = await (0, Z.reCallTheTokens)();
                        void 0 !== e ? n(e) : n([]), S(!1)
                    },
                    [Q, ee] = (0, l.useState)(!1),
                    [et, es] = (0, l.useState)(""),
                    ea = e => {
                        es(e), ee(!0)
                    },
                    en = () => {
                        ee(!1), es("")
                    };
                return (0, i.jsxs)("div", {
                    className: "main_copy",
                    children: [u && (0, i.jsx)(sB.Z, {
                        title: (0, f.NC)("Error while adding new token!"),
                        confirm_button_text: (0, f.NC)("OK"),
                        onConfirm: () => h(!1),
                        is_visible: u,
                        children: _
                    }), (0, i.jsxs)("div", {
                        className: "ena_DC",
                        children: [(0, i.jsxs)("div", {
                            className: "enable_disable",
                            children: [(0, i.jsx)("button", {
                                className: `copy-trading-btn ${p?"stop":"start"}`,
                                onClick: () => {
                                    H(!p)
                                },
                                children: p ? "Stop Demo to Real Copy Trading" : "Start Demo to Real Copy Trading"
                            }), (0, i.jsxs)("div", {
                                onClick: () => ea("https://www.youtube.com/embed/gsWzKmslEnY"),
                                style: {
                                    cursor: "pointer",
                                    textAlign: "center",
                                    background: "#d5e2eb",
                                    borderRadius: "5px"
                                },
                                children: [(0, i.jsx)(lk.V2E, {
                                    size: 30,
                                    style: {
                                        color: "#FF0000"
                                    }
                                }), (0, i.jsx)("div", {
                                    style: {
                                        fontSize: "12px",
                                        color: "#333"
                                    },
                                    children: "Tutorial"
                                })]
                            })]
                        }), (0, i.jsxs)("div", {
                            className: "realaccount-card",
                            children: [(0, i.jsx)("span", {
                                className: "realaccount-label",
                                children: (null == F ? void 0 : F.loginid) ? `${F.loginid}` : "CR*****"
                            }), (0, i.jsx)("span", {
                                className: "realaccount-amount",
                                children: z ? `${(0,m.lby)(z,P??0,!0)} ${$}` : "******"
                            })]
                        }), V && (0, i.jsx)("div", {
                            className: "success-message",
                            children: V
                        })]
                    }), (0, i.jsx)("header", {
                        className: `title ${s&&"dark_active"}`,
                        children: (0, i.jsx)("small", {
                            children: (0, f.NC)("Add tokens to Replicator")
                        })
                    }), (0, i.jsxs)("div", {
                        className: "copytrading",
                        children: [(0, i.jsxs)("div", {
                            className: `input_content ${s&&"dark_active"}`,
                            children: [(0, i.jsxs)("div", {
                                className: "input_items",
                                children: [(0, i.jsx)("input", {
                                    type: "text",
                                    value: r,
                                    className: "tokens-input",
                                    onChange: e => {
                                        o(e.target.value)
                                    },
                                    placeholder: (0, f.NC)("Enter Client token")
                                }), (0, i.jsx)("button", {
                                    className: "token-action-btn",
                                    onClick: () => Y(),
                                    children: "Add"
                                }), (0, i.jsxs)("button", {
                                    className: "token-action-btn",
                                    onClick: () => J(),
                                    children: [C ? "syncing" : "Sync ", " ", (0, i.jsx)(lR.Qxo, {})]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "enable_disable",
                                children: [(0, i.jsx)("button", {
                                    className: `copy-trading-btn ${Z.config_v1.copy_trading.is_active?"stop":"start"}`,
                                    onClick: () => {
                                        let e = !D;
                                        O(e), Z.config_v1.copy_trading.is_active = e;
                                        let t = a.length,
                                            s = e ? "started" : "stopped";
                                        G(`Copy trading ${s} successfully for all ${t} tokens!`), setTimeout(() => {
                                            G("")
                                        }, 1e4)
                                    },
                                    children: Z.config_v1.copy_trading.is_active ? "Stop Copy Trading" : "Start Copy Trading"
                                }), (0, i.jsx)("button", {
                                    onClick: () => ea("https://www.youtube.com/embed/gsWzKmslEnY"),
                                    style: {
                                        cursor: "pointer"
                                    },
                                    children: (0, i.jsx)(lk.V2E, {
                                        style: {
                                            color: "#FF0000"
                                        }
                                    })
                                })]
                            }), B && (0, i.jsx)("div", {
                                className: "success-message",
                                children: B
                            })]
                        }), (0, i.jsx)("div", {
                            className: `tokens_container ${s&&"dark_active"}`,
                            children: (0, i.jsxs)("ul", {
                                className: "tokens-list",
                                children: [(0, i.jsxs)("h2", {
                                    children: [(0, f.NC)("Total Clients added:"), " ", a.length]
                                }), a.length > 0 ? a.map((e, t) => (0, i.jsxs)("li", {
                                    className: `token ${c.includes(e)?"fall":""}`,
                                    onTransitionEnd: () => K(e),
                                    children: [(0, i.jsxs)("span", {
                                        className: "token-number",
                                        children: [t + 1, "."]
                                    }), " ", (0, i.jsx)("span", {
                                        className: "token-item",
                                        children: e
                                    }), (0, i.jsx)("button", {
                                        className: "trash-btn",
                                        onClick: () => W(e),
                                        children: (0, i.jsx)(lE.Xm5, {})
                                    })]
                                }, e)) : (0, i.jsx)("div", {
                                    className: `token_info ${s&&"dark_active"}`,
                                    children: (0, f.NC)("No tokens added yet")
                                })]
                            })
                        })]
                    }), (0, i.jsxs)(lA(), {
                        isOpen: Q,
                        onRequestClose: en,
                        style: {
                            overlay: {
                                backgroundColor: "rgba(0, 0, 0, 0.8)",
                                zIndex: 1e3
                            },
                            content: {
                                top: "50%",
                                left: "50%",
                                right: "auto",
                                bottom: "auto",
                                transform: "translate(-50%, -50%)",
                                width: "90vw",
                                height: "80vh",
                                border: "none",
                                borderRadius: "8px",
                                padding: "8px",
                                boxShadow: "0 4px 15px rgba(0,0,0,0.3)",
                                background: "#fff",
                                zIndex: 1001,
                                position: "relative"
                            }
                        },
                        children: [(0, i.jsx)("span", {
                            onClick: en,
                            style: {
                                position: "fixed",
                                top: "10px",
                                right: "10px",
                                fontSize: "30px",
                                fontWeight: "bold",
                                cursor: "pointer",
                                color: "#000",
                                background: "transparent",
                                border: "none"
                            },
                            children: "X"
                        }), (0, i.jsx)("h2", {
                            style: {
                                color: "#000",
                                fontSize: "20px",
                                textAlign: "center",
                                margin: "5px 0"
                            },
                            children: "Copytrading Tutorial"
                        }), (0, i.jsx)("iframe", {
                            width: "100%",
                            height: "100%",
                            src: et,
                            title: "YouTube video player",
                            frameBorder: "0",
                            allow: "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",
                            allowFullScreen: !0
                        })]
                    })]
                })
            });
            var lO = s("38609"),
                lL = s("45418"),
                lM = s("1142"),
                lU = s("92036"),
                lF = s("11750"),
                lP = s("72589");
            let lZ = (e, t, s) => {
                    let a = e.length,
                        n = e.filter(e => e % 2 == 0).length,
                        i = e.filter(e => e % 2 != 0).length,
                        l = e.filter(e => e > s).length,
                        r = e.filter(e => e <= s).length,
                        o = e.filter(e => e === s).length,
                        c = e.filter(e => e !== s).length,
                        d = 0,
                        u = 0;
                    for (let e = 1; e < t.length; e++) t[e] > t[e - 1] ? d++ : t[e] < t[e - 1] && u++;
                    let h = d + u,
                        _ = h > 0 ? d / h * 100 : 0;
                    return {
                        evenPercentage: n / a * 100,
                        oddPercentage: i / a * 100,
                        overPercentage: l / a * 100,
                        underPercentage: r / a * 100,
                        matchesPercentage: o / a * 100,
                        differsPercentage: c / a * 100,
                        risePercentage: _,
                        fallPercentage: h > 0 ? u / h * 100 : 0
                    }
                },
                lz = {
                    call: "CALL",
                    put: "PUT",
                    even: "DIGITEVEN",
                    odd: "DIGITODD",
                    over: "DIGITOVER",
                    under: "DIGITUNDER",
                    matches: "DIGITMATCH",
                    differs: "DIGITDIFF"
                },
                l$ = (0, r.Pi)(() => {
                    let [e, t] = (0, l.useState)("AUTOLDP"), [s, a] = (0, l.useState)(!1), [n, r] = (0, l.useState)("Updating..."), [o, c] = (0, l.useState)([]), [d, u] = (0, l.useState)(!0), [h, _] = (0, l.useState)(0), [m, x] = (0, l.useState)(1e3), [p, v] = (0, l.useState)([]), [g, b] = (0, l.useState)(1.2), [y, f] = (0, l.useState)(!1), [C, S] = (0, l.useState)(1), [T, k] = (0, l.useState)(.5), [w, E] = (0, l.useState)(""), [I, A] = (0, l.useState)("R_100"), [R, D] = (0, l.useState)("R_100"), [O, L] = (0, l.useState)(2), [M, F] = (0, l.useState)(!1), [P, z] = (0, l.useState)(!1), [$, B] = (0, l.useState)(!1), [G, V] = (0, l.useState)(""), [X, H] = (0, l.useState)(!1), [q, Y] = (0, l.useState)(2), [W, K] = (0, l.useState)(2), [J, Q] = (0, l.useState)(!1), [ee, et] = (0, l.useState)(!0), [es, ea] = (0, l.useState)(!1), [en, ei] = (0, l.useState)(""), [el, er] = (0, l.useState)(!1), [eo, ec] = (0, l.useState)(!1), [ed, eu] = (0, l.useState)(!1), [eh, e_] = (0, l.useState)(null), [em, ex] = (0, l.useState)(3), [ep, ej] = (0, l.useState)("greater than"), [ev, eg] = (0, l.useState)("DIGITOVER"), [eb, ey] = (0, l.useState)(!1), [ef, eN] = (0, l.useState)(!1), [eC, eS] = (0, l.useState)(5), [eT, ek] = (0, l.useState)(5), [ew, eE] = (0, l.useState)("even"), [eI, eA] = (0, l.useState)("DIGITEVEN"), [eR, eD] = (0, l.useState)(!1), [eO, eL] = (0, l.useState)(!1), [eM, eU] = (0, l.useState)(null), [eF, eP] = (0, l.useState)(5), [eZ, ez] = (0, l.useState)("rise"), [e$, eB] = (0, l.useState)("CALL"), [eG, eV] = (0, l.useState)(!1), [eX, eH] = (0, l.useState)(!1), [eq, eY] = (0, l.useState)(null), [eW, eK] = (0, l.useState)(!1), [eJ, eQ] = (0, l.useState)(5), e0 = {
                        OVER5UNDER4: {
                            over: 5,
                            under: 4,
                            label: "Over 5 / Under 4"
                        },
                        OVER4UNDER4: {
                            over: 4,
                            under: 4,
                            label: "Over 4 / Under 4"
                        },
                        OVER5UNDER5: {
                            over: 5,
                            under: 5,
                            label: "Over 5 / Under 5"
                        }
                    }, [e1, e5] = (0, l.useState)({
                        over: 5,
                        under: 4
                    }), e2 = (0, l.useRef)(null);
                    (0, l.useRef)(g);
                    let e8 = (0, l.useRef)(y),
                        e3 = (0, l.useRef)([]),
                        e4 = (0, l.useRef)(0),
                        e7 = (0, l.useRef)(.5),
                        e6 = (0, l.useRef)(["DIGITODD", "DIGITEVEN", "DIGITOVER", "DIGITUNDER", "DIGITDIFF"]),
                        e9 = (0, l.useRef)(2),
                        te = (0, l.useRef)(2),
                        tt = (0, l.useRef)(0),
                        ts = (0, l.useRef)(!1);
                    (0, l.useRef)(!0);
                    let {
                        ui: ta
                    } = (0, j.oR)(), {
                        transactions: tn,
                        run_panel: ti
                    } = (0, j.oR)(), {
                        registerBotListeners: tl,
                        unregisterBotListeners: tr
                    } = ti, {
                        is_dark_mode_on: to
                    } = ta, {
                        isDesktop: tc,
                        isMobile: td
                    } = (0, N.F)(), {
                        is_drawer_open: tu
                    } = ti, {
                        updateResultsCompletedContract: th
                    } = tn, [t_, tm] = (0, l.useState)([]), tx = e => {
                        tm(t => t.includes(e) ? t.filter(t => t !== e) : [...t, e])
                    };
                    (0, l.useEffect)(() => {
                        tl(), tj();
                        let e = localStorage.getItem("no_of_ticks"),
                            s = localStorage.getItem("active_card");
                        return null !== e && x(parseFloat(e)), null !== s && t(s), () => {
                            tr()
                        }
                    }, []), (0, l.useEffect)(() => {
                        R !== I && Z.api_base4.api.send({
                            ticks_history: I,
                            adjust_start_time: 1,
                            count: 5e3,
                            end: "latest",
                            start: 1,
                            style: "ticks"
                        }), D(I)
                    }, [I]);
                    let tp = (e, t) => {
                            let s = e.toFixed(t);
                            return Number(s = String(s).slice(-1))
                        },
                        tj = async () => {
                            if (await new Promise(e => setTimeout(e, 5e3)), !s && (Z.api_base4.api.send({
                                    active_symbols: "brief",
                                    product_type: "basic"
                                }), a(!0)), Z.api_base4.api) {
                                let e = Z.api_base4.api.onMessage().subscribe(e => {
                                    let {
                                        data: t
                                    } = e;
                                    if ("tick" === t.msg_type) {
                                        let {
                                            tick: e
                                        } = t, {
                                            ask: s,
                                            pip_size: a
                                        } = e;
                                        _(tp(s, a)), r(s), ty(), c(e => [...e, s])
                                    }
                                    if ("history" === t.msg_type) {
                                        let {
                                            history: e,
                                            pip_size: s
                                        } = t;
                                        L(s);
                                        let {
                                            prices: a
                                        } = e, {
                                            ticks_history: n
                                        } = t.echo_req;
                                        c(a), A(n), Z.api_base4.api.send({
                                            ticks: n,
                                            subscribe: 1
                                        })
                                    }
                                    if ("active_symbols" === t.msg_type) {
                                        let {
                                            active_symbols: e
                                        } = t, s = e.filter(e => "synthetics" === e.subgroup);
                                        s.sort((e, t) => e.display_order - t.display_order), Z.api_base4.api.send({
                                            ticks_history: s[0].symbol,
                                            adjust_start_time: 1,
                                            count: 5e3,
                                            end: "latest",
                                            start: 1,
                                            style: "ticks"
                                        }), v(s)
                                    }
                                });
                                Z.api_base4.pushSubscription(e)
                            }
                            if (Z.api_base.api) {
                                let e = Z.api_base.api.onMessage().subscribe(e => {
                                    let {
                                        data: t
                                    } = e;
                                    if ("proposal_open_contract" === t.msg_type) {
                                        let e = t.proposal_open_contract;
                                        e_({
                                            status: e.is_sold ? "sold" : "buy",
                                            profit: e.profit
                                        });
                                        let {
                                            proposal_open_contract: s
                                        } = t, a = s.contract_type;
                                        e6.current.includes(a) && s.is_sold && (!e3.current.includes(s.contract_id) && ts.current && (tt.current += s.profit, tt.current, tt.current >= e9.current ? tb() : tt.current <= -te.current && tb()), "lost" === s.status && !e3.current.includes(s.contract_id) && (e3.current.push(s.contract_id), e8.current = !1, f(!1)), e8.current && !e3.current.includes(s.contract_id) && (e8.current = !1, f(!1), e3.current.push(s.contract_id))), th(s)
                                    }
                                });
                                Z.api_base.pushSubscription(e)
                            }
                            E(Z.api_base.account_info.currency)
                        },
                        tv = (e, t) => {
                            es ? Z.api_base.api.send({
                                buy_contract_for_multiple_accounts: "1",
                                tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(en).token],
                                price: T,
                                parameters: {
                                    amount: T,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: w,
                                    duration: C,
                                    duration_unit: "t",
                                    symbol: I
                                }
                            }) : Z.api_base.api.send({
                                buy: "1",
                                price: T,
                                subscribe: 1,
                                parameters: {
                                    amount: T,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: w,
                                    duration: C,
                                    duration_unit: "t",
                                    symbol: I
                                }
                            })
                        },
                        tg = (e, t) => {
                            es ? Z.api_base.api.send({
                                buy_contract_for_multiple_accounts: "1",
                                tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(en).token],
                                price: T,
                                parameters: {
                                    amount: T,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: w,
                                    duration: C,
                                    duration_unit: "t",
                                    symbol: I,
                                    barrier: t.toString()
                                }
                            }) : Z.api_base.api.send({
                                buy: "1",
                                price: T,
                                subscribe: 1,
                                parameters: {
                                    amount: T,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: "USD",
                                    duration: C,
                                    duration_unit: "t",
                                    symbol: I,
                                    barrier: t.toString()
                                }
                            })
                        },
                        tb = () => {
                            ey(!1), e4.current = 0, tt.current = 0, k(e7.current)
                        },
                        ty = () => {
                            c(e => e.slice(1))
                        },
                        tf = e => {
                            let t = e.target.value;
                            k("" === t ? "" : Number(t)), e7.current = "" === t ? "" : Number(t)
                        },
                        tN = e => {
                            let t = e.target.value;
                            if ("" === t) S("");
                            else {
                                let e = Number(t);
                                !isNaN(e) && S(Math.max(1, Math.min(9, e)))
                            }
                        },
                        [tC, tS] = l.useState([]),
                        [tT, tk] = l.useState("");
                    l.useEffect(() => {
                        if ("undefined" != typeof localStorage) try {
                            let e = JSON.parse(localStorage.getItem("accountsList")) || void 0,
                                t = Object.keys(e).filter(e => e.startsWith("CR"));
                            tS(t), t.length > 0 && (tk(t[0]), ei(t[0]))
                        } catch (e) {
                            console.error("Error while parsing accounts list from localStorage", e)
                        }
                    }, []);
                    let tw = (() => {
                            let e = o.slice(-m),
                                t = [];
                            return e.forEach(e => {
                                let s = tp(e, O);
                                t.push(s)
                            }), t
                        })(),
                        tE = o.slice(-m),
                        tI = (() => {
                            let e = o.slice(-1e3),
                                t = [];
                            return e.forEach(e => {
                                let s = tp(e, O);
                                t.push(s)
                            }), t
                        })(),
                        {
                            evenPercentage: tA,
                            oddPercentage: tR,
                            overPercentage: tD,
                            underPercentage: tO,
                            matchesPercentage: tL,
                            differsPercentage: tM,
                            risePercentage: tU,
                            fallPercentage: tF
                        } = lZ(tw, tE, "number" == typeof eJ ? eJ : 0),
                        tP = Array.from({
                            length: 10
                        }, (e, t) => lZ(tI, tE, t).matchesPercentage),
                        tZ = [...tP].slice().sort((e, t) => t - e),
                        tz = tP.indexOf(tZ[0]),
                        t$ = tP.indexOf(tZ[1]),
                        tB = tP.indexOf(tZ[tZ.length - 1]),
                        tG = e => tz > e && t$ > e && tB < e,
                        tV = e => tz < e && t$ < e && tB > e,
                        tX = e => {
                            let t = tw.slice(-3);
                            return 3 === t.length && t.every(t => t < e)
                        },
                        tH = e => {
                            let t = tw.slice(-3);
                            return 3 === t.length && t.every(t => t > e)
                        },
                        tq = e => {
                            let t = tG(e),
                                s = tX(e);
                            return t ? {
                                text: s ? "ENTRY POINT CONFIRMED" : "SIGNAL FOUND (Waiting for entry)",
                                className: s ? "signal-confirmed" : "signal-ready",
                                showEntryPoint: !0
                            } : {
                                text: "SIGNAL NOT READY",
                                className: "signal-waiting",
                                showEntryPoint: !1
                            }
                        },
                        tY = e => {
                            let t = tV(e),
                                s = tH(e);
                            return t ? {
                                text: s ? "ENTRY POINT CONFIRMED" : "SIGNAL FOUND (Waiting for entry)",
                                className: s ? "signal-confirmed" : "signal-ready",
                                showEntryPoint: !0
                            } : {
                                text: "SIGNAL NOT READY",
                                className: "signal-waiting",
                                showEntryPoint: !1
                            }
                        },
                        tW = e => tw.filter(t => t > e).length / tw.length * 100,
                        tK = e => tw.filter(t => t <= e).length / tw.length * 100,
                        tJ = e => {
                            let t = e.slice(-5);
                            return 5 === t.length && t.every(e => e % 2 != 0)
                        },
                        tQ = e => {
                            let t = e.slice(-5);
                            return 5 === t.length && t.every(e => e % 2 == 0)
                        },
                        t0 = e => {
                            if (e.length < 5) return !1;
                            for (let t = e.length - 5; t < e.length - 1; t++)
                                if (e[t] >= e[t + 1]) return !1;
                            return !0
                        },
                        t1 = e => {
                            if (e.length < 5) return !1;
                            for (let t = e.length - 5; t < e.length - 1; t++)
                                if (e[t] <= e[t + 1]) return !1;
                            return !0
                        },
                        t5 = () => {
                            if (tE.length < 2) return "No data";
                            let e = 1,
                                t = tE[tE.length - 1] > tE[tE.length - 2] ? "R" : "F";
                            for (let s = tE.length - 2; s >= 1; s--)
                                if ((tE[s] > tE[s - 1] ? "R" : "F") === t) e++;
                                else break;
                            return `${e}x ${"R"===t?"Fall":"Rise"}`
                        },
                        t2 = e => tw.slice(-e).map((e, t) => (0, i.jsx)("div", {
                            className: `digit-box ${e%2==0?"even":"odd"}`,
                            children: e
                        }, t)),
                        t8 = () => {
                            if (0 === tw.length) return "No data";
                            let e = 1,
                                t = tw[tw.length - 1] % 2 == 0;
                            for (let s = tw.length - 2; s >= 0; s--)
                                if (tw[s] % 2 == 0 === t) e++;
                                else break;
                            return `${e}x ${t?"even":"odd"}`
                        },
                        t3 = Array.from({
                            length: 8
                        }, (e, t) => t + 1).flatMap(e => [`over${e}Strategy`, `under${e}Strategy`]),
                        [t4, t7] = (0, l.useState)("even");
                    return (0, l.useEffect)(() => {
                        if (!eb) return;
                        let e = lz[t4];
                        ["over", "under", "matches", "differs"].includes(t4) ? tg(e, eJ) : tv(e, !0)
                    }, [n, eb, t4, eJ]), (0, i.jsx)("div", {
                        className: U()("dashboard__chart-wrapper", {
                            "dashboard__chart-wrapper--expanded": tu && tc
                        }),
                        dir: "ltr",
                        children: (0, i.jsxs)("div", {
                            className: "d-trader",
                            style: {
                                color: to ? "#fff" : "#000"
                            },
                            children: [(0, i.jsxs)("div", {
                                className: "market-settings-container",
                                children: [(0, i.jsx)("div", {
                                    className: "market-card",
                                    onClick: e => {
                                        e2.current && !e2.current.contains(e.target) && e2.current.focus()
                                    },
                                    children: (0, i.jsxs)("div", {
                                        className: "market-center",
                                        children: [(0, i.jsx)("select", {
                                            ref: e2,
                                            id: "market-select",
                                            className: "market-select",
                                            onChange: e => {
                                                let t = e.target.value;
                                                Z.api_base4.api.forgetAll("ticks").then(() => {
                                                    r("Loading..."), A(t)
                                                })
                                            },
                                            children: p.length > 0 ? p.map(e => (0, i.jsx)("option", {
                                                value: e.symbol,
                                                children: e.display_name
                                            }, e.symbol)) : (0, i.jsx)("option", {
                                                value: "",
                                                children: "SELECT MARKET"
                                            })
                                        }), (0, i.jsx)("div", {
                                            className: "current-tick",
                                            children: n
                                        })]
                                    })
                                }), (0, i.jsxs)("div", {
                                    className: "ticks-input",
                                    children: [(0, i.jsx)("small", {
                                        children: "No of Ticks"
                                    }), (0, i.jsx)("input", {
                                        type: "number",
                                        value: m,
                                        onChange: e => {
                                            let t = e.target.value;
                                            x("" === t ? "" : Number(t)), localStorage.setItem("no_of_ticks", t)
                                        }
                                    })]
                                })]
                            }), (0, i.jsx)("div", {
                                className: "trade-interface",
                                children: (0, i.jsx)("div", {
                                    className: "strategy-container",
                                    children: ["overUnderStrategy", "tradeEveryTickStrategy", "over5Under4HedgeStrategy", "evenStrategy", "oddStrategy", "riseStrategy", "fallStrategy", ...t3].sort((e, t) => {
                                        let s = t_.includes(e),
                                            a = t_.includes(t);
                                        return s && !a ? -1 : !s && a ? 1 : 0
                                    }).map(e => {
                                        if ("overUnderStrategy" === e) return (0, i.jsxs)("div", {
                                            className: "strategy-card",
                                            children: [(0, i.jsxs)("div", {
                                                className: "card-header",
                                                children: [(0, i.jsx)("button", {
                                                    className: `pin-button ${t_.includes("overUnderStrategy")?"pinned":""}`,
                                                    onClick: () => tx("overUnderStrategy"),
                                                    title: t_.includes("overUnderStrategy") ? "Unpin card" : "Pin card",
                                                    children: t_.includes("overUnderStrategy") ? "\uD83D\uDCCC" : "\uD83D\uDCCD"
                                                }), (0, i.jsx)("h4", {
                                                    children: "Over/Under Combo"
                                                })]
                                            }), (0, i.jsxs)("div", {
                                                className: "combo-predictions",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "prediction-group",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "prediction-header",
                                                        children: [(0, i.jsx)(lO.Z, {}), (0, i.jsxs)("span", {
                                                            children: ["Over", (0, i.jsx)("div", {
                                                                className: "prediction-percentage",
                                                                children: "number" == typeof e1.over ? `${tW(e1.over).toFixed(2)}%` : "--"
                                                            })]
                                                        })]
                                                    }), (0, i.jsx)("div", {
                                                        className: "prediction-input",
                                                        children: (0, i.jsx)("input", {
                                                            type: "number",
                                                            min: "1",
                                                            max: "9",
                                                            value: e1.over,
                                                            onChange: e => e5({ ...e1,
                                                                over: "" === e.target.value ? "" : Number(e.target.value)
                                                            })
                                                        })
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "prediction-group",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "prediction-header",
                                                        children: [(0, i.jsx)(lL.Z, {}), (0, i.jsxs)("span", {
                                                            children: ["Under", (0, i.jsx)("div", {
                                                                className: "prediction-percentage",
                                                                children: "number" == typeof e1.under ? `${tK(e1.under).toFixed(2)}%` : "--"
                                                            })]
                                                        })]
                                                    }), (0, i.jsx)("div", {
                                                        className: "prediction-input",
                                                        children: (0, i.jsx)("input", {
                                                            type: "number",
                                                            min: "1",
                                                            max: "9",
                                                            value: e1.under,
                                                            onChange: e => e5({ ...e1,
                                                                under: "" === e.target.value ? "" : Number(e.target.value)
                                                            })
                                                        })
                                                    })]
                                                })]
                                            }), (0, i.jsx)("div", {
                                                className: "digits-container",
                                                children: tw.length > 0 ? tw.slice(-6).map((e, t) => (0, i.jsx)("div", {
                                                    className: `digit-box ${4===e||5===e?"signal-digit":""}`,
                                                    children: e
                                                }, t)) : (0, i.jsx)("div", {
                                                    className: "no-digits",
                                                    children: "Waiting for data..."
                                                })
                                            }), (0, i.jsxs)("div", {
                                                className: "mobile-widget duration_amount_selector",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "mobile-widget__duration mobile-widget__button",
                                                    children: [(0, i.jsx)("small", {
                                                        children: "Ticks"
                                                    }), (0, i.jsx)("input", {
                                                        className: "custom_prediction",
                                                        type: "number",
                                                        id: "contract_duration",
                                                        value: C,
                                                        onChange: tN,
                                                        min: "1",
                                                        max: "9",
                                                        defaultValue: 1
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "mobile-widget__amount mobile-widget__button",
                                                    children: [(0, i.jsx)("small", {
                                                        children: "Stake"
                                                    }), (0, i.jsx)("input", {
                                                        className: "custom_prediction",
                                                        type: "number",
                                                        value: T,
                                                        onChange: tf
                                                    })]
                                                })]
                                            }), (0, i.jsxs)("div", {
                                                className: "signal-status",
                                                children: ["Signal Status:", (() => {
                                                    let e = tw.slice(-4).reverse(),
                                                        t = e => 4 === e || 5 === e;
                                                    if (e.length >= 4 && e.slice(0, 4).every(t)) return (0, i.jsx)("div", {
                                                        className: "signal-full",
                                                        children: "STRONG SIGNAL"
                                                    });
                                                    if (e.length >= 3 && e.slice(0, 3).every(t)) return (0, i.jsx)("div", {
                                                        className: "signal-high",
                                                        children: "GOOD SIGNAL"
                                                    });
                                                    if (e.length >= 2 && e.slice(0, 2).every(t)) return (0, i.jsx)("div", {
                                                        className: "signal-medium",
                                                        children: "MODERATE SIGNAL"
                                                    });
                                                    else if (e.length >= 1 && t(e[0])) return (0, i.jsx)("div", {
                                                        className: "signal-low",
                                                        children: "WEAK SIGNAL"
                                                    });
                                                    else return (0, i.jsx)("div", {
                                                        className: "signal-none",
                                                        children: "NO SIGNAL"
                                                    })
                                                })()]
                                            }), (0, i.jsxs)("button", {
                                                className: "Purchase combo",
                                                onClick: () => {
                                                    tg("DIGITOVER", e1.over), tg("DIGITUNDER", e1.under)
                                                },
                                                children: [(0, i.jsxs)("div", {
                                                    className: "btn-purchase__top",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "btn-purchase__icon_wrapper",
                                                        children: [(0, i.jsx)(lO.Z, {}), (0, i.jsx)(lL.Z, {})]
                                                    }), (0, i.jsx)("div", {
                                                        className: "btn-purchase__text_wrapper",
                                                        children: (0, i.jsx)("span", {
                                                            children: "Purchase Both"
                                                        })
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "btn-purchase__bottom",
                                                    children: ["Total Stake: $", (2 * Number(T)).toFixed(2)]
                                                })]
                                            })]
                                        }, "overUnderStrategy");
                                        if ("tradeEveryTickStrategy" === e) return (0, i.jsxs)("div", {
                                            className: "strategy-card",
                                            children: [(0, i.jsxs)("div", {
                                                className: "card-header",
                                                children: [(0, i.jsx)("button", {
                                                    className: `pin-button ${t_.includes("tradeEveryTickStrategy")?"pinned":""}`,
                                                    onClick: () => tx("tradeEveryTickStrategy"),
                                                    title: t_.includes("tradeEveryTickStrategy") ? "Unpin card" : "Pin card",
                                                    children: t_.includes("tradeEveryTickStrategy") ? "\uD83D\uDCCC" : "\uD83D\uDCCD"
                                                }), (0, i.jsx)("h4", {
                                                    children: "Trade Every Tick"
                                                })]
                                            }), (0, i.jsxs)("div", {
                                                className: "strategy-description",
                                                children: [(0, i.jsx)("p", {
                                                    children: "Executes trades on every tick without waiting for previous trades to close."
                                                }), (0, i.jsx)("p", {
                                                    className: "warning-text",
                                                    children: "Warning: High risk strategy!"
                                                })]
                                            }), (0, i.jsxs)("div", {
                                                className: "trade-type-selector",
                                                children: [(0, i.jsxs)("select", {
                                                    value: t4,
                                                    onChange: e => t7(e.target.value),
                                                    className: "trade-type-select",
                                                    children: [(0, i.jsx)("option", {
                                                        value: "even",
                                                        children: "Even"
                                                    }), (0, i.jsx)("option", {
                                                        value: "odd",
                                                        children: "Odd"
                                                    }), (0, i.jsx)("option", {
                                                        value: "over",
                                                        children: "Over"
                                                    }), (0, i.jsx)("option", {
                                                        value: "under",
                                                        children: "Under"
                                                    }), (0, i.jsx)("option", {
                                                        value: "matches",
                                                        children: "Matches"
                                                    }), (0, i.jsx)("option", {
                                                        value: "differs",
                                                        children: "Differs"
                                                    }), (0, i.jsx)("option", {
                                                        value: "call",
                                                        children: "Rise (CALL)"
                                                    }), (0, i.jsx)("option", {
                                                        value: "put",
                                                        children: "Fall (PUT)"
                                                    })]
                                                }), ["over", "under", "matches", "differs"].includes(t4) && (0, i.jsx)("div", {
                                                    className: "prediction-input",
                                                    children: (0, i.jsx)("input", {
                                                        type: "number",
                                                        min: "1",
                                                        max: "9",
                                                        value: eJ,
                                                        onChange: e => eQ(Number(e.target.value)),
                                                        placeholder: "Digit"
                                                    })
                                                })]
                                            }), (0, i.jsx)("div", {
                                                className: "sequence-container",
                                                children: t2(M ? 50 : 7)
                                            }), (0, i.jsxs)("div", {
                                                className: "mobile-widget duration_amount_selector",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "mobile-widget__duration mobile-widget__button",
                                                    children: [(0, i.jsx)("small", {
                                                        children: "Ticks"
                                                    }), (0, i.jsx)("input", {
                                                        className: "custom_prediction",
                                                        type: "number",
                                                        id: "contract_duration",
                                                        value: C,
                                                        onChange: tN,
                                                        min: "1",
                                                        max: "9",
                                                        defaultValue: 1
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "mobile-widget__amount mobile-widget__button",
                                                    children: [(0, i.jsx)("small", {
                                                        children: "Stake"
                                                    }), (0, i.jsx)("input", {
                                                        className: "custom_prediction",
                                                        type: "number",
                                                        value: T,
                                                        onChange: tf
                                                    })]
                                                })]
                                            }), (0, i.jsxs)("div", {
                                                className: "tick-counter",
                                                children: [(0, i.jsxs)("p", {
                                                    children: ["Ticks Processed: ", o.length]
                                                }), (0, i.jsxs)("p", {
                                                    children: ["Last Digit: ", h]
                                                })]
                                            }), (0, i.jsx)("div", {
                                                className: "activation-controls",
                                                children: (0, i.jsx)("button", {
                                                    className: `toggle-button ${eb?"active":""}`,
                                                    onClick: () => ey(!eb),
                                                    children: eb ? "STOP TRADING" : "START TRADING"
                                                })
                                            })]
                                        }, "tradeEveryTickStrategy");
                                        if ("over5Under4HedgeStrategy" === e) {
                                            let [e, t] = (0, l.useState)("OVER5UNDER4"), s = e0[e];
                                            return (0, l.useEffect)(() => {
                                                if (!eG) return;
                                                let t = e0[e];
                                                tg("DIGITOVER", t.over), tg("DIGITUNDER", t.under)
                                            }, [n, eG, e]), (0, i.jsxs)("div", {
                                                className: "strategy-card hedge-strategy",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "card-header",
                                                    children: [(0, i.jsx)("button", {
                                                        className: `pin-button ${t_.includes("over5Under4HedgeStrategy")?"pinned":""}`,
                                                        onClick: () => tx("over5Under4HedgeStrategy"),
                                                        title: t_.includes("over5Under4HedgeStrategy") ? "Unpin card" : "Pin card",
                                                        children: t_.includes("over5Under4HedgeStrategy") ? "\uD83D\uDCCC" : "\uD83D\uDCCD"
                                                    }), (0, i.jsxs)("div", {
                                                        className: "hedge-header",
                                                        children: [(0, i.jsx)("select", {
                                                            value: e,
                                                            onChange: e => t(e.target.value),
                                                            className: "hedge-selector",
                                                            children: Object.entries(e0).map(e => {
                                                                let [t, s] = e;
                                                                return (0, i.jsx)("option", {
                                                                    value: t,
                                                                    children: s.label
                                                                }, t)
                                                            })
                                                        }), (0, i.jsxs)("h4", {
                                                            children: [s.label, " HEDGE"]
                                                        })]
                                                    })]
                                                }), (0, i.jsx)("div", {
                                                    className: "strategy-description",
                                                    children: (0, i.jsxs)("p", {
                                                        children: ["Simultaneously trades ", s.label, " on every tick."]
                                                    })
                                                }), (0, i.jsxs)("div", {
                                                    className: "hedge-stats",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "hedge-stat",
                                                        children: [(0, i.jsx)(lO.Z, {}), (0, i.jsxs)("span", {
                                                            children: ["Over ", s.over]
                                                        }), (0, i.jsxs)("span", {
                                                            children: [tW(s.over).toFixed(2), "%"]
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "hedge-stat",
                                                        children: [(0, i.jsx)(lL.Z, {}), (0, i.jsxs)("span", {
                                                            children: ["Under ", s.under]
                                                        }), (0, i.jsxs)("span", {
                                                            children: [tK(s.under).toFixed(2), "%"]
                                                        })]
                                                    })]
                                                }), (0, i.jsx)("div", {
                                                    className: "digits-container",
                                                    children: tw.length > 0 ? tw.slice(-6).map((e, t) => (0, i.jsx)("div", {
                                                        className: `digit-box ${e===s.under||e===s.over?"signal-digit":""}`,
                                                        children: e
                                                    }, t)) : (0, i.jsx)("div", {
                                                        className: "no-digits",
                                                        children: "Waiting for data..."
                                                    })
                                                }), (0, i.jsxs)("div", {
                                                    className: "mobile-widget duration_amount_selector",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "mobile-widget__duration mobile-widget__button",
                                                        children: [(0, i.jsx)("small", {
                                                            children: "Ticks"
                                                        }), (0, i.jsx)("input", {
                                                            className: "custom_prediction",
                                                            type: "number",
                                                            id: "contract_duration",
                                                            value: C,
                                                            onChange: tN,
                                                            min: "1",
                                                            max: "9",
                                                            defaultValue: 1
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "mobile-widget__amount mobile-widget__button",
                                                        children: [(0, i.jsx)("small", {
                                                            children: "Stake"
                                                        }), (0, i.jsx)("input", {
                                                            className: "custom_prediction",
                                                            type: "number",
                                                            value: T,
                                                            onChange: tf
                                                        })]
                                                    })]
                                                }), (0, i.jsx)("div", {
                                                    className: "activation-controls",
                                                    children: (0, i.jsx)("button", {
                                                        className: `toggle-button ${eG?"active":""}`,
                                                        onClick: () => eV(!eG),
                                                        children: eG ? "STOP HEDGING" : "START HEDGING"
                                                    })
                                                })]
                                            }, "over5Under4HedgeStrategy")
                                        }
                                        if ("evenStrategy" === e) return (0, i.jsxs)("div", {
                                            className: "strategy-card",
                                            children: [(0, i.jsxs)("div", {
                                                className: "card-header",
                                                children: [(0, i.jsx)("button", {
                                                    className: `pin-button ${t_.includes("evenStrategy")?"pinned":""}`,
                                                    onClick: () => tx("evenStrategy"),
                                                    title: t_.includes("evenStrategy") ? "Unpin card" : "Pin card",
                                                    children: t_.includes("evenStrategy") ? "\uD83D\uDCCC" : "\uD83D\uDCCD"
                                                }), (0, i.jsx)("h4", {
                                                    children: "Even Strategy"
                                                })]
                                            }), (0, i.jsx)("div", {
                                                className: "strategy-check",
                                                children: (0, i.jsx)("p", {
                                                    children: "Signal when last 5 digits are all odd"
                                                })
                                            }), (0, i.jsxs)("div", {
                                                className: "current-streak right",
                                                children: [(0, i.jsx)("strong", {
                                                    children: "Current Streak:"
                                                }), " ", t8()]
                                            }), (0, i.jsxs)("div", {
                                                className: "signal-status",
                                                children: ["Signal Status:", (0, i.jsx)("span", {
                                                    className: tJ(tw) ? "signal-confirmed" : "signal-waiting",
                                                    children: tJ(tw) ? "SIGNAL MET" : "Waiting for signal"
                                                })]
                                            }), (0, i.jsxs)("div", {
                                                className: "mobile-widget duration_amount_selector",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "mobile-widget__duration mobile-widget__button",
                                                    children: [(0, i.jsx)("small", {
                                                        children: "Ticks"
                                                    }), (0, i.jsx)("input", {
                                                        className: "custom_prediction",
                                                        type: "number",
                                                        id: "contract_duration",
                                                        value: C,
                                                        onChange: tN,
                                                        min: "1",
                                                        max: "9",
                                                        defaultValue: 1
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "mobile-widget__amount mobile-widget__button",
                                                    children: [(0, i.jsx)("small", {
                                                        children: "Stake"
                                                    }), (0, i.jsx)("input", {
                                                        className: "custom_prediction",
                                                        type: "number",
                                                        value: T,
                                                        onChange: tf
                                                    })]
                                                })]
                                            }), (0, i.jsxs)("button", {
                                                className: "Purchase even",
                                                onClick: () => tv("DIGITEVEN", !0),
                                                children: [(0, i.jsxs)("div", {
                                                    className: "btn-purchase__top",
                                                    children: [(0, i.jsx)("div", {
                                                        className: "btn-purchase__icon_wrapper",
                                                        children: (0, i.jsx)(lM.Z, {})
                                                    }), (0, i.jsx)("div", {
                                                        className: "btn-purchase__text_wrapper",
                                                        children: (0, i.jsx)("span", {
                                                            children: "Even"
                                                        })
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "btn-purchase__bottom",
                                                    children: [tA.toFixed(2), "%"]
                                                })]
                                            })]
                                        }, "evenStrategy");
                                        if ("oddStrategy" === e) return (0, i.jsxs)("div", {
                                            className: "strategy-card",
                                            children: [(0, i.jsxs)("div", {
                                                className: "card-header",
                                                children: [(0, i.jsx)("button", {
                                                    className: `pin-button ${t_.includes("oddStrategy")?"pinned":""}`,
                                                    onClick: () => tx("oddStrategy"),
                                                    title: t_.includes("oddStrategy") ? "Unpin card" : "Pin card",
                                                    children: t_.includes("oddStrategy") ? "\uD83D\uDCCC" : "\uD83D\uDCCD"
                                                }), (0, i.jsx)("h4", {
                                                    children: "Odd Strategy"
                                                })]
                                            }), (0, i.jsx)("div", {
                                                className: "strategy-check",
                                                children: (0, i.jsx)("p", {
                                                    children: "Signal when last 5 digits are all even"
                                                })
                                            }), (0, i.jsxs)("div", {
                                                className: "current-streak right",
                                                children: [(0, i.jsx)("strong", {
                                                    children: "Current Streak:"
                                                }), " ", t8()]
                                            }), (0, i.jsxs)("div", {
                                                className: "signal-status",
                                                children: ["Signal Status:", (0, i.jsx)("span", {
                                                    className: tQ(tw) ? "signal-confirmed" : "signal-waiting",
                                                    children: tQ(tw) ? "SIGNAL MET" : "Waiting for signal"
                                                })]
                                            }), (0, i.jsxs)("div", {
                                                className: "mobile-widget duration_amount_selector",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "mobile-widget__duration mobile-widget__button",
                                                    children: [(0, i.jsx)("small", {
                                                        children: "Ticks"
                                                    }), (0, i.jsx)("input", {
                                                        className: "custom_prediction",
                                                        type: "number",
                                                        id: "contract_duration",
                                                        value: C,
                                                        onChange: tN,
                                                        min: "1",
                                                        max: "9",
                                                        defaultValue: 1
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "mobile-widget__amount mobile-widget__button",
                                                    children: [(0, i.jsx)("small", {
                                                        children: "Stake"
                                                    }), (0, i.jsx)("input", {
                                                        className: "custom_prediction",
                                                        type: "number",
                                                        value: T,
                                                        onChange: tf
                                                    })]
                                                })]
                                            }), (0, i.jsxs)("button", {
                                                className: "Purchase odd",
                                                onClick: () => tv("DIGITODD", !0),
                                                children: [(0, i.jsxs)("div", {
                                                    className: "btn-purchase__top",
                                                    children: [(0, i.jsx)("div", {
                                                        className: "btn-purchase__icon_wrapper",
                                                        children: (0, i.jsx)(lU.Z, {})
                                                    }), (0, i.jsx)("div", {
                                                        className: "btn-purchase__text_wrapper",
                                                        children: (0, i.jsx)("span", {
                                                            children: "Odd"
                                                        })
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "btn-purchase__bottom",
                                                    children: [tR.toFixed(2), "%"]
                                                })]
                                            })]
                                        }, "oddStrategy");
                                        if ("riseStrategy" === e) return (0, i.jsxs)("div", {
                                            className: "strategy-card",
                                            children: [(0, i.jsxs)("div", {
                                                className: "card-header",
                                                children: [(0, i.jsx)("button", {
                                                    className: `pin-button ${t_.includes("riseStrategy")?"pinned":""}`,
                                                    onClick: () => tx("riseStrategy"),
                                                    title: t_.includes("riseStrategy") ? "Unpin card" : "Pin card",
                                                    children: t_.includes("riseStrategy") ? "\uD83D\uDCCC" : "\uD83D\uDCCD"
                                                }), (0, i.jsx)("h4", {
                                                    children: "Rise Strategy"
                                                })]
                                            }), (0, i.jsx)("div", {
                                                className: "strategy-check",
                                                children: (0, i.jsx)("p", {
                                                    children: "Signal when last 5 ticks show consistent fall (counter-trend)"
                                                })
                                            }), (0, i.jsxs)("div", {
                                                className: "current-streak right",
                                                children: [(0, i.jsx)("strong", {
                                                    children: "Current Streak:"
                                                }), " ", t5()]
                                            }), (0, i.jsxs)("div", {
                                                className: "signal-status",
                                                children: ["Signal Status:", (0, i.jsx)("span", {
                                                    className: t1(tE) ? "signal-confirmed" : "signal-waiting",
                                                    children: t1(tE) ? "RISE SIGNAL DETECTED (After Fall Trend)" : t0(tE) ? "FALL TREND DETECTED" : "Waiting for signal"
                                                })]
                                            }), (0, i.jsxs)("div", {
                                                className: "mobile-widget duration_amount_selector",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "mobile-widget__duration mobile-widget__button",
                                                    children: [(0, i.jsx)("small", {
                                                        children: "Ticks"
                                                    }), (0, i.jsx)("input", {
                                                        className: "custom_prediction",
                                                        type: "number",
                                                        id: "contract_duration",
                                                        value: C,
                                                        onChange: tN,
                                                        min: "1",
                                                        max: "9",
                                                        defaultValue: 1
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "mobile-widget__amount mobile-widget__button",
                                                    children: [(0, i.jsx)("small", {
                                                        children: "Stake"
                                                    }), (0, i.jsx)("input", {
                                                        className: "custom_prediction",
                                                        type: "number",
                                                        value: T,
                                                        onChange: tf
                                                    })]
                                                })]
                                            }), (0, i.jsxs)("button", {
                                                className: "Purchase even",
                                                onClick: () => tv("CALL", !0),
                                                disabled: !t1(tE),
                                                children: [(0, i.jsxs)("div", {
                                                    className: "btn-purchase__top",
                                                    children: [(0, i.jsx)("div", {
                                                        className: "btn-purchase__icon_wrapper",
                                                        children: (0, i.jsx)(lF.Z, {})
                                                    }), (0, i.jsx)("div", {
                                                        className: "btn-purchase__text_wrapper",
                                                        children: (0, i.jsx)("span", {
                                                            children: "Rise"
                                                        })
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "btn-purchase__bottom",
                                                    children: [tU.toFixed(2), "%"]
                                                })]
                                            })]
                                        }, "riseStrategy");
                                        if ("fallStrategy" === e) return (0, i.jsxs)("div", {
                                            className: "strategy-card",
                                            children: [(0, i.jsxs)("div", {
                                                className: "card-header",
                                                children: [(0, i.jsx)("button", {
                                                    className: `pin-button ${t_.includes("fallStrategy")?"pinned":""}`,
                                                    onClick: () => tx("fallStrategy"),
                                                    title: t_.includes("fallStrategy") ? "Unpin card" : "Pin card",
                                                    children: t_.includes("fallStrategy") ? "\uD83D\uDCCC" : "\uD83D\uDCCD"
                                                }), (0, i.jsx)("h4", {
                                                    children: "Fall Strategy"
                                                })]
                                            }), (0, i.jsx)("div", {
                                                className: "strategy-check",
                                                children: (0, i.jsx)("p", {
                                                    children: "Signal when last 5 ticks show consistent rise (counter-trend)"
                                                })
                                            }), (0, i.jsxs)("div", {
                                                className: "current-streak right",
                                                children: [(0, i.jsx)("strong", {
                                                    children: "Current Streak:"
                                                }), " ", t5()]
                                            }), (0, i.jsxs)("div", {
                                                className: "signal-status",
                                                children: ["Signal Status:", (0, i.jsx)("span", {
                                                    className: t0(tE) ? "signal-confirmed" : "signal-waiting",
                                                    children: t0(tE) ? "FALL SIGNAL DETECTED (After Rise Trend)" : t1(tE) ? "RISE TREND DETECTED" : "Waiting for signal"
                                                })]
                                            }), (0, i.jsxs)("div", {
                                                className: "mobile-widget duration_amount_selector",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "mobile-widget__duration mobile-widget__button",
                                                    children: [(0, i.jsx)("small", {
                                                        children: "Ticks"
                                                    }), (0, i.jsx)("input", {
                                                        className: "custom_prediction",
                                                        type: "number",
                                                        id: "contract_duration",
                                                        value: C,
                                                        onChange: tN,
                                                        min: "1",
                                                        max: "9",
                                                        defaultValue: 1
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "mobile-widget__amount mobile-widget__button",
                                                    children: [(0, i.jsx)("small", {
                                                        children: "Stake"
                                                    }), (0, i.jsx)("input", {
                                                        className: "custom_prediction",
                                                        type: "number",
                                                        value: T,
                                                        onChange: tf
                                                    })]
                                                })]
                                            }), (0, i.jsxs)("button", {
                                                className: "Purchase odd",
                                                onClick: () => tv("PUT", !0),
                                                disabled: !t0(tE),
                                                children: [(0, i.jsxs)("div", {
                                                    className: "btn-purchase__top",
                                                    children: [(0, i.jsx)("div", {
                                                        className: "btn-purchase__icon_wrapper",
                                                        children: (0, i.jsx)(lP.Z, {})
                                                    }), (0, i.jsx)("div", {
                                                        className: "btn-purchase__text_wrapper",
                                                        children: (0, i.jsx)("span", {
                                                            children: "Fall"
                                                        })
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "btn-purchase__bottom",
                                                    children: [tF.toFixed(2), "%"]
                                                })]
                                            })]
                                        }, "fallStrategy");
                                        let t = e.match(/over(\d+)Strategy/);
                                        if (t) {
                                            let e = parseInt(t[1]);
                                            return (0, i.jsxs)("div", {
                                                className: "strategy-card",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "card-header",
                                                    children: [(0, i.jsx)("button", {
                                                        className: `pin-button ${t_.includes(`over${e}Strategy`)?"pinned":""}`,
                                                        onClick: () => tx(`over${e}Strategy`),
                                                        title: t_.includes(`over${e}Strategy`) ? "Unpin card" : "Pin card",
                                                        children: t_.includes(`over${e}Strategy`) ? "\uD83D\uDCCC" : "\uD83D\uDCCD"
                                                    }), (0, i.jsxs)("h4", {
                                                        children: ["Over ", e, " Strategy"]
                                                    })]
                                                }), (0, i.jsx)("div", {
                                                    className: "strategy-check",
                                                    children: (0, i.jsxs)("p", {
                                                        children: ["Check if Highest and Second Highest digits are above ", e, " and lowest digit below ", e]
                                                    })
                                                }), (0, i.jsxs)("div", {
                                                    className: "signal-status",
                                                    children: ["Signal Status:", (0, i.jsx)("span", {
                                                        className: tq(e).className,
                                                        children: tq(e).text
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "strategy-rules",
                                                    children: [(0, i.jsxs)("p", {
                                                        children: ["Highest Digit: ", tz, tz > e ? " ✅" : " ❌"]
                                                    }), (0, i.jsxs)("p", {
                                                        children: ["Second Highest Digit: ", t$, t$ > e ? " ✅" : " ❌"]
                                                    }), (0, i.jsxs)("p", {
                                                        children: ["Least Digit: ", tB, tB < e ? " ✅" : " ❌"]
                                                    }), tq(e).showEntryPoint && (0, i.jsxs)("div", {
                                                        className: "entry-point",
                                                        children: [(0, i.jsxs)("p", {
                                                            children: ["Entry Point: 3 consecutive digits below ", e]
                                                        }), (0, i.jsx)("p", {
                                                            className: "entry-status",
                                                            children: tX(e) ? "✅ Confirmed" : "◯ Waiting"
                                                        })]
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "mobile-widget duration_amount_selector",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "mobile-widget__duration mobile-widget__button",
                                                        children: [(0, i.jsx)("small", {
                                                            children: "Ticks"
                                                        }), (0, i.jsx)("input", {
                                                            className: "custom_prediction",
                                                            type: "number",
                                                            id: "contract_duration",
                                                            value: C,
                                                            onChange: tN,
                                                            min: "1",
                                                            max: "9",
                                                            defaultValue: 1
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "mobile-widget__amount mobile-widget__button",
                                                        children: [(0, i.jsx)("small", {
                                                            children: "Stake"
                                                        }), (0, i.jsx)("input", {
                                                            className: "custom_prediction",
                                                            type: "number",
                                                            value: T,
                                                            onChange: tf
                                                        })]
                                                    })]
                                                }), (0, i.jsxs)("button", {
                                                    className: "Purchase even",
                                                    onClick: () => tg("DIGITOVER", e),
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "btn-purchase__top",
                                                        children: [(0, i.jsx)("div", {
                                                            className: "btn-purchase__icon_wrapper",
                                                            children: (0, i.jsx)(lO.Z, {})
                                                        }), (0, i.jsx)("div", {
                                                            className: "btn-purchase__text_wrapper",
                                                            children: (0, i.jsxs)("span", {
                                                                children: ["Over ", e]
                                                            })
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "btn-purchase__bottom",
                                                        children: [tW(e).toFixed(2), "%"]
                                                    })]
                                                })]
                                            }, `over${e}Strategy`)
                                        }
                                        let s = e.match(/under(\d+)Strategy/);
                                        if (s) {
                                            let e = parseInt(s[1]);
                                            return (0, i.jsxs)("div", {
                                                className: "strategy-card",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "card-header",
                                                    children: [(0, i.jsx)("button", {
                                                        className: `pin-button ${t_.includes(`under${e}Strategy`)?"pinned":""}`,
                                                        onClick: () => tx(`under${e}Strategy`),
                                                        title: t_.includes(`under${e}Strategy`) ? "Unpin card" : "Pin card",
                                                        children: t_.includes(`under${e}Strategy`) ? "\uD83D\uDCCC" : "\uD83D\uDCCD"
                                                    }), (0, i.jsxs)("h4", {
                                                        children: ["Under ", e, " Strategy"]
                                                    })]
                                                }), (0, i.jsx)("div", {
                                                    className: "strategy-check",
                                                    children: (0, i.jsxs)("p", {
                                                        children: ["Check if Highest and Second Highest digits are below ", e, " and lowest digit above ", e]
                                                    })
                                                }), (0, i.jsxs)("div", {
                                                    className: "signal-status",
                                                    children: ["Signal Status:", (0, i.jsx)("span", {
                                                        className: tY(e).className,
                                                        children: tY(e).text
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "strategy-rules",
                                                    children: [(0, i.jsxs)("p", {
                                                        children: ["Highest Digit: ", tz, tz < e ? " ✅" : " ❌"]
                                                    }), (0, i.jsxs)("p", {
                                                        children: ["Second Highest Digit: ", t$, t$ < e ? " ✅" : " ❌"]
                                                    }), (0, i.jsxs)("p", {
                                                        children: ["Least Digit: ", tB, tB > e ? " ✅" : " ❌"]
                                                    }), tY(e).showEntryPoint && (0, i.jsxs)("div", {
                                                        className: "entry-point",
                                                        children: [(0, i.jsxs)("p", {
                                                            children: ["Entry Point: 3 consecutive digits above ", e]
                                                        }), (0, i.jsx)("p", {
                                                            className: "entry-status",
                                                            children: tH(e) ? "✅ Confirmed" : "◯ Waiting"
                                                        })]
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "mobile-widget duration_amount_selector",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "mobile-widget__duration mobile-widget__button",
                                                        children: [(0, i.jsx)("small", {
                                                            children: "Ticks"
                                                        }), (0, i.jsx)("input", {
                                                            className: "custom_prediction",
                                                            type: "number",
                                                            id: "contract_duration",
                                                            value: C,
                                                            onChange: tN,
                                                            min: "1",
                                                            max: "9",
                                                            defaultValue: 1
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "mobile-widget__amount mobile-widget__button",
                                                        children: [(0, i.jsx)("small", {
                                                            children: "Stake"
                                                        }), (0, i.jsx)("input", {
                                                            className: "custom_prediction",
                                                            type: "number",
                                                            value: T,
                                                            onChange: tf
                                                        })]
                                                    })]
                                                }), (0, i.jsxs)("button", {
                                                    className: "Purchase odd",
                                                    onClick: () => tg("DIGITUNDER", e),
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "btn-purchase__top",
                                                        children: [(0, i.jsx)("div", {
                                                            className: "btn-purchase__icon_wrapper",
                                                            children: (0, i.jsx)(lL.Z, {})
                                                        }), (0, i.jsx)("div", {
                                                            className: "btn-purchase__text_wrapper",
                                                            children: (0, i.jsxs)("span", {
                                                                children: ["Under ", e]
                                                            })
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "btn-purchase__bottom",
                                                        children: [tK(e).toFixed(2), "%"]
                                                    })]
                                                })]
                                            }, `under${e}Strategy`)
                                        }
                                        return null
                                    })
                                })
                            })]
                        })
                    })
                }),
                lB = e => {
                    let {
                        botName: t,
                        botDescription: s,
                        starCount: a,
                        startAction: n
                    } = e, l = "★".repeat(a), r = "☆".repeat(Math.max(0, 5 - a));
                    return (0, i.jsxs)("div", {
                        className: "bot-card",
                        children: [(0, i.jsx)("h2", {
                            className: "bot-card-title",
                            children: t
                        }), (0, i.jsx)("p", {
                            className: "bot-card-description",
                            children: s
                        }), (0, i.jsxs)("div", {
                            className: "bot-card-actions",
                            children: [(0, i.jsx)("button", {
                                onClick: n,
                                className: "bot-card-start-button",
                                children: "▶ Launch AI Bot"
                            }), (0, i.jsxs)("span", {
                                className: "bot-card-stars",
                                children: [l + r, a >= 3 && (0, i.jsx)("span", {
                                    className: "strong-rating"
                                })]
                            })]
                        })]
                    })
                },
                lG = e => {
                    let {
                        botName: t,
                        botDescription: s,
                        setShowRdTradePage: a,
                        showRdTradePage: n,
                        martingale: l,
                        setMartingale: r,
                        setStopLoss: o,
                        setTakeProfit: c,
                        handleSelectChange: d,
                        martingaleValueRef: u,
                        active_symbol: h,
                        handleUpdateStake: _,
                        setStake: m,
                        enableDisableMartingale: x,
                        setEnableDisableMartingale: p,
                        enable_disable_martingale: j,
                        stop_loss: v,
                        take_profit: g,
                        optionsList: b,
                        stake: y,
                        lostTrades: f,
                        stopLoss: N,
                        takeProfit: C,
                        wonTrades: S,
                        pnl: T,
                        isTradeActive: k,
                        isTradeActiveRef: w,
                        consoleRef: E,
                        isTradeActiveRef_v2: I,
                        pip_size: A,
                        allLastDigitList: R,
                        currentTick: D,
                        clearBotStats: O,
                        appendToConsole: L,
                        setIsTradeActive: M
                    } = e, U = R.slice(-10).map(e => parseInt(Number(e).toFixed(A).slice(-1), 10)), F = (e, t) => {
                        try {
                            let s = e.toFixed(t);
                            return parseInt(s.slice(-1), 10)
                        } catch {
                            return 0
                        }
                    }, P = (() => {
                        let e = R.slice(-1e3),
                            t = Array(10).fill(0);
                        return e.forEach(e => {
                            let s = F(e, A);
                            t[s]++
                        }), t.map(t => t / e.length * 100)
                    })(), Z = Math.min(...P), z = Math.max(...P), $ = R.length > 0 ? F(R[R.length - 1], A) : -1;
                    return (0, i.jsxs)("div", {
                        className: "rd-trade-page",
                        children: [(0, i.jsxs)("span", {
                            className: "rd-close-button",
                            onClick: () => a(!n),
                            children: ["\uD83D\uDD19 ", t]
                        }), (0, i.jsx)("div", {
                            style: {
                                height: "1.2px",
                                backgroundColor: "#444",
                                margin: "10px 0"
                            }
                        }), (0, i.jsxs)("div", {
                            className: "digit-percentages-card",
                            children: [(0, i.jsxs)("div", {
                                className: "current_tick",
                                children: [(0, i.jsx)("h3", {
                                    children: "Price"
                                }), (0, i.jsx)("h2", {
                                    children: D
                                })]
                            }), (0, i.jsx)("div", {
                                style: {
                                    height: "1.2px",
                                    backgroundColor: "#444",
                                    margin: "10px 0"
                                }
                            }), (0, i.jsx)("div", {
                                className: "digit-percentages",
                                children: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(e => (0, i.jsxs)("div", {
                                    className: "digit-circle",
                                    style: {
                                        color: e === $ ? "#3498db" : P[e] === Z ? "#e74c3c" : P[e] === z ? "#2ecc71" : "#999",
                                        border: `2px solid ${e===$?"#3498db":"#444"}`
                                    },
                                    children: [(0, i.jsx)("div", {
                                        className: "dig",
                                        children: e
                                    }), (0, i.jsxs)("div", {
                                        className: "percen",
                                        children: [P[e].toFixed(1), "%"]
                                    })]
                                }, e))
                            })]
                        }), (0, i.jsx)("div", {
                            className: "number-list",
                            children: U.map((e, t) => (0, i.jsx)("div", {
                                className: `number-item ${e%2==0?"green":"red"}`,
                                children: e
                            }, t))
                        }), (0, i.jsxs)("div", {
                            className: "description",
                            children: [(0, i.jsx)("h3", {
                                children: t
                            }), (0, i.jsx)("div", {
                                style: {
                                    height: "1.2px",
                                    backgroundColor: "#444",
                                    margin: "10px 0"
                                }
                            }), (0, i.jsx)("p", {
                                children: s
                            })]
                        }), (0, i.jsxs)("form", {
                            className: "rd-config-form",
                            children: [(0, i.jsxs)("div", {
                                className: "form-group",
                                children: [(0, i.jsx)("label", {
                                    children: "Market Type"
                                }), (0, i.jsx)("select", {
                                    name: "",
                                    id: "symbol_options",
                                    value: h,
                                    onChange: d,
                                    children: b.length > 0 ? b.map(e => (0, i.jsx)("option", {
                                        value: e.symbol,
                                        children: e.display_name
                                    }, e.symbol)) : (0, i.jsx)("option", {
                                        value: "",
                                        children: "SELECT MARKET"
                                    })
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "form-group",
                                children: [(0, i.jsx)("label", {
                                    children: "Stake Amount"
                                }), (0, i.jsx)("input", {
                                    type: "text",
                                    value: y,
                                    onChange: e => m(e.target.value),
                                    onBlur: _
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "form-group",
                                children: [(0, i.jsx)("label", {
                                    children: "Martingale"
                                }), (0, i.jsx)("input", {
                                    type: "text",
                                    value: l,
                                    onChange: e => r(e.target.value),
                                    onBlur: e => {
                                        let t = e.target.value,
                                            s = "" === t || isNaN(Number(t)) ? t : parseFloat(t);
                                        u.current = s, r(s)
                                    }
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "form-group use_martingale",
                                children: [(0, i.jsx)("label", {
                                    children: "Enable/Disable Martingale:"
                                }), (0, i.jsxs)("label", {
                                    className: "switch",
                                    children: [(0, i.jsx)("input", {
                                        type: "checkbox",
                                        checked: x,
                                        id: "enable_disbale_martingale",
                                        onChange: () => {
                                            p(!x), j.current = !x
                                        }
                                    }), (0, i.jsx)("span", {
                                        className: "slider round"
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "form-group",
                                children: [(0, i.jsx)("label", {
                                    children: "Take Profit (TP)"
                                }), (0, i.jsx)("input", {
                                    type: "text",
                                    value: C,
                                    onChange: e => c(e.target.value),
                                    onBlur: e => {
                                        let t = e.target.value,
                                            s = "" === t || isNaN(Number(t)) ? t : parseFloat(t);
                                        g.current = s, c(s)
                                    }
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "form-group",
                                children: [(0, i.jsx)("label", {
                                    children: "Stop Loss (SL)"
                                }), (0, i.jsx)("input", {
                                    type: "text",
                                    value: N,
                                    onChange: e => o(e.target.value),
                                    onBlur: e => {
                                        let t = e.target.value,
                                            s = "" === t || isNaN(Number(t)) ? t : parseFloat(t);
                                        v.current = s, o(s)
                                    }
                                })]
                            })]
                        }), (0, i.jsxs)("div", {
                            className: "rd-trade-page-header",
                            children: [(0, i.jsxs)("div", {
                                className: "win-loss",
                                children: [(0, i.jsx)("p", {
                                    children: "W / L"
                                }), (0, i.jsxs)("p", {
                                    children: [(0, i.jsx)("span", {
                                        className: "win",
                                        children: S
                                    }), " / ", (0, i.jsx)("span", {
                                        className: "loss",
                                        children: f
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "tp-sl",
                                children: [(0, i.jsx)("p", {
                                    children: "PnL"
                                }), (0, i.jsxs)("p", {
                                    children: [(0, i.jsx)("span", {
                                        style: {
                                            color: T > 0 ? "green" : T < 0 ? "red" : ""
                                        },
                                        children: T.toFixed(2)
                                    }), " USD"]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "tp-sl",
                                children: [(0, i.jsx)("p", {
                                    children: "TP"
                                }), (0, i.jsxs)("p", {
                                    children: [C, " USD"]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "tp-sl",
                                children: [(0, i.jsx)("p", {
                                    children: "SL"
                                }), (0, i.jsxs)("p", {
                                    className: "loss",
                                    children: [N, " USD"]
                                })]
                            })]
                        }), (0, i.jsxs)("div", {
                            className: "rd-trade-page-buttons",
                            children: [(0, i.jsx)("button", {
                                className: `${k?"stop-button":"start-button"}`,
                                onClick: () => {
                                    M(!k), w.current = !k, I.current = !k;
                                    k ? L("Bot Stopped", "red") : L("Bot Started...", "green")
                                },
                                children: k ? "⏹ Stop trading" : "▶ Start trading"
                            }), (0, i.jsx)("button", {
                                className: "configure-button",
                                onClick: () => void(document.querySelector(".rd-trade-page-console").innerHTML = "", O()),
                                children: "\uD83D\uDD03 Reset"
                            })]
                        }), (0, i.jsx)("div", {
                            className: "rd-trade-page-console",
                            ref: E
                        })]
                    })
                },
                lV = {
                    botName: "Over 5 Under 4 (No analysis)",
                    botDescription: "Takes Over 5 & Under 4 Trades at the same time with no condition. If the exit spot is either 4 or 5 you loose both contracts",
                    starCount: 3
                },
                lX = {
                    botName: "Over 5 Under 4 (1 digit analysis)",
                    botDescription: "This Bot trades Over 5 and Under 4 at same time if the last digit is either 4 or 5. Incase the exit spot is either 4 or 5 you loose both contracts",
                    starCount: 3
                },
                lH = {
                    botName: "Over 5 Under 4 Premium (2 digit analysis) ",
                    botDescription: "This Bot trades Over 5 and Under 4 at same time if the  2 last digits are either 4 or 5. Incase the exit spot is either 4 or 5 you loose both contracts",
                    starCount: 5
                },
                lq = {
                    botName: "Over-Under 5 {After 1 LD is 5}",
                    botDescription: "This Bot trades Over 5 and Under 5 at same time. If the last digit is 5",
                    starCount: 4
                },
                lY = {
                    botName: "Auto Even Odd {5}",
                    botDescription: "This Bot takes Even trade if last 5 Digits are Odd. And Vice Versa",
                    starCount: 3
                },
                lW = {
                    botName: "Auto Even Odd {6}",
                    botDescription: "This Bot takes Even trade if last 6 Digits are Odd. And Vice Versa",
                    starCount: 4
                },
                lK = {
                    botName: "Under 7",
                    botDescription: "Perfect for range-bound markets, this bot trades within a set price range.",
                    starCount: 3
                },
                lJ = {
                    botName: "Under 7 Pro",
                    botDescription: "Perfect for range-bound markets, this bot trades within a set price range.",
                    starCount: 4
                },
                lQ = {
                    botName: "Under 7 Pro",
                    botDescription: "Perfect for range-bound markets, this bot trades within a set price range.",
                    starCount: 5
                },
                l0 = () => {
                    let [e, t] = (0, l.useState)(!1), [s, a] = (0, l.useState)(0), [n, r] = (0, l.useState)(0), [o, c] = (0, l.useState)(5), [d, u] = (0, l.useState)(10), [h, _] = (0, l.useState)(0), [m, x] = (0, l.useState)(.5), [p, j] = (0, l.useState)(m), [v, g] = (0, l.useState)(1), [b, y] = (0, l.useState)(!1), [f, N] = (0, l.useState)(0), [C, S] = (0, l.useState)("Updating..."), [T, k] = (0, l.useState)([]), [w, E] = (0, l.useState)(2), [I, A] = (0, l.useState)("R_100"), [R, D] = (0, l.useState)([]), [O, L] = (0, l.useState)(!1), [M, U] = (0, l.useState)(1), [F, P] = (0, l.useState)("R_100"), [z, $] = (0, l.useState)(!0), B = (0, l.useRef)(["DIGITODD", "DIGITEVEN", "DIGITOVER", "DIGITUNDER", "DIGITDIFF"]), G = (0, l.useRef)(I), V = (0, l.useRef)(v), X = (0, l.useRef)(O), H = (0, l.useRef)(O), q = (0, l.useRef)([]), Y = (0, l.useRef)([]), W = (0, l.useRef)(o), K = (0, l.useRef)(d), J = (0, l.useRef)(0), Q = (0, l.useRef)(M), ee = (0, l.useRef)(m), et = (0, l.useRef)(p), es = (0, l.useRef)(0), ea = (0, l.useRef)(null), en = (0, l.useRef)(z);
                    (0, l.useEffect)(() => {
                        em()
                    }, []), (0, l.useEffect)(() => {
                        F !== I && Z.api_base4.api.send({
                            ticks_history: I,
                            adjust_start_time: 1,
                            count: 5e3,
                            end: "latest",
                            start: 1,
                            style: "ticks"
                        }), P(I)
                    }, [I]);
                    let ei = e => {
                            t(!0), U(e), Q.current = e
                        },
                        el = (e, t) => {
                            let s = e.toFixed(t);
                            return Number(s = String(s).slice(-1))
                        },
                        er = () => {
                            k(e => e.slice(1)), Y.current.shift()
                        },
                        eo = e => {
                            let t = e.slice(1e3),
                                s = [];
                            return t.forEach(e => {
                                let t = el(e, w);
                                s.push(t)
                            }), s
                        },
                        ec = () => {
                            L(!1), X.current = !1
                        },
                        ed = (e, t) => {
                            X.current = !1;
                            let s = {
                                amount: ee.current,
                                basis: "stake",
                                contract_type: e,
                                currency: "USD",
                                duration: 1,
                                duration_unit: "t",
                                symbol: G.current
                            };
                            void 0 !== t && (s.barrier = t.toString()), Z.api_base.api.send({
                                buy: "1",
                                price: ee.current,
                                subscribe: 1,
                                parameters: s
                            })
                        };

                    function eu(e, t) {
                        let s = document.querySelector(".rd-trade-page-console"),
                            a = document.createElement("p");
                        a.textContent = e, a.style.color = t, s.appendChild(a), ea.current.scrollTop = ea.current.scrollHeight
                    }
                    let eh = e => {
                            if (!X.current || !H.current) {
                                X.current = !1;
                                return
                            }
                            let t = (e, t, s, a) => {
                                    let n = e.slice(-t);
                                    if ("greater" === a) return n.every(e => e >= s);
                                    if ("less" === a) return n.every(e => e <= s);
                                    if ("equal" === a) return n.every(e => e === s);
                                    return !1
                                },
                                s = (e, t, s) => {
                                    let a = e.slice(-t);
                                    return "even" === s ? a.every(e => e % 2 == 0) : "odd" === s && a.every(e => e % 2 != 0)
                                },
                                a = (e, t, s) => {
                                    e && (void 0 !== s ? ed(t, s) : ed(t))
                                },
                                n = Q.current;
                            0 === n ? (ed("DIGITUNDER", 4), ed("DIGITOVER", 5)) : 1 === n ? (a(t(e, 1, 5, "equal"), "DIGITUNDER", 4), a(t(e, 1, 5, "equal"), "DIGITOVER", 5), a(t(e, 1, 4, "equal"), "DIGITUNDER", 4), a(t(e, 1, 4, "equal"), "DIGITOVER", 5)) : 2 === n ? (a(t(e, 2, 5, "equal"), "DIGITUNDER", 4), a(t(e, 2, 5, "equal"), "DIGITOVER", 5), a(t(e, 2, 4, "equal"), "DIGITUNDER", 4), a(t(e, 2, 4, "equal"), "DIGITOVER", 5)) : 3 === n ? (a(t(e, 1, 5, "equal"), "DIGITUNDER", 5), a(t(e, 1, 5, "equal"), "DIGITOVER", 5)) : 4 === n ? (a(s(e, 5, "odd"), "DIGITEVEN"), a(s(e, 5, "even"), "DIGITODD")) : 5 === n ? (a(s(e, 6, "odd"), "DIGITEVEN"), a(s(e, 6, "even"), "DIGITODD")) : 6 === n ? (a(t(e, 2, 8, "greater"), "DIGITUNDER", 7), a(t(e, 2, 2, "less"), "DIGITOVER", 2), a(t(e, 3, 8, "greater"), "DIGITUNDER", 8), a(t(e, 3, 2, "less"), "DIGITOVER", 1)) : 7 === n ? a(t(e, 3, 7, "less"), "DIGITUNDER", 7) : 8 === n && a(t(e, 4, 6, "less"), "DIGITUNDER", 7)
                        },
                        e_ = () => {
                            J.current >= W.current ? ec() : J.current <= -K.current ? ec() : X.current = !0
                        },
                        em = async () => {
                            if (await new Promise(e => setTimeout(e, 5e3)), !b && (Z.api_base4.api.send({
                                    active_symbols: "brief",
                                    product_type: "basic"
                                }), y(!0)), Z.api_base4.api) {
                                let e = Z.api_base4.api.onMessage().subscribe(e => {
                                    let {
                                        data: t
                                    } = e;
                                    if ("tick" === t.msg_type) {
                                        let {
                                            tick: e
                                        } = t, {
                                            ask: s,
                                            id: a,
                                            pip_size: n
                                        } = e;
                                        N(el(s, n)), S(s), er(), k(e => [...e, s]), Y.current.push(s), eh(eo(Y.current))
                                    }
                                    if ("history" === t.msg_type) {
                                        let {
                                            history: e,
                                            pip_size: s
                                        } = t;
                                        E(s);
                                        let {
                                            prices: a
                                        } = e, {
                                            ticks_history: n
                                        } = t.echo_req;
                                        k(a), Y.current = a, A(n), Z.api_base4.api.send({
                                            ticks: n,
                                            subscribe: 1
                                        })
                                    }
                                    if ("active_symbols" === t.msg_type) {
                                        let {
                                            active_symbols: e
                                        } = t, s = e.filter(e => "synthetics" === e.subgroup);
                                        s.sort((e, t) => e.display_order - t.display_order), Z.api_base4.api.send({
                                            ticks_history: s[0].symbol,
                                            adjust_start_time: 1,
                                            count: 5e3,
                                            end: "latest",
                                            start: 1,
                                            style: "ticks"
                                        }), D(s)
                                    }
                                });
                                Z.api_base4.pushSubscription(e)
                            }
                            if (Z.api_base.api) {
                                let e = Z.api_base.api.onMessage().subscribe(e => {
                                    let {
                                        data: t
                                    } = e;
                                    if ("buy" === t.msg_type) {
                                        let {
                                            buy: e
                                        } = t, s = new Date().toLocaleTimeString();
                                        eu(`[${s}]`, "gray"), eu(e.longcode, "white"), X.current = !1
                                    }
                                    if ("proposal_open_contract" === t.msg_type) {
                                        let {
                                            proposal_open_contract: e
                                        } = t, s = e.contract_type;
                                        if (B.current.includes(s) && e.is_sold) {
                                            if ("lost" === e.status) {
                                                if (!q.current.includes(e.contract_id)) {
                                                    if (q.current.push(e.contract_id), J.current += e.profit, _(J.current), J.current >= W.current) {
                                                        ec();
                                                        return
                                                    }
                                                    if (J.current <= -K.current) {
                                                        ec(), r(e => e + 1), eu(`Contract Lost ${e.profit}`, "red"), eu("Stop Loss Hitted!!", "red");
                                                        return
                                                    }
                                                    if (en.current) {
                                                        es.current += Math.abs(e.profit);
                                                        let t = es.current * parseFloat(V.current);
                                                        x(parseFloat(t.toFixed(2))), ee.current = parseFloat(t.toFixed(2))
                                                    }
                                                    eu(`Contract Lost ${e.profit}`, "red"), r(e => e + 1)
                                                }
                                                e_()
                                            } else {
                                                if (!q.current.includes(e.contract_id)) {
                                                    if (q.current.push(e.contract_id), J.current += e.profit, _(J.current), J.current >= W.current) {
                                                        ec(), a(e => e + 1), eu(`Contract Won ${e.profit}`, "green"), eu("Take Profit Hitted!!", "green");
                                                        return
                                                    }
                                                    if (J.current <= -K.current) {
                                                        ec();
                                                        return
                                                    }
                                                    eu(`Contract Won ${e.profit}`, "green"), a(e => e + 1)
                                                }
                                                es.current = 0, x(et.current), ee.current = et.current, e_()
                                            }
                                        }
                                    }
                                });
                                Z.api_base.pushSubscription(e)
                            }
                        },
                        ex = [lV, lX, lH, lq, lY, lW, lK, lJ, lQ];
                    return (0, i.jsxs)("div", {
                        className: "main_rd_bots",
                        children: [e && (0, i.jsx)("div", {
                            className: "trademodal",
                            children: (0, i.jsx)("div", {
                                className: "modal-tool",
                                children: (0, i.jsx)(lG, {
                                    setShowRdTradePage: t,
                                    showRdTradePage: e,
                                    botName: ex[M].botName,
                                    botDescription: ex[M].botDescription,
                                    stopLoss: d,
                                    takeProfit: o,
                                    martingale: v,
                                    setMartingale: g,
                                    setStopLoss: u,
                                    setTakeProfit: c,
                                    stake: m,
                                    handleSelectChange: e => {
                                        let t = e.target.value;
                                        Z.api_base4.api.forgetAll("ticks").then(() => {
                                            S("Loading..."), A(t), G.current = t
                                        })
                                    },
                                    optionsList: R,
                                    martingaleValueRef: V,
                                    stop_loss: K,
                                    take_profit: W,
                                    handleUpdateStake: e => {
                                        let t = e.target.value,
                                            s = "" === t || isNaN(Number(t)) ? t : parseFloat(t);
                                        et.current = s, ee.current = s, x(s), j(s)
                                    },
                                    setStake: x,
                                    active_symbol: I,
                                    enableDisableMartingale: z,
                                    enable_disable_martingale: en,
                                    setEnableDisableMartingale: $,
                                    lostTrades: n,
                                    pnl: h,
                                    wonTrades: s,
                                    isTradeActive: O,
                                    setIsTradeActive: L,
                                    isTradeActiveRef: X,
                                    appendToConsole: eu,
                                    clearBotStats: () => {
                                        a(0), r(0), _(0), J.current = 0
                                    },
                                    consoleRef: ea,
                                    isTradeActiveRef_v2: H,
                                    allLastDigitList: T,
                                    pip_size: w,
                                    currentTick: C
                                })
                            })
                        }), (0, i.jsx)(lB, {
                            botName: lV.botName,
                            botDescription: lV.botDescription,
                            starCount: lV.starCount,
                            startAction: () => ei(0)
                        }), (0, i.jsx)(lB, {
                            botName: lX.botName,
                            botDescription: lX.botDescription,
                            starCount: lX.starCount,
                            startAction: () => ei(1)
                        }), (0, i.jsx)(lB, {
                            botName: lH.botName,
                            botDescription: lH.botDescription,
                            starCount: lH.starCount,
                            startAction: () => ei(2)
                        }), (0, i.jsx)(lB, {
                            botName: lq.botName,
                            botDescription: lq.botDescription,
                            starCount: lq.starCount,
                            startAction: () => ei(3)
                        }), (0, i.jsx)(lB, {
                            botName: lY.botName,
                            botDescription: lY.botDescription,
                            starCount: lY.starCount,
                            startAction: () => ei(4)
                        }), (0, i.jsx)(lB, {
                            botName: lW.botName,
                            botDescription: lW.botDescription,
                            starCount: lW.starCount,
                            startAction: () => ei(5)
                        }), (0, i.jsx)(lB, {
                            botName: lK.botName,
                            botDescription: lK.botDescription,
                            starCount: lK.starCount,
                            startAction: () => ei(6)
                        }), (0, i.jsx)(lB, {
                            botName: lJ.botName,
                            botDescription: lJ.botDescription,
                            starCount: lJ.starCount,
                            startAction: () => ei(7)
                        }), (0, i.jsx)(lB, {
                            botName: lQ.botName,
                            botDescription: lQ.botDescription,
                            starCount: lQ.starCount,
                            startAction: () => ei(8)
                        })]
                    })
                };
            var l1 = s("8677");
            let l5 = e => {
                    let {
                        enable_tp_sl: t,
                        showBotSettings: s,
                        stop_loss: a,
                        take_profit: n,
                        takeProfitValue: r,
                        stopLossValue: o,
                        enableSlTpValue: c,
                        enableCopyDemo: d,
                        enable_demo_copy: u,
                        liveAccCR: h,
                        enableDisableMartingale: _,
                        enable_disable_martingale: m,
                        setEnableDisableMartingale: x,
                        setShowBotSettings: p,
                        setTakeProfitValue: j,
                        setStopLossValue: v,
                        setEnableSlTpValue: g,
                        setCopyDemo: b,
                        setLiveAccCr: y
                    } = e, [N, C] = l.useState([]), [S, T] = l.useState("");
                    l.useEffect(() => {
                        if ("undefined" != typeof localStorage) {
                            let e = Object.keys(JSON.parse(localStorage.getItem("accountsList")) || void 0).filter(e => e.startsWith("CR"));
                            C(e), e.length > 0 && (T(e[0]), y(e[0]))
                        }
                    }, []);
                    let k = () => {
                        p(!s)
                    };
                    return (0, i.jsxs)(sB.Z, {
                        is_visible: !0,
                        is_mobile_full_width: !0,
                        className: "dc-dialog bot-stopped-dialog",
                        confirm_button_text: (0, f.NC)("Close"),
                        onConfirm: () => k(),
                        children: [(0, i.jsxs)("div", {
                            className: "dc-dialog__content__header",
                            children: [(0, i.jsx)(es.Z, {
                                "data-testid": "data-title",
                                weight: "bold",
                                as: "p",
                                align: "left",
                                size: "s",
                                color: "prominent",
                                children: (0, f.NC)("Pro Analysistool Settings")
                            }), (0, i.jsx)("div", {
                                "data-testid": "data-close-button",
                                onClick: k,
                                onKeyDown: e => {
                                    "Enter" === e.key && k()
                                },
                                tabIndex: 0,
                                children: (0, i.jsx)(ty.J, {
                                    icon: "IcCross"
                                })
                            })]
                        }), (0, i.jsxs)("div", {
                            className: "bot_options",
                            children: [(0, i.jsxs)("div", {
                                className: "tp",
                                children: [(0, i.jsx)("label", {
                                    htmlFor: "take_profit",
                                    children: (0, i.jsx)(es.Z, {
                                        as: "p",
                                        align: "left",
                                        size: "xs",
                                        color: "prominent",
                                        children: (0, f.NC)("Take Profit:")
                                    })
                                }), (0, i.jsx)("input", {
                                    type: "text",
                                    value: r,
                                    id: "take_profit",
                                    onChange: e => {
                                        let t = e.target.value;
                                        j("" === t ? "" : Number(t)), n.current = "" !== t ? Number(t) : 0
                                    }
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "sl",
                                children: [(0, i.jsx)("label", {
                                    htmlFor: "stop_loss",
                                    children: (0, i.jsx)(es.Z, {
                                        as: "p",
                                        align: "left",
                                        size: "xs",
                                        color: "prominent",
                                        children: (0, f.NC)("Stop Loss:")
                                    })
                                }), (0, i.jsx)("input", {
                                    type: "text",
                                    value: o,
                                    id: "stop_loss",
                                    onChange: e => {
                                        let t = e.target.value;
                                        v("" === t ? "" : Number(t)), a.current = "" !== t ? Number(t) : 0
                                    }
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "active_inactive",
                                children: [(0, i.jsx)("label", {
                                    htmlFor: "enable_tp_sl",
                                    children: (0, i.jsx)(es.Z, {
                                        as: "p",
                                        align: "left",
                                        size: "xs",
                                        color: "prominent",
                                        children: (0, f.NC)("Enable/Disable")
                                    })
                                }), (0, i.jsxs)("label", {
                                    className: "switch",
                                    children: [(0, i.jsx)("input", {
                                        type: "checkbox",
                                        checked: c,
                                        id: "enable_tp_sl",
                                        onChange: () => {
                                            g(!c), t.current = !c
                                        }
                                    }), (0, i.jsx)("span", {
                                        className: "slider round"
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "active_inactive",
                                children: [(0, i.jsx)("label", {
                                    htmlFor: "enable_disbale_martingale",
                                    children: (0, i.jsx)(es.Z, {
                                        as: "p",
                                        align: "left",
                                        size: "xs",
                                        color: "prominent",
                                        children: (0, f.NC)("Enable/Disable Martingale")
                                    })
                                }), (0, i.jsxs)("label", {
                                    className: "switch",
                                    children: [(0, i.jsx)("input", {
                                        type: "checkbox",
                                        checked: _,
                                        id: "enable_disbale_martingale",
                                        onChange: () => {
                                            x(!_), m.current = !_
                                        }
                                    }), (0, i.jsx)("span", {
                                        className: "slider round"
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "copy_demo_trades",
                                children: [(0, i.jsx)("label", {
                                    htmlFor: "copy_demo",
                                    children: (0, i.jsx)(es.Z, {
                                        as: "p",
                                        align: "left",
                                        size: "xs",
                                        color: "prominent",
                                        children: (0, f.NC)("Copy Demo Status:")
                                    })
                                }), (0, i.jsxs)("label", {
                                    className: "switch",
                                    children: [(0, i.jsx)("input", {
                                        type: "checkbox",
                                        checked: d,
                                        id: "copy_demo",
                                        onChange: () => {
                                            b(!d), u.current = !u.current
                                        }
                                    }), (0, i.jsx)("span", {
                                        className: "slider round"
                                    })]
                                })]
                            }), d && (0, i.jsx)("select", {
                                value: h,
                                onChange: e => {
                                    y(e.target.value)
                                },
                                children: N.map(e => (0, i.jsx)("option", {
                                    value: e,
                                    children: e
                                }, e))
                            })]
                        })]
                    })
                },
                l2 = e => {
                    let {
                        lastDigitList: t,
                        active_last: s,
                        contract_type: a,
                        duration: n,
                        isOneClickActive: l,
                        active_symbol: r,
                        stake_amount: o,
                        isAutoClickerActive: c,
                        digitDiffHigh: d,
                        digitDiffLow: u,
                        isTradeActive: h,
                        isTradeActiveRef: _,
                        tradingDiffType: m,
                        enableCopyDemo: x,
                        liveAccCR: p,
                        setIsTradeActive: j
                    } = e, v = e => {
                        l && (x ? Z.api_base.api.send({
                            buy_contract_for_multiple_accounts: "1",
                            tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(p).token],
                            price: o,
                            parameters: {
                                amount: o,
                                basis: "stake",
                                contract_type: a,
                                currency: "USD",
                                duration: n,
                                duration_unit: "t",
                                symbol: r,
                                barrier: e
                            }
                        }) : Z.api_base.api.send({
                            buy: "1",
                            price: o,
                            subscribe: 1,
                            parameters: {
                                amount: o,
                                basis: "stake",
                                contract_type: a,
                                currency: "USD",
                                duration: n,
                                duration_unit: "t",
                                symbol: r,
                                barrier: e
                            }
                        }))
                    }, g = e => {
                        l && c && !h && "MANUAL" !== m && (_.current = !0, j(!0), x ? Z.api_base.api.send({
                            buy_contract_for_multiple_accounts: "1",
                            tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(p).token],
                            price: o,
                            parameters: {
                                amount: o,
                                basis: "stake",
                                contract_type: a,
                                currency: "USD",
                                duration: n,
                                duration_unit: "t",
                                symbol: r,
                                barrier: e
                            }
                        }) : Z.api_base.api.send({
                            buy: "1",
                            price: o,
                            subscribe: 1,
                            parameters: {
                                amount: o,
                                basis: "stake",
                                contract_type: a,
                                currency: "USD",
                                duration: n,
                                duration_unit: "t",
                                symbol: r,
                                barrier: e
                            }
                        }))
                    }, b = () => {
                        let e = Array(10).fill(0);
                        t.forEach(t => {
                            e[t]++
                        });
                        let s = Math.min(...e),
                            a = [];
                        e.forEach((e, t) => {
                            e === s && a.push(t)
                        }), g(a[0].toString())
                    }, y = e => {
                        document.querySelectorAll(".progress").forEach(t => {
                            t.classList.remove("active"), parseInt(t.dataset.number) === e && t.classList.add("active")
                        })
                    }, f = e => {
                        let t = "",
                            s = "",
                            a = "",
                            n = -1 / 0,
                            i = 1 / 0,
                            l = 1 / 0,
                            r = document.querySelectorAll(".progress");
                        for (let [r, o] of Object.entries(e)) o > n && (n = o, t = r), o < i && o > 0 ? (l = i, a = s, i = o, s = r) : o < l && o > 0 && o !== i && (l = o, a = r);
                        return b(), r.forEach(e => {
                            e.classList.remove("top"), e.classList.remove("less"), e.classList.remove("second"), parseInt(e.dataset.number) === parseFloat(s) && e.classList.add("less"), parseInt(e.dataset.number) === parseFloat(t) && e.classList.add("top"), parseInt(e.dataset.number) === parseFloat(a) && e.classList.add("second")
                        }), {
                            maxKey: t,
                            minKey: s
                        }
                    }, N = (e => {
                        let t = {};
                        e.forEach(e => {
                            t[e] = (t[e] || 0) + 1
                        });
                        let a = e.length,
                            n = {};
                        for (let e in t) n[e] = t[e] / a * 100;
                        for (let e = 0; e <= 9; e++) {
                            let t = e.toString();
                            n[t] = n[t] || 0
                        }
                        return "undefined" != typeof document && (y(s), f(n)), n
                    })(t);
                    return (0, i.jsx)("div", {
                        children: (0, i.jsxs)("div", {
                            className: "differs_container",
                            children: [(0, i.jsxs)("div", {
                                className: "progress top",
                                "data-number": "0",
                                onClick: () => v("0"),
                                children: [(0, i.jsx)("h3", {
                                    children: "0"
                                }), (0, i.jsxs)("h4", {
                                    children: [N["0"].toFixed(2), (0, i.jsx)("span", {
                                        children: "%"
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "progress",
                                "data-number": "1",
                                onClick: () => v("1"),
                                children: [(0, i.jsx)("h3", {
                                    children: "1"
                                }), (0, i.jsxs)("h4", {
                                    children: [N["1"].toFixed(2), (0, i.jsx)("span", {
                                        children: "%"
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "progress",
                                "data-number": "2",
                                onClick: () => v("2"),
                                children: [(0, i.jsx)("h3", {
                                    children: "2"
                                }), (0, i.jsxs)("h4", {
                                    children: [N["2"].toFixed(2), (0, i.jsx)("span", {
                                        children: "%"
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "progress",
                                "data-number": "3",
                                onClick: () => v("3"),
                                children: [(0, i.jsx)("h3", {
                                    children: "3"
                                }), (0, i.jsxs)("h4", {
                                    children: [N["3"].toFixed(2), (0, i.jsx)("span", {
                                        children: "%"
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "progress less",
                                "data-number": "4",
                                onClick: () => v("4"),
                                children: [(0, i.jsx)("h3", {
                                    children: "4"
                                }), (0, i.jsxs)("h4", {
                                    children: [N["4"].toFixed(2), (0, i.jsx)("span", {
                                        children: "%"
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "progress",
                                "data-number": "5",
                                onClick: () => v("5"),
                                children: [(0, i.jsx)("h3", {
                                    children: "5"
                                }), (0, i.jsxs)("h4", {
                                    children: [N["5"].toFixed(2), (0, i.jsx)("span", {
                                        children: "%"
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "progress second",
                                "data-number": "6",
                                onClick: () => v("6"),
                                children: [(0, i.jsx)("h3", {
                                    children: "6"
                                }), (0, i.jsxs)("h4", {
                                    children: [N["6"].toFixed(2), (0, i.jsx)("span", {
                                        children: "%"
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "progress",
                                "data-number": "7",
                                onClick: () => v("7"),
                                children: [(0, i.jsx)("h3", {
                                    children: "7"
                                }), (0, i.jsxs)("h4", {
                                    children: [N["7"].toFixed(2), (0, i.jsx)("span", {
                                        children: "%"
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "progress",
                                "data-number": "8",
                                onClick: () => v("8"),
                                children: [(0, i.jsx)("h3", {
                                    children: "8"
                                }), (0, i.jsxs)("h4", {
                                    children: [N["8"].toFixed(2), (0, i.jsx)("span", {
                                        children: "%"
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "progress",
                                "data-number": "9",
                                onClick: () => v("9"),
                                children: [(0, i.jsx)("h3", {
                                    children: "9"
                                }), (0, i.jsxs)("h4", {
                                    children: [N["9"].toFixed(2), (0, i.jsx)("span", {
                                        children: "%"
                                    })]
                                })]
                            })]
                        })
                    })
                };
            var l8 = s("29009"),
                l3 = s("98687"),
                l4 = s("56880");
            class l7 extends l.PureComponent {
                render() {
                    let e;
                    let {
                        data: t
                    } = this.props;
                    return t.length > 9 && (e = t.slice(-10)), (0, i.jsx)(l8.h, {
                        width: "100%",
                        height: "100%",
                        style: {
                            padding: "10px 0px"
                        },
                        children: (0, i.jsx)(l3.w, {
                            width: 300,
                            height: 100,
                            data: t.length > 9 ? e : t,
                            children: (0, i.jsx)(l4.x, {
                                isAnimationActive: !1,
                                type: "monotone",
                                dataKey: "value",
                                stroke: "#8884d8",
                                strokeWidth: 2,
                                dot: e => {
                                    let {
                                        cx: t,
                                        cy: s,
                                        value: a
                                    } = e;
                                    return (0, i.jsxs)("g", {
                                        children: [(0, i.jsx)("circle", {
                                            cx: t,
                                            cy: s,
                                            r: 4,
                                            fill: "#8884d8"
                                        }), (0, i.jsx)("text", {
                                            x: t,
                                            y: s,
                                            dy: -10,
                                            textAnchor: "end",
                                            fill: a > 0 ? "#00a79e" : "#cc2e3d",
                                            children: a
                                        })]
                                    })
                                }
                            }, "line")
                        })
                    })
                }
            }
            var l6 = s("94831"),
                l9 = s("14195"),
                re = s("3023"),
                rt = s("75358"),
                rs = s("62722"),
                ra = s("64963"),
                rn = s("43815"),
                ri = s("2763");
            let rl = e => {
                    let {
                        x: t,
                        y: s,
                        width: a,
                        value: n
                    } = e;
                    return (0, i.jsx)("text", {
                        x: t + a + 5,
                        y: s + 10,
                        fill: "#666",
                        textAnchor: "start",
                        fontSize: 12,
                        children: n
                    })
                },
                rr = (e, t, s) => {
                    let a = e.length,
                        n = e.filter(e => e > t).length,
                        i = e.filter(e => e < s).length;
                    return [n / a * 100, i / a * 100]
                },
                ro = e => {
                    let {
                        overUnderList: t,
                        overValue: s,
                        underValue: a,
                        is_mobile: n,
                        active_symbol: r,
                        isOverUnderOneClickActive: o,
                        oneClickAmount: c,
                        oneClickDuration: d,
                        isTradeActive: u,
                        percentageValue: h,
                        overUnderContract: _,
                        overUnderDirection: m,
                        isTradeActiveRef: x,
                        enableCopyDemo: p,
                        liveAccCR: j,
                        setIsTradeActive: v
                    } = e, [g, b] = rr(t, Number(s), Number(a)), y = () => {
                        if ("SAME" === m) return _;
                        if ("OPPOSITE" === m) {
                            if ("DIGITOVER" === _) return "DIGITUNDER";
                            if ("DIGITUNDER" === _) return "DIGITOVER"
                        }
                    };
                    (0, l.useEffect)(() => {
                        let e = e => {
                            o && !u && (x.current = !0, v(!0), p ? Z.api_base.api.send({
                                buy_contract_for_multiple_accounts: "1",
                                tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(j).token],
                                price: c,
                                parameters: {
                                    amount: c,
                                    basis: "stake",
                                    contract_type: y(),
                                    currency: "USD",
                                    duration: d,
                                    duration_unit: "t",
                                    symbol: r,
                                    barrier: e
                                }
                            }) : Z.api_base.api.send({
                                buy: "1",
                                price: c,
                                subscribe: 1,
                                parameters: {
                                    amount: c,
                                    basis: "stake",
                                    contract_type: y(),
                                    currency: "USD",
                                    duration: d,
                                    duration_unit: "t",
                                    symbol: r,
                                    barrier: e
                                }
                            }))
                        };
                        "DIGITOVER" === _ ? "string" != typeof h && g > h && e("DIGITOVER" === _ ? s.toString() : a.toString()) : "string" != typeof h && b > h && e("DIGITOVER" === _ ? s.toString() : a.toString())
                    }, [g, b, u, t]);
                    let f = [{
                            name: "Over",
                            percentage: +g.toFixed(2)
                        }, {
                            name: "Under",
                            percentage: +b.toFixed(2)
                        }],
                        N = ["#4CAF50", "#F44336"];
                    return (0, i.jsx)(l8.h, {
                        width: "140%",
                        height: 211,
                        children: (0, i.jsxs)(l6.v, {
                            width: 100,
                            height: 211,
                            data: f,
                            layout: "vertical",
                            margin: {
                                top: 20,
                                right: 30,
                                left: 20,
                                bottom: 5
                            },
                            children: [(0, i.jsx)(l9.q, {
                                strokeDasharray: "3 3"
                            }), (0, i.jsx)(re.K, {
                                type: "number"
                            }), (0, i.jsx)(rt.B, {
                                type: "category",
                                dataKey: "name"
                            }), (0, i.jsx)(rs.u, {}), (0, i.jsxs)(ra.$, {
                                dataKey: "percentage",
                                fill: "#8884d8",
                                isAnimationActive: !n,
                                children: [f.map((e, t) => (0, i.jsx)(rn.b, {
                                    fill: N[t]
                                }, `cell-${t}`)), (0, i.jsx)(ri.e, {
                                    dataKey: "percentage",
                                    content: rl
                                })]
                            })]
                        })
                    })
                };
            var rc = s("58093"),
                rd = s("69441"),
                ru = s("57028");
            rd.kL.register(rd.qi, rd.u, rd.De, ru.Z);
            let rh = e => {
                    let {
                        allDigitList: t,
                        contract_type: s,
                        isEvenOddOneClickActive: a,
                        percentageValue: n,
                        active_symbol: l,
                        isTradeActiveRef: r,
                        oneClickAmount: o,
                        oneClickDuration: c,
                        isTradeActive: d,
                        enableCopyDemo: u,
                        liveAccCR: h,
                        sameDiffEvenOdd: _,
                        setIsTradeActive: m
                    } = e, x = e => "OPPOSITE" === _ ? "DIGITEVEN" === e ? "DIGITODD" : "DIGITEVEN" : e, p = () => {
                        a && !d && (r.current = !0, m(!0), u ? Z.api_base.api.send({
                            buy_contract_for_multiple_accounts: "1",
                            tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(h).token],
                            price: o,
                            parameters: {
                                amount: o,
                                basis: "stake",
                                contract_type: x(s),
                                currency: "USD",
                                duration: c,
                                duration_unit: "t",
                                symbol: l
                            }
                        }) : Z.api_base.api.send({
                            buy: "1",
                            price: o,
                            subscribe: 1,
                            parameters: {
                                amount: o,
                                basis: "stake",
                                contract_type: x(s),
                                currency: "USD",
                                duration: c,
                                duration_unit: "t",
                                symbol: l
                            }
                        }))
                    }, j = e => {
                        a && !d && (r.current = !0, m(!0), u ? Z.api_base.api.send({
                            buy_contract_for_multiple_accounts: "1",
                            tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(h).token],
                            price: o,
                            parameters: {
                                amount: o,
                                basis: "stake",
                                contract_type: x(e),
                                currency: "USD",
                                duration: c,
                                duration_unit: "t",
                                symbol: l
                            }
                        }) : Z.api_base.api.send({
                            buy: "1",
                            price: o,
                            subscribe: 1,
                            parameters: {
                                amount: o,
                                basis: "stake",
                                contract_type: x(e),
                                currency: "USD",
                                duration: c,
                                duration_unit: "t",
                                symbol: l
                            }
                        }))
                    }, v = (e => {
                        let t = 0,
                            s = 0,
                            a = e.length;
                        e.forEach(e => {
                            e % 2 == 0 ? s++ : t++
                        });
                        let n = (t / a * 100).toFixed(2),
                            i = (s / a * 100).toFixed(2);
                        return {
                            oddPercentage: parseFloat(n),
                            evenPercentage: parseFloat(i)
                        }
                    })(t);
                    "DIGITEVEN" === s && "number" == typeof n && v.evenPercentage >= n ? p() : "DIGITODD" === s && "number" == typeof n && v.oddPercentage >= n ? p() : "BOTH" === s && "number" == typeof n && v.oddPercentage >= n ? j("DIGITODD") : "BOTH" === s && "number" == typeof n && v.evenPercentage >= n && j("DIGITEVEN");
                    let g = {
                        labels: ["Even", "Odd"],
                        datasets: [{
                            data: [v.evenPercentage, v.oddPercentage],
                            backgroundColor: ["#36A2EB", "#FF6384"],
                            hoverBackgroundColor: ["#36A2EB", "#FF6384"]
                        }]
                    };
                    return (0, i.jsx)("div", {
                        children: (0, i.jsx)(rc.by, {
                            data: g,
                            options: {
                                responsive: !0,
                                plugins: {
                                    legend: {
                                        position: "top"
                                    },
                                    tooltip: {
                                        callbacks: {
                                            label: e => `${e.label}: ${e.raw}%`
                                        }
                                    },
                                    datalabels: {
                                        formatter: (e, t) => `${e}%`,
                                        color: "#fff"
                                    }
                                }
                            }
                        })
                    })
                },
                r_ = e => {
                    let {
                        x: t,
                        y: s,
                        width: a,
                        value: n
                    } = e;
                    return (0, i.jsx)("text", {
                        x: t + a + 5,
                        y: s + 10,
                        fill: "#666",
                        textAnchor: "start",
                        fontSize: 12,
                        children: n
                    })
                };
            class rm extends l.PureComponent {
                render() {
                    let {
                        allDigitList: e,
                        is_mobile: t
                    } = this.props, s = function(e) {
                        let t = 0,
                            s = 0,
                            a = e.length - 1;
                        if (e.length < 2) return {
                            risePercentage: 0,
                            fallPercentage: 0
                        };
                        for (let a = 1; a < e.length; a++) e[a] > e[a - 1] ? t++ : e[a] < e[a - 1] && s++;
                        let n = t / a * 100,
                            i = s / a * 100;
                        return {
                            risePercentage: +n.toFixed(2),
                            fallPercentage: +i.toFixed(2)
                        }
                    }(e), a = [{
                        name: "Rise",
                        percentage: +s.risePercentage.toFixed(2)
                    }, {
                        name: "Fall",
                        percentage: +s.fallPercentage.toFixed(2)
                    }], n = ["#4CAF50", "#F44336"];
                    return (0, i.jsx)(l8.h, {
                        width: "140%",
                        height: 211,
                        children: (0, i.jsxs)(l6.v, {
                            width: 100,
                            height: 211,
                            data: a,
                            layout: "vertical",
                            margin: {
                                top: 20,
                                right: 30,
                                left: 20,
                                bottom: 5
                            },
                            children: [(0, i.jsx)(l9.q, {
                                strokeDasharray: "3 3"
                            }), (0, i.jsx)(re.K, {
                                type: "number",
                                label: ""
                            }), (0, i.jsx)(rt.B, {
                                type: "category",
                                dataKey: "name"
                            }), (0, i.jsx)(rs.u, {}), (0, i.jsxs)(ra.$, {
                                dataKey: "percentage",
                                isAnimationActive: !t,
                                children: [a.map((e, t) => (0, i.jsx)(rn.b, {
                                    fill: n[t]
                                }, `cell-${t}`)), (0, i.jsx)(ri.e, {
                                    dataKey: "percentage",
                                    content: r_
                                })]
                            })]
                        })
                    })
                }
            }
            let rx = (e, t, s) => {
                    let a = e.length,
                        n = t.length,
                        i = e.filter(e => e % 2 == 0).length,
                        l = e.filter(e => e % 2 != 0).length,
                        r = e.filter(e => e > s).length,
                        o = e.filter(e => e <= s).length,
                        c = e.filter(e => e === s).length,
                        d = e.filter(e => e !== s).length,
                        u = 0,
                        h = 0;
                    for (let e = 1; e < t.length; e++) t[e] > t[e - 1] ? u++ : h++;
                    let _ = u / (n - 1) * 100;
                    return {
                        evenPercentage: i / a * 100,
                        oddPercentage: l / a * 100,
                        overPercentage: r / a * 100,
                        underPercentage: o / a * 100,
                        matchesPercentage: c / a * 100,
                        differsPercentage: d / a * 100,
                        risePercentage: _,
                        fallPercentage: h / (n - 1) * 100
                    }
                },
                rp = e => {
                    let {
                        digitList: t,
                        tickList: s,
                        CirclesDigitList: a,
                        is_dark_mode_on: n,
                        customPrediction: r,
                        martingaleValueRef: o,
                        guideElement: c,
                        handleMartingaleInputChange: d,
                        selectTickList: u,
                        buy_contract: h,
                        buy_contract_differs: _,
                        handleCustomPredictionInputChange: m,
                        numDigits: x,
                        setNumDigits: p,
                        comparisonOperator: j,
                        setComparisonOperator: v,
                        tradeAction: g,
                        setTradeAction: b,
                        isAutoTrading: y,
                        setIsAutoTrading: f,
                        tradeExecuted: N,
                        setTradeExecuted: C,
                        numDigits1: S,
                        setNumDigits1: T,
                        predictionDigits: k,
                        setPredictionDigits: w,
                        comparisonOperator1: E,
                        setComparisonOperator1: I,
                        tradeAction1: A,
                        setTradeAction1: R,
                        isAutoTrading1: D,
                        setIsAutoTrading1: O,
                        tradeExecuted1: L,
                        setTradeExecuted1: M,
                        lastTradeType: U,
                        setLastTradeType: F,
                        isCustomTradeFormVisible: P,
                        setIsCustomTradeFormVisible: Z,
                        numTicks: z,
                        setNumTicks: $,
                        comparisonOperator2: B,
                        setComparisonOperator2: G,
                        tradeAction2: V,
                        setTradeAction2: X,
                        isAutoTrading2: H,
                        setIsAutoTrading2: q,
                        tradeExecuted2: Y,
                        setTradeExecuted2: W,
                        lastTradeType2: K,
                        setLastTradeType2: J,
                        isSequencesVisible: Q,
                        setIsSequencesVisible: ee,
                        isRFSequencesVisible: et,
                        setIsRFSequencesVisible: es
                    } = e, ea = t.slice(-x), en = t.slice(-Number(S)), ei = s.slice(-Number(z)), el = "string" == typeof r ? parseInt(r) : r, er = ea.every(e => {
                        switch (j) {
                            case "less than LDP":
                                return e < el;
                            case "less or equal to LDP":
                                return e <= el;
                            case "greater than LDP":
                                return e > el;
                            case "greater or equal to LDP":
                                return e >= el;
                            case "equal to LDP":
                                return e === el;
                            case "all digits are the same":
                                return ea.every(e => e === ea[0]);
                            default:
                                return !1
                        }
                    });
                    (0, l.useEffect)(() => {
                        let e;
                        return y && (e = setInterval(() => {
                            er && !N ? (_(g), C(!0)) : !er && C(!1)
                        }, 1e3)), () => clearInterval(e)
                    }, [_, y, er, g, N]);
                    let eo = (0, l.useCallback)(() => {
                        if ("custom" !== E) return en.every(e => "even" === E ? e % 2 == 0 : "odd" === E && e % 2 != 0); {
                            let e = en.every(e => e % 2 == 0),
                                t = en.every(e => e % 2 != 0);
                            return e && "even" !== U ? (h("DIGITODD", !0), F("even")) : t && "odd" !== U && (h("DIGITEVEN", !0), F("odd")), e || t
                        }
                    }, [E, en, U, h]);
                    (0, l.useEffect)(() => {
                        let e;
                        return D && (e = setInterval(() => {
                            eo() && !L ? ("custom" !== E && h(A, !0), M(!0)) : !eo() && (M(!1), F(null))
                        }, 1e3)), () => clearInterval(e)
                    }, [h, D, A, L, eo, E]);
                    let ec = (0, l.useCallback)(() => {
                        if ("rf" !== B) return ei.every((e, t) => "rise" === B ? s[t + 1] > s[t] : "fall" === B && s[t + 1] < s[t]); {
                            let e = ei.every((e, t) => s[t + 1] > s[t]),
                                t = ei.every((e, t) => s[t + 1] < s[t]);
                            return e && "rise" !== K ? (h("PUT", !0), J("rise")) : t && "fall" !== K && (h("CALL", !0), J("fall")), e || t
                        }
                    }, [B, ei, s, K, h]);
                    (0, l.useEffect)(() => {
                        let e;
                        return H && (e = setInterval(() => {
                            ec() && !Y ? ("rf" !== B && h(V, !0), W(!0)) : !ec() && (W(!1), J(null))
                        }, 1e3)), () => clearInterval(e)
                    }, [h, H, V, Y, ec, B]), rx(t, s, el);
                    let [ed, eu] = (0, l.useState)(8), [eh, e_] = (0, l.useState)(!1);
                    (0, l.useEffect)(() => {
                        let e = () => {
                            window.innerWidth < 768 ? eu(6) : eu(8)
                        };
                        return e(), window.addEventListener("resize", e), () => window.removeEventListener("resize", e)
                    }, []);
                    let em = () => {
                            e_(!eh)
                        },
                        ex = eh ? t.slice(-100) : t.slice(-ed);
                    s = s.slice(-9), a = a.slice(-1e3);
                    let ep = Array.from({
                            length: 10
                        }, (e, t) => rx(a, s, t).matchesPercentage),
                        ej = [...ep].slice().sort((e, t) => t - e),
                        ev = ep.indexOf(ej[0]),
                        eg = ep.indexOf(ej[1]),
                        eb = ep.indexOf(ej[ej.length - 1]),
                        ey = ep.indexOf(ej[ej.length - 2]),
                        ef = e => {
                            let t, s;
                            return e === ev ? (t = 40, s = "#00a79e") : e === eg ? (t = 50, s = "#070bf7") : e === eb ? (t = 40, s = "#ff0000") : e === ey ? (t = 50, s = "#ffe644") : (t = 50, s = "#777"), `#444 linear-gradient(to bottom, transparent ${t}%, ${s} 0)`
                        },
                        [eN, eC] = (0, l.useState)([{
                            evenOddSelection: "Even",
                            operator: "Greater than",
                            threshold: 50,
                            tradeSelection: "Even",
                            isTrading: !1,
                            isTradeActive: !1
                        }]),
                        eS = (0, l.useRef)(!1),
                        eT = e => {
                            eC(t => t.filter((t, s) => s !== e))
                        },
                        ek = e => {
                            eC(t => t.map((t, s) => s === e ? { ...t,
                                isTrading: !t.isTrading
                            } : t))
                        },
                        {
                            evenPercentage: ew,
                            oddPercentage: eE
                        } = rx(t, s, el),
                        eI = (e, t) => {
                            let {
                                evenOddSelection: s,
                                operator: a,
                                threshold: n,
                                tradeSelection: i
                            } = e, l = "Even" === s ? ew : eE;
                            ("Greater than" === a && l > n || "Less than" === a && l < n || "Equal" === a && Math.round(l) === n) && !eS.current && (eS.current = !0, h("Even" === i ? "DIGITEVEN" : "DIGITODD", !0), setTimeout(() => {
                                eS.current = !1, eC(e => e.map((e, s) => s === t ? { ...e,
                                    isTradeActive: !1
                                } : e))
                            }, 5e3))
                        };
                    return (0, l.useEffect)(() => {
                        let e = setInterval(() => {
                            eN.forEach((e, t) => {
                                e.isTrading && !e.isTradeActive && eI(e, t)
                            })
                        }, 1e3);
                        return () => clearInterval(e)
                    }, [eN, ew, eE]), (0, i.jsxs)("div", {
                        className: "ldp_max_container",
                        children: [(0, i.jsxs)("div", {
                            className: "container-ldp",
                            style: {
                                color: n ? "#fff" : "#000"
                            },
                            children: [(0, i.jsxs)("div", {
                                className: "card-container",
                                children: [(0, i.jsxs)("div", {
                                    className: "card-header",
                                    children: [(0, i.jsx)("h4", {
                                        children: "Digit Circles Analysistool"
                                    }), (0, i.jsx)("div", {
                                        className: "toggle-icon",
                                        onClick: () => Z(e => !e),
                                        children: P ? (0, i.jsx)(lk.tgn, {
                                            size: 25
                                        }) : (0, i.jsx)(lk.dSq, {
                                            size: 25
                                        })
                                    })]
                                }), P && (0, i.jsx)("div", {
                                    className: "digit-list",
                                    children: Array.from({
                                        length: 10
                                    }, (e, n) => {
                                        let l = rx(a, s, n).matchesPercentage,
                                            o = ef(n),
                                            c = t.slice(-1)[0];
                                        return (0, i.jsxs)("div", {
                                            className: `digit-item ${n===r?"selected":""}`,
                                            onClick: () => m({
                                                target: {
                                                    value: n
                                                }
                                            }),
                                            style: {
                                                background: o,
                                                position: "relative"
                                            },
                                            children: [(0, i.jsx)("h3", {
                                                children: n
                                            }), (0, i.jsxs)("h4", {
                                                children: [l.toFixed(2), "%"]
                                            }), n === c && (0, i.jsx)("svg", {
                                                xmlns: "http://www.w3.org/2000/svg",
                                                width: "16",
                                                height: "16",
                                                style: {
                                                    position: "absolute",
                                                    bottom: "-15px",
                                                    left: "50%",
                                                    transform: "translateX(-50%)"
                                                },
                                                children: (0, i.jsx)("path", {
                                                    fill: "red",
                                                    d: "M8 4l6 8H2z"
                                                })
                                            })]
                                        }, n)
                                    })
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "card-container",
                                children: [(0, i.jsxs)("div", {
                                    className: "card-header",
                                    children: [(0, i.jsx)("h4", {
                                        children: "Over Under Differ LDP Auto"
                                    }), (0, i.jsx)("div", {
                                        className: "toggle-icon",
                                        onClick: () => Z(e => !e),
                                        children: P ? (0, i.jsx)(lk.tgn, {
                                            size: 25
                                        }) : (0, i.jsx)(lk.dSq, {
                                            size: 25
                                        })
                                    })]
                                }), P && (0, i.jsxs)(i.Fragment, {
                                    children: [(0, i.jsxs)("div", {
                                        className: "last_p",
                                        children: [(0, i.jsxs)("div", {
                                            className: "martingale_ldp",
                                            children: [(0, i.jsx)("label", {
                                                htmlFor: "",
                                                children: "LDP:"
                                            }), (0, i.jsx)("input", {
                                                className: "custom_prediction",
                                                type: "number",
                                                value: r,
                                                onChange: m
                                            })]
                                        }), u(), (0, i.jsxs)("div", {
                                            className: "martingale_ldp",
                                            children: [(0, i.jsx)("small", {
                                                children: "Martingale"
                                            }), (0, i.jsx)("input", {
                                                className: "custom_prediction",
                                                type: "number",
                                                value: o.current,
                                                onChange: d
                                            })]
                                        }), c()]
                                    }), (0, i.jsxs)("div", {
                                        className: "card-body",
                                        children: [(0, i.jsxs)("div", {
                                            className: "all_digit_boxes",
                                            children: [ex.map((e, t) => {
                                                let s = "";
                                                return "number" == typeof r && (s = e > r ? "over" : e < r ? "under" : "same"), (0, i.jsx)("div", {
                                                    className: `digit-box ${s}`,
                                                    children: e
                                                }, t)
                                            }), (0, i.jsx)("button", {
                                                onClick: em,
                                                className: "toggle-button",
                                                children: eh ? "Less" : "More"
                                            })]
                                        }), (0, i.jsxs)("div", {
                                            className: "custom-trade-form",
                                            children: [(0, i.jsxs)("label", {
                                                children: ["If the last", (0, i.jsx)("input", {
                                                    type: "number",
                                                    value: x,
                                                    onChange: e => {
                                                        let t = e.target.value;
                                                        p("" === t ? "" : Number(t))
                                                    }
                                                }), " Digits are"]
                                            }), (0, i.jsxs)("select", {
                                                value: j,
                                                onChange: e => {
                                                    v(e.target.value)
                                                },
                                                children: [(0, i.jsx)("option", {
                                                    selected: !0,
                                                    children: "Select <, >, =, ≤, or ≥"
                                                }), (0, i.jsx)("option", {
                                                    value: "less than LDP",
                                                    children: "Less than LDP"
                                                }), (0, i.jsx)("option", {
                                                    value: "less or equal to LDP",
                                                    children: "Less or equal to LDP"
                                                }), (0, i.jsx)("option", {
                                                    value: "greater than LDP",
                                                    children: "Greater than LDP"
                                                }), (0, i.jsx)("option", {
                                                    value: "greater or equal to LDP",
                                                    children: "Greater or equal to LDP"
                                                }), (0, i.jsx)("option", {
                                                    value: "equal to LDP",
                                                    children: "Equal to LDP"
                                                }), (0, i.jsx)("option", {
                                                    value: "all digits are the same",
                                                    children: "All digits are the same"
                                                })]
                                            }), (0, i.jsxs)("label", {
                                                children: ["than", (0, i.jsx)("input", {
                                                    type: "number",
                                                    value: r,
                                                    onChange: m
                                                })]
                                            }), (0, i.jsx)("label", {
                                                children: " then it trades "
                                            }), (0, i.jsxs)("select", {
                                                value: g,
                                                onChange: e => {
                                                    b(e.target.value)
                                                },
                                                children: [(0, i.jsx)("option", {
                                                    value: "DIGITOVER",
                                                    children: "Digit Over"
                                                }), (0, i.jsx)("option", {
                                                    value: "DIGITUNDER",
                                                    children: "Digit Under"
                                                }), (0, i.jsx)("option", {
                                                    value: "DIGITDIFF",
                                                    children: "Digit Differs"
                                                })]
                                            }), (0, i.jsx)("div", {
                                                className: "auto-trade-controls",
                                                children: (0, i.jsx)("button", {
                                                    style: {
                                                        backgroundColor: y ? "red" : "green",
                                                        color: "#fff"
                                                    },
                                                    onClick: () => f(e => !e),
                                                    children: y ? "STOP" : "START"
                                                })
                                            })]
                                        })]
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "card-container",
                                children: [(0, i.jsxs)("div", {
                                    className: "card-header",
                                    children: [(0, i.jsx)("h4", {
                                        children: "Even Odd Auto bot"
                                    }), (0, i.jsx)("div", {
                                        className: "toggle-icon",
                                        onClick: () => ee(e => !e),
                                        children: Q ? (0, i.jsx)(lk.tgn, {
                                            size: 25
                                        }) : (0, i.jsx)(lk.dSq, {
                                            size: 25
                                        })
                                    })]
                                }), Q && (0, i.jsxs)(i.Fragment, {
                                    children: [(0, i.jsxs)("div", {
                                        className: "last_p",
                                        children: [u(), (0, i.jsxs)("div", {
                                            className: "martingale_ldp",
                                            children: [(0, i.jsx)("small", {
                                                children: "Martingale"
                                            }), (0, i.jsx)("input", {
                                                className: "custom_prediction",
                                                type: "number",
                                                value: o.current,
                                                onChange: d
                                            })]
                                        }), c()]
                                    }), (0, i.jsx)("div", {
                                        className: "card-body",
                                        children: (0, i.jsxs)("div", {
                                            className: "sequence",
                                            children: [(0, i.jsxs)("div", {
                                                className: "sequence-container",
                                                children: [ex.map((e, t) => (0, i.jsx)("div", {
                                                    className: `digit-box ${e%2==0?"even":"odd"}`,
                                                    children: e % 2 == 0 ? "E" : "O"
                                                }, t)), (0, i.jsx)("button", {
                                                    onClick: em,
                                                    className: "toggle-button",
                                                    children: eh ? "Less" : "More"
                                                })]
                                            }), (0, i.jsxs)("div", {
                                                className: "custom-trade-form",
                                                children: [(0, i.jsxs)("label", {
                                                    children: ["If the last", (0, i.jsx)("input", {
                                                        type: "number",
                                                        value: S,
                                                        onChange: e => {
                                                            let t = e.target.value;
                                                            T("" === t ? "" : Number(t))
                                                        }
                                                    }), "digits are"]
                                                }), (0, i.jsxs)("select", {
                                                    value: E,
                                                    onChange: e => {
                                                        I(e.target.value)
                                                    },
                                                    children: [(0, i.jsx)("option", {
                                                        value: "odd",
                                                        children: "Odd"
                                                    }), (0, i.jsx)("option", {
                                                        value: "even",
                                                        children: "Even"
                                                    }), (0, i.jsx)("option", {
                                                        value: "custom",
                                                        children: "If Even → Odd, Odd → Even"
                                                    })]
                                                }), "custom" !== E && (0, i.jsxs)(i.Fragment, {
                                                    children: [(0, i.jsx)("label", {
                                                        children: "it trades"
                                                    }), (0, i.jsxs)("select", {
                                                        value: A,
                                                        onChange: e => {
                                                            R(e.target.value)
                                                        },
                                                        children: [(0, i.jsx)("option", {
                                                            value: "DIGITODD",
                                                            children: "Odd Trade"
                                                        }), (0, i.jsx)("option", {
                                                            value: "DIGITEVEN",
                                                            children: "Even Trade"
                                                        })]
                                                    })]
                                                }), (0, i.jsx)("div", {
                                                    className: "auto-trade-controls",
                                                    children: (0, i.jsx)("button", {
                                                        style: {
                                                            backgroundColor: D ? "red" : "green",
                                                            color: "#fff"
                                                        },
                                                        onClick: () => O(e => !e),
                                                        children: D ? "STOP" : "START"
                                                    })
                                                })]
                                            })]
                                        })
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "card-container",
                                children: [(0, i.jsxs)("div", {
                                    className: "card-header",
                                    children: [(0, i.jsx)("h4", {
                                        children: "Rise Fall Auto bot"
                                    }), (0, i.jsx)("div", {
                                        className: "toggle-icon",
                                        onClick: () => es(e => !e),
                                        children: et ? (0, i.jsx)(lk.tgn, {
                                            size: 25
                                        }) : (0, i.jsx)(lk.dSq, {
                                            size: 25
                                        })
                                    })]
                                }), et && (0, i.jsxs)(i.Fragment, {
                                    children: [(0, i.jsxs)("div", {
                                        className: "last_p",
                                        children: [u(), (0, i.jsxs)("div", {
                                            className: "martingale_ldp",
                                            children: [(0, i.jsx)("small", {
                                                children: "Martingale"
                                            }), (0, i.jsx)("input", {
                                                className: "custom_prediction",
                                                type: "number",
                                                value: o.current,
                                                onChange: d
                                            })]
                                        }), c()]
                                    }), (0, i.jsx)("div", {
                                        className: "card-body",
                                        children: (0, i.jsxs)("div", {
                                            className: "sequence",
                                            children: [(0, i.jsx)("div", {
                                                className: "sequence-container",
                                                children: (() => {
                                                    let e = [];
                                                    for (let t = 1; t < s.length; t++) e.push(s[t] > s[t - 1] ? "R" : "F");
                                                    return e.map((e, t) => (0, i.jsx)("div", {
                                                        className: `digit-box ${"R"===e?"even":"odd"}`,
                                                        children: e
                                                    }, t))
                                                })()
                                            }), (0, i.jsxs)("div", {
                                                className: "custom-trade-form",
                                                children: [(0, i.jsxs)("label", {
                                                    children: ["If the last", (0, i.jsx)("input", {
                                                        type: "number",
                                                        value: z,
                                                        onChange: e => {
                                                            let t = e.target.value;
                                                            $("" === t ? "" : Number(t))
                                                        }
                                                    }), "ticks are"]
                                                }), (0, i.jsxs)("select", {
                                                    value: B,
                                                    onChange: e => {
                                                        G(e.target.value)
                                                    },
                                                    children: [(0, i.jsx)("option", {
                                                        value: "fall",
                                                        children: "Fall"
                                                    }), (0, i.jsx)("option", {
                                                        value: "rise",
                                                        children: "Rise"
                                                    }), (0, i.jsx)("option", {
                                                        value: "rf",
                                                        children: "If Rise → Fall, Fall → Rise"
                                                    })]
                                                }), "rf" !== B && (0, i.jsxs)(i.Fragment, {
                                                    children: [(0, i.jsx)("label", {
                                                        children: "it trades"
                                                    }), (0, i.jsxs)("select", {
                                                        value: V,
                                                        onChange: e => {
                                                            X(e.target.value)
                                                        },
                                                        children: [(0, i.jsx)("option", {
                                                            value: "CALL",
                                                            children: "Rise"
                                                        }), (0, i.jsx)("option", {
                                                            value: "PUT",
                                                            children: "Fall"
                                                        })]
                                                    })]
                                                }), (0, i.jsx)("div", {
                                                    className: "auto-trade-controls",
                                                    children: (0, i.jsx)("button", {
                                                        style: {
                                                            backgroundColor: H ? "red" : "green",
                                                            color: "#fff"
                                                        },
                                                        onClick: () => q(e => !e),
                                                        children: H ? "STOP" : "START"
                                                    })
                                                })]
                                            })]
                                        })
                                    })]
                                })]
                            })]
                        }), (0, i.jsx)("div", {
                            className: "instance-container",
                            children: eN.map((e, t) => (0, i.jsxs)("div", {
                                className: "instance-card",
                                style: {
                                    color: n ? "#fff" : "#000"
                                },
                                children: [(0, i.jsxs)("div", {
                                    className: "instance-header",
                                    children: [(0, i.jsxs)("h4", {
                                        className: "header-title",
                                        children: ["Instance ", t + 1]
                                    }), (0, i.jsx)("button", {
                                        className: "btn-remove-instance",
                                        onClick: () => eT(t),
                                        children: (0, i.jsx)("span", {
                                            children: "X"
                                        })
                                    })]
                                }), (0, i.jsxs)("div", {
                                    className: "sequence",
                                    children: [(0, i.jsxs)("div", {
                                        className: "last_p",
                                        children: [u(), (0, i.jsxs)("div", {
                                            className: "martingale_ldp",
                                            children: [(0, i.jsx)("small", {
                                                children: "Martingale"
                                            }), (0, i.jsx)("input", {
                                                className: "custom_prediction",
                                                type: "number",
                                                value: o.current,
                                                onChange: d
                                            })]
                                        }), c()]
                                    }), (0, i.jsxs)("div", {
                                        className: "metrics",
                                        children: [(0, i.jsxs)("button", {
                                            className: "metric even",
                                            children: ["Even ", ew.toFixed(2), "%"]
                                        }), (0, i.jsxs)("button", {
                                            className: "metric odd",
                                            children: ["Odd ", eE.toFixed(2), "%"]
                                        })]
                                    })]
                                }), (0, i.jsxs)("div", {
                                    className: "custom-trade-form",
                                    children: [(0, i.jsxs)("label", {
                                        children: ["If the last", (0, i.jsxs)("select", {
                                            value: e.evenOddSelection,
                                            onChange: e => eC(s => s.map((s, a) => a === t ? { ...s,
                                                evenOddSelection: e.target.value
                                            } : s)),
                                            children: [(0, i.jsx)("option", {
                                                value: "Even",
                                                children: "Even %"
                                            }), (0, i.jsx)("option", {
                                                value: "Odd",
                                                children: "Odd %"
                                            })]
                                        }), "is"]
                                    }), (0, i.jsxs)("select", {
                                        value: e.operator,
                                        onChange: e => eC(s => s.map((s, a) => a === t ? { ...s,
                                            operator: e.target.value
                                        } : s)),
                                        children: [(0, i.jsx)("option", {
                                            value: "Greater than",
                                            children: "Greater than"
                                        }), (0, i.jsx)("option", {
                                            value: "Less than",
                                            children: "Less than"
                                        }), (0, i.jsx)("option", {
                                            value: "Equal",
                                            children: "Equal"
                                        })]
                                    }), (0, i.jsx)("input", {
                                        type: "number",
                                        className: "custom_prediction",
                                        value: e.threshold,
                                        onChange: e => eC(s => s.map((s, a) => a === t ? { ...s,
                                            threshold: parseInt(e.target.value)
                                        } : s))
                                    }), "%", (0, i.jsx)("label", {
                                        children: "it takes"
                                    }), (0, i.jsxs)("select", {
                                        value: e.tradeSelection,
                                        onChange: e => eC(s => s.map((s, a) => a === t ? { ...s,
                                            tradeSelection: e.target.value
                                        } : s)),
                                        children: [(0, i.jsx)("option", {
                                            value: "Even",
                                            children: "Even trade"
                                        }), (0, i.jsx)("option", {
                                            value: "Odd",
                                            children: "Odd trade"
                                        })]
                                    }), (0, i.jsx)("div", {
                                        className: "auto-trade-controls",
                                        children: (0, i.jsx)("button", {
                                            style: {
                                                backgroundColor: e.isTrading ? "red" : "green",
                                                color: "#fff"
                                            },
                                            onClick: () => ek(t),
                                            children: e.isTrading ? "Stop" : "Start"
                                        })
                                    })]
                                })]
                            }))
                        }), (0, i.jsx)("button", {
                            className: "btn-add-instance",
                            onClick: () => {
                                eC(e => [...e, {
                                    evenOddSelection: "Even",
                                    operator: "Greater than",
                                    threshold: 50,
                                    tradeSelection: "Even",
                                    isTrading: !1,
                                    isTradeActive: !1
                                }])
                            },
                            children: "Add Instance"
                        })]
                    })
                };
            var rj = s("62807"),
                rv = s("21021"),
                rg = s("68661"),
                rb = s("29783");
            let ry = (e, t, s) => {
                    let a = e.length;
                    t.length;
                    let n = e.filter(e => e % 2 == 0).length,
                        i = e.filter(e => e % 2 != 0).length,
                        l = e.filter(e => e > s).length,
                        r = e.filter(e => e <= s).length,
                        o = e.filter(e => e === s).length,
                        c = e.filter(e => e !== s).length,
                        d = 0,
                        u = 0;
                    for (let e = 1; e < t.length; e++) t[e] > t[e - 1] ? d++ : t[e] < t[e - 1] && u++;
                    let h = d + u,
                        _ = h > 0 ? d / h * 100 : 0;
                    return {
                        evenPercentage: n / a * 100,
                        oddPercentage: i / a * 100,
                        overPercentage: l / a * 100,
                        underPercentage: r / a * 100,
                        matchesPercentage: o / a * 100,
                        differsPercentage: c / a * 100,
                        risePercentage: _,
                        fallPercentage: h > 0 ? u / h * 100 : 0
                    }
                },
                rf = (0, r.Pi)(() => {
                    let [e, t] = (0, l.useState)("AUTOLDP"), [s, a] = (0, l.useState)(!1), [n, r] = (0, l.useState)("Updating..."), [o, c] = (0, l.useState)([]), [d, u] = (0, l.useState)(!0), [h, _] = (0, l.useState)(0), [m, x] = (0, l.useState)(1e3), [p, v] = (0, l.useState)([]), [g, b] = (0, l.useState)(1.2), [y, f] = (0, l.useState)(!1), [N, C] = (0, l.useState)(1), [S, T] = (0, l.useState)(.5), [k, w] = (0, l.useState)(""), [E, I] = (0, l.useState)("R_100"), [A, R] = (0, l.useState)("R_100"), [D, O] = (0, l.useState)(2), [L, M] = (0, l.useState)(!1), [U, F] = (0, l.useState)(!1), [P, z] = (0, l.useState)(!1), [$, B] = (0, l.useState)(""), [G, V] = (0, l.useState)(!1), [X, H] = (0, l.useState)(2), [q, Y] = (0, l.useState)(2), [W, K] = (0, l.useState)(!1), [J, Q] = (0, l.useState)(!0), [ee, et] = (0, l.useState)(!1), [es, ea] = (0, l.useState)(""), [en, ei] = (0, l.useState)(!1), [el, er] = (0, l.useState)(!1), [eo, ec] = (0, l.useState)(!1), [ed, eu] = (0, l.useState)(null), [eh, e_] = (0, l.useState)(3), [em, ex] = (0, l.useState)("greater than"), [ep, ej] = (0, l.useState)("DIGITOVER"), [ev, eg] = (0, l.useState)(!1), [eb, ey] = (0, l.useState)(!1), [ef, eN] = (0, l.useState)(5), [eC, eS] = (0, l.useState)(5), [eT, ek] = (0, l.useState)("even"), [ew, eE] = (0, l.useState)("DIGITEVEN"), [eI, eA] = (0, l.useState)(!1), [eR, eD] = (0, l.useState)(!1), [eO, eL] = (0, l.useState)(null), [eM, eU] = (0, l.useState)(5), [eF, eP] = (0, l.useState)("rise"), [eZ, ez] = (0, l.useState)("CALL"), [e$, eB] = (0, l.useState)(!1), [eG, eV] = (0, l.useState)(!1), [eX, eH] = (0, l.useState)(null), [eq, eY] = (0, l.useState)(!1), [eW, eK] = (0, l.useState)(5), [eJ, eQ] = (0, l.useState)(4), [e0, e1] = (0, l.useState)([]), e5 = e => {
                        e1(t => t.includes(e) ? t.filter(t => t !== e) : [...t, e])
                    }, [e2, e8] = (0, l.useState)({
                        evenOdd: {
                            percentageType: "even",
                            operator: "greater",
                            threshold: 60,
                            tradeAction: "DIGITEVEN",
                            isActive: !1,
                            conditionMet: !1,
                            executed: !1
                        },
                        overUnder: {
                            percentageType: "over",
                            operator: "greater",
                            threshold: 60,
                            tradeAction: "DIGITOVER",
                            isActive: !1,
                            conditionMet: !1,
                            executed: !1
                        },
                        riseFall: {
                            percentageType: "rise",
                            operator: "greater",
                            threshold: 60,
                            tradeAction: "CALL",
                            isActive: !1,
                            conditionMet: !1,
                            executed: !1
                        },
                        matchesDiffers: {
                            percentageType: "matches",
                            operator: "greater",
                            threshold: 60,
                            tradeAction: "DIGITMATCH",
                            isActive: !1,
                            conditionMet: !1,
                            executed: !1
                        }
                    }), e3 = (e, t, s) => {
                        e8(a => ({ ...a,
                            [e]: { ...a[e],
                                [t]: s,
                                executed: "isActive" !== t && a[e].executed,
                                conditionMet: "isActive" !== t && a[e].conditionMet
                            }
                        }))
                    }, e4 = (0, l.useRef)(g), e7 = (0, l.useRef)(y), e6 = (0, l.useRef)([]), e9 = (0, l.useRef)(0), te = (0, l.useRef)(.5), tt = (0, l.useRef)(["DIGITODD", "DIGITEVEN", "DIGITOVER", "DIGITUNDER", "DIGITDIFF"]);
                    (0, l.useRef)({
                        appearence: 0,
                        value: 0
                    }), (0, l.useRef)({
                        appearence: 0,
                        value: 0
                    });
                    let ts = (0, l.useRef)(2),
                        ta = (0, l.useRef)(2),
                        tn = (0, l.useRef)(0),
                        ti = (0, l.useRef)(!1);
                    (0, l.useRef)(!1);
                    let tl = (0, l.useRef)(!0),
                        {
                            ui: tr
                        } = (0, j.oR)(),
                        {
                            transactions: to,
                            run_panel: tc
                        } = (0, j.oR)(),
                        {
                            registerBotListeners: td,
                            unregisterBotListeners: tu
                        } = tc,
                        {
                            is_mobile: th,
                            is_dark_mode_on: t_
                        } = tr,
                        {
                            updateResultsCompletedContract: tm
                        } = to;
                    (0, l.useEffect)(() => {
                        td(), tp();
                        let e = localStorage.getItem("no_of_ticks"),
                            s = localStorage.getItem("active_card");
                        return null !== e && x(parseFloat(e)), null !== s && t(s), () => {
                            tu()
                        }
                    }, []), (0, l.useEffect)(() => {
                        A !== E && Z.api_base4.api.send({
                            ticks_history: E,
                            adjust_start_time: 1,
                            count: 5e3,
                            end: "latest",
                            start: 1,
                            style: "ticks"
                        }), R(E)
                    }, [E]);
                    let tx = (e, t) => {
                            let s = e.toFixed(t);
                            return Number(s = String(s).slice(-1))
                        },
                        tp = async () => {
                            if (await new Promise(e => setTimeout(e, 5e3)), !s && (Z.api_base4.api.send({
                                    active_symbols: "brief",
                                    product_type: "basic"
                                }), a(!0)), Z.api_base4.api) {
                                let e = Z.api_base4.api.onMessage().subscribe(e => {
                                    let {
                                        data: t
                                    } = e;
                                    if ("tick" === t.msg_type) {
                                        let {
                                            tick: e
                                        } = t, {
                                            ask: s,
                                            id: a,
                                            pip_size: n
                                        } = e;
                                        _(tx(s, n)), r(s), ty(), c(e => [...e, s])
                                    }
                                    if ("history" === t.msg_type) {
                                        let {
                                            history: e,
                                            pip_size: s
                                        } = t;
                                        O(s);
                                        let {
                                            prices: a
                                        } = e, {
                                            ticks_history: n
                                        } = t.echo_req;
                                        c(a), I(n), Z.api_base4.api.send({
                                            ticks: n,
                                            subscribe: 1
                                        })
                                    }
                                    if ("active_symbols" === t.msg_type) {
                                        let {
                                            active_symbols: e
                                        } = t, s = e.filter(e => "synthetics" === e.subgroup);
                                        s.sort((e, t) => e.display_order - t.display_order), Z.api_base4.api.send({
                                            ticks_history: s[0].symbol,
                                            adjust_start_time: 1,
                                            count: 5e3,
                                            end: "latest",
                                            start: 1,
                                            style: "ticks"
                                        }), v(s)
                                    }
                                });
                                Z.api_base4.pushSubscription(e)
                            }
                            if (Z.api_base.api) {
                                let e = Z.api_base.api.onMessage().subscribe(e => {
                                    let {
                                        data: t
                                    } = e;
                                    if ("proposal_open_contract" === t.msg_type) {
                                        let e = t.proposal_open_contract;
                                        eu({
                                            status: e.is_sold ? "sold" : "buy",
                                            profit: e.profit
                                        });
                                        let {
                                            proposal_open_contract: s
                                        } = t, a = s.contract_type;
                                        if (tt.current.includes(a) && s.is_sold) {
                                            if (!e6.current.includes(s.contract_id) && ti.current && (tn.current += s.profit, tn.current, tn.current >= ts.current ? tb() : tn.current <= -ta.current && tb()), "lost" === s.status) {
                                                if (!e6.current.includes(s.contract_id)) e6.current.push(s.contract_id), e9.current += Math.abs(s.profit), tl.current && T(parseFloat((e9.current * parseFloat(e4.current)).toFixed(2))), e7.current = !1, f(!1)
                                            } else e9.current = 0, T(te.current);
                                            e7.current && !e6.current.includes(s.contract_id) && (e7.current = !1, f(!1), e6.current.push(s.contract_id))
                                        }
                                        tm(s)
                                    }
                                });
                                Z.api_base.pushSubscription(e)
                            }
                            w(Z.api_base.account_info.currency)
                        },
                        tj = (e, t) => {
                            !e7.current && (e7.current = !0, f(!0), ee ? Z.api_base.api.send({
                                buy_contract_for_multiple_accounts: "1",
                                tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(es).token],
                                price: S,
                                parameters: {
                                    amount: S,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: k,
                                    duration: N,
                                    duration_unit: "t",
                                    symbol: E
                                }
                            }) : Z.api_base.api.send({
                                buy: "1",
                                price: S,
                                subscribe: 1,
                                parameters: {
                                    amount: S,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: k,
                                    duration: N,
                                    duration_unit: "t",
                                    symbol: E
                                }
                            }))
                        },
                        tv = function(e) {
                            let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                            !e7.current && (e7.current = !0, f(!0), ee ? Z.api_base.api.send({
                                buy_contract_for_multiple_accounts: "1",
                                tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(es).token],
                                price: S,
                                parameters: {
                                    amount: S,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: k,
                                    duration: N,
                                    duration_unit: "t",
                                    symbol: E,
                                    barrier: eW
                                }
                            }) : Z.api_base.api.send({
                                buy: "1",
                                price: S,
                                subscribe: 1,
                                parameters: {
                                    amount: S,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: "USD",
                                    duration: N,
                                    duration_unit: "t",
                                    symbol: E,
                                    barrier: eW
                                }
                            }))
                        },
                        tg = (e, t) => {
                            ee ? Z.api_base.api.send({
                                buy_contract_for_multiple_accounts: "1",
                                tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(es).token],
                                price: S,
                                parameters: {
                                    amount: S,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: k,
                                    duration: N,
                                    duration_unit: "t",
                                    symbol: E,
                                    barrier: eJ
                                }
                            }) : Z.api_base.api.send({
                                buy: "1",
                                price: S,
                                subscribe: 1,
                                parameters: {
                                    amount: S,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: "USD",
                                    duration: N,
                                    duration_unit: "t",
                                    symbol: E,
                                    barrier: eJ
                                }
                            })
                        },
                        tb = () => {
                            eg(!1), e9.current = 0, tn.current = 0, T(te.current)
                        },
                        ty = () => {
                            c(e => e.slice(1))
                        },
                        tf = e => {
                            let t = e.target.value;
                            e4.current = "" === t ? "" : Number(t), b("" === t ? "" : Number(t))
                        },
                        tN = e => {
                            let t = e.target.value;
                            T("" === t ? "" : Number(t)), te.current = "" === t ? "" : Number(t)
                        },
                        tC = e => {
                            let t = e.target.value;
                            if ("" === t) C("");
                            else {
                                let e = Number(t);
                                !isNaN(e) && C(Math.max(1, Math.min(9, e)))
                            }
                        },
                        [tS, tT] = l.useState([]),
                        [tk, tw] = l.useState("");
                    l.useEffect(() => {
                        if ("undefined" != typeof localStorage) try {
                            let e = JSON.parse(localStorage.getItem("accountsList")) || void 0,
                                t = Object.keys(e).filter(e => e.startsWith("CR"));
                            tT(t), t.length > 0 && (tw(t[0]), ea(t[0]))
                        } catch (e) {
                            console.error("Error while parsing accounts list from localStorage", e)
                        }
                    }, []);
                    let tE = (() => {
                            let e = o.slice(-m),
                                t = [];
                            return e.forEach(e => {
                                let s = tx(e, D);
                                t.push(s)
                            }), t
                        })(),
                        tI = o.slice(-m),
                        tA = (() => {
                            let e = o.slice(-1e3),
                                t = [];
                            return e.forEach(e => {
                                let s = tx(e, D);
                                t.push(s)
                            }), t
                        })(),
                        tR = "number" == typeof eW ? eW : 0,
                        {
                            evenPercentage: tD,
                            oddPercentage: tO,
                            overPercentage: tL,
                            underPercentage: tM,
                            matchesPercentage: tU,
                            differsPercentage: tF,
                            risePercentage: tP,
                            fallPercentage: tZ
                        } = ry(tE, tI, tR),
                        tz = e => tE.slice(-e).map((e, t) => (0, i.jsx)("div", {
                            className: `digit-box ${e%2==0?"even":"odd"}`,
                            children: e % 2 == 0 ? "E" : "O"
                        }, t)),
                        t$ = e => tE.slice(-e).map((e, t) => (0, i.jsx)("div", {
                            className: `digit-box ${e>tR?"over":"under"}`,
                            children: e > tR ? "O" : "U"
                        }, t)),
                        tB = Array.from({
                            length: 10
                        }, (e, t) => ry(tA, tI, t).matchesPercentage),
                        tG = [...tB].slice().sort((e, t) => t - e);
                    return tB.indexOf(tG[0]), tB.indexOf(tG[1]), tB.indexOf(tG[tG.length - 1]), tB.indexOf(tG[tG.length - 2]), (0, l.useEffect)(() => {
                        if (ev) {
                            let e = o.slice(-Number(eh)).map(e => tx(e, D)).every(e => "greater than" === em ? e > Number(eW) : "less than" === em ? e < Number(eW) : "equal to" === em && e === Number(eW));
                            e && !eb ? (tg(ep, !0), ey(!0)) : !e && ey(!1)
                        }
                    }, [o, ev, eh, em, eW, ep, eb]), (0, l.useEffect)(() => {
                        if (eI) {
                            let e = o.slice(-ef).map(e => tx(e, D)).every(e => "even" === eT ? e % 2 == 0 : "odd" === eT && e % 2 != 0);
                            e && !eR ? (tj(ew, !0), eD(!0)) : !e && eD(!1)
                        }
                    }, [o, eI, ef, eT, ew, eR]), (0, l.useEffect)(() => {
                        Object.entries(e2).forEach(e => {
                            let [t, s] = e, a = 0;
                            switch (t) {
                                case "evenOdd":
                                    a = "even" === s.percentageType ? tD : tO;
                                    break;
                                case "overUnder":
                                    a = "over" === s.percentageType ? tL : tM;
                                    break;
                                case "riseFall":
                                    a = "rise" === s.percentageType ? tP : tZ;
                                    break;
                                case "matchesDiffers":
                                    a = "matches" === s.percentageType ? tU : tF
                            }
                            let n = "greater" === s.operator ? a > s.threshold : a < s.threshold;
                            if (n !== s.conditionMet && e8(e => ({ ...e,
                                    [t]: { ...e[t],
                                        conditionMet: n
                                    }
                                })), s.isActive && (!n && s.executed && e3(t, "executed", !1), n && !s.executed && !e7.current)) {
                                switch (t) {
                                    case "evenOdd":
                                    case "riseFall":
                                        tj(s.tradeAction, !0);
                                        break;
                                    case "overUnder":
                                        tv(s.tradeAction, !0);
                                        break;
                                    case "matchesDiffers":
                                        tv(s.tradeAction, !1)
                                }
                                e3(t, "executed", !0)
                            }
                        })
                    }, [tD, tO, tL, tM, tP, tZ, tU, tF, e2, e7.current]), (0, i.jsx)("div", {
                        className: "d-trader",
                        style: {
                            color: t_ ? "#fff" : "#000"
                        },
                        children: (0, i.jsx)("div", {
                            className: "trade-interface",
                            children: (0, i.jsx)("div", {
                                className: "cards-container",
                                children: ["evenOdd-digits", "evenOdd-percentages", "overUnder-digits", "overUnder-percentages", "riseFall", "matchesDiffers"].sort((e, t) => {
                                    let s = e0.includes(e),
                                        a = e0.includes(t);
                                    return s && !a ? -1 : !s && a ? 1 : 0
                                }).map(e => {
                                    switch (e) {
                                        case "evenOdd-digits":
                                            return (0, i.jsxs)("div", {
                                                className: "trade-card",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "card-header",
                                                    children: [(0, i.jsx)(lM.Z, {}), (0, i.jsx)(lU.Z, {}), (0, i.jsxs)("h3", {
                                                        children: ["Even/Odd (Digits)", (0, i.jsx)("button", {
                                                            className: `pin-button ${e0.includes("evenOdd-digits")?"pinned":""}`,
                                                            onClick: () => e5("evenOdd-digits"),
                                                            title: e0.includes("evenOdd-digits") ? "Unpin card" : "Pin card",
                                                            children: e0.includes("evenOdd-digits") ? (0, i.jsx)(rg.Rvc, {}) : (0, i.jsx)(rb.UVq, {})
                                                        })]
                                                    })]
                                                }), (0, i.jsx)("div", {
                                                    className: "sequence-container",
                                                    children: tz(L ? 50 : 7)
                                                }), (0, i.jsxs)("div", {
                                                    className: "rule-item",
                                                    children: [(0, i.jsx)("span", {
                                                        children: "Check if the last"
                                                    }), (0, i.jsx)("input", {
                                                        type: "number",
                                                        value: ef,
                                                        onChange: e => eN(e.target.value),
                                                        min: "1",
                                                        max: "10"
                                                    }), (0, i.jsx)("span", {
                                                        children: "digits are"
                                                    }), (0, i.jsxs)("select", {
                                                        value: eT,
                                                        onChange: e => ek(e.target.value),
                                                        children: [(0, i.jsx)("option", {
                                                            value: "even",
                                                            children: "Even"
                                                        }), (0, i.jsx)("option", {
                                                            value: "odd",
                                                            children: "Odd"
                                                        })]
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "rule-item",
                                                    children: [(0, i.jsx)("span", {
                                                        children: "Then trade"
                                                    }), (0, i.jsxs)("select", {
                                                        value: ew,
                                                        onChange: e => eE(e.target.value),
                                                        children: [(0, i.jsx)("option", {
                                                            value: "DIGITEVEN",
                                                            children: "Even"
                                                        }), (0, i.jsx)("option", {
                                                            value: "DIGITODD",
                                                            children: "Odd"
                                                        })]
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "mobile-widget duration_amount_selector",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "mobile-widget__duration mobile-widget__button",
                                                        children: [(0, i.jsx)("small", {
                                                            children: "Ticks"
                                                        }), (0, i.jsx)("input", {
                                                            className: "custom_prediction",
                                                            type: "number",
                                                            id: "contract_duration",
                                                            value: N,
                                                            onChange: tC,
                                                            min: "1",
                                                            max: "9",
                                                            defaultValue: 1
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "mobile-widget__amount mobile-widget__button",
                                                        children: [(0, i.jsx)("small", {
                                                            children: "Stake"
                                                        }), (0, i.jsx)("input", {
                                                            className: "custom_prediction",
                                                            type: "number",
                                                            value: S,
                                                            onChange: tN
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "mobile-widget__type mobile-widget__button",
                                                        children: [(0, i.jsx)("small", {
                                                            children: "Martingale"
                                                        }), (0, i.jsx)("input", {
                                                            className: "custom_prediction",
                                                            type: "number",
                                                            value: e4.current,
                                                            onChange: tf
                                                        })]
                                                    })]
                                                }), (0, i.jsx)("button", {
                                                    className: `auto-trade-btn ${eI?"stop":"start"}`,
                                                    onClick: () => {
                                                        eA(!eI), eD(!1)
                                                    },
                                                    children: eI ? "Stop Auto Trading" : "Start Auto Trading"
                                                })]
                                            }, "evenOdd-digits");
                                        case "evenOdd-percentages":
                                            return (0, i.jsxs)("div", {
                                                className: "trade-card",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "card-header",
                                                    children: [(0, i.jsx)(lM.Z, {}), (0, i.jsx)(lU.Z, {}), (0, i.jsxs)("h3", {
                                                        children: ["Even/Odd (Percentages)", (0, i.jsx)("button", {
                                                            className: `pin-button ${e0.includes("evenOdd-percentages")?"pinned":""}`,
                                                            onClick: () => e5("evenOdd-percentages"),
                                                            title: e0.includes("evenOdd-percentages") ? "Unpin card" : "Pin card",
                                                            children: e0.includes("evenOdd-percentages") ? (0, i.jsx)(rg.Rvc, {}) : (0, i.jsx)(rb.UVq, {})
                                                        })]
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "manual-bars",
                                                    children: [(0, i.jsx)("div", {
                                                        className: "manual-bar even",
                                                        style: {
                                                            width: `${tD}%`
                                                        },
                                                        children: (0, i.jsxs)("span", {
                                                            children: ["Even: ", tD.toFixed(2), "%"]
                                                        })
                                                    }), (0, i.jsx)("div", {
                                                        className: "manual-bar odd",
                                                        style: {
                                                            width: `${tO}%`
                                                        },
                                                        children: (0, i.jsxs)("span", {
                                                            children: ["Odd: ", tO.toFixed(2), "%"]
                                                        })
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "auto-trade-controls",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "rule-item",
                                                        children: [(0, i.jsx)("span", {
                                                            children: "If"
                                                        }), (0, i.jsxs)("select", {
                                                            value: e2.evenOdd.percentageType,
                                                            onChange: e => e3("evenOdd", "percentageType", e.target.value),
                                                            children: [(0, i.jsx)("option", {
                                                                value: "even",
                                                                children: "Even%"
                                                            }), (0, i.jsx)("option", {
                                                                value: "odd",
                                                                children: "Odd%"
                                                            })]
                                                        }), (0, i.jsxs)("select", {
                                                            value: e2.evenOdd.operator,
                                                            onChange: e => e3("evenOdd", "operator", e.target.value),
                                                            children: [(0, i.jsx)("option", {
                                                                value: "greater",
                                                                children: "≥"
                                                            }), (0, i.jsx)("option", {
                                                                value: "less",
                                                                children: "≤"
                                                            })]
                                                        }), (0, i.jsx)("input", {
                                                            type: "number",
                                                            value: e2.evenOdd.threshold,
                                                            onChange: e => e3("evenOdd", "threshold", Number(e.target.value)),
                                                            min: "0",
                                                            max: "100"
                                                        }), (0, i.jsx)("span", {
                                                            children: "%"
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "rule-item",
                                                        children: [(0, i.jsx)("span", {
                                                            children: "Then trade"
                                                        }), (0, i.jsxs)("select", {
                                                            value: e2.evenOdd.tradeAction,
                                                            onChange: e => e3("evenOdd", "tradeAction", e.target.value),
                                                            children: [(0, i.jsx)("option", {
                                                                value: "DIGITEVEN",
                                                                children: "Even"
                                                            }), (0, i.jsx)("option", {
                                                                value: "DIGITODD",
                                                                children: "Odd"
                                                            })]
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "mobile-widget duration_amount_selector",
                                                        children: [(0, i.jsxs)("div", {
                                                            className: "mobile-widget__duration mobile-widget__button",
                                                            children: [(0, i.jsx)("small", {
                                                                children: "Ticks"
                                                            }), (0, i.jsx)("input", {
                                                                className: "custom_prediction",
                                                                type: "number",
                                                                id: "contract_duration",
                                                                value: N,
                                                                onChange: tC,
                                                                min: "1",
                                                                max: "9",
                                                                defaultValue: 1
                                                            })]
                                                        }), (0, i.jsxs)("div", {
                                                            className: "mobile-widget__amount mobile-widget__button",
                                                            children: [(0, i.jsx)("small", {
                                                                children: "Stake"
                                                            }), (0, i.jsx)("input", {
                                                                className: "custom_prediction",
                                                                type: "number",
                                                                value: S,
                                                                onChange: tN
                                                            })]
                                                        }), (0, i.jsxs)("div", {
                                                            className: "mobile-widget__type mobile-widget__button",
                                                            children: [(0, i.jsx)("small", {
                                                                children: "Martingale"
                                                            }), (0, i.jsx)("input", {
                                                                className: "custom_prediction",
                                                                type: "number",
                                                                value: e4.current,
                                                                onChange: tf
                                                            })]
                                                        })]
                                                    }), (0, i.jsx)("button", {
                                                        className: `auto-trade-btn ${e2.evenOdd.isActive?"stop":"start"}`,
                                                        onClick: () => e3("evenOdd", "isActive", !e2.evenOdd.isActive),
                                                        children: e2.evenOdd.isActive ? "Stop Auto Trade" : "Start Auto Trade"
                                                    }), (0, i.jsx)("div", {
                                                        className: `status-indicator ${e2.evenOdd.conditionMet?"signal":"nosignal"}`,
                                                        children: e2.evenOdd.conditionMet ? "✔ Condition Met" : "◌ Waiting..."
                                                    })]
                                                })]
                                            }, "evenOdd-percentages");
                                        case "overUnder-digits":
                                            return (0, i.jsxs)("div", {
                                                className: "trade-card",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "card-header",
                                                    children: [(0, i.jsx)(lO.Z, {}), (0, i.jsx)(lL.Z, {}), (0, i.jsxs)("h3", {
                                                        children: ["Over/Under (Digits)", (0, i.jsx)("button", {
                                                            className: `pin-button ${e0.includes("overUnder-digits")?"pinned":""}`,
                                                            onClick: () => e5("overUnder-digits"),
                                                            title: e0.includes("overUnder-digits") ? "Unpin card" : "Pin card",
                                                            children: e0.includes("overUnder-digits") ? (0, i.jsx)(rg.Rvc, {}) : (0, i.jsx)(rb.UVq, {})
                                                        })]
                                                    })]
                                                }), (0, i.jsx)("div", {
                                                    className: "sequence-container",
                                                    children: t$(P ? 50 : 7)
                                                }), (0, i.jsx)("div", {
                                                    className: "prediction-buttons",
                                                    children: Array.from({
                                                        length: 10
                                                    }, (e, t) => t).map(e => (0, i.jsx)("button", {
                                                        className: `prediction-button ${eW===e?"active":""}`,
                                                        onClick: () => eK(e),
                                                        children: e
                                                    }, e))
                                                }), (0, i.jsxs)("div", {
                                                    className: "rule-item",
                                                    children: [(0, i.jsx)("span", {
                                                        children: "Check if the last"
                                                    }), (0, i.jsx)("input", {
                                                        type: "number",
                                                        value: eh,
                                                        onChange: e => e_(e.target.value),
                                                        min: "1",
                                                        max: "10"
                                                    }), (0, i.jsx)("span", {
                                                        children: "digits are"
                                                    }), (0, i.jsxs)("select", {
                                                        value: em,
                                                        onChange: e => ex(e.target.value),
                                                        children: [(0, i.jsx)("option", {
                                                            value: "greater than",
                                                            children: "Greater than"
                                                        }), (0, i.jsx)("option", {
                                                            value: "less than",
                                                            children: "Less than"
                                                        }), (0, i.jsx)("option", {
                                                            value: "equal to",
                                                            children: "Equal to"
                                                        })]
                                                    }), (0, i.jsx)("input", {
                                                        type: "number",
                                                        value: eW,
                                                        onChange: e => eK(Number(e.target.value)),
                                                        min: "0",
                                                        max: "9"
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "rule-item",
                                                    children: [(0, i.jsx)("span", {
                                                        children: "Then trade"
                                                    }), (0, i.jsxs)("select", {
                                                        value: ep,
                                                        onChange: e => ej(e.target.value),
                                                        children: [(0, i.jsx)("option", {
                                                            value: "DIGITOVER",
                                                            children: "Over"
                                                        }), (0, i.jsx)("option", {
                                                            value: "DIGITUNDER",
                                                            children: "Under"
                                                        })]
                                                    }), (0, i.jsx)("span", {
                                                        children: "prediction"
                                                    }), (0, i.jsx)("input", {
                                                        type: "number",
                                                        value: eJ,
                                                        onChange: e => eQ(Number(e.target.value)),
                                                        min: "0",
                                                        max: "9"
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "mobile-widget duration_amount_selector",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "mobile-widget__duration mobile-widget__button",
                                                        children: [(0, i.jsx)("small", {
                                                            children: "Ticks"
                                                        }), (0, i.jsx)("input", {
                                                            className: "custom_prediction",
                                                            type: "number",
                                                            id: "contract_duration",
                                                            value: N,
                                                            onChange: tC,
                                                            min: "1",
                                                            max: "9",
                                                            defaultValue: 1
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "mobile-widget__amount mobile-widget__button",
                                                        children: [(0, i.jsx)("small", {
                                                            children: "Stake"
                                                        }), (0, i.jsx)("input", {
                                                            className: "custom_prediction",
                                                            type: "number",
                                                            value: S,
                                                            onChange: tN
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "mobile-widget__type mobile-widget__button",
                                                        children: [(0, i.jsx)("small", {
                                                            children: "Martingale"
                                                        }), (0, i.jsx)("input", {
                                                            className: "custom_prediction",
                                                            type: "number",
                                                            value: e4.current,
                                                            onChange: tf
                                                        })]
                                                    })]
                                                }), (0, i.jsx)("button", {
                                                    className: `auto-trade-btn ${ev?"stop":"start"}`,
                                                    onClick: () => {
                                                        eg(!ev), ey(!1)
                                                    },
                                                    children: ev ? "Stop Auto Trading" : "Start Auto Trading"
                                                })]
                                            }, "overUnder-digits");
                                        case "overUnder-percentages":
                                            return (0, i.jsxs)("div", {
                                                className: "trade-card",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "card-header",
                                                    children: [(0, i.jsx)(lO.Z, {}), (0, i.jsx)(lL.Z, {}), (0, i.jsxs)("h3", {
                                                        children: ["Over/Under (Percentages)", (0, i.jsx)("button", {
                                                            className: `pin-button ${e0.includes("overUnder-percentages")?"pinned":""}`,
                                                            onClick: () => e5("overUnder-percentages"),
                                                            title: e0.includes("overUnder-percentages") ? "Unpin card" : "Pin card",
                                                            children: e0.includes("overUnder-percentages") ? (0, i.jsx)(rg.Rvc, {}) : (0, i.jsx)(rb.UVq, {})
                                                        })]
                                                    })]
                                                }), (0, i.jsx)("div", {
                                                    className: "prediction-buttons",
                                                    children: Array.from({
                                                        length: 10
                                                    }, (e, t) => t).map(e => (0, i.jsx)("button", {
                                                        className: `prediction-button ${eW===e?"active":""}`,
                                                        onClick: () => eK(e),
                                                        children: e
                                                    }, e))
                                                }), (0, i.jsxs)("div", {
                                                    className: "manual-bars",
                                                    children: [(0, i.jsx)("div", {
                                                        className: "manual-bar over",
                                                        style: {
                                                            width: `${tL}%`
                                                        },
                                                        children: (0, i.jsxs)("span", {
                                                            children: ["Over ", eW, ": ", tL.toFixed(2), "%"]
                                                        })
                                                    }), (0, i.jsx)("div", {
                                                        className: "manual-bar under",
                                                        style: {
                                                            width: `${tM}%`
                                                        },
                                                        children: (0, i.jsxs)("span", {
                                                            children: ["Under ", eW, ": ", tM.toFixed(2), "%"]
                                                        })
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "auto-trade-controls",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "rule-item",
                                                        children: [(0, i.jsxs)("span", {
                                                            children: ["If Digit ", eW]
                                                        }), (0, i.jsxs)("select", {
                                                            value: e2.overUnder.percentageType,
                                                            onChange: e => e3("overUnder", "percentageType", e.target.value),
                                                            children: [(0, i.jsx)("option", {
                                                                value: "over",
                                                                children: "Over %"
                                                            }), (0, i.jsx)("option", {
                                                                value: "under",
                                                                children: "Under %"
                                                            })]
                                                        }), (0, i.jsx)("span", {
                                                            children: "is"
                                                        }), (0, i.jsxs)("select", {
                                                            value: e2.overUnder.operator,
                                                            onChange: e => e3("overUnder", "operator", e.target.value),
                                                            children: [(0, i.jsx)("option", {
                                                                value: "greater",
                                                                children: "≥"
                                                            }), (0, i.jsx)("option", {
                                                                value: "less",
                                                                children: "≤"
                                                            })]
                                                        }), (0, i.jsx)("span", {
                                                            children: "than"
                                                        }), (0, i.jsx)("input", {
                                                            type: "number",
                                                            value: e2.overUnder.threshold,
                                                            onChange: e => e3("overUnder", "threshold", Number(e.target.value)),
                                                            min: "0",
                                                            max: "100"
                                                        }), (0, i.jsx)("span", {
                                                            children: "%"
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "rule-item",
                                                        children: [(0, i.jsx)("span", {
                                                            children: "Then trade"
                                                        }), (0, i.jsxs)("select", {
                                                            value: e2.overUnder.tradeAction,
                                                            onChange: e => e3("overUnder", "tradeAction", e.target.value),
                                                            children: [(0, i.jsxs)("option", {
                                                                value: "DIGITOVER",
                                                                children: ["Over ", eW]
                                                            }), (0, i.jsxs)("option", {
                                                                value: "DIGITUNDER",
                                                                children: ["Under ", eW]
                                                            })]
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "mobile-widget duration_amount_selector",
                                                        children: [(0, i.jsxs)("div", {
                                                            className: "mobile-widget__duration mobile-widget__button",
                                                            children: [(0, i.jsx)("small", {
                                                                children: "Ticks"
                                                            }), (0, i.jsx)("input", {
                                                                className: "custom_prediction",
                                                                type: "number",
                                                                id: "contract_duration",
                                                                value: N,
                                                                onChange: tC,
                                                                min: "1",
                                                                max: "9",
                                                                defaultValue: 1
                                                            })]
                                                        }), (0, i.jsxs)("div", {
                                                            className: "mobile-widget__amount mobile-widget__button",
                                                            children: [(0, i.jsx)("small", {
                                                                children: "Stake"
                                                            }), (0, i.jsx)("input", {
                                                                className: "custom_prediction",
                                                                type: "number",
                                                                value: S,
                                                                onChange: tN
                                                            })]
                                                        }), (0, i.jsxs)("div", {
                                                            className: "mobile-widget__type mobile-widget__button",
                                                            children: [(0, i.jsx)("small", {
                                                                children: "Martingale"
                                                            }), (0, i.jsx)("input", {
                                                                className: "custom_prediction",
                                                                type: "number",
                                                                value: e4.current,
                                                                onChange: tf
                                                            })]
                                                        })]
                                                    }), (0, i.jsx)("button", {
                                                        className: `auto-trade-btn ${e2.overUnder.isActive?"stop":"start"}`,
                                                        onClick: () => e3("overUnder", "isActive", !e2.overUnder.isActive),
                                                        children: e2.overUnder.isActive ? "Stop Auto Trade" : "Start Auto Trade"
                                                    }), (0, i.jsx)("div", {
                                                        className: `status-indicator ${e2.overUnder.conditionMet?"signal":"nosignal"}`,
                                                        children: e2.overUnder.conditionMet ? "✔ Condition Met" : "◌ Waiting..."
                                                    })]
                                                })]
                                            }, "overUnder-percentages");
                                        case "riseFall":
                                            return (0, i.jsxs)("div", {
                                                className: "trade-card",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "card-header",
                                                    children: [(0, i.jsx)(lF.Z, {}), (0, i.jsx)(lP.Z, {}), (0, i.jsxs)("h3", {
                                                        children: ["Rise/Fall", (0, i.jsx)("button", {
                                                            className: `pin-button ${e0.includes("riseFall")?"pinned":""}`,
                                                            onClick: () => e5("riseFall"),
                                                            title: e0.includes("riseFall") ? "Unpin card" : "Pin card",
                                                            children: e0.includes("riseFall") ? (0, i.jsx)(rg.Rvc, {}) : (0, i.jsx)(rb.UVq, {})
                                                        })]
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "manual-bars",
                                                    children: [(0, i.jsx)("div", {
                                                        className: "manual-bar rise",
                                                        style: {
                                                            width: `${tP}%`
                                                        },
                                                        children: (0, i.jsxs)("span", {
                                                            children: ["Rise: ", tP.toFixed(2), "%"]
                                                        })
                                                    }), (0, i.jsx)("div", {
                                                        className: "manual-bar fall",
                                                        style: {
                                                            width: `${tZ}%`
                                                        },
                                                        children: (0, i.jsxs)("span", {
                                                            children: ["Fall: ", tZ.toFixed(2), "%"]
                                                        })
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "auto-trade-controls",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "rule-item",
                                                        children: [(0, i.jsx)("span", {
                                                            children: "If"
                                                        }), (0, i.jsxs)("select", {
                                                            value: e2.riseFall.percentageType,
                                                            onChange: e => e3("riseFall", "percentageType", e.target.value),
                                                            children: [(0, i.jsx)("option", {
                                                                value: "rise",
                                                                children: "Rise%"
                                                            }), (0, i.jsx)("option", {
                                                                value: "fall",
                                                                children: "Fall%"
                                                            })]
                                                        }), (0, i.jsxs)("select", {
                                                            value: e2.riseFall.operator,
                                                            onChange: e => e3("riseFall", "operator", e.target.value),
                                                            children: [(0, i.jsx)("option", {
                                                                value: "greater",
                                                                children: "≥"
                                                            }), (0, i.jsx)("option", {
                                                                value: "less",
                                                                children: "≤"
                                                            })]
                                                        }), (0, i.jsx)("input", {
                                                            type: "number",
                                                            value: e2.riseFall.threshold,
                                                            onChange: e => e3("riseFall", "threshold", Number(e.target.value)),
                                                            min: "0",
                                                            max: "100"
                                                        }), (0, i.jsx)("span", {
                                                            children: "%"
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "rule-item",
                                                        children: [(0, i.jsx)("span", {
                                                            children: "Then trade"
                                                        }), (0, i.jsxs)("select", {
                                                            value: e2.riseFall.tradeAction,
                                                            onChange: e => e3("riseFall", "tradeAction", e.target.value),
                                                            children: [(0, i.jsx)("option", {
                                                                value: "CALL",
                                                                children: "Rise"
                                                            }), (0, i.jsx)("option", {
                                                                value: "PUT",
                                                                children: "Fall"
                                                            })]
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "mobile-widget duration_amount_selector",
                                                        children: [(0, i.jsxs)("div", {
                                                            className: "mobile-widget__duration mobile-widget__button",
                                                            children: [(0, i.jsx)("small", {
                                                                children: "Ticks"
                                                            }), (0, i.jsx)("input", {
                                                                className: "custom_prediction",
                                                                type: "number",
                                                                id: "contract_duration",
                                                                value: N,
                                                                onChange: tC,
                                                                min: "1",
                                                                max: "9",
                                                                defaultValue: 1
                                                            })]
                                                        }), (0, i.jsxs)("div", {
                                                            className: "mobile-widget__amount mobile-widget__button",
                                                            children: [(0, i.jsx)("small", {
                                                                children: "Stake"
                                                            }), (0, i.jsx)("input", {
                                                                className: "custom_prediction",
                                                                type: "number",
                                                                value: S,
                                                                onChange: tN
                                                            })]
                                                        }), (0, i.jsxs)("div", {
                                                            className: "mobile-widget__type mobile-widget__button",
                                                            children: [(0, i.jsx)("small", {
                                                                children: "Martingale"
                                                            }), (0, i.jsx)("input", {
                                                                className: "custom_prediction",
                                                                type: "number",
                                                                value: e4.current,
                                                                onChange: tf
                                                            })]
                                                        })]
                                                    }), (0, i.jsx)("button", {
                                                        className: `auto-trade-btn ${e2.riseFall.isActive?"stop":"start"}`,
                                                        onClick: () => e3("riseFall", "isActive", !e2.riseFall.isActive),
                                                        children: e2.riseFall.isActive ? "Stop Auto Trade" : "Start Auto Trade"
                                                    }), (0, i.jsx)("div", {
                                                        className: `status-indicator ${e2.riseFall.conditionMet?"signal":"nosignal"}`,
                                                        children: e2.riseFall.conditionMet ? "✔ Condition Met" : "◌ Waiting..."
                                                    })]
                                                })]
                                            }, "riseFall");
                                        case "matchesDiffers":
                                            return (0, i.jsxs)("div", {
                                                className: "trade-card",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "card-header",
                                                    children: [(0, i.jsx)(rj.Z, {}), (0, i.jsx)(rv.Z, {}), (0, i.jsxs)("h3", {
                                                        children: ["Matches/Differs (", eW, ")", (0, i.jsx)("button", {
                                                            className: `pin-button ${e0.includes("matchesDiffers")?"pinned":""}`,
                                                            onClick: () => e5("matchesDiffers"),
                                                            title: e0.includes("matchesDiffers") ? "Unpin card" : "Pin card",
                                                            children: e0.includes("matchesDiffers") ? (0, i.jsx)(rg.Rvc, {}) : (0, i.jsx)(rb.UVq, {})
                                                        })]
                                                    })]
                                                }), (0, i.jsx)("div", {
                                                    className: "prediction-buttons",
                                                    children: Array.from({
                                                        length: 10
                                                    }, (e, t) => t).map(e => (0, i.jsx)("button", {
                                                        className: `prediction-button ${eW===e?"active":""}`,
                                                        onClick: () => eK(e),
                                                        children: e
                                                    }, e))
                                                }), (0, i.jsxs)("div", {
                                                    className: "manual-bars",
                                                    children: [(0, i.jsx)("div", {
                                                        className: "manual-bar matches",
                                                        style: {
                                                            width: `${tU}%`
                                                        },
                                                        children: (0, i.jsxs)("span", {
                                                            children: ["Matches: ", tU.toFixed(2), "%"]
                                                        })
                                                    }), (0, i.jsx)("div", {
                                                        className: "manual-bar differs",
                                                        style: {
                                                            width: `${tF}%`
                                                        },
                                                        children: (0, i.jsxs)("span", {
                                                            children: ["Differs: ", tF.toFixed(2), "%"]
                                                        })
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "auto-trade-controls",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "rule-item",
                                                        children: [(0, i.jsxs)("span", {
                                                            children: ["If Digit ", eW]
                                                        }), (0, i.jsxs)("select", {
                                                            value: e2.matchesDiffers.percentageType,
                                                            onChange: e => e3("matchesDiffers", "percentageType", e.target.value),
                                                            children: [(0, i.jsx)("option", {
                                                                value: "matches",
                                                                children: "Matches %"
                                                            }), (0, i.jsx)("option", {
                                                                value: "differs",
                                                                children: "Differs %"
                                                            })]
                                                        }), (0, i.jsxs)("select", {
                                                            value: e2.matchesDiffers.operator,
                                                            onChange: e => e3("matchesDiffers", "operator", e.target.value),
                                                            children: [(0, i.jsx)("option", {
                                                                value: "greater",
                                                                children: "≥"
                                                            }), (0, i.jsx)("option", {
                                                                value: "less",
                                                                children: "≤"
                                                            })]
                                                        }), (0, i.jsx)("input", {
                                                            type: "number",
                                                            value: e2.matchesDiffers.threshold,
                                                            onChange: e => e3("matchesDiffers", "threshold", Number(e.target.value)),
                                                            min: "0",
                                                            max: "100"
                                                        }), (0, i.jsx)("span", {
                                                            children: "%"
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "rule-item",
                                                        children: [(0, i.jsx)("span", {
                                                            children: "Then trade"
                                                        }), (0, i.jsxs)("select", {
                                                            value: e2.matchesDiffers.tradeAction,
                                                            onChange: e => e3("matchesDiffers", "tradeAction", e.target.value),
                                                            children: [(0, i.jsxs)("option", {
                                                                value: "DIGITMATCH",
                                                                children: ["Matches ", eW]
                                                            }), (0, i.jsxs)("option", {
                                                                value: "DIGITDIFF",
                                                                children: ["Differs ", eW]
                                                            })]
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "mobile-widget duration_amount_selector",
                                                        children: [(0, i.jsxs)("div", {
                                                            className: "mobile-widget__duration mobile-widget__button",
                                                            children: [(0, i.jsx)("small", {
                                                                children: "Ticks"
                                                            }), (0, i.jsx)("input", {
                                                                className: "custom_prediction",
                                                                type: "number",
                                                                id: "contract_duration",
                                                                value: N,
                                                                onChange: tC,
                                                                min: "1",
                                                                max: "9",
                                                                defaultValue: 1
                                                            })]
                                                        }), (0, i.jsxs)("div", {
                                                            className: "mobile-widget__amount mobile-widget__button",
                                                            children: [(0, i.jsx)("small", {
                                                                children: "Stake"
                                                            }), (0, i.jsx)("input", {
                                                                className: "custom_prediction",
                                                                type: "number",
                                                                value: S,
                                                                onChange: tN
                                                            })]
                                                        }), (0, i.jsxs)("div", {
                                                            className: "mobile-widget__type mobile-widget__button",
                                                            children: [(0, i.jsx)("small", {
                                                                children: "Martingale"
                                                            }), (0, i.jsx)("input", {
                                                                className: "custom_prediction",
                                                                type: "number",
                                                                value: e4.current,
                                                                onChange: tf
                                                            })]
                                                        })]
                                                    }), (0, i.jsx)("button", {
                                                        className: `auto-trade-btn ${e2.matchesDiffers.isActive?"stop":"start"}`,
                                                        onClick: () => e3("matchesDiffers", "isActive", !e2.matchesDiffers.isActive),
                                                        children: e2.matchesDiffers.isActive ? "Stop Auto Trade" : "Start Auto Trade"
                                                    }), (0, i.jsx)("div", {
                                                        className: `status-indicator ${e2.matchesDiffers.conditionMet?"signal":"nosignal"}`,
                                                        children: e2.matchesDiffers.conditionMet ? "✔ Condition Met" : "◌ Waiting..."
                                                    })]
                                                })]
                                            }, "matchesDiffers");
                                        default:
                                            return null
                                    }
                                })
                            })
                        })
                    })
                }),
                rN = (0, r.Pi)(() => {
                    let [e, t] = (0, l.useState)("AutoTrader"), [s, a] = (0, l.useState)(!1), [n, r] = (0, l.useState)("Updating..."), [o, c] = (0, l.useState)([]), [d, u] = (0, l.useState)(!0), [h, _] = (0, l.useState)(0), [m, x] = (0, l.useState)(1e3), [p, v] = (0, l.useState)([]), [g, b] = (0, l.useState)(4), [y, f] = (0, l.useState)(1.2), [N, C] = (0, l.useState)(60), [S, T] = (0, l.useState)(4), [k, w] = (0, l.useState)(!1), [E, I] = (0, l.useState)(!1), [A, R] = (0, l.useState)(!1), [D, O] = (0, l.useState)(!1), [L, M] = (0, l.useState)(!1), [U, F] = (0, l.useState)(!1), [P, z] = (0, l.useState)("DIGITDIFF"), [$, B] = (0, l.useState)("AUTO"), [G, V] = (0, l.useState)("DIGITOVER"), [X, H] = (0, l.useState)("SAME"), [q, Y] = (0, l.useState)("DIGITEVEN"), [W, K] = (0, l.useState)("SAME"), [J, Q] = (0, l.useState)(1), [ee, et] = (0, l.useState)(.5), [es, ea] = (0, l.useState)(0), [en, ei] = (0, l.useState)(""), [el, er] = (0, l.useState)("R_100"), [eo, ec] = (0, l.useState)("R_100"), [ed, eu] = (0, l.useState)(2), [eh, e_] = (0, l.useState)(""), [em, ex] = (0, l.useState)(!1), [ep, ej] = (0, l.useState)(2), [ev, eg] = (0, l.useState)(2), [eb, ey] = (0, l.useState)(!1), [ef, eN] = (0, l.useState)(!0), [eC, eS] = (0, l.useState)(!1), [eT, ek] = (0, l.useState)(""), [ew, eE] = (0, l.useState)(!1), [eI, eA] = (0, l.useState)(!1), [eR, eD] = (0, l.useState)(!1), [eO, eL] = (0, l.useState)(null), [eM, eU] = (0, l.useState)(3), [eF, eP] = (0, l.useState)("greater than"), [eZ, ez] = (0, l.useState)("DIGITOVER"), [e$, eB] = (0, l.useState)(!1), [eG, eV] = (0, l.useState)(!1), [eX, eH] = (0, l.useState)(5), [eq, eY] = (0, l.useState)(5), [eW, eK] = (0, l.useState)("even"), [eJ, eQ] = (0, l.useState)("DIGITEVEN"), [e0, e1] = (0, l.useState)(!1), [e5, e2] = (0, l.useState)(!1), [e8, e3] = (0, l.useState)(null), [e4, e7] = (0, l.useState)(5), [e6, e9] = (0, l.useState)("rise"), [te, tt] = (0, l.useState)("CALL"), [ts, ta] = (0, l.useState)(!1), [tn, ti] = (0, l.useState)(!1), [tl, tr] = (0, l.useState)(null), [to, tc] = (0, l.useState)(""), [td, tu] = (0, l.useState)(0), [th, t_] = (0, l.useState)(!0), [tm, tx] = (0, l.useState)(!0), [tp, tj] = (0, l.useState)(!0), [tv, tg] = (0, l.useState)(!1), tb = () => {
                        eA(!eI)
                    }, ty = () => {
                        eD(!eR)
                    }, tf = (0, l.useRef)(y), tN = (0, l.useRef)(U), tC = (0, l.useRef)([]), tS = (0, l.useRef)(0), tT = (0, l.useRef)(.5), tk = (0, l.useRef)(["DIGITODD", "DIGITEVEN", "DIGITOVER", "DIGITUNDER", "DIGITDIFF"]), tw = (0, l.useRef)({
                        appearence: 0,
                        value: 0
                    }), tE = (0, l.useRef)({
                        appearence: 0,
                        value: 0
                    }), tI = (0, l.useRef)(2), tA = (0, l.useRef)(2), tR = (0, l.useRef)(0), tD = (0, l.useRef)(!1), tO = (0, l.useRef)(!1), tL = (0, l.useRef)(!0), {
                        ui: tM
                    } = (0, j.oR)(), {
                        transactions: tU,
                        run_panel: tF
                    } = (0, j.oR)(), {
                        registerBotListeners: tP,
                        unregisterBotListeners: tZ
                    } = tF, {
                        is_mobile: tz,
                        is_dark_mode_on: t$
                    } = tM, {
                        updateResultsCompletedContract: tB
                    } = tU;
                    (0, l.useEffect)(() => {
                        tP(), tV();
                        let e = localStorage.getItem("no_of_ticks"),
                            s = localStorage.getItem("active_card");
                        return null !== e && x(parseFloat(e)), null !== s && t(s), () => {
                            tZ()
                        }
                    }, []), (0, l.useEffect)(() => {
                        eo !== el && Z.api_base4.api.send({
                            ticks_history: el,
                            adjust_start_time: 1,
                            count: 5e3,
                            end: "latest",
                            start: 1,
                            style: "ticks"
                        }), ec(el)
                    }, [el]), (0, l.useEffect)(() => {
                        let e = localStorage.getItem("evenOddContract"),
                            t = localStorage.getItem("sameDiffEvenOddContract"),
                            s = localStorage.getItem("overUnderContract");
                        e && Y(e), t && K(t), s && V(s)
                    }, []), (0, l.useEffect)(() => {
                        let e = localStorage.getItem("activeCard"),
                            s = localStorage.getItem("numberOfTicks"),
                            a = localStorage.getItem("optionsList"),
                            n = localStorage.getItem("overValue"),
                            i = localStorage.getItem("martingaleValue"),
                            l = localStorage.getItem("percentageValue"),
                            r = localStorage.getItem("underValue"),
                            o = localStorage.getItem("oneClickContract"),
                            c = localStorage.getItem("tradingDiffType"),
                            d = localStorage.getItem("overUnderContract"),
                            u = localStorage.getItem("overUnderDirection"),
                            h = localStorage.getItem("evenOddContract"),
                            _ = localStorage.getItem("sameDiffEvenOdd"),
                            m = localStorage.getItem("oneClickDuration"),
                            p = localStorage.getItem("oneClickAmount"),
                            j = localStorage.getItem("showBotSettings"),
                            g = localStorage.getItem("takeProfitValue"),
                            y = localStorage.getItem("stopLossValue"),
                            N = localStorage.getItem("enableSlTpValue"),
                            S = localStorage.getItem("enableDisableMartingale"),
                            k = localStorage.getItem("enableCopyDemo"),
                            w = localStorage.getItem("numDigits"),
                            E = localStorage.getItem("comparisonOperator"),
                            I = localStorage.getItem("tradeAction"),
                            A = localStorage.getItem("customPrediction"),
                            R = localStorage.getItem("numDigits1"),
                            D = localStorage.getItem("comparisonOperator1"),
                            O = localStorage.getItem("tradeAction1"),
                            L = localStorage.getItem("isCustomTradeFormVisible"),
                            M = localStorage.getItem("isSequencesVisible"),
                            U = localStorage.getItem("isRFSequencesVisible");
                        t(e || "LDP"), x(s ? JSON.parse(s) : 1e3), v(a ? JSON.parse(a) : []), b(n || 4), f(i || 1.2), C(l || 60), T(r || 4), z(o || "DIGITDIFF"), B(c || "AUTO"), V(d || "DIGITOVER"), H(u || "SAME"), Y(h || "DIGITEVEN"), K(_ || "BOTH"), Q(m ? Number(m) : 1), et(p || .5), t1({
                            target: {
                                value: A || 0
                            }
                        }), ex(!!j && JSON.parse(j)), ej(g || 2), eg(y || 2), ey(!!N && JSON.parse(N)), eN(!S || JSON.parse(S)), eS(!!k && JSON.parse(k)), eU(w ? JSON.parse(w) : 3), eP(E || "greater than"), ez(I || "DIGITOVER"), t1({
                            target: {
                                value: A || 0
                            }
                        }), eH(R ? JSON.parse(R) : 3), eK(D || "odd"), eQ(O || "DIGITODD"), t_(!L || JSON.parse(L)), tx(!M || JSON.parse(M)), tj(!U || JSON.parse(U))
                    }, []), (0, l.useEffect)(() => {
                        localStorage.setItem("activeCard", e), localStorage.setItem("isSubscribed", JSON.stringify(s)), localStorage.setItem("currentTick", String(n)), localStorage.setItem("allLastDigitList", JSON.stringify(o)), localStorage.setItem("isTickChart", JSON.stringify(d)), localStorage.setItem("lastDigit", JSON.stringify(h)), localStorage.setItem("numberOfTicks", JSON.stringify(m)), localStorage.setItem("optionsList", JSON.stringify(p)), localStorage.setItem("overValue", String(g)), localStorage.setItem("martingaleValue", String(y)), localStorage.setItem("percentageValue", String(N)), localStorage.setItem("underValue", String(S)), localStorage.setItem("oneClickContract", P), localStorage.setItem("tradingDiffType", $), localStorage.setItem("overUnderContract", G), localStorage.setItem("overUnderDirection", X), localStorage.setItem("evenOddContract", q), localStorage.setItem("sameDiffEvenOdd", W), localStorage.setItem("oneClickDuration", String(J)), localStorage.setItem("oneClickAmount", String(ee)), localStorage.setItem("customPrediction", JSON.stringify(es)), localStorage.setItem("accountCurrency", en), localStorage.setItem("active_symbol", el), localStorage.setItem("prev_symbol", eo), localStorage.setItem("showBotSettings", JSON.stringify(em)), localStorage.setItem("takeProfitValue", String(ep)), localStorage.setItem("stopLossValue", String(ev)), localStorage.setItem("enableSlTpValue", JSON.stringify(eb)), localStorage.setItem("enableDisableMartingale", JSON.stringify(ef)), localStorage.setItem("enableCopyDemo", JSON.stringify(eC)), localStorage.setItem("numDigits", JSON.stringify(eM)), localStorage.setItem("comparisonOperator", eF), localStorage.setItem("tradeAction", eZ), localStorage.setItem("customPrediction", JSON.stringify(es)), localStorage.setItem("numDigits1", JSON.stringify(eX)), localStorage.setItem("comparisonOperator1", eW), localStorage.setItem("tradeAction1", eJ), localStorage.setItem("isCustomTradeFormVisible", JSON.stringify(th)), localStorage.setItem("isSequencesVisible", JSON.stringify(tm)), localStorage.setItem("isRFSequencesVisible", JSON.stringify(tp))
                    }, [e, s, n, o, d, h, m, p, g, y, N, S, k, E, A, D, L, U, P, $, G, X, q, W, J, ee, es, en, el, eo, ed, eh, em, ep, ev, eb, ef, eC, eM, eF, eZ, es, e$, eX, eq, eW, eJ, th, tm, tp]);
                    let tG = (e, t) => {
                            let s = e.toFixed(t);
                            return Number(s = String(s).slice(-1))
                        },
                        tV = async () => {
                            if (await new Promise(e => setTimeout(e, 5e3)), !s && (Z.api_base4.api.send({
                                    active_symbols: "brief",
                                    product_type: "basic"
                                }), a(!0)), Z.api_base4.api) {
                                let e = Z.api_base4.api.onMessage().subscribe(e => {
                                    let {
                                        data: t
                                    } = e;
                                    if ("tick" === t.msg_type) {
                                        let {
                                            tick: e
                                        } = t, {
                                            ask: s,
                                            id: a,
                                            pip_size: n
                                        } = e;
                                        _(tG(s, n)), r(s), tW(), c(e => [...e, s])
                                    }
                                    if ("history" === t.msg_type) {
                                        let {
                                            history: e,
                                            pip_size: s
                                        } = t;
                                        eu(s);
                                        let {
                                            prices: a
                                        } = e, {
                                            ticks_history: n
                                        } = t.echo_req;
                                        c(a), er(n), Z.api_base4.api.send({
                                            ticks: n,
                                            subscribe: 1
                                        })
                                    }
                                    if ("active_symbols" === t.msg_type) {
                                        let {
                                            active_symbols: e
                                        } = t, s = e.filter(e => "synthetics" === e.subgroup);
                                        s.sort((e, t) => e.display_order - t.display_order), Z.api_base4.api.send({
                                            ticks_history: s[0].symbol,
                                            adjust_start_time: 1,
                                            count: 5e3,
                                            end: "latest",
                                            start: 1,
                                            style: "ticks"
                                        }), v(s)
                                    }
                                });
                                Z.api_base4.pushSubscription(e)
                            }
                            if (Z.api_base.api) {
                                let e = Z.api_base.api.onMessage().subscribe(e => {
                                    let {
                                        data: t
                                    } = e;
                                    if ("proposal_open_contract" === t.msg_type) {
                                        let e = t.proposal_open_contract;
                                        eL({
                                            status: e.is_sold ? "sold" : "buy",
                                            profit: e.profit
                                        });
                                        let {
                                            proposal_open_contract: s
                                        } = t, a = s.contract_type;
                                        if (tk.current.includes(a) && s.is_sold) {
                                            if (!tC.current.includes(s.contract_id) && tD.current && (tR.current += s.profit, tR.current, tR.current >= tI.current ? tq() : tR.current <= -tA.current && tq()), "lost" === s.status) {
                                                if (!tC.current.includes(s.contract_id)) tC.current.push(s.contract_id), tS.current += Math.abs(s.profit), tL.current && et(parseFloat((tS.current * parseFloat(tf.current)).toFixed(2))), tN.current = !1, F(!1)
                                            } else tS.current = 0, et(tT.current);
                                            tN.current && !tC.current.includes(s.contract_id) && (tN.current = !1, F(!1), tC.current.push(s.contract_id))
                                        }
                                        tB(s)
                                    }
                                });
                                Z.api_base.pushSubscription(e)
                            }
                            ei(Z.api_base.account_info.currency)
                        },
                        tX = (e, t) => {
                            !tN.current && (tN.current = !0, F(!0), eC ? Z.api_base.api.send({
                                buy_contract_for_multiple_accounts: "1",
                                tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(eT).token],
                                price: ee,
                                parameters: {
                                    amount: ee,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: en,
                                    duration: J,
                                    duration_unit: "t",
                                    symbol: el
                                }
                            }) : Z.api_base.api.send({
                                buy: "1",
                                price: ee,
                                subscribe: 1,
                                parameters: {
                                    amount: ee,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: en,
                                    duration: J,
                                    duration_unit: "t",
                                    symbol: el
                                }
                            }))
                        },
                        tH = function(e) {
                            let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                            eC ? Z.api_base.api.send({
                                buy_contract_for_multiple_accounts: "1",
                                tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(eT).token],
                                price: ee,
                                parameters: {
                                    amount: ee,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: en,
                                    duration: J,
                                    duration_unit: "t",
                                    symbol: el,
                                    barrier: t ? tY() : es
                                }
                            }) : Z.api_base.api.send({
                                buy: "1",
                                price: ee,
                                subscribe: 1,
                                parameters: {
                                    amount: ee,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: "USD",
                                    duration: J,
                                    duration_unit: "t",
                                    symbol: el,
                                    barrier: t ? tY() : es
                                }
                            })
                        },
                        tq = () => {
                            R(!1), M(!1), O(!1), w(!1), eB(!1), tS.current = 0, tR.current = 0, et(tT.current)
                        },
                        tY = () => "DIGITOVER" === G ? g : "DIGITUNDER" === G ? S : void 0,
                        tW = () => {
                            c(e => e.slice(1))
                        },
                        tK = () => {
                            let e = o.slice(-m),
                                t = [];
                            return e.forEach(e => {
                                let s = tG(e, ed);
                                t.push(s)
                            }), t
                        },
                        tJ = e => {
                            let t = e.target.value;
                            tf.current = "" === t ? "" : Number(t), f("" === t ? "" : Number(t))
                        },
                        tQ = e => {
                            let t = e.target.value;
                            C("" === t ? "" : Number(t))
                        },
                        t0 = e => {
                            let t = e.target.value;
                            et("" === t ? "" : Number(t)), tT.current = "" === t ? "" : Number(t)
                        },
                        t1 = e => {
                            let t = e.target.value;
                            ea("" === t ? "" : Number(t))
                        },
                        t5 = e => {
                            let t = e.target.value;
                            if ("" === t) Q("");
                            else {
                                let e = Number(t);
                                !isNaN(e) && Q(Math.max(1, Math.min(9, e)))
                            }
                        },
                        t2 = e => {
                            t(e), localStorage.setItem("active_card", e)
                        },
                        t8 = e => {
                            let t = e.target.value;
                            ej("" === t ? "" : Number(t)), tI.current = "" !== t ? Number(t) : 0
                        },
                        t3 = e => {
                            let t = e.target.value;
                            eg("" === t ? "" : Number(t)), tA.current = "" !== t ? Number(t) : 0
                        },
                        t4 = e => {
                            ek(e.target.value)
                        },
                        t7 = () => {
                            ey(!eb), tD.current = !tD.current
                        },
                        t6 = () => {
                            eN(!ef), tL.current = !ef
                        },
                        t9 = () => {
                            eS(!eC), tO.current = !tO.current
                        },
                        [se, st] = l.useState([]),
                        [ss, sa] = l.useState("");
                    l.useEffect(() => {
                        if ("undefined" != typeof localStorage) try {
                            let e = JSON.parse(localStorage.getItem("accountsList")) || void 0,
                                t = Object.keys(e).filter(e => e.startsWith("CR"));
                            st(t), t.length > 0 && (sa(t[0]), ek(t[0]))
                        } catch (e) {
                            console.error("Error while parsing accounts list from localStorage", e)
                        }
                    }, []);
                    let sn = () => (0, i.jsxs)(i.Fragment, {
                        children: [(0, i.jsxs)("div", {
                            className: "martingale_ldp",
                            children: [(0, i.jsx)("small", {
                                children: "Ticks"
                            }), (0, i.jsx)("input", {
                                className: "custom_prediction",
                                type: "number",
                                id: "contract_duration",
                                value: J,
                                onChange: t5,
                                min: "1",
                                max: "9",
                                defaultValue: 1
                            })]
                        }), (0, i.jsxs)("div", {
                            className: "martingale_ldp",
                            children: [(0, i.jsx)("small", {
                                children: "Stake"
                            }), (0, i.jsx)("input", {
                                className: "custom_prediction",
                                type: "number",
                                value: ee,
                                onChange: t0
                            })]
                        })]
                    });
                    return ! function() {
                        document.querySelectorAll(".differs_container .progress .active-svg").forEach(e => e.remove());
                        let e = document.querySelector(".differs_container .progress.active");
                        if (e) {
                            let t = document.createElement("div");
                            t.classList.add("active-svg"), t.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16">
                    <path fill="red" d="M8 4l6 8H2z"/>
                </svg>`, t.style.position = "absolute", t.style.bottom = "-15px", t.style.left = "50%", t.style.transform = "translateX(-50%)", e.appendChild(t)
                        }
                    }(), (0, i.jsxs)("div", {
                        className: "main_app",
                        children: [(0, i.jsxs)("div", {
                            className: "top_bar",
                            children: [(0, i.jsx)("div", {
                                className: "toolbar__symbol-section",
                                children: (0, i.jsx)("div", {
                                    className: "toolbar__symbol-select",
                                    children: (0, i.jsx)("select", {
                                        className: "toolbar__select",
                                        onChange: e => {
                                            let t = e.target.value;
                                            Z.api_base4.api.forgetAll("ticks").then(() => {
                                                r("Loading..."), er(t)
                                            })
                                        },
                                        children: p.length > 0 ? p.map(e => (0, i.jsx)("option", {
                                            value: e.symbol,
                                            children: e.display_name
                                        }, e.symbol)) : (0, i.jsx)("option", {
                                            value: "",
                                            children: "SELECT MARKET"
                                        })
                                    })
                                })
                            }), (0, i.jsxs)("div", {
                                className: "toolbar__price-section",
                                children: [(0, i.jsxs)("div", {
                                    className: "toolbar__ticks",
                                    children: [(0, i.jsx)("small", {
                                        className: "toolbar__label",
                                        children: "Ticks"
                                    }), (0, i.jsx)("input", {
                                        type: "number",
                                        className: "toolbar__input",
                                        value: m,
                                        onChange: e => {
                                            let t = e.target.value;
                                            x("" === t ? "" : Number(t)), localStorage.setItem("no_of_ticks", t)
                                        }
                                    })]
                                }), (0, i.jsxs)("div", {
                                    className: "toolbar__current-price",
                                    children: [(0, i.jsx)("h4", {
                                        className: "toolbar__price-label",
                                        children: "PRICE"
                                    }), (0, i.jsx)("h3", {
                                        className: "toolbar__price-value",
                                        children: n.toString()
                                    })]
                                })]
                            }), em && (0, i.jsx)(l5, {
                                enable_tp_sl: tD,
                                setShowBotSettings: ex,
                                showBotSettings: em,
                                stop_loss: tA,
                                take_profit: tI,
                                setStopLossValue: eg,
                                setTakeProfitValue: ej,
                                stopLossValue: ev,
                                takeProfitValue: ep,
                                enableSlTpValue: eb,
                                setEnableSlTpValue: ey,
                                enableCopyDemo: eC,
                                setCopyDemo: eS,
                                enable_demo_copy: tO,
                                liveAccCR: eT,
                                setLiveAccCr: ek,
                                enableDisableMartingale: ef,
                                enable_disable_martingale: tL,
                                setEnableDisableMartingale: eN
                            }), (0, i.jsx)("div", {
                                className: "toolbar__controls",
                                children: (0, i.jsxs)("div", {
                                    className: "toolbar__control-group",
                                    children: [(0, i.jsx)("span", {
                                        className: "toolbar__control-label",
                                        children: "Select an Option"
                                    }), (0, i.jsxs)("select", {
                                        className: `toolbar__dropdown ${e?"toolbar__dropdown--active":""}`,
                                        value: e,
                                        onChange: e => t2(e.target.value),
                                        children: [(0, i.jsx)("option", {
                                            value: "",
                                            disabled: !0,
                                            children: "Select an Option"
                                        }), (0, i.jsx)("option", {
                                            value: "AUTOLDP",
                                            children: "Auto LDP"
                                        }), (0, i.jsx)("option", {
                                            value: "AutoTrader",
                                            children: "Auto Trader"
                                        }), (0, i.jsx)("option", {
                                            value: "pie",
                                            children: "Even & Odd"
                                        }), (0, i.jsx)("option", {
                                            value: "diff",
                                            children: "Differs & Matches"
                                        }), (0, i.jsx)("option", {
                                            value: "over_under",
                                            children: "Over & Under"
                                        }), (0, i.jsx)("option", {
                                            value: "rise_fall",
                                            children: "Rise & Fall"
                                        })]
                                    })]
                                })
                            })]
                        }), "AUTOLDP" === e && (0, i.jsx)(rp, {
                            digitList: tK(),
                            tickList: o.slice(-m),
                            CirclesDigitList: (() => {
                                let e = o.slice(-1e3),
                                    t = [];
                                return e.forEach(e => {
                                    let s = tG(e, ed);
                                    t.push(s)
                                }), t
                            })(),
                            customPrediction: es,
                            handleCustomPredictionInputChange: t1,
                            is_dark_mode_on: t$,
                            buy_contract: tX,
                            buy_contract_differs: tH,
                            selectTickList: sn,
                            handleMartingaleInputChange: tJ,
                            martingaleValueRef: tf,
                            isTradeActive: U,
                            setIsTradeActive: F,
                            guideElement: () => (0, i.jsx)("div", {
                                className: "guide",
                                onClick: () => ex(!em),
                                children: (0, i.jsx)(l1.C6u, {})
                            }),
                            numDigits: eM,
                            setNumDigits: eU,
                            comparisonOperator: eF,
                            setComparisonOperator: eP,
                            tradeAction: eZ,
                            setTradeAction: ez,
                            isAutoTrading: e$,
                            setIsAutoTrading: eB,
                            tradeExecuted: eG,
                            setTradeExecuted: eV,
                            numDigits1: eX,
                            setNumDigits1: eH,
                            predictionDigits: eq,
                            setPredictionDigits: eY,
                            comparisonOperator1: eW,
                            setComparisonOperator1: eK,
                            tradeAction1: eJ,
                            setTradeAction1: eQ,
                            isAutoTrading1: e0,
                            setIsAutoTrading1: e1,
                            tradeExecuted1: e5,
                            setTradeExecuted1: e2,
                            lastTradeType: e8,
                            setLastTradeType: e3,
                            numTicks: e4,
                            setNumTicks: e7,
                            comparisonOperator2: e6,
                            setComparisonOperator2: e9,
                            tradeAction2: te,
                            setTradeAction2: tt,
                            isAutoTrading2: ts,
                            setIsAutoTrading2: ta,
                            tradeExecuted2: tn,
                            setTradeExecuted2: ti,
                            lastTradeType2: tl,
                            setLastTradeType2: tr,
                            presetName: to,
                            setPresetName: tc,
                            fileInputKey: td,
                            setFileInputKey: tu,
                            isCustomTradeFormVisible: th,
                            setIsCustomTradeFormVisible: t_,
                            isSequencesVisible: tm,
                            setIsSequencesVisible: tx,
                            isRFSequencesVisible: tp,
                            setIsRFSequencesVisible: tj
                        }), "AutoTrader" === e && (0, i.jsx)(rf, {}), ("rise_fall" === e || "over_under" === e) && (0, i.jsxs)("div", {
                            className: "rf_ou",
                            children: ["over_under" === e && (0, i.jsxs)("div", {
                                className: "over_under card1",
                                children: [(0, i.jsxs)("div", {
                                    className: "over_under_options",
                                    children: [(0, i.jsxs)("div", {
                                        className: "digit_inputs",
                                        children: [(0, i.jsxs)("div", {
                                            className: "over_digit",
                                            children: [(0, i.jsx)("label", {
                                                htmlFor: "over_input",
                                                children: "Over"
                                            }), (0, i.jsx)("input", {
                                                type: "number",
                                                value: g,
                                                onChange: e => {
                                                    let t = e.target.value;
                                                    b("" === t ? "" : Number(t))
                                                }
                                            })]
                                        }), (0, i.jsxs)("div", {
                                            className: "under_digit",
                                            children: [(0, i.jsx)("label", {
                                                htmlFor: "under_input",
                                                children: "Under"
                                            }), (0, i.jsx)("input", {
                                                type: "number",
                                                value: S,
                                                onChange: e => {
                                                    let t = e.target.value;
                                                    T("" === t ? "" : Number(t))
                                                }
                                            })]
                                        })]
                                    }), (0, i.jsxs)("div", {
                                        className: "over_oct_container",
                                        children: [(0, i.jsxs)("div", {
                                            className: "over_oct",
                                            children: [ew ? (0, i.jsx)("button", {
                                                onClick: () => tH(G, !0),
                                                className: "overunder_buy_btn",
                                                children: "Buy"
                                            }) : (0, i.jsx)("button", {
                                                onClick: () => {
                                                    M(e => !e)
                                                },
                                                style: {
                                                    backgroundColor: L ? "red" : "green",
                                                    color: "white",
                                                    border: "none",
                                                    padding: "4px 8px",
                                                    cursor: "pointer",
                                                    borderRadius: "5px"
                                                },
                                                children: L ? "Stop" : "Run"
                                            }), sn(), (0, i.jsxs)("div", {
                                                className: "oneclick_amout",
                                                style: {
                                                    display: "flex",
                                                    flexDirection: "column",
                                                    alignItems: "center",
                                                    gap: "1.5px"
                                                },
                                                children: [(0, i.jsx)("h3", {
                                                    children: "Settings"
                                                }), (0, i.jsx)("div", {
                                                    className: "guide",
                                                    onClick: tb,
                                                    children: (0, i.jsx)(l1.C6u, {})
                                                })]
                                            })]
                                        }), eI && (0, i.jsx)("div", {
                                            className: "popup-overlay",
                                            children: (0, i.jsxs)("div", {
                                                className: "popup-box",
                                                children: [(0, i.jsx)("button", {
                                                    className: "close-button",
                                                    onClick: tb,
                                                    children: "X"
                                                }), (0, i.jsx)("h2", {
                                                    children: "Over/Under Settings"
                                                }), (0, i.jsxs)("div", {
                                                    className: "settings-column",
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "setting-item",
                                                        children: [(0, i.jsx)("label", {
                                                            children: "Trade Type"
                                                        }), (0, i.jsxs)("select", {
                                                            name: "contractType",
                                                            id: "contractType",
                                                            value: G,
                                                            onChange: e => {
                                                                let t = e.target.value;
                                                                V(t), localStorage.setItem("overUnderContract", t)
                                                            },
                                                            children: [(0, i.jsx)("option", {
                                                                value: "DIGITOVER",
                                                                children: "Over"
                                                            }), (0, i.jsx)("option", {
                                                                value: "DIGITUNDER",
                                                                children: "Under"
                                                            })]
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "setting-item",
                                                        children: [(0, i.jsx)("label", {
                                                            children: "Contract Type"
                                                        }), (0, i.jsxs)("select", {
                                                            name: "direction",
                                                            id: "direction",
                                                            onChange: e => {
                                                                let t = e.target.value;
                                                                "MANUAL" === t ? eE(!0) : eE(!1), H(t)
                                                            },
                                                            children: [(0, i.jsx)("option", {
                                                                value: "SAME",
                                                                children: "Same as trade type"
                                                            }), (0, i.jsx)("option", {
                                                                value: "OPPOSITE",
                                                                children: "Opposite to trade type"
                                                            }), (0, i.jsx)("option", {
                                                                value: "MANUAL",
                                                                children: "Manual"
                                                            })]
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "martingale_ldp",
                                                        children: [(0, i.jsx)("small", {
                                                            children: "Ticks"
                                                        }), (0, i.jsx)("input", {
                                                            className: "custom_prediction",
                                                            type: "number",
                                                            id: "contract_duration",
                                                            value: J,
                                                            onChange: t5,
                                                            min: "1",
                                                            max: "9",
                                                            defaultValue: 1
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "setting-item",
                                                        children: [(0, i.jsx)("label", {
                                                            children: "% Value"
                                                        }), (0, i.jsx)("input", {
                                                            type: "number",
                                                            value: N,
                                                            onChange: tQ
                                                        })]
                                                    }), (0, i.jsx)("h5", {
                                                        children: "Risk Management"
                                                    }), (0, i.jsxs)("div", {
                                                        className: "active_inactive",
                                                        children: [(0, i.jsx)("label", {
                                                            children: "Use Martingale"
                                                        }), (0, i.jsxs)("label", {
                                                            className: "switch",
                                                            children: [(0, i.jsx)("input", {
                                                                type: "checkbox",
                                                                checked: ef,
                                                                id: "enable_disbale_martingale",
                                                                onChange: t6
                                                            }), (0, i.jsx)("span", {
                                                                className: "slider round"
                                                            })]
                                                        })]
                                                    }), ef && (0, i.jsxs)("div", {
                                                        className: "setting-item",
                                                        children: [(0, i.jsx)("label", {
                                                            children: "Martingale"
                                                        }), (0, i.jsx)("input", {
                                                            type: "number",
                                                            value: tf.current,
                                                            onChange: tJ
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "active_inactive",
                                                        children: [(0, i.jsx)("label", {
                                                            children: "Use Take Profit/Stop Loss"
                                                        }), (0, i.jsxs)("label", {
                                                            className: "switch",
                                                            children: [(0, i.jsx)("input", {
                                                                type: "checkbox",
                                                                checked: eb,
                                                                id: "enable_tp_sl",
                                                                onChange: t7
                                                            }), (0, i.jsx)("span", {
                                                                className: "slider round"
                                                            })]
                                                        })]
                                                    }), eb && (0, i.jsxs)(i.Fragment, {
                                                        children: [(0, i.jsxs)("div", {
                                                            className: "setting-item",
                                                            children: [(0, i.jsx)("label", {
                                                                children: "Take Profit"
                                                            }), (0, i.jsx)("input", {
                                                                type: "text",
                                                                value: ep,
                                                                id: "take_profit",
                                                                onChange: t8
                                                            })]
                                                        }), (0, i.jsxs)("div", {
                                                            className: "setting-item",
                                                            children: [(0, i.jsx)("label", {
                                                                children: "Stop Loss"
                                                            }), (0, i.jsx)("input", {
                                                                type: "text",
                                                                value: ev,
                                                                id: "stop_loss",
                                                                onChange: t3
                                                            })]
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "active_inactive",
                                                        children: [(0, i.jsx)("label", {
                                                            children: "Copy Demo to Real Account"
                                                        }), (0, i.jsxs)("label", {
                                                            className: "switch",
                                                            children: [(0, i.jsx)("input", {
                                                                type: "checkbox",
                                                                checked: eC,
                                                                id: "copy_demo",
                                                                onChange: t9
                                                            }), (0, i.jsx)("span", {
                                                                className: "slider round"
                                                            })]
                                                        })]
                                                    }), eC && (0, i.jsx)("select", {
                                                        value: eT,
                                                        onChange: t4,
                                                        children: se.map(e => (0, i.jsx)("option", {
                                                            value: e,
                                                            children: e
                                                        }, e))
                                                    })]
                                                })]
                                            })
                                        })]
                                    })]
                                }), (0, i.jsx)(ro, {
                                    overUnderList: tK(),
                                    overValue: g,
                                    underValue: S,
                                    is_mobile: tz,
                                    active_symbol: el,
                                    isOverUnderOneClickActive: L,
                                    oneClickAmount: ee,
                                    oneClickDuration: J,
                                    isTradeActive: U,
                                    percentageValue: N,
                                    overUnderContract: G,
                                    overUnderDirection: X,
                                    setIsTradeActive: F,
                                    isTradeActiveRef: tN,
                                    enableCopyDemo: eC,
                                    liveAccCR: eT
                                })]
                            }), ("rise_fall" === e || "over_under" === e) && (0, i.jsxs)("div", {
                                className: "line_chart card2",
                                children: [(0, i.jsxs)("div", {
                                    className: "linechat_oct",
                                    children: [(0, i.jsxs)("select", {
                                        name: "",
                                        id: "linechat_oct_options",
                                        onChange: e => {
                                            let t = e.target.value;
                                            "risefall" === t ? u(!0) : "lastdigit" === t && u(!1)
                                        },
                                        children: ["rise_fall" === e && (0, i.jsx)("option", {
                                            value: "risefall",
                                            children: "Rise/Fall Chart"
                                        }), "over_under" === e && (0, i.jsx)("option", {
                                            value: "lastdigit",
                                            children: "Last Digits Chart"
                                        })]
                                    }), !d && (0, i.jsx)("h2", {
                                        className: "analysis_title",
                                        children: "Last Digits Chart"
                                    }), d && (0, i.jsxs)("div", {
                                        className: "oct_trading_options",
                                        children: ["rise_fall" === e && (0, i.jsxs)("div", {
                                            className: "details_options",
                                            children: [(0, i.jsx)("small", {
                                                children: "Enable"
                                            }), (0, i.jsxs)("label", {
                                                className: "switch",
                                                children: [(0, i.jsx)("input", {
                                                    type: "checkbox",
                                                    checked: A,
                                                    onChange: () => {
                                                        R(!A)
                                                    }
                                                }), (0, i.jsx)("span", {
                                                    className: "slider round"
                                                })]
                                            })]
                                        }), "rise_fall" === e && (0, i.jsxs)("div", {
                                            className: "rise_fall_buttons",
                                            children: [(0, i.jsx)("button", {
                                                className: "rise_btn",
                                                onClick: () => tX("CALL", A),
                                                children: "Rise"
                                            }), (0, i.jsx)("button", {
                                                className: "fall_btn",
                                                onClick: () => tX("PUT", A),
                                                children: "Fall"
                                            }), sn(), (0, i.jsx)("div", {
                                                className: "guide",
                                                onClick: () => ex(!em),
                                                children: (0, i.jsx)(l1.C6u, {})
                                            })]
                                        })]
                                    })]
                                }), (0, i.jsx)(l7, {
                                    data: (() => {
                                        let e = o.slice(-m),
                                            t = [],
                                            s = 0,
                                            a = 0;
                                        return e.forEach(e => {
                                            let n = tG(e, ed);
                                            0 !== s ? (a = e - s, s = e) : (s = e, a = e), t.push({
                                                name: d ? e.toString() : n.toString(),
                                                value: d ? parseFloat(a.toFixed(2)) : n
                                            })
                                        }), t
                                    })()
                                })]
                            }), "rise_fall" === e && (0, i.jsxs)("div", {
                                className: "rise_fall card1",
                                children: [(0, i.jsx)("h2", {
                                    className: "analysis_title",
                                    children: "Rise/Fall"
                                }), (0, i.jsx)(rm, {
                                    allDigitList: tK(),
                                    is_mobile: tz
                                })]
                            })]
                        }), "pie" === e && (0, i.jsx)("div", {
                            className: "pie_diff",
                            children: (0, i.jsxs)("div", {
                                className: "pie card4",
                                children: [(0, i.jsxs)("div", {
                                    className: "odd_even_info",
                                    children: [(0, i.jsx)("h2", {
                                        className: "analysis_title",
                                        children: "Even/Odd"
                                    }), (0, i.jsxs)("div", {
                                        className: "odd_even_settings",
                                        children: [(0, i.jsx)("button", {
                                            onClick: () => {
                                                O(e => !e)
                                            },
                                            style: {
                                                backgroundColor: D ? "red" : "green",
                                                color: "white",
                                                border: "none",
                                                padding: "4px 8px",
                                                cursor: "pointer",
                                                borderRadius: "5px"
                                            },
                                            children: D ? "Stop" : "Run"
                                        }), (0, i.jsx)("div", {
                                            className: "tick_stake",
                                            children: sn()
                                        }), (0, i.jsxs)("div", {
                                            className: "oneclick_amout",
                                            style: {
                                                display: "flex",
                                                flexDirection: "column",
                                                alignItems: "center",
                                                gap: "1.5px"
                                            },
                                            children: [(0, i.jsx)("h3", {
                                                children: "Settings"
                                            }), (0, i.jsx)("div", {
                                                className: "guide",
                                                onClick: tb,
                                                children: (0, i.jsx)(l1.C6u, {})
                                            })]
                                        })]
                                    }), eI && (0, i.jsx)("div", {
                                        className: "popup-overlay",
                                        children: (0, i.jsxs)("div", {
                                            className: "popup-box",
                                            children: [(0, i.jsx)("button", {
                                                className: "close-button",
                                                onClick: tb,
                                                children: "X"
                                            }), (0, i.jsx)("h2", {
                                                children: "Even/Odd Settings"
                                            }), (0, i.jsxs)("div", {
                                                className: "settings-column",
                                                children: [(0, i.jsxs)("div", {
                                                    className: "setting-item",
                                                    children: [(0, i.jsx)("label", {
                                                        children: "Check if "
                                                    }), (0, i.jsxs)("select", {
                                                        name: "ct_types",
                                                        id: "contract_types",
                                                        value: q,
                                                        onChange: e => {
                                                            let t = e.target.value;
                                                            Y(t), localStorage.setItem("evenOddContract", t)
                                                        },
                                                        children: [(0, i.jsx)("option", {
                                                            value: "DIGITEVEN",
                                                            children: "Even %"
                                                        }), (0, i.jsx)("option", {
                                                            value: "DIGITODD",
                                                            children: "Odd %"
                                                        }), (0, i.jsx)("option", {
                                                            value: "BOTH",
                                                            children: "Either Even or Odd %"
                                                        })]
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "setting-item",
                                                    children: [(0, i.jsx)("label", {
                                                        children: "Is Greater than"
                                                    }), (0, i.jsx)("input", {
                                                        type: "number",
                                                        value: N,
                                                        onChange: tQ
                                                    }), "%"]
                                                }), (0, i.jsxs)("div", {
                                                    className: "setting-item",
                                                    children: [(0, i.jsx)("label", {
                                                        children: "Then trade "
                                                    }), (0, i.jsxs)("select", {
                                                        value: W,
                                                        onChange: e => {
                                                            let t = e.target.value;
                                                            K(t), localStorage.setItem("sameDiffEvenOddContract", t)
                                                        },
                                                        children: [(0, i.jsx)("option", {
                                                            value: "SAME",
                                                            children: "If Even trade Even, Odd = Odd"
                                                        }), (0, i.jsx)("option", {
                                                            value: "OPPOSITE",
                                                            children: "If Even = Odd, Odd = Even"
                                                        })]
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "setting-item",
                                                    children: [(0, i.jsx)("label", {
                                                        children: "Ticks"
                                                    }), (0, i.jsx)("input", {
                                                        className: "custom_prediction",
                                                        type: "number",
                                                        id: "contract_duration",
                                                        value: J,
                                                        onChange: t5,
                                                        min: "1",
                                                        max: "9",
                                                        defaultValue: 1
                                                    })]
                                                }), (0, i.jsx)("h5", {
                                                    children: "Risk Management"
                                                }), (0, i.jsxs)("div", {
                                                    className: "active_inactive",
                                                    children: [(0, i.jsx)("label", {
                                                        children: "Use Martingale"
                                                    }), (0, i.jsxs)("label", {
                                                        className: "switch",
                                                        children: [(0, i.jsx)("input", {
                                                            type: "checkbox",
                                                            checked: ef,
                                                            id: "enable_disbale_martingale",
                                                            onChange: t6
                                                        }), (0, i.jsx)("span", {
                                                            className: "slider round"
                                                        })]
                                                    })]
                                                }), ef && (0, i.jsxs)("div", {
                                                    className: "setting-item",
                                                    children: [(0, i.jsx)("label", {
                                                        children: "Martingale"
                                                    }), (0, i.jsx)("input", {
                                                        type: "number",
                                                        value: tf.current,
                                                        onChange: tJ
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "active_inactive",
                                                    children: [(0, i.jsx)("label", {
                                                        children: "Use Take Profit/Stop Loss"
                                                    }), (0, i.jsxs)("label", {
                                                        className: "switch",
                                                        children: [(0, i.jsx)("input", {
                                                            type: "checkbox",
                                                            checked: eb,
                                                            id: "enable_tp_sl",
                                                            onChange: t7
                                                        }), (0, i.jsx)("span", {
                                                            className: "slider round"
                                                        })]
                                                    })]
                                                }), eb && (0, i.jsxs)(i.Fragment, {
                                                    children: [(0, i.jsxs)("div", {
                                                        className: "setting-item",
                                                        children: [(0, i.jsx)("label", {
                                                            children: "Take Profit"
                                                        }), (0, i.jsx)("input", {
                                                            type: "text",
                                                            value: ep,
                                                            id: "take_profit",
                                                            onChange: t8
                                                        })]
                                                    }), (0, i.jsxs)("div", {
                                                        className: "setting-item",
                                                        children: [(0, i.jsx)("label", {
                                                            children: "Stop Loss"
                                                        }), (0, i.jsx)("input", {
                                                            type: "text",
                                                            value: ev,
                                                            id: "stop_loss",
                                                            onChange: t3
                                                        })]
                                                    })]
                                                }), (0, i.jsxs)("div", {
                                                    className: "active_inactive",
                                                    children: [(0, i.jsx)("label", {
                                                        children: "Copy Demo to Real Account"
                                                    }), (0, i.jsxs)("label", {
                                                        className: "switch",
                                                        children: [(0, i.jsx)("input", {
                                                            type: "checkbox",
                                                            checked: eC,
                                                            id: "copy_demo",
                                                            onChange: t9
                                                        }), (0, i.jsx)("span", {
                                                            className: "slider round"
                                                        })]
                                                    })]
                                                }), eC && (0, i.jsx)("select", {
                                                    value: eT,
                                                    onChange: t4,
                                                    children: se.map(e => (0, i.jsx)("option", {
                                                        value: e,
                                                        children: e
                                                    }, e))
                                                })]
                                            })]
                                        })
                                    })]
                                }), (0, i.jsx)("div", {
                                    className: "pie_container",
                                    children: (0, i.jsx)(rh, {
                                        allDigitList: tK(),
                                        contract_type: q,
                                        isEvenOddOneClickActive: D,
                                        percentageValue: N,
                                        active_symbol: el,
                                        isTradeActive: U,
                                        isTradeActiveRef: tN,
                                        oneClickAmount: ee,
                                        oneClickDuration: J,
                                        setIsTradeActive: F,
                                        enableCopyDemo: eC,
                                        liveAccCR: eT,
                                        sameDiffEvenOdd: W
                                    })
                                })]
                            })
                        }), "diff" === e && (0, i.jsx)("div", {
                            className: "pie_diff",
                            children: (0, i.jsxs)("div", {
                                className: "digit_diff card3",
                                children: [(0, i.jsx)("h2", {
                                    className: "analysis_title",
                                    children: "Differs/Matches"
                                }), (0, i.jsx)("div", {
                                    className: "title_oc_trader",
                                    children: (0, i.jsxs)("div", {
                                        className: "oneclick_trader",
                                        children: ["MANUAL" === $ ? (0, i.jsx)("button", {
                                            className: "custom_buy_btn",
                                            onClick: () => tH(P),
                                            children: "Buy"
                                        }) : "DIGITDIFF" === P && (0, i.jsx)(i.Fragment, {
                                            children: (0, i.jsxs)("div", {
                                                className: "differs_choices",
                                                children: [(0, i.jsx)("button", {
                                                    onClick: () => {
                                                        w(!k)
                                                    },
                                                    style: {
                                                        backgroundColor: k ? "red" : "green",
                                                        color: "white",
                                                        border: "none",
                                                        padding: "4px 8px",
                                                        cursor: "pointer",
                                                        borderRadius: "5px"
                                                    },
                                                    children: k ? "Stop" : "Run"
                                                }), (0, i.jsxs)("div", {
                                                    className: "auto_clicker",
                                                    children: [(0, i.jsx)("small", {
                                                        children: "Auto Differ"
                                                    }), (0, i.jsxs)("label", {
                                                        className: "switch",
                                                        children: [(0, i.jsx)("input", {
                                                            type: "checkbox",
                                                            checked: E,
                                                            onChange: () => {
                                                                I(!E)
                                                            }
                                                        }), (0, i.jsx)("span", {
                                                            className: "slider round"
                                                        })]
                                                    })]
                                                })]
                                            })
                                        }), "MANUAL" === $ && (0, i.jsxs)("div", {
                                            className: "auto_clicker",
                                            children: [(0, i.jsx)("small", {
                                                children: "Prediction"
                                            }), (0, i.jsx)("input", {
                                                className: "custom_prediction",
                                                type: "number",
                                                value: es,
                                                onChange: t1
                                            })]
                                        }), sn(), (0, i.jsxs)("div", {
                                            className: "oneclick_amout",
                                            style: {
                                                display: "flex",
                                                flexDirection: "column",
                                                alignItems: "center",
                                                gap: "1.5px"
                                            },
                                            children: [(0, i.jsx)("h3", {
                                                children: "Settings"
                                            }), (0, i.jsx)("div", {
                                                className: "guide",
                                                onClick: ty,
                                                children: (0, i.jsx)(l1.C6u, {})
                                            }), eR && (0, i.jsx)("div", {
                                                className: "popup-overlay",
                                                children: (0, i.jsxs)("div", {
                                                    className: "popup-box",
                                                    children: [(0, i.jsx)("button", {
                                                        className: "close-button",
                                                        onClick: ty,
                                                        children: "X"
                                                    }), (0, i.jsx)("h2", {
                                                        children: "Differs/Matches Settings"
                                                    }), (0, i.jsxs)("div", {
                                                        className: "settings-column",
                                                        children: [(0, i.jsxs)("div", {
                                                            className: "setting-item",
                                                            children: [(0, i.jsx)("label", {
                                                                children: "Trade Type"
                                                            }), (0, i.jsxs)("select", {
                                                                name: "ct_types",
                                                                id: "contract_types",
                                                                onChange: e => {
                                                                    z(e.target.value)
                                                                },
                                                                children: [(0, i.jsx)("option", {
                                                                    value: "DIGITDIFF",
                                                                    children: "Differs"
                                                                }), (0, i.jsx)("option", {
                                                                    value: "DIGITMATCH",
                                                                    children: "Matches"
                                                                })]
                                                            })]
                                                        }), (0, i.jsxs)("div", {
                                                            className: "setting-item",
                                                            children: [(0, i.jsx)("label", {
                                                                children: "Contract Type"
                                                            }), (0, i.jsxs)("select", {
                                                                name: "td_options",
                                                                id: "trading_options",
                                                                onChange: e => {
                                                                    B(e.target.value)
                                                                },
                                                                children: [(0, i.jsx)("option", {
                                                                    value: "AUTO",
                                                                    children: "Auto"
                                                                }), (0, i.jsx)("option", {
                                                                    value: "MANUAL",
                                                                    children: "Manual"
                                                                })]
                                                            })]
                                                        }), (0, i.jsxs)("div", {
                                                            className: "martingale_ldp",
                                                            children: [(0, i.jsx)("small", {
                                                                children: "Ticks"
                                                            }), (0, i.jsx)("input", {
                                                                className: "custom_prediction",
                                                                type: "number",
                                                                id: "contract_duration",
                                                                value: J,
                                                                onChange: t5,
                                                                min: "1",
                                                                max: "9",
                                                                defaultValue: 1
                                                            })]
                                                        }), (0, i.jsx)("h5", {
                                                            children: "Risk Management"
                                                        }), (0, i.jsxs)("div", {
                                                            className: "active_inactive",
                                                            children: [(0, i.jsx)("label", {
                                                                children: "Use Martingale"
                                                            }), (0, i.jsxs)("label", {
                                                                className: "switch",
                                                                children: [(0, i.jsx)("input", {
                                                                    type: "checkbox",
                                                                    checked: ef,
                                                                    id: "enable_disbale_martingale",
                                                                    onChange: t6
                                                                }), (0, i.jsx)("span", {
                                                                    className: "slider round"
                                                                })]
                                                            })]
                                                        }), ef && (0, i.jsxs)("div", {
                                                            className: "setting-item",
                                                            children: [(0, i.jsx)("label", {
                                                                children: "Martingale"
                                                            }), (0, i.jsx)("input", {
                                                                type: "number",
                                                                value: tf.current,
                                                                onChange: tJ
                                                            })]
                                                        }), (0, i.jsxs)("div", {
                                                            className: "active_inactive",
                                                            children: [(0, i.jsx)("label", {
                                                                children: "Use Take Profit/Stop Loss"
                                                            }), (0, i.jsxs)("label", {
                                                                className: "switch",
                                                                children: [(0, i.jsx)("input", {
                                                                    type: "checkbox",
                                                                    checked: eb,
                                                                    id: "enable_tp_sl",
                                                                    onChange: t7
                                                                }), (0, i.jsx)("span", {
                                                                    className: "slider round"
                                                                })]
                                                            })]
                                                        }), eb && (0, i.jsxs)(i.Fragment, {
                                                            children: [(0, i.jsxs)("div", {
                                                                className: "setting-item",
                                                                children: [(0, i.jsx)("label", {
                                                                    children: "Take Profit"
                                                                }), (0, i.jsx)("input", {
                                                                    type: "text",
                                                                    value: ep,
                                                                    id: "take_profit",
                                                                    onChange: t8
                                                                })]
                                                            }), (0, i.jsxs)("div", {
                                                                className: "setting-item",
                                                                children: [(0, i.jsx)("label", {
                                                                    children: "Stop Loss"
                                                                }), (0, i.jsx)("input", {
                                                                    type: "text",
                                                                    value: ev,
                                                                    id: "stop_loss",
                                                                    onChange: t3
                                                                })]
                                                            })]
                                                        }), (0, i.jsxs)("div", {
                                                            className: "active_inactive",
                                                            children: [(0, i.jsx)("label", {
                                                                children: "Copy Demo to Real Account"
                                                            }), (0, i.jsxs)("label", {
                                                                className: "switch",
                                                                children: [(0, i.jsx)("input", {
                                                                    type: "checkbox",
                                                                    checked: eC,
                                                                    id: "copy_demo",
                                                                    onChange: t9
                                                                }), (0, i.jsx)("span", {
                                                                    className: "slider round"
                                                                })]
                                                            })]
                                                        }), eC && (0, i.jsx)("select", {
                                                            value: eT,
                                                            onChange: t4,
                                                            children: se.map(e => (0, i.jsx)("option", {
                                                                value: e,
                                                                children: e
                                                            }, e))
                                                        })]
                                                    })]
                                                })
                                            })]
                                        })]
                                    })
                                }), (0, i.jsx)(l2, {
                                    lastDigitList: tK(),
                                    active_last: h,
                                    active_symbol: el,
                                    contract_type: P,
                                    duration: J,
                                    isOneClickActive: k,
                                    stake_amount: ee,
                                    prevLowestValue: eh,
                                    isAutoClickerActive: E,
                                    digitDiffHigh: tw,
                                    digitDiffLow: tE,
                                    isTradeActive: U,
                                    isTradeActiveRef: tN,
                                    setIsTradeActive: F,
                                    setPrevLowestValue: e_,
                                    tradingDiffType: $,
                                    enableCopyDemo: eC,
                                    liveAccCR: eT
                                })]
                            })
                        })]
                    })
                }),
                rC = () => {
                    let {
                        run_panel: e
                    } = (0, j.oR)(), {
                        isDesktop: t
                    } = (0, N.F)(), {
                        is_drawer_open: s
                    } = e;
                    return (0, i.jsx)("div", {
                        className: U()("dashboard__chart-wrapper", {
                            "dashboard__chart-wrapper--expanded": s && t
                        }),
                        dir: "ltr",
                        children: (0, i.jsx)("div", {
                            className: "main_analysis",
                            children: (0, i.jsx)(rN, {})
                        })
                    })
                };
            var rS = s("70080");
            let rT = (0, r.Pi)(() => {
                    let [e, t] = (0, l.useState)(null), [s, a] = (0, l.useState)(!1), {
                        is_dark_mode_on: n
                    } = (0, j.oR)().ui;
                    return (0, l.useEffect)(() => {
                        let e = e => {
                            e.preventDefault(), t(e), a(!0)
                        };
                        return window.addEventListener("beforeinstallprompt", e), () => {
                            window.removeEventListener("beforeinstallprompt", e)
                        }
                    }, []), (0, i.jsx)(i.Fragment, {
                        children: s && (0, i.jsx)("div", {
                            className: `install-app-overlay ${n?"dark_active":""}`,
                            children: (0, i.jsxs)("div", {
                                className: "install-app-popup",
                                children: [(0, i.jsx)("h2", {
                                    children: "Install Binarytool?"
                                }), (0, i.jsx)(es.Z, {
                                    "data-testid": "data-title",
                                    weight: "bold",
                                    as: "p",
                                    align: "left",
                                    size: "s",
                                    color: "prominent",
                                    children: (0, f.NC)("Install D-Apollo's app NOW for a faster loading and more better experience!")
                                }), (0, i.jsxs)("div", {
                                    className: "button-group",
                                    children: [(0, i.jsx)("button", {
                                        className: "install_now_button",
                                        onClick: () => {
                                            e && (e.prompt(), e.userChoice.then(() => {
                                                t(null), a(!1)
                                            }))
                                        },
                                        children: "Install"
                                    }), (0, i.jsx)("button", {
                                        className: "no_install_button",
                                        onClick: () => {
                                            a(!1)
                                        },
                                        children: "Not Now"
                                    })]
                                })]
                            })
                        })
                    })
                }),
                rk = e => {
                    let {
                        type: t,
                        amount: s,
                        onClose: a,
                        isOpen: n
                    } = e;
                    if (!n) return null;
                    let l = "take-profit" === t;
                    return (0, i.jsx)("div", {
                        className: "tp-modal__overlay",
                        children: (0, i.jsxs)("div", {
                            className: "tp-modal__container",
                            children: [(0, i.jsx)("button", {
                                className: "tp-modal__close",
                                onClick: a,
                                children: "\xd7"
                            }), (0, i.jsx)("h2", {
                                children: l ? "Take Profit Hit!" : "Stop Loss Hit!"
                            }), (0, i.jsx)("img", {
                                src: l ? "https://media.giphy.com/media/v1.Y2lkPWVjZjA1ZTQ3NXY1OXUyamw5dWt5OHo4ZWtzb3dvN3c2MW43Yml5cHB1MHh1cmVrYSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/sa6KfGNKwd0c/giphy.gif" : "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExNnZja2N4d2xtdmszazFld3U5dnYzeXV0eWQ3czN2cGFkcnpkeWR4cCZlcD12MV9naWZzX3NlYXJjaCZjdD1n/pynZagVcYxVUk/giphy.gif",
                                alt: l ? "Take Profit" : "Stop Loss",
                                className: "tp-modal__image"
                            }), (0, i.jsx)("p", {
                                className: "tp-modal__p",
                                children: l ? "Congratulations! You have successfully hit your Take Profit target of" : "Unfortunately, your trade hit the Stop Loss limit of"
                            }), (0, i.jsx)("h3", {
                                className: l ? "tp-profit" : "tp-loss",
                                children: l ? `Take Profit Amount: $${s.toFixed(2)}` : `Loss Amount: -$${s.toFixed(2)}`
                            }), (0, i.jsx)("p", {
                                className: "tp-modal__footer",
                                children: l ? "Enjoy your win!" : "Don't worry, try next time!"
                            }), (0, i.jsx)("button", {
                                className: "tp-modal__button",
                                onClick: a,
                                children: "Close"
                            })]
                        })
                    })
                },
                rw = {
                    call: "CALL",
                    put: "PUT",
                    even: "DIGITEVEN",
                    odd: "DIGITODD",
                    over: "DIGITOVER",
                    under: "DIGITUNDER",
                    matches: "DIGITMATCH",
                    differs: "DIGITDIFF"
                },
                rE = (0, r.Pi)(() => {
                    let [e, t] = (0, l.useState)(!1), [s, a] = (0, l.useState)("Updating..."), [n, r] = (0, l.useState)([]), [o, c] = (0, l.useState)(0), [d, u] = (0, l.useState)([]), [h, _] = (0, l.useState)(!1), [m, x] = (0, l.useState)(1), [p, v] = (0, l.useState)(.5), [g, b] = (0, l.useState)(""), [y, f] = (0, l.useState)("R_100"), [C, S] = (0, l.useState)("R_100"), [T, k] = (0, l.useState)(2), [w, E] = (0, l.useState)(!1), [I, A] = (0, l.useState)(""), {
                        isAutoTrading: R,
                        setIsAutoTrading: D
                    } = (0, t5.f)(), [O, L] = (0, l.useState)(5), [M, F] = (0, l.useState)("even"), [P, z] = (0, l.useState)(!0), [$, B] = (0, l.useState)(!1), [G, V] = (0, l.useState)(!1), X = (0, l.useRef)(p), H = (0, l.useRef)(h), q = (0, l.useRef)([]), Y = (0, l.useRef)(["DIGITODD", "DIGITEVEN", "DIGITOVER", "DIGITUNDER", "DIGITDIFF"]), [W, K] = (0, l.useState)(1.15), [J, Q] = (0, l.useState)(5), [ee, et] = (0, l.useState)(30), es = (0, l.useRef)(0), ea = (0, l.useRef)(J), en = (0, l.useRef)(ee), ei = (0, l.useRef)(P), el = (0, l.useRef)(null), er = (0, l.useRef)(p), eo = (0, l.useRef)(W), ec = (0, l.useRef)(!1), ed = (0, l.useRef)(!0), eu = (0, l.useRef)("even"), [eh, e_] = (0, l.useState)(!1), [em, ex] = (0, l.useState)("take-profit"), [ep, ej] = (0, l.useState)(0), {
                        ui: ev
                    } = (0, j.oR)(), eg = (0, j.oR)(), {
                        transactions: eb
                    } = (0, j.oR)(), {
                        total_profit: ey
                    } = eb.statistics, {
                        run_panel: ef,
                        summary_card: eN
                    } = eg, {
                        registerBotListeners: eC,
                        unregisterBotListeners: eS,
                        onContractStatusEvent: eT
                    } = ef, {
                        is_dark_mode_on: ek
                    } = ev, {
                        isDesktop: ew
                    } = (0, N.F)(), {
                        is_drawer_open: eE
                    } = ef, {
                        updateResultsCompletedContract: eI
                    } = eb, {
                        onBotContractEvent: eA
                    } = eN;
                    (0, l.useEffect)(() => (eC(), eD(), () => {
                        eS()
                    }), []), (0, l.useEffect)(() => {
                        C !== y && Z.api_base4.api.send({
                            ticks_history: y,
                            adjust_start_time: 1,
                            count: 5e3,
                            end: "latest",
                            start: 1,
                            style: "ticks"
                        }), S(y)
                    }, [y]);
                    let eR = (e, t) => {
                            let s = e.toFixed(t);
                            return Number(s = String(s).slice(-1))
                        },
                        eD = async () => {
                            if (await new Promise(e => setTimeout(e, 5e3)), !e && (Z.api_base4.api.send({
                                    active_symbols: "brief",
                                    product_type: "basic"
                                }), t(!0)), Z.api_base4.api) {
                                let e = Z.api_base4.api.onMessage().subscribe(e => {
                                    let {
                                        data: t
                                    } = e;
                                    if ("tick" === t.msg_type) {
                                        let {
                                            tick: e
                                        } = t, {
                                            ask: s,
                                            pip_size: n
                                        } = e, i = eR(s, n);
                                        c(i), el.current = i, a(s), r(e => [...e.slice(1), s])
                                    }
                                    if ("history" === t.msg_type) {
                                        let {
                                            history: e,
                                            pip_size: s
                                        } = t;
                                        k(s);
                                        let {
                                            prices: a
                                        } = e, {
                                            ticks_history: n
                                        } = t.echo_req;
                                        r(a), f(n), Z.api_base4.api.send({
                                            ticks: n,
                                            subscribe: 1
                                        })
                                    }
                                    if ("active_symbols" === t.msg_type) {
                                        let {
                                            active_symbols: e
                                        } = t, s = e.filter(e => "synthetics" === e.subgroup);
                                        s.sort((e, t) => e.display_order - t.display_order), Z.api_base4.api.send({
                                            ticks_history: s[0].symbol,
                                            adjust_start_time: 1,
                                            count: 5e3,
                                            end: "latest",
                                            start: 1,
                                            style: "ticks"
                                        }), u(s)
                                    }
                                });
                                Z.api_base4.pushSubscription(e)
                            }
                            if (Z.api_base.api) {
                                let e = Z.api_base.api.onMessage().subscribe(e => {
                                    let {
                                        data: t
                                    } = e;
                                    if ("proposal_open_contract" === t.msg_type) {
                                        let {
                                            proposal_open_contract: e
                                        } = t, s = e.contract_type;
                                        Y.current.includes(s) && (e.is_sold ? eT({
                                            id: "contract.sold",
                                            contract: e,
                                            data: 0
                                        }) : eT({
                                            id: "contract.purchase_received",
                                            contract: e,
                                            data: 0
                                        }), e.is_sold && !q.current.includes(e.contract_id) && (H.current = !1, _(!1), q.current.push(e.contract_id))), eI(e), eA(e)
                                    }
                                });
                                Z.api_base.pushSubscription(e)
                            }
                            b(Z.api_base.account_info.currency)
                        },
                        eO = e => {
                            eT({
                                id: "contract.purchase_sent",
                                data: 0
                            }), w ? Z.api_base.api.send({
                                buy_contract_for_multiple_accounts: "1",
                                tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(I).token],
                                price: er.current,
                                parameters: {
                                    amount: er.current,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: g,
                                    duration: m,
                                    duration_unit: "t",
                                    symbol: y
                                }
                            }) : Z.api_base.api.send({
                                buy: "1",
                                price: er.current,
                                subscribe: 1,
                                parameters: {
                                    amount: er.current,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: g,
                                    duration: m,
                                    duration_unit: "t",
                                    symbol: y
                                }
                            })
                        },
                        eL = (e, t) => {
                            eT({
                                id: "contract.purchase_sent",
                                data: 0
                            }), w ? Z.api_base.api.send({
                                buy_contract_for_multiple_accounts: "1",
                                tokens: [(0, Z.getToken)().token, (0, Z.getLiveAccToken)(I).token],
                                price: er.current,
                                parameters: {
                                    amount: er.current,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: g,
                                    duration: m,
                                    duration_unit: "t",
                                    symbol: y,
                                    barrier: t.toString()
                                }
                            }) : Z.api_base.api.send({
                                buy: "1",
                                price: er.current,
                                subscribe: 1,
                                parameters: {
                                    amount: er.current,
                                    basis: "stake",
                                    contract_type: e,
                                    currency: "USD",
                                    duration: m,
                                    duration_unit: "t",
                                    symbol: y,
                                    barrier: t.toString()
                                }
                            })
                        };
                    return (0, l.useEffect)(() => {
                        if (!R) return;
                        if (ea.current && ey >= ea.current) {
                            D(!1), ex("take-profit"), ej(ey), e_(!0);
                            return
                        }
                        if (en.current && ey <= -en.current) {
                            D(!1), ex("stop-loss"), ej(ey), e_(!0);
                            return
                        }
                        let e = M,
                            t = rw[M],
                            s = null;
                        if (null !== el.current && ei.current ? ec.current ? s = function(e, t, s) {
                                if (!Number.isInteger(t) || t < 0 || t > 9) throw Error("Invalid lastDigit: must be an integer from 0 to 9");
                                switch (e.toUpperCase()) {
                                    case "DIGITEVEN":
                                        return t % 2 == 0;
                                    case "DIGITODD":
                                        return t % 2 != 0;
                                    case "DIGITMATCH":
                                        return t === s;
                                    case "DIGITDIFF":
                                        return t !== s;
                                    case "DIGITOVER":
                                        return t > s;
                                    case "DIGITUNDER":
                                        return t < s;
                                    default:
                                        throw Error(`Unsupported contract type: ${e}`)
                                }
                            }(t, el.current, O) : ec.current = !0 : ec.current = !1, !0 === s) v(X.current), er.current = X.current, es.current = 0;
                        else if (!1 === s) {
                            es.current += Number(er.current);
                            let e = es.current * Number(eo.current);
                            v(e = Math.max(e = parseFloat(e.toFixed(2)), .35)), er.current = e
                        }
                        if ($ && (["even", "odd"].includes(M) ? (e = ed.current ? "even" : "odd", ed.current = !ed.current) : ["over", "under"].includes(M) ? (e = ed.current ? "over" : "under", ed.current = !ed.current) : ["call", "put"].includes(M) && (e = ed.current ? "call" : "put", ed.current = !ed.current), F(e)), G && !1 === s) {
                            if (["even", "odd"].includes(M)) {
                                let t = "even" === M ? "odd" : "even";
                                eu.current = t, e = t
                            } else if (["over", "under"].includes(M)) {
                                let t = "over" === M ? "under" : "over";
                                eu.current = t, e = t
                            } else if (["call", "put"].includes(M)) {
                                let t = "call" === M ? "put" : "call";
                                eu.current = t, e = t
                            }
                            F(e)
                        } else G && !0 === s && (e = M);
                        let a = rw[e];
                        ["over", "under", "matches", "differs"].includes(e) ? eL(a, O) : eO(a)
                    }, [s]), (0, i.jsx)("div", {
                        className: U()("dashboard__chart-wrapper", {
                            "dashboard__chart-wrapper--expanded": eE && ew
                        }),
                        dir: "ltr",
                        children: (0, i.jsxs)("div", {
                            className: "speedbot",
                            style: {
                                color: ek ? "#fff" : "#000"
                            },
                            children: [(0, i.jsx)("div", {
                                className: "speedbot__card-header",
                                children: (0, i.jsx)("h4", {
                                    children: "Trade Every Tick"
                                })
                            }), (0, i.jsxs)("div", {
                                className: "speedbot__strategy-info",
                                children: [(0, i.jsx)("p", {
                                    children: "Executes trades on every tick without waiting for previous trades to close."
                                }), (0, i.jsx)("p", {
                                    className: "speedbot__warning",
                                    children: "Warning: High risk strategy!"
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "speedbot__market-controls",
                                children: [(0, i.jsx)("select", {
                                    id: "market-select",
                                    className: "speedbot__market-select",
                                    onChange: e => {
                                        let t = e.target.value;
                                        Z.api_base4.api.forgetAll("ticks").then(() => {
                                            a("Loading..."), f(t)
                                        })
                                    },
                                    children: d.length > 0 ? d.map(e => (0, i.jsx)("option", {
                                        value: e.symbol,
                                        children: e.display_name
                                    }, e.symbol)) : (0, i.jsx)("option", {
                                        value: "",
                                        children: "SELECT MARKET"
                                    })
                                }), (0, i.jsx)("div", {
                                    className: "speedbot__current-tick",
                                    children: s
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "speedbot__trade-type",
                                children: [(0, i.jsxs)("select", {
                                    value: M,
                                    onChange: e => F(e.target.value),
                                    className: "speedbot__type-select",
                                    children: [(0, i.jsx)("option", {
                                        value: "even",
                                        children: "Even"
                                    }), (0, i.jsx)("option", {
                                        value: "odd",
                                        children: "Odd"
                                    }), (0, i.jsx)("option", {
                                        value: "over",
                                        children: "Over"
                                    }), (0, i.jsx)("option", {
                                        value: "under",
                                        children: "Under"
                                    }), (0, i.jsx)("option", {
                                        value: "matches",
                                        children: "Matches"
                                    }), (0, i.jsx)("option", {
                                        value: "differs",
                                        children: "Differs"
                                    }), (0, i.jsx)("option", {
                                        value: "call",
                                        children: "Rise (CALL)"
                                    }), (0, i.jsx)("option", {
                                        value: "put",
                                        children: "Fall (PUT)"
                                    })]
                                }), ["over", "under", "matches", "differs"].includes(M) && (0, i.jsx)("div", {
                                    className: "speedbot__prediction",
                                    children: (0, i.jsx)("input", {
                                        type: "number",
                                        min: "1",
                                        max: "9",
                                        value: O,
                                        onChange: e => L(Number(e.target.value)),
                                        placeholder: "Digit",
                                        className: "speedbot__prediction-input"
                                    })
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "speedbot__controls",
                                children: [(0, i.jsxs)("div", {
                                    className: "speedbot__control-group",
                                    children: [(0, i.jsx)("small", {
                                        children: "Ticks"
                                    }), (0, i.jsx)("input", {
                                        className: "speedbot__input",
                                        type: "number",
                                        id: "contract_duration",
                                        value: m,
                                        onChange: e => {
                                            let t = e.target.value;
                                            if ("" === t) x("");
                                            else {
                                                let e = Number(t);
                                                !isNaN(e) && x(Math.max(1, Math.min(9, e)))
                                            }
                                        },
                                        min: "1",
                                        max: "9",
                                        defaultValue: 1
                                    })]
                                }), (0, i.jsxs)("div", {
                                    className: "speedbot__control-group",
                                    children: [(0, i.jsx)("small", {
                                        children: "Stake"
                                    }), (0, i.jsx)("input", {
                                        className: "speedbot__input",
                                        type: "number",
                                        value: p,
                                        onChange: e => {
                                            let t = e.target.value;
                                            v("" === t ? "" : Number(t)), X.current = "" === t ? "" : Number(t), er.current = "" === t ? "" : Number(t)
                                        }
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "speedbot__controls",
                                children: [(0, i.jsxs)("div", {
                                    className: "speedbot__control-group",
                                    children: [(0, i.jsx)("small", {
                                        children: "Take Profit ($)"
                                    }), (0, i.jsx)("input", {
                                        className: "speedbot__input",
                                        type: "number",
                                        value: J,
                                        onChange: e => {
                                            let t = parseFloat(e.target.value);
                                            !isNaN(t) && (Q(t), ea.current = t)
                                        }
                                    })]
                                }), (0, i.jsxs)("div", {
                                    className: "speedbot__control-group",
                                    children: [(0, i.jsx)("small", {
                                        children: "Stop Loss ($)"
                                    }), (0, i.jsx)("input", {
                                        className: "speedbot__input",
                                        type: "number",
                                        value: ee,
                                        onChange: e => {
                                            let t = parseFloat(e.target.value);
                                            !isNaN(t) && (et(t), en.current = t)
                                        }
                                    })]
                                })]
                            }), !G && (0, i.jsxs)("div", {
                                className: "active_inactive",
                                children: [(0, i.jsx)("label", {
                                    children: ["even", "odd"].includes(M) ? "Alternate Even and Odd" : ["over", "under"].includes(M) ? "Alternate Over and Under" : ["call", "put"].includes(M) ? "Alternate Rise and Fall" : "Use Zigzag"
                                }), (0, i.jsxs)("label", {
                                    className: "switch",
                                    children: [(0, i.jsx)("input", {
                                        type: "checkbox",
                                        checked: $,
                                        onChange: () => {
                                            B(e => !e), !$ && V(!1)
                                        }
                                    }), (0, i.jsx)("span", {
                                        className: "slider round"
                                    })]
                                })]
                            }), !$ && (0, i.jsxs)("div", {
                                className: "active_inactive",
                                children: [(0, i.jsx)("label", {
                                    children: "Alternate on Loss"
                                }), (0, i.jsxs)("label", {
                                    className: "switch",
                                    children: [(0, i.jsx)("input", {
                                        type: "checkbox",
                                        checked: G,
                                        onChange: () => {
                                            V(e => !e), !G && B(!1)
                                        }
                                    }), (0, i.jsx)("span", {
                                        className: "slider round"
                                    })]
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "active_inactive",
                                children: [(0, i.jsx)("label", {
                                    children: "Use Martingale"
                                }), (0, i.jsxs)("label", {
                                    className: "switch",
                                    children: [(0, i.jsx)("input", {
                                        type: "checkbox",
                                        checked: P,
                                        id: "enable_disbale_martingale",
                                        onChange: () => {
                                            z(!P), ei.current = !P
                                        }
                                    }), (0, i.jsx)("span", {
                                        className: "slider round"
                                    })]
                                })]
                            }), P && (0, i.jsxs)("div", {
                                className: "setting-item",
                                children: [(0, i.jsx)("label", {
                                    children: "Martingale"
                                }), (0, i.jsx)("input", {
                                    type: "number",
                                    value: eo.current,
                                    onChange: e => {
                                        let t = e.target.value;
                                        eo.current = "" === t ? "" : Number(t), K("" === t ? "" : Number(t))
                                    }
                                })]
                            }), (0, i.jsxs)("div", {
                                className: "speedbot__stats",
                                children: [(0, i.jsxs)("p", {
                                    children: ["Total Profit/Loss: ", ey]
                                }), (0, i.jsxs)("p", {
                                    children: ["Last Digit: ", o]
                                })]
                            }), (0, i.jsx)("div", {
                                className: "speedbot__actions",
                                children: (0, i.jsx)("button", {
                                    className: `speedbot__action-btn ${R?"speedbot__action-btn--active":""}`,
                                    onClick: () => {
                                        R ? D(!1) : (es.current = 0, v(X.current), D(!0))
                                    },
                                    children: R ? "STOP TRADING" : "START TRADING"
                                })
                            }), (0, i.jsx)(rk, {
                                type: em,
                                amount: Math.abs(ep),
                                symbol: y,
                                onClose: () => e_(!1),
                                isOpen: eh
                            })]
                        })
                    })
                }),
                rI = (0, l.lazy)(() => Promise.resolve().then(s.bind(s, 29357))),
                rA = (0, r.Pi)(() => {
                    var e, t, s;
                    let {
                        connectionStatus: a
                    } = (0, p.T)(), {
                        dashboard: n,
                        load_modal: r,
                        run_panel: o,
                        quick_strategy: c,
                        summary_card: d,
                        ui: u
                    } = (0, j.oR)(), [h, m] = (0, l.useState)("1"), [x, v] = (0, l.useState)("1"), [g, b] = (0, l.useState)("1"), [y, C] = (0, l.useState)("1"), {
                        shouldShowDisclaimer: S
                    } = u, {
                        active_tab: T,
                        active_tour: k,
                        setActiveTab: w,
                        setWebSocketState: E,
                        setActiveTour: I,
                        setTourDialogVisibility: A
                    } = n, {
                        onEntered: R,
                        dashboard_strategies: D
                    } = r, {
                        is_dialog_open: O,
                        is_drawer_open: L,
                        dialog_options: M,
                        onCancelButtonClick: F,
                        onCloseDialog: P,
                        onOkButtonClick: $,
                        stopBot: B
                    } = o, {
                        is_open: G
                    } = c, {
                        cancel_button_text: V,
                        ok_button_text: X,
                        title: H,
                        message: q
                    } = M, {
                        clear: Y
                    } = d, {
                        RANDOMBOTS: W,
                        DTRADER: K,
                        DASHBOARD: J,
                        BOT_BUILDER: Q
                    } = t2.ve, ee = l.useRef(!0), et = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"], {
                        isDesktop: es
                    } = (0, N.F)(), ea = (0, ik.TH)(), en = (0, ik.s0)(), ei = T;
                    let el = (t = T, (ei = null === (s = ea.hash) || void 0 === s ? void 0 : s.split("#")[1]) ? Number(et.indexOf(String(ei))) : t);
                    l.useEffect(() => {
                        a !== sE.cR.OPENED && null !== document.getElementById("db-animation__stop-button") && (Y(), B(), Z.api_base.setIsRunning(!1), E(!1))
                    }, [Y, a, E, B]), l.useEffect(() => {
                        G && A(!1), ee.current ? (w(Number(el)), !es && er(Number(el)), ee.current = !1) : en(`#${et[T]||et[0]}`), "" !== k && I("")
                    }, [T]), l.useEffect(() => {
                        let e = setTimeout(() => {
                            var e, t, s, a, n;
                            if (T === Q && (null === (t = Blockly) || void 0 === t ? void 0 : null === (e = t.derivWorkspace) || void 0 === e ? void 0 : e.trashcan)) {
                                let e;
                                let t = window.innerHeight - 250;
                                e = L ? (0, z.rK)() ? 380 : window.innerWidth - 460 : (0, z.rK)() ? 20 : window.innerWidth - 100, null === (n = Blockly) || void 0 === n || null === (a = n.derivWorkspace) || void 0 === a || null === (s = a.trashcan) || void 0 === s || s.setTrashcanPosition(e, t)
                            }
                        }, 100);
                        return () => {
                            clearTimeout(e)
                        }
                    }, [T, L]), (0, l.useEffect)(() => {
                        let e;
                        return D.length > 0 && (e = setTimeout(() => {
                            (0, Z.updateWorkspaceName)()
                        })), () => {
                            e && clearTimeout(e)
                        }
                    }, [D, T]);
                    let er = l.useCallback(e => {
                        w(e);
                        let t = t2.FK[e];
                        if (t) {
                            let e = document.getElementById(t);
                            setTimeout(() => {
                                null == e || e.scrollIntoView({
                                    behavior: "smooth",
                                    block: "center",
                                    inline: "center"
                                })
                            }, 10)
                        }
                    }, [T]);
                    return (0, i.jsxs)(l.Fragment, {
                        children: [(0, i.jsxs)("div", {
                            className: "main",
                            children: [(0, i.jsx)(rT, {}), (0, i.jsx)("div", {
                                className: U()("main__container", {
                                    "main__container--active": k && T === J && !es
                                }),
                                children: (0, i.jsxs)(iw.Z, {
                                    active_index: T,
                                    className: "main__tabs",
                                    onTabItemChange: R,
                                    onTabItemClick: er,
                                    top: !0,
                                    children: [(0, i.jsxs)("div", {
                                        label: (0, i.jsxs)(i.Fragment, {
                                            children: [(0, i.jsx)(lk.Op, {
                                                height: "24px",
                                                width: "24px",
                                                fill: "var(--icons)"
                                            }), (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "Smart Analysis"
                                            })]
                                        }),
                                        id: "id-1",
                                        style: {
                                            height: "100vh",
                                            width: "100%",
                                            overflowY: "auto",
                                            paddingBottom: "20vh",
                                            position: "relative"
                                        },
                                        children: [(0, i.jsxs)("div", {
                                            className: "iframe-switcher",
                                            children: [(0, i.jsxs)("button", {
                                                className: `switch-button ${"1"===x?"active":""}`,
                                                onClick: () => v("1"),
                                                children: [(0, i.jsx)(rb.aJO, {
                                                    className: "button-icon"
                                                }), " Speed Bot"]
                                            }), (0, i.jsxs)("button", {
                                                className: `switch-button ${"2"===x?"active":""}`,
                                                onClick: () => v("2"),
                                                children: [(0, i.jsx)(rS.AhU, {
                                                    className: "button-icon"
                                                }), " Signals"]
                                            }), (0, i.jsx)("button", {
                                                className: `switch-button ${"3"===x?"active":""}`,
                                                onClick: () => v("3"),
                                                children: "Automated"
                                            })]
                                        }), "1" === x && (0, i.jsx)(rE, {}), "2" === x && (0, i.jsx)(l$, {}), "3" === x && (0, i.jsx)(rC, {})]
                                    }), (0, i.jsx)("div", {
                                        label: (0, i.jsxs)(i.Fragment, {
                                            children: [(0, i.jsx)(iO.Z, {
                                                height: "24px",
                                                width: "24px",
                                                fill: "var(--icons)"
                                            }), (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "Dashboard"
                                            })]
                                        }),
                                        id: "id-2",
                                        children: (0, i.jsx)(lg, {
                                            handleTabChange: er
                                        })
                                    }), (0, i.jsx)("div", {
                                        label: (0, i.jsxs)(i.Fragment, {
                                            children: [(0, i.jsx)(iL.Z, {
                                                height: "24px",
                                                width: "24px",
                                                fill: "var(--icons)"
                                            }), (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "Bot Builder"
                                            })]
                                        }),
                                        id: "id-3"
                                    }), (0, i.jsxs)("div", {
                                        label: (0, i.jsxs)(i.Fragment, {
                                            children: [(0, i.jsx)(lk.iNY, {
                                                height: "24px",
                                                width: "24px",
                                                fill: "var(--icons)"
                                            }), (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "Free Bots"
                                            })]
                                        }),
                                        id: "id-4",
                                        style: {
                                            height: "100vh",
                                            width: "100%",
                                            overflowY: "auto",
                                            paddingBottom: "20vh",
                                            position: "relative"
                                        },
                                        children: [(0, i.jsxs)("div", {
                                            className: "iframe-switcher",
                                            children: [(0, i.jsx)("button", {
                                                className: `switch-button ${"1"===g?"active":""}`,
                                                onClick: () => b("1"),
                                                children: "Free Bots"
                                            }), (0, i.jsx)("button", {
                                                className: `switch-button ${"2"===g?"active":""}`,
                                                onClick: () => b("2"),
                                                children: "AI Bots"
                                            }), (0, i.jsx)("button", {
                                                className: `switch-button ${"3"===g?"active":""}`,
                                                onClick: () => b("3"),
                                                children: "Strategy"
                                            }), (0, i.jsx)("button", {
                                                className: `switch-button ${"4"===g?"active":""}`,
                                                onClick: () => b("4"),
                                                children: "Risk Management"
                                            })]
                                        }), "1" === g && (0, i.jsx)(lT, {
                                            handleTabChange: er
                                        }), "2" === g && (0, i.jsx)(l0, {}), "3" === g && (0, i.jsx)("iframe", {
                                            src: "https://dollarstrategy.vercel.app",
                                            title: "LDP Tool",
                                            style: {
                                                width: "100%",
                                                height: "calc(100vh - 20vh)",
                                                border: "none",
                                                marginBottom: "20vh"
                                            }
                                        }), "4" === g && (0, i.jsx)("iframe", {
                                            src: "https://risk.binarytool.site/",
                                            title: "LDP Tool",
                                            style: {
                                                width: "100%",
                                                height: "calc(100vh - 20vh)",
                                                border: "none",
                                                marginBottom: "20vh"
                                            }
                                        })]
                                    }), (0, i.jsx)("div", {
                                        label: (0, i.jsxs)(i.Fragment, {
                                            children: [(0, i.jsx)(iO.Z, {
                                                height: "24px",
                                                width: "24px",
                                                fill: "var(--icons)"
                                            }), (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "D-Trader"
                                            })]
                                        }),
                                        id: "id-5",
                                        children: (0, i.jsx)("iframe", {
                                            src: `${"gle.site"===window.location.hostname?"https://binarytool-dtrader.vercel.app/dtrader":"appp.binarytool.site"===window.location.hostname?"https://b-tutorial.vercel.app":"fjnvxnv8-8443.inc1.devtunnels.ms"===window.location.hostname?"https://deriv-app-dun.vercel.app":"https://binarytool-dtrader.vercel.app/dtrader"}?acct1=${localStorage.getItem("active_loginid")}&token1=${localStorage.getItem("authToken")}&cur1=${(null===(e=JSON.parse(localStorage.getItem("clientAccounts")||"{}")[localStorage.getItem("active_loginid")||""])||void 0===e?void 0:e.currency)||"USD"}&lang=EN`,
                                            style: {
                                                width: window.innerWidth <= 768 ? "100%" : "99%",
                                                height: window.innerWidth <= 768 ? "85vh" : "84vh",
                                                border: "none"
                                            }
                                        })
                                    }), (0, i.jsx)("div", {
                                        label: (0, i.jsxs)(i.Fragment, {
                                            children: [(0, i.jsx)(lk.Op, {
                                                height: "24px",
                                                width: "24px",
                                                fill: "var(--icons)"
                                            }), (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "Signals"
                                            })]
                                        }),
                                        id: "id-6",
                                        style: {
                                            height: "100vh",
                                            width: "100%",
                                            overflowY: "auto",
                                            paddingBottom: "20vh",
                                            position: "relative"
                                        },
                                        children: (0, i.jsx)("iframe", {
                                            src: "https://signals-scanner.vercel.app/",
                                            title: "LDP Tool",
                                            style: {
                                                width: "100%",
                                                height: "calc(100vh - 20vh)",
                                                border: "none",
                                                marginBottom: "20vh"
                                            }
                                        })
                                    }), (0, i.jsxs)("div", {
                                        label: (0, i.jsxs)(i.Fragment, {
                                            children: [(0, i.jsx)(lk.Op, {
                                                height: "24px",
                                                width: "24px",
                                                fill: "var(--icons)"
                                            }), (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "Analysistools"
                                            })]
                                        }),
                                        id: "id-7",
                                        style: {
                                            height: "100vh",
                                            width: "100%",
                                            overflowY: "auto",
                                            paddingBottom: "20vh",
                                            position: "relative"
                                        },
                                        children: [(0, i.jsxs)("div", {
                                            className: "iframe-switcher",
                                            children: [(0, i.jsx)("button", {
                                                className: `switch-button ${"1"===h?"active":""}`,
                                                onClick: () => m("1"),
                                                children: "Circles"
                                            }), (0, i.jsx)("button", {
                                                className: `switch-button ${"2"===h?"active":""}`,
                                                onClick: () => m("2"),
                                                children: "LDP Tool"
                                            }), (0, i.jsx)("button", {
                                                className: `switch-button ${"3"===h?"active":""}`,
                                                onClick: () => m("3"),
                                                children: "AnalysisTool"
                                            })]
                                        }), "1" === h && (0, i.jsx)(iR, {}), "2" === h && (0, i.jsx)("iframe", {
                                            src: "https://binarycampus.com/deriv_ldp/bc_deriv_market_ldp_analyzer",
                                            title: "LDP Tool",
                                            style: {
                                                width: "100%",
                                                height: "calc(100vh - 20vh)",
                                                border: "none",
                                                marginBottom: "20vh"
                                            }
                                        }), "3" === h && (0, i.jsx)("iframe", {
                                            src: "https://api.binarytool.site/",
                                            title: "Analysistool",
                                            style: {
                                                width: "100%",
                                                height: "calc(100vh - 20vh)",
                                                border: "none",
                                                marginBottom: "20vh"
                                            }
                                        })]
                                    }), (0, i.jsx)("div", {
                                        label: (0, i.jsxs)(i.Fragment, {
                                            children: [(0, i.jsx)(iM.Z, {
                                                height: "24px",
                                                width: "24px",
                                                fill: "var(--icons)"
                                            }), (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "Charts"
                                            })]
                                        }),
                                        id: "id-8",
                                        children: (0, i.jsx)(l.Suspense, {
                                            fallback: (0, i.jsx)(_.Z, {
                                                message: (0, f.NC)("Please wait, loading chart...")
                                            }),
                                            children: (0, i.jsx)(rI, {
                                                show_digits_stats: !0
                                            })
                                        })
                                    }), (0, i.jsx)("div", {
                                        label: (0, i.jsxs)(i.Fragment, {
                                            children: [(0, i.jsx)(lk.esY, {
                                                height: "24px",
                                                width: "24px",
                                                fill: "var(--icons)"
                                            }), (0, i.jsx)(f.Xx, {
                                                i18n_default_text: "Copy Trading"
                                            })]
                                        }),
                                        id: "id-9",
                                        children: (0, i.jsx)(l.Suspense, {
                                            fallback: (0, i.jsx)(_.Z, {
                                                message: (0, f.NC)("Please wait, loading copy trader...")
                                            }),
                                            children: (0, i.jsx)(lD, {})
                                        })
                                    })]
                                })
                            }), "false" !== S && (0, i.jsx)(lw, {})]
                        }), (0, i.jsxs)(tt.Z, {
                            children: [(0, i.jsxs)("div", {
                                className: "main__run-strategy-wrapper",
                                children: [T !== K && (0, i.jsx)(lb, {}), (0, i.jsx)(sg, {})]
                            }), (0, i.jsx)(iP, {}), (0, i.jsx)(iD, {})]
                        }), T !== K && (0, i.jsx)(eq.Z, {
                            children: !G && (0, i.jsx)(sg, {})
                        }), (0, i.jsx)(sB.Z, {
                            cancel_button_text: V || (0, f.NC)("Cancel"),
                            className: "dc-dialog__wrapper--fixed",
                            confirm_button_text: X || (0, f.NC)("Ok"),
                            has_close_icon: !0,
                            is_mobile_full_width: !1,
                            is_visible: O,
                            onCancel: F,
                            onClose: P,
                            onConfirm: $ || P,
                            portal_element_id: "modal_root",
                            title: H,
                            children: q
                        })]
                    })
                });
            s("51156");
            let rR = (0, r.Pi)(() => {
                var e, t, a, n, r;
                let [c, d] = l.useState(!1), [u, x] = l.useState(!0), v = (0, j.oR)(), {
                    app: g,
                    transactions: b,
                    common: y,
                    client: N
                } = v, {
                    showDigitalOptionsMaltainvestError: C
                } = g, {
                    is_dark_mode_on: T
                } = (0, sR.Z)(), {
                    recovered_transactions: k,
                    recoverPendingContracts: w
                } = b, E = l.useRef(!1), I = l.useRef(null), {
                    connectionStatus: A
                } = (0, p.T)(), {
                    initTrackJS: R
                } = sL();
                R(N.loginid), h({
                    is_client_store_initialized: (null == N ? void 0 : N.is_logged_in) ? !!(null == N ? void 0 : null === (e = N.account_settings) || void 0 === e ? void 0 : e.email) : !!N,
                    is_logged_in: null == N ? void 0 : N.is_logged_in,
                    loginid: null == N ? void 0 : N.loginid,
                    landing_company_shortcode: null == N ? void 0 : N.landing_company_shortcode,
                    currency: null == N ? void 0 : N.currency,
                    residence: null == N ? void 0 : N.residence,
                    email: null == N ? void 0 : null === (t = N.account_settings) || void 0 === t ? void 0 : t.email,
                    first_name: null == N ? void 0 : null === (a = N.account_settings) || void 0 === a ? void 0 : a.first_name,
                    last_name: null == N ? void 0 : null === (n = N.account_settings) || void 0 === n ? void 0 : n.last_name
                }), sA((0, sw.PO)() ? ? null), (0, l.useEffect)(() => {
                    A === sE.cR.OPENED ? (d(!0), y.setSocketOpened(!0)) : A !== sE.cR.OPENED && y.setSocketOpened(!1)
                }, [y, A]);
                let {
                    current_language: D
                } = y, O = document.documentElement;
                l.useEffect(() => {
                    null == O || O.setAttribute("lang", D.toLowerCase()), null == O || O.setAttribute("dir", "ar" === D.toLowerCase() ? "rtl" : "ltr")
                }, [D, O]);
                let L = l.useCallback(e => {
                    let {
                        data: t
                    } = e;
                    if ((null == t ? void 0 : t.msg_type) === "proposal_open_contract" && !(null == t ? void 0 : t.error)) {
                        let {
                            proposal_open_contract: e
                        } = t;
                        (null == e ? void 0 : e.status) !== "open" && !(null == k ? void 0 : k.includes(null == e ? void 0 : e.contract_id)) && w(e)
                    }
                }, [k, w]);
                l.useEffect(() => {
                    (0, sP.setSmartChartsPublicPath)((0, m.MT8)("/js/smartcharts/"))
                }, []), l.useEffect(() => {
                    if (!E.current && N.is_logged_in && c && (null === Z.api_base || void 0 === Z.api_base ? void 0 : Z.api_base.api)) {
                        var e;
                        E.current = !0, I.current = null === (e = Z.api_base.api.onMessage()) || void 0 === e ? void 0 : e.subscribe(L)
                    }
                    return () => {
                        if (E.current && I.current) {
                            var e, t;
                            E.current = !1, null === (e = (t = I.current).unsubscribe) || void 0 === e || e.call(t)
                        }
                    }
                }, [c, N.is_logged_in, N.loginid, L, A]), l.useEffect(() => {
                    C(N, y)
                }, [N.is_options_blocked, null === (r = N.account_settings) || void 0 === r ? void 0 : r.country_code, N.clients_country]);
                let M = () => {
                        Z.ServerTime.init(y), g.setDBotEngineStores(), Z.ApiHelpers.setInstance(g.api_helpers_store), Promise.resolve().then(s.bind(s, 18908)).then(e => {
                            let {
                                default: t
                            } = e;
                            t.init(v)
                        })
                    },
                    U = () => {
                        var e;
                        M();
                        let t = () => {
                            let {
                                active_symbols: e
                            } = Z.ApiHelpers.instance;
                            e.retrieveActiveSymbols(!0).then(() => {
                                x(!1)
                            })
                        };
                        if (null === Z.ApiHelpers || void 0 === Z.ApiHelpers ? void 0 : null === (e = Z.ApiHelpers.instance) || void 0 === e ? void 0 : e.active_symbols) t();
                        else {
                            let e = setInterval(() => {
                                var s;
                                (null === Z.ApiHelpers || void 0 === Z.ApiHelpers ? void 0 : null === (s = Z.ApiHelpers.instance) || void 0 === s ? void 0 : s.active_symbols) && (clearInterval(e), t())
                            }, 1e3)
                        }
                    };
                return (l.useEffect(() => {
                    c && (M(), x(!0), !N.is_logged_in && U())
                }, [c]), l.useEffect(() => {
                    N.is_logged_in && N.is_landing_company_loaded && c && U()
                }, [N.is_landing_company_loaded, c, N.loginid]), (0, l.useEffect)(() => {
                    sM(!0), N && sF(N)
                }, []), null == y ? void 0 : y.error) ? null : u ? (0, i.jsx)(_.Z, {
                    message: (0, f.NC)("Initializing your account...")
                }) : (0, i.jsx)(i.Fragment, {
                    children: (0, i.jsxs)(sZ.f, {
                        theme: T ? "dark" : "light",
                        children: [(0, i.jsx)(s$, {}), (0, i.jsxs)("div", {
                            className: "bot-dashboard bot",
                            "data-testid": "dt_bot_dashboard",
                            children: [(0, i.jsx)(sz, {}), (0, i.jsx)(rA, {}), (0, i.jsx)(iT, {}), (0, i.jsx)(sG, {}), (0, i.jsx)(sk, {}), (0, i.jsx)(o.Ix, {
                                limit: 3,
                                draggable: !1
                            }), (0, i.jsx)(S, {})]
                        })]
                    })
                })
            })
        },
        45927: function(e, t, s) {
            s.d(t, {
                Z: function() {
                    return l
                }
            });
            var a = s(85893),
                n = s(63387),
                i = s.n(n);
            let l = e => {
                let {
                    message: t,
                    className: s,
                    type: n
                } = e;
                return (0, a.jsx)("div", {
                    className: i()("dc-field", s, {
                        "dc-field--error": "error" === n,
                        "dc-field--warn": "warn" === n
                    }),
                    children: t
                })
            }
        },
        30394: function(e, t, s) {
            s.d(t, {
                Z: () => m
            });
            var a = s("85893"),
                n = s("67294"),
                i = s("63387"),
                l = s.n(i),
                r = s("82106"),
                o = s("86278"),
                c = s("14244"),
                d = s("26088"),
                u = s("92868"),
                h = s("2502"),
                _ = s("45452");
            let m = e => {
                let {
                    alignment: t,
                    children: s,
                    className: i,
                    classNameBubble: m,
                    classNameTarget: x,
                    classNameTargetIcon: p,
                    counter: j,
                    disable_message_icon: v,
                    disable_target_icon: g,
                    has_error: b,
                    icon: y,
                    id: f,
                    is_open: N,
                    is_bubble_hover_enabled: C,
                    margin: S = 0,
                    message: T,
                    onBubbleClose: k,
                    onBubbleOpen: w,
                    onClick: E = () => void 0,
                    relative_render: I = !1,
                    should_disable_pointer_events: A = !1,
                    should_show_cursor: R,
                    zIndex: D = "1",
                    data_testid: O,
                    arrow_styles: L
                } = e, M = n.useRef(), [U, F] = n.useState(void 0), [P, Z] = n.useState(!1), {
                    isDesktop: z
                } = (0, h.F)(), [$, B] = (0, o.X)(null, !0), [G, V] = (0, o.m)(), X = n.useMemo(() => !z && void 0 === N, [z, N]);
                n.useEffect(() => {
                    M.current && F(M.current)
                }, [b]), n.useEffect(() => {
                    !B && X && Z(!1)
                }, [B, X]);
                let H = () => {
                        w && w()
                    },
                    q = () => {
                        k && k()
                    },
                    Y = l()(p, y),
                    W = B && T && (!X || P);
                return (0, a.jsxs)("div", {
                    ref: $,
                    className: l()({
                        "dc-popover__wrapper": I
                    }),
                    onClick: e => {
                        E(e), X && Z(!P)
                    },
                    "data-testid": "dt_popover_wrapper",
                    children: [I && (0, a.jsx)("div", {
                        className: "dc-popover__container",
                        style: {
                            zIndex: D
                        },
                        children: (0, a.jsx)("div", {
                            ref: M,
                            className: "dc-popover__container-relative",
                            "data-testid": "dt_popover_relative_container"
                        })
                    }), (U || !I) && (0, a.jsx)(r.Popover, {
                        isOpen: N ? ? (W || C && V),
                        positions: [t],
                        padding: S + 8,
                        containerClassName: l()({
                            "react-tiny-popover-container--disabled-pointer-event": A,
                            "react-tiny-popover-cursor-option": R
                        }),
                        ...I ? {
                            parentElement: U,
                            contentLocation: e => {
                                let {
                                    childRect: s,
                                    popoverRect: a,
                                    nudgedLeft: n
                                } = e, i = document.body.clientWidth, l = s.right + (a.width - s.width / 2), r = 0, o = 0;
                                switch (t) {
                                    case "left":
                                        o = -1 * Math.abs((a.height > a.width ? n : a.width) + S), r = s.height > a.height ? (s.height - a.height) / 2 : -((a.height - s.height) / 2 * 1);
                                        break;
                                    case "right":
                                        o = a.width + S, r = s.height > a.height ? (s.height - a.height) / 2 : -((a.height - s.height) / 2 * 1);
                                        break;
                                    case "top":
                                        o = l > i ? -1 * Math.abs(l - i) : 0, r = -1 * Math.abs(a.height + S);
                                        break;
                                    case "bottom":
                                        o = l > i ? -1 * Math.abs(l - i) : 0, r = s.height + S
                                }
                                return {
                                    top: r,
                                    left: o
                                }
                            }
                        } : {
                            containerStyle: {
                                zIndex: D
                            }
                        },
                        content: e => {
                            let {
                                position: t,
                                childRect: s,
                                popoverRect: n
                            } = e;
                            return (0, a.jsx)(r.ArrowContainer, {
                                position: t,
                                childRect: s,
                                popoverRect: n,
                                arrowColor: b ? "var(--status-danger)" : "var(--general-active)",
                                arrowSize: 5,
                                arrowStyle: I ? {
                                    borderTop: "10px solid transparent",
                                    borderLeft: "10px solid transparent",
                                    borderRight: `10px solid ${b?"var(--status-danger)":"var(--general-active)"}`,
                                    transform: "rotate(315deg)",
                                    right: "0px",
                                    top: "5px",
                                    height: "10px",
                                    margin: "auto",
                                    bottom: "0px"
                                } : { ...L
                                },
                                children: (0, a.jsxs)("div", {
                                    id: f,
                                    onMouseEnter: H,
                                    onMouseLeave: q,
                                    className: l()(m, "dc-popover__bubble", {
                                        "dc-popover__bubble--error": b
                                    }),
                                    ref: G,
                                    children: [!v && "info" === y && (0, a.jsx)("i", {
                                        className: "dc-popover__bubble__icon",
                                        children: (0, a.jsx)(c.Z, {})
                                    }), b && (0, a.jsx)(_.Z, {
                                        size: "xxs",
                                        color: "colored-background",
                                        children: T
                                    }) || (0, a.jsx)(_.Z, {
                                        lineHeight: "md",
                                        size: "xxs",
                                        className: "dc-popover__bubble__text",
                                        children: T
                                    })]
                                })
                            })
                        },
                        children: (0, a.jsx)("div", {
                            "data-testid": O,
                            className: l()("dc-popover", i),
                            id: f,
                            children: (0, a.jsxs)("div", {
                                className: l()(x, "dc-popover__target"),
                                children: [!g && (0, a.jsxs)("i", {
                                    className: T ? "dc-popover__target__icon" : "dc-popover__target__icon--disabled",
                                    children: ["info" === y && (0, a.jsx)(c.Z, {
                                        className: Y
                                    }), "question" === y && (0, a.jsx)(u.Z, {
                                        className: Y
                                    }), "dot" === y && (0, a.jsx)(d.Z, {
                                        className: Y
                                    }), "counter" === y && (0, a.jsx)("span", {
                                        className: Y,
                                        children: j
                                    })]
                                }), s]
                            })
                        })
                    })]
                })
            }
        },
        62873: function(e, t, s) {
            s.d(t, {
                Z: function() {
                    return n
                }
            });
            var a = s(46883);
            s(56803);
            let n = a.Z
        },
        46883: function(e, t, s) {
            s.d(t, {
                Z: () => h
            });
            var a = s("85893"),
                n = s("67294"),
                i = s("63387"),
                l = s.n(i);
            let r = function() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : () => void 0,
                    t = n.useRef(!1);
                !t.current && (e(), t.current = !0)
            };
            var o = s("40150"),
                c = s("89606");
            let d = e => {
                    let {
                        className: t,
                        count: s
                    } = e;
                    return (0, a.jsx)("div", {
                        className: l()("dc-counter", t),
                        children: s
                    })
                },
                u = e => {
                    let {
                        active_icon_color: t = "",
                        active_tab_ref: s,
                        bottom: i = !1,
                        className: r = "",
                        count: o,
                        header_content: u,
                        header_fit_content: h = !1,
                        icon_color: _ = "",
                        icon_size: m = 0,
                        icon: x,
                        id: p = "",
                        is_active: j,
                        is_label_hidden: v,
                        is_scrollable: g,
                        label: b,
                        onClick: y,
                        setActiveLineStyle: f,
                        top: N
                    } = e;
                    n.useEffect(() => {
                        f()
                    }, [o, b, u, f]);
                    let C = l()("dc-tabs__item", {
                            "dc-tabs__active": j,
                            [`dc-tabs__active--${r}`]: r && j,
                            "dc-tabs__item--top": N,
                            "dc-tabs__item--bottom": i,
                            "dc-tabs__item--header-fit-content": h,
                            "dc-tabs__item--is-hidden": v,
                            [`dc-tabs__item--${r}`]: r,
                            "dc-tabs__item--is-scrollable-and-active": g && j
                        }),
                        S = j ? t : _;
                    return (0, a.jsxs)("li", {
                        id: p,
                        className: C,
                        style: {
                            color: S
                        },
                        onClick: y,
                        ref: s,
                        children: [x && (0, a.jsx)(c.J, {
                            icon: x,
                            size: m,
                            custom_color: S,
                            className: "dc-tabs__item__icon"
                        }), u || b, !!o && (0, a.jsx)(d, {
                            className: "dc-tabs__item__counter",
                            count: o
                        })]
                    })
                };
            s("56803");
            let h = e => {
                let t, {
                        active_icon_color: s = "",
                        active_index: i = 0,
                        background_color: c = "",
                        bottom: d = !1,
                        center: h = !1,
                        children: _,
                        className: m = "",
                        fit_content: x = !1,
                        has_active_line: p = !0,
                        has_bottom_line: j = !0,
                        header_fit_content: v = !1,
                        history: g,
                        icon_color: b = "",
                        icon_size: y = 0,
                        is_100vw: f = !1,
                        is_full_width: N = !1,
                        is_overflow_hidden: C = !1,
                        is_scrollable: S = !1,
                        onTabItemClick: T,
                        should_update_hash: k = !1,
                        single_tab_has_no_label: w = !1,
                        top: E
                    } = e,
                    [I, A] = n.useState({}),
                    R = n.useRef(null),
                    D = n.useRef(null),
                    O = e => {
                        g.replace(`${g.location.pathname}${window.location.search}#${e}`)
                    },
                    L = n.useCallback(() => {
                        var e, t;
                        let s = null == D ? void 0 : null === (e = D.current) || void 0 === e ? void 0 : e.getBoundingClientRect(),
                            a = null == R ? void 0 : null === (t = R.current) || void 0 === t ? void 0 : t.getBoundingClientRect();
                        s && a ? A({
                            left: a.left - s.left,
                            width: a.width
                        }) : setTimeout(() => {
                            L()
                        }, 500)
                    }, []),
                    M = 0;
                r(() => {
                    if (M = i, k) {
                        let t = location.hash.slice(1),
                            s = _.findIndex(e => e && e.props && e.props.hash === t);
                        if (s > -1) M = s;
                        else {
                            var e;
                            let t = null === (e = _[M]) || void 0 === e ? void 0 : e.props,
                                s = t && t.hash;
                            s && O(s)
                        }
                    }
                    L()
                });
                let [U, F] = n.useState(M);
                n.useEffect(() => {
                    U >= 0 && i !== U && (null == T || T(U)), L()
                }, [U, L]), n.useEffect(() => {
                    i >= 0 && i !== U && F(i)
                }, [i]);
                let P = e => {
                        if (k) {
                            var t;
                            O(null === (t = _[e]) || void 0 === t ? void 0 : t.props["data-hash"])
                        }
                        F(e), L()
                    },
                    Z = _.filter(e => e);
                return t = S ? "unset" : x ? "150px" : `${(100/Z.length).toFixed(2)}%`, (0, a.jsxs)("div", {
                    className: l()("dc-tabs", {
                        [`dc-tabs--${m}`]: m,
                        "dc-tabs--top": E,
                        "dc-tabs--100vw": f
                    }),
                    style: {
                        "--tab-width": `${t}`,
                        background: c
                    },
                    children: [(0, a.jsx)("div", {
                        className: l()({
                            [`dc-tabs__list--header--${m}`]: m
                        }),
                        children: (0, a.jsx)("ul", {
                            className: l()("dc-tabs__list", {
                                "dc-tabs__list--top": E,
                                "dc-tabs__list--border-bottom": j,
                                "dc-tabs__list--bottom": d,
                                "dc-tabs__list--center": h,
                                "dc-tabs__list--header-fit-content": v,
                                "dc-tabs__list--full-width": N,
                                [`dc-tabs__list--${m}`]: m,
                                "dc-tabs__list--overflow-hidden": C
                            }),
                            ref: D,
                            children: (0, a.jsxs)(o.Z, {
                                className: "dc-themed-scrollbars-wrapper",
                                is_only_horizontal: !0,
                                is_scrollbar_hidden: !0,
                                is_bypassed: !S,
                                children: [n.Children.map(_, (e, t) => {
                                    if (!e) return null;
                                    let {
                                        icon: n,
                                        label: i,
                                        id: l
                                    } = e.props, r = e.props["data-header-content"], o = e.props["data-count"];
                                    return (0, a.jsx)(u, {
                                        active_icon_color: s,
                                        className: m,
                                        count: o,
                                        icon: n,
                                        icon_color: b,
                                        icon_size: y,
                                        is_active: t === U,
                                        is_label_hidden: 1 === _.length && w,
                                        label: i,
                                        id: l,
                                        is_scrollable: S,
                                        top: E,
                                        bottom: d,
                                        header_fit_content: v,
                                        active_tab_ref: t === U ? R : null,
                                        header_content: r,
                                        onClick: () => P(t),
                                        setActiveLineStyle: L
                                    }, i)
                                }), p && !S && (0, a.jsx)("span", {
                                    className: l()("dc-tabs__active-line", {
                                        "dc-tabs__active-line--top": E,
                                        "dc-tabs__active-line--bottom": d,
                                        "dc-tabs__active-line--fit-content": x,
                                        "dc-tabs__active-line--header-fit-content": v,
                                        "dc-tabs__active-line--is-hidden": 1 === _.length && w
                                    }),
                                    style: I
                                })]
                            })
                        })
                    }), (0, a.jsx)("div", {
                        className: l()("dc-tabs__content", {
                            [`dc-tabs__content--${m}`]: m
                        }),
                        children: n.Children.map(_, (e, t) => {
                            if (!e) return null;
                            if (t === U) return e.props.children
                        })
                    })]
                })
            }
        },
        83257: function(e, t, s) {
            s.d(t, {
                Z: function() {
                    return i
                }
            });
            var a = s(67294),
                n = s(83274);
            let i = () => {
                let {
                    ui: e
                } = (0, n.oR)() ? ? {
                    ui: {
                        setDarkMode: () => {},
                        is_dark_mode_on: !1
                    }
                }, {
                    setDarkMode: t,
                    is_dark_mode_on: s
                } = e;
                return {
                    toggleTheme: (0, a.useCallback)(() => {
                        let e = document.querySelector("body");
                        e && (e.classList.contains("theme--dark") ? (localStorage.setItem("theme", "light"), e.classList.remove("theme--dark"), e.classList.add("theme--light"), t(!1)) : (localStorage.setItem("theme", "dark"), e.classList.remove("theme--light"), e.classList.add("theme--dark"), t(!0)))
                    }, [t]),
                    is_dark_mode_on: s,
                    setDarkMode: t
                }
            }
        },
        17009: function(e, t, s) {
            s.d(t, {
                Z: () => g
            });
            var a = s("85893"),
                n = s("67294"),
                i = s("96877"),
                l = s("83274"),
                r = s("85414"),
                o = s("2502"),
                c = s("63387"),
                d = s.n(c),
                u = s("45452"),
                h = s("97613"),
                _ = s("19405");
            let m = e => {
                let {
                    content_data: t,
                    expanded: s = !1,
                    test_id: i = "dbot-acc-id",
                    is_cursive: r = !1,
                    no_collapsible: o = !0,
                    has_subtitle: c = !0,
                    font_size: m,
                    ...x
                } = e, [p, j] = (0, n.useState)(s), {
                    quick_strategy: {
                        selected_strategy: v
                    }
                } = (0, l.oR)();
                if (!t) return null;
                let {
                    content: g,
                    header: b
                } = t, {
                    expanded_subtitles_storage: y,
                    setExpandedSubtitlesStorage: f
                } = x, N = `${b}__${v}`.split(" ").join("_").toLocaleLowerCase(), C = !!y && y[N] || p || !c;
                return (0, a.jsxs)("div", {
                    className: "dbot-accordion",
                    children: [c && (0, a.jsxs)("button", {
                        className: d()("dbot-accordion__navbar", {
                            "dbot-accordion__navbar--no-event": !o
                        }),
                        "data-testid": i,
                        onClick: e => {
                            e.preventDefault(), j(!C), y && f && f({ ...y,
                                [N]: !C
                            })
                        },
                        children: [(0, a.jsx)("div", {
                            className: d()("dbot-accordion__header", {
                                "dbot-accordion__header--cursive": r
                            }),
                            children: (0, a.jsx)(u.Z, {
                                as: "span",
                                size: m,
                                weight: "bold",
                                children: b
                            })
                        }), o && (0, a.jsx)("div", {
                            className: "dbot-accordion__icon",
                            children: C ? (0, a.jsx)(h.Z, {}) : (0, a.jsx)(_.Z, {})
                        })]
                    }), (0, a.jsx)("div", {
                        className: d()("dbot-accordion__content", {
                            "dbot-accordion__content--open": C
                        }),
                        "data-testid": "accordion-content",
                        children: (0, a.jsx)(u.Z, {
                            as: "span",
                            lineHeight: "s",
                            size: m,
                            children: g
                        })
                    })]
                })
            };
            var x = s("48118");
            let p = (0, i.Pi)(e => {
                    var t, s;
                    let {
                        item: n,
                        font_size: i
                    } = e, {
                        ui: r
                    } = (0, l.oR)(), {
                        is_dark_mode_on: o
                    } = r, c = (null == n ? void 0 : n.className) ? ? "";
                    switch (n.type) {
                        case "text":
                            {
                                let e = d()(`qs__description__content ${c}`);
                                return (0, a.jsx)(a.Fragment, {
                                    children: null == n ? void 0 : null === (t = n.content) || void 0 === t ? void 0 : t.map(t => (0, a.jsx)("div", {
                                        className: e,
                                        children: (0, a.jsx)(u.Z, {
                                            size: i,
                                            children: (0, x.ZP)(t)
                                        })
                                    }, t))
                                })
                            }
                        case "text_italic":
                            {
                                let e = d()(`qs__description__content italic ${c}`);
                                return (0, a.jsx)(a.Fragment, {
                                    children: null == n ? void 0 : null === (s = n.content) || void 0 === s ? void 0 : s.map(t => (0, a.jsx)("div", {
                                        className: e,
                                        children: (0, a.jsx)(u.Z, {
                                            size: i,
                                            children: (0, x.ZP)(t)
                                        })
                                    }, t))
                                })
                            }
                        case "media":
                            {
                                let e = d()(`qs__description__image ${c}`);
                                return (0, a.jsx)("div", {
                                    className: e,
                                    style: null == n ? void 0 : n.styles,
                                    children: (0, a.jsx)("img", {
                                        src: o ? n.dark_src ? ? n.src : n.src,
                                        alt: n.alt
                                    })
                                })
                            }
                        default:
                            return null
                    }
                }),
                j = e => {
                    let {
                        item: t,
                        font_size: s
                    } = e, i = Array.isArray(t) ? t : t.slice(1);
                    return (0, a.jsx)(a.Fragment, {
                        children: Array.isArray(i) && (null == i ? void 0 : i.map(e => (0, a.jsx)(n.Fragment, {
                            children: (0, a.jsx)(p, {
                                item: e,
                                font_size: s
                            })
                        }, e.id)))
                    })
                },
                v = (0, i.Pi)(e => {
                    let {
                        tutorial_selected_strategy: t,
                        grouped_objects_by_title: s,
                        expanded_subtitles_storage: i,
                        setExpandedSubtitlesStorage: l
                    } = e, {
                        isDesktop: r
                    } = (0, o.F)(), c = t ? "s" : "xs", d = n.useMemo(() => r ? c : "xs", [r, c]);
                    return (0, a.jsx)(a.Fragment, {
                        children: Array.isArray(s) && s.map(e => {
                            var t, s, n, r;
                            let o = (null == e ? void 0 : null === (s = e[0]) || void 0 === s ? void 0 : null === (t = s.content) || void 0 === t ? void 0 : t[0]) ? ? "";
                            return (0, a.jsx)(m, {
                                content_data: {
                                    header: o,
                                    content: (0, a.jsx)(j, {
                                        item: e,
                                        font_size: d
                                    })
                                },
                                expanded: !!(null === (n = e[0]) || void 0 === n ? void 0 : n.expanded),
                                is_cursive: !1,
                                no_collapsible: null === (r = e[0]) || void 0 === r ? void 0 : r.no_collapsible,
                                has_subtitle: !!o,
                                expanded_subtitles_storage: i,
                                setExpandedSubtitlesStorage: l,
                                font_size: d
                            }, `accordion-${o}`)
                        })
                    })
                }),
                g = (0, i.Pi)(e => {
                    var t;
                    let {
                        formfields: s,
                        active_tab: i,
                        tutorial_selected_strategy: o
                    } = e, {
                        quick_strategy: c
                    } = (0, l.oR)(), {
                        selected_strategy: d
                    } = c, u = {}, [h, _] = (0, n.useState)(u), m = (0, r.j)()[o || d];
                    let x = Array.isArray(null == m ? void 0 : m.description) ? null == m ? void 0 : null === (t = m.description) || void 0 === t ? void 0 : t.reduce((e, t, s) => {
                        if ("subtitle_italic" === t.type || "subtitle" === t.type) {
                            let s, a;
                            e.push([]);
                            u[s = t, a = d, `${s.content[0]}__${a}`.split(" ").join("_").toLowerCase()] = (null == t ? void 0 : t.expanded) ? ? !1
                        }
                        return e[e.length - 1].push({ ...t,
                            id: s
                        }), e
                    }, []) : [{
                        type: "text",
                        content: [null == m ? void 0 : m.description]
                    }];
                    return (0, a.jsx)(a.Fragment, {
                        children: "TRADE_PARAMETERS" === i ? (0, a.jsx)("div", {
                            className: "qs__body__content__form",
                            children: s
                        }) : (0, a.jsx)("div", {
                            className: "qs__body__content__description",
                            children: (0, a.jsx)(v, {
                                tutorial_selected_strategy: o,
                                grouped_objects_by_title: x,
                                expanded_subtitles_storage: h,
                                setExpandedSubtitlesStorage: _
                            })
                        })
                    })
                })
        },
        29357: function(e, t, s) {
            s.r(t), s.d(t, {
                default: () => x
            });
            var a = s("85893"),
                n = s("67294"),
                i = s("63387"),
                l = s.n(i),
                r = s("96877"),
                o = s("49243"),
                c = s("83274"),
                d = s("47494"),
                u = s("2502");
            let h = (0, n.memo)(e => {
                let {
                    updateChartType: t,
                    updateGranularity: s,
                    position: n,
                    isDesktop: i
                } = e;
                return (0, a.jsxs)(d.ToolbarWidget, {
                    position: n,
                    children: [(0, a.jsx)(d.ChartMode, {
                        portalNodeId: "modal_root",
                        onChartType: t,
                        onGranularity: s
                    }), i && (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(d.StudyLegend, {
                            portalNodeId: "modal_root",
                            searchInputClassName: "data-hj-whitelist"
                        }), (0, a.jsx)(d.Views, {
                            portalNodeId: "modal_root",
                            onChartType: t,
                            onGranularity: s,
                            searchInputClassName: "data-hj-whitelist"
                        }), (0, a.jsx)(d.DrawTools, {
                            portalNodeId: "modal_root"
                        }), (0, a.jsx)(d.Share, {
                            portalNodeId: "modal_root"
                        })]
                    })]
                })
            });
            s("22798");
            let _ = {},
                m = (0, r.Pi)(e => {
                    let {
                        show_digits_stats: t
                    } = e, {
                        common: s,
                        ui: i
                    } = (0, c.oR)(), {
                        chart_store: r,
                        run_panel: m,
                        dashboard: x
                    } = (0, c.oR)(), {
                        chart_type: p,
                        getMarketsOrder: j,
                        granularity: v,
                        onSymbolChange: g,
                        setChartStatus: b,
                        symbol: y,
                        updateChartType: f,
                        updateGranularity: N,
                        updateSymbol: C,
                        setChartSubscriptionId: S,
                        chart_subscription_id: T
                    } = r, k = (0, n.useRef)(T), [w, E] = (0, n.useState)(!1), {
                        isDesktop: I,
                        isMobile: A
                    } = (0, u.F)(), {
                        is_drawer_open: R
                    } = m, {
                        is_chart_modal_visible: D
                    } = x, O = {
                        assetInformation: !1,
                        countdown: !0,
                        isHighestLowestMarkerEnabled: !1,
                        language: s.current_language.toLowerCase(),
                        position: i.is_chart_layout_default ? "bottom" : "left",
                        theme: i.is_dark_mode_on ? "dark" : "light"
                    };
                    (0, n.useEffect)(() => () => {
                        o.Z.api.forgetAll("ticks")
                    }, []), (0, n.useEffect)(() => {
                        k.current = T
                    }, [T]), (0, n.useEffect)(() => {
                        !y && C()
                    }, [y, C]);
                    let L = e => {
                            e && o.Z.api.forget(e)
                        },
                        M = async (e, t) => {
                            var s, a, n;
                            try {
                                L(k.current);
                                let a = await o.Z.api.send(e);
                                S(null == a ? void 0 : a.subscription.id), a && t(a), 1 === e.subscribe && (_[null == a ? void 0 : a.subscription.id] = null === (s = o.Z.api.onMessage()) || void 0 === s ? void 0 : s.subscribe(e => {
                                    let {
                                        data: s
                                    } = e;
                                    t(s)
                                }))
                            } catch (e) {
                                (null == e ? void 0 : null === (a = e.error) || void 0 === a ? void 0 : a.code) === "MarketIsClosed" && t([]), console.error(null == e ? void 0 : null === (n = e.error) || void 0 === n ? void 0 : n.message)
                            }
                        };
                    if (!y) return null;
                    let U = !!(null === o.Z || void 0 === o.Z ? void 0 : o.Z.api);
                    return (0, a.jsxs)("div", {
                        className: l()("dashboard__chart-wrapper", {
                            "dashboard__chart-wrapper--expanded": R && I,
                            "dashboard__chart-wrapper--modal": D && I
                        }),
                        dir: "ltr",
                        children: [w ? (0, a.jsx)("iframe", {
                            src: "https://charts.deriv.com/deriv",
                            title: "Binary Tool API",
                            style: {
                                width: "100%",
                                height: "100%",
                                border: "none"
                            }
                        }) : (0, a.jsx)(d.SmartChart, {
                            id: "dbot",
                            barriers: [],
                            showLastDigitStats: t,
                            chartControlsWidgets: null,
                            enabledChartFooter: !1,
                            chartStatusListener: e => b(!e),
                            toolbarWidget: () => (0, a.jsx)(h, {
                                updateChartType: f,
                                updateGranularity: N,
                                position: I ? "top" : "bottom",
                                isDesktop: I
                            }),
                            chartType: p,
                            isMobile: A,
                            enabledNavigationWidget: I,
                            granularity: v,
                            requestAPI: e => o.Z.api.send(e),
                            requestForget: () => {},
                            requestForgetStream: () => {},
                            requestSubscribe: M,
                            settings: O,
                            symbol: y,
                            topWidgets: () => (0, a.jsx)(d.ChartTitle, {
                                onChange: g
                            }),
                            isConnectionOpened: U,
                            getMarketsOrder: j,
                            isLive: !0,
                            leftMargin: 80
                        }), (0, a.jsx)("div", {
                            className: "floating-buttons",
                            children: (0, a.jsx)("button", {
                                className: "floating-button",
                                onClick: () => E(!w),
                                children: w ? "Chart" : "Trading View"
                            })
                        })]
                    })
                }),
                x = m
        }
    }
]);